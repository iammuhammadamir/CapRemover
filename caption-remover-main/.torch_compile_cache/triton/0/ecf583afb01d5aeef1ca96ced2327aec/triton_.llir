; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = shl nuw nsw i32 %9, 3, !dbg !8
  %12 = and i32 %10, 7, !dbg !8
  %13 = lshr i32 %9, 2, !dbg !8
  %14 = shl nuw nsw i32 %12, 3, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = or i32 %15, 64, !dbg !8
  %17 = or i32 %15, 128, !dbg !8
  %18 = or i32 %15, 192, !dbg !8
  %urem = and i32 %8, 255, !dbg !8
  %19 = or i32 %12, 8, !dbg !9
  %20 = shl i32 %8, 2, !dbg !9
  %21 = and i32 %20, 12, !dbg !9
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %24 = add i32 %23, 1, !dbg !12
  %25 = shl i32 %22, 8, !dbg !13
  %26 = mul i32 %25, %24, !dbg !14
  %27 = or i32 %26, %11, !dbg !15
  %28 = or i32 %26, %15, !dbg !15
  %29 = or i32 %26, %16, !dbg !15
  %30 = or i32 %26, %17, !dbg !15
  %31 = or i32 %26, %18, !dbg !15
  %32 = or i32 %26, %urem, !dbg !15
  %33 = icmp slt i32 %27, 7040, !dbg !16
  %34 = icmp slt i32 %28, 7040, !dbg !16
  %35 = icmp slt i32 %29, 7040, !dbg !16
  %36 = icmp slt i32 %30, 7040, !dbg !16
  %37 = icmp slt i32 %31, 7040, !dbg !16
  %38 = icmp slt i32 %32, 7040, !dbg !16
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %40 = shl i32 %39, 4, !dbg !18
  %41 = or i32 %40, %12, !dbg !19
  %42 = or i32 %40, %19, !dbg !19
  %43 = or i32 %40, %21, !dbg !19
  %44 = icmp slt i32 %41, 2700, !dbg !20
  %45 = icmp slt i32 %42, 2700, !dbg !20
  %46 = icmp slt i32 %43, 2700, !dbg !20
  %.frozen = freeze i32 %27
  %47 = sdiv i32 %.frozen, 320, !dbg !21
  %48 = mul i32 %47, 320
  %.decomposed = sub i32 %.frozen, %48
  %49 = srem i32 %32, 320, !dbg !22
  %50 = mul i32 %41, 320, !dbg !23
  %51 = mul i32 %42, 320, !dbg !23
  %52 = mul i32 %47, 864000, !dbg !24
  %53 = add i32 %52, %.decomposed, !dbg !25
  %54 = add i32 %53, %50, !dbg !26
  %55 = add i32 %53, %51, !dbg !26
  %56 = sext i32 %54 to i64, !dbg !27
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !27
  %58 = sext i32 %55 to i64, !dbg !27
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !27
  %60 = and i1 %44, %33, !dbg !28
  %61 = and i1 %45, %33, !dbg !28
  %62 = and i1 %46, %34, !dbg !28
  %63 = and i1 %46, %35, !dbg !28
  %64 = and i1 %46, %36, !dbg !28
  %65 = and i1 %46, %37, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %60) #2, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !29
  %71 = trunc i32 %67 to i16, !dbg !29
  %extelt.offset = lshr i32 %67, 16, !dbg !29
  %72 = trunc i32 %extelt.offset to i16, !dbg !29
  %73 = trunc i32 %68 to i16, !dbg !29
  %extelt.offset1 = lshr i32 %68, 16, !dbg !29
  %74 = trunc i32 %extelt.offset1 to i16, !dbg !29
  %75 = trunc i32 %69 to i16, !dbg !29
  %extelt.offset2 = lshr i32 %69, 16, !dbg !29
  %76 = trunc i32 %extelt.offset2 to i16, !dbg !29
  %77 = trunc i32 %70 to i16, !dbg !29
  %extelt.offset3 = lshr i32 %70, 16, !dbg !29
  %78 = trunc i32 %extelt.offset3 to i16, !dbg !29
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %61) #2, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !29
  %84 = trunc i32 %80 to i16, !dbg !29
  %extelt.offset4 = lshr i32 %80, 16, !dbg !29
  %85 = trunc i32 %extelt.offset4 to i16, !dbg !29
  %86 = trunc i32 %81 to i16, !dbg !29
  %extelt.offset5 = lshr i32 %81, 16, !dbg !29
  %87 = trunc i32 %extelt.offset5 to i16, !dbg !29
  %88 = trunc i32 %82 to i16, !dbg !29
  %extelt.offset6 = lshr i32 %82, 16, !dbg !29
  %89 = trunc i32 %extelt.offset6 to i16, !dbg !29
  %90 = trunc i32 %83 to i16, !dbg !29
  %extelt.offset7 = lshr i32 %83, 16, !dbg !29
  %91 = trunc i32 %extelt.offset7 to i16, !dbg !29
  %92 = mul nuw nsw i32 %9, 136, !dbg !30
  %93 = or i32 %92, %12, !dbg !30
  %94 = zext nneg i32 %93 to i64, !dbg !30
  %95 = getelementptr half, ptr addrspace(3) @global_smem, i64 %94, !dbg !30
  store i16 %71, ptr addrspace(3) %95, align 2, !dbg !30
  %96 = add nuw nsw i32 %92, 17, !dbg !30
  %97 = add nuw nsw i32 %96, %12, !dbg !30
  %98 = zext nneg i32 %97 to i64, !dbg !30
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !30
  store i16 %72, ptr addrspace(3) %99, align 2, !dbg !30
  %100 = add nuw nsw i32 %92, 34, !dbg !30
  %101 = add nuw nsw i32 %100, %12, !dbg !30
  %102 = zext nneg i32 %101 to i64, !dbg !30
  %103 = getelementptr half, ptr addrspace(3) @global_smem, i64 %102, !dbg !30
  store i16 %73, ptr addrspace(3) %103, align 2, !dbg !30
  %104 = add nuw nsw i32 %92, 51, !dbg !30
  %105 = add nuw nsw i32 %104, %12, !dbg !30
  %106 = zext nneg i32 %105 to i64, !dbg !30
  %107 = getelementptr half, ptr addrspace(3) @global_smem, i64 %106, !dbg !30
  store i16 %74, ptr addrspace(3) %107, align 2, !dbg !30
  %108 = add nuw nsw i32 %92, 68, !dbg !30
  %109 = add nuw nsw i32 %108, %12, !dbg !30
  %110 = zext nneg i32 %109 to i64, !dbg !30
  %111 = getelementptr half, ptr addrspace(3) @global_smem, i64 %110, !dbg !30
  store i16 %75, ptr addrspace(3) %111, align 2, !dbg !30
  %112 = add nuw nsw i32 %92, 85, !dbg !30
  %113 = add nuw nsw i32 %112, %12, !dbg !30
  %114 = zext nneg i32 %113 to i64, !dbg !30
  %115 = getelementptr half, ptr addrspace(3) @global_smem, i64 %114, !dbg !30
  store i16 %76, ptr addrspace(3) %115, align 2, !dbg !30
  %116 = add nuw nsw i32 %92, 102, !dbg !30
  %117 = add nuw nsw i32 %116, %12, !dbg !30
  %118 = zext nneg i32 %117 to i64, !dbg !30
  %119 = getelementptr half, ptr addrspace(3) @global_smem, i64 %118, !dbg !30
  store i16 %77, ptr addrspace(3) %119, align 2, !dbg !30
  %120 = add nuw nsw i32 %92, 119, !dbg !30
  %121 = add nuw nsw i32 %120, %12, !dbg !30
  %122 = zext nneg i32 %121 to i64, !dbg !30
  %123 = getelementptr half, ptr addrspace(3) @global_smem, i64 %122, !dbg !30
  store i16 %78, ptr addrspace(3) %123, align 2, !dbg !30
  %124 = add nuw nsw i32 %19, %92, !dbg !30
  %125 = zext nneg i32 %124 to i64, !dbg !30
  %126 = getelementptr half, ptr addrspace(3) @global_smem, i64 %125, !dbg !30
  store i16 %84, ptr addrspace(3) %126, align 2, !dbg !30
  %127 = add nuw nsw i32 %96, %19, !dbg !30
  %128 = zext nneg i32 %127 to i64, !dbg !30
  %129 = getelementptr half, ptr addrspace(3) @global_smem, i64 %128, !dbg !30
  store i16 %85, ptr addrspace(3) %129, align 2, !dbg !30
  %130 = add nuw nsw i32 %100, %19, !dbg !30
  %131 = zext nneg i32 %130 to i64, !dbg !30
  %132 = getelementptr half, ptr addrspace(3) @global_smem, i64 %131, !dbg !30
  store i16 %86, ptr addrspace(3) %132, align 2, !dbg !30
  %133 = add nuw nsw i32 %104, %19, !dbg !30
  %134 = zext nneg i32 %133 to i64, !dbg !30
  %135 = getelementptr half, ptr addrspace(3) @global_smem, i64 %134, !dbg !30
  store i16 %87, ptr addrspace(3) %135, align 2, !dbg !30
  %136 = add nuw nsw i32 %108, %19, !dbg !30
  %137 = zext nneg i32 %136 to i64, !dbg !30
  %138 = getelementptr half, ptr addrspace(3) @global_smem, i64 %137, !dbg !30
  store i16 %88, ptr addrspace(3) %138, align 2, !dbg !30
  %139 = add nuw nsw i32 %112, %19, !dbg !30
  %140 = zext nneg i32 %139 to i64, !dbg !30
  %141 = getelementptr half, ptr addrspace(3) @global_smem, i64 %140, !dbg !30
  store i16 %89, ptr addrspace(3) %141, align 2, !dbg !30
  %142 = add nuw nsw i32 %116, %19, !dbg !30
  %143 = zext nneg i32 %142 to i64, !dbg !30
  %144 = getelementptr half, ptr addrspace(3) @global_smem, i64 %143, !dbg !30
  store i16 %90, ptr addrspace(3) %144, align 2, !dbg !30
  %145 = add nuw nsw i32 %120, %19, !dbg !30
  %146 = zext nneg i32 %145 to i64, !dbg !30
  %147 = getelementptr half, ptr addrspace(3) @global_smem, i64 %146, !dbg !30
  store i16 %91, ptr addrspace(3) %147, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %148 = mul nuw nsw i32 %15, 17, !dbg !30
  %149 = add nuw nsw i32 %148, %21, !dbg !30
  %150 = zext nneg i32 %149 to i64, !dbg !30
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i64 %150, !dbg !30
  %152 = load half, ptr addrspace(3) %151, align 2, !dbg !30
  %153 = or i32 %21, 1, !dbg !30
  %154 = add nuw nsw i32 %148, %153, !dbg !30
  %155 = zext nneg i32 %154 to i64, !dbg !30
  %156 = getelementptr half, ptr addrspace(3) @global_smem, i64 %155, !dbg !30
  %157 = load half, ptr addrspace(3) %156, align 2, !dbg !30
  %158 = or i32 %21, 2, !dbg !30
  %159 = add nuw nsw i32 %148, %158, !dbg !30
  %160 = zext nneg i32 %159 to i64, !dbg !30
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i64 %160, !dbg !30
  %162 = load half, ptr addrspace(3) %161, align 2, !dbg !30
  %163 = or i32 %21, 3, !dbg !30
  %164 = add nuw nsw i32 %148, %163, !dbg !30
  %165 = zext nneg i32 %164 to i64, !dbg !30
  %166 = getelementptr half, ptr addrspace(3) @global_smem, i64 %165, !dbg !30
  %167 = load half, ptr addrspace(3) %166, align 2, !dbg !30
  %168 = mul nuw nsw i32 %16, 17, !dbg !30
  %169 = add nuw nsw i32 %168, %21, !dbg !30
  %170 = zext nneg i32 %169 to i64, !dbg !30
  %171 = getelementptr half, ptr addrspace(3) @global_smem, i64 %170, !dbg !30
  %172 = load half, ptr addrspace(3) %171, align 2, !dbg !30
  %173 = add nuw nsw i32 %168, %153, !dbg !30
  %174 = zext nneg i32 %173 to i64, !dbg !30
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !30
  %176 = load half, ptr addrspace(3) %175, align 2, !dbg !30
  %177 = add nuw nsw i32 %168, %158, !dbg !30
  %178 = zext nneg i32 %177 to i64, !dbg !30
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i64 %178, !dbg !30
  %180 = load half, ptr addrspace(3) %179, align 2, !dbg !30
  %181 = add nuw nsw i32 %168, %163, !dbg !30
  %182 = zext nneg i32 %181 to i64, !dbg !30
  %183 = getelementptr half, ptr addrspace(3) @global_smem, i64 %182, !dbg !30
  %184 = load half, ptr addrspace(3) %183, align 2, !dbg !30
  %185 = mul nuw nsw i32 %17, 17, !dbg !30
  %186 = add nuw nsw i32 %185, %21, !dbg !30
  %187 = zext nneg i32 %186 to i64, !dbg !30
  %188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %187, !dbg !30
  %189 = load half, ptr addrspace(3) %188, align 2, !dbg !30
  %190 = add nuw nsw i32 %185, %153, !dbg !30
  %191 = zext nneg i32 %190 to i64, !dbg !30
  %192 = getelementptr half, ptr addrspace(3) @global_smem, i64 %191, !dbg !30
  %193 = load half, ptr addrspace(3) %192, align 2, !dbg !30
  %194 = add nuw nsw i32 %185, %158, !dbg !30
  %195 = zext nneg i32 %194 to i64, !dbg !30
  %196 = getelementptr half, ptr addrspace(3) @global_smem, i64 %195, !dbg !30
  %197 = load half, ptr addrspace(3) %196, align 2, !dbg !30
  %198 = add nuw nsw i32 %185, %163, !dbg !30
  %199 = zext nneg i32 %198 to i64, !dbg !30
  %200 = getelementptr half, ptr addrspace(3) @global_smem, i64 %199, !dbg !30
  %201 = load half, ptr addrspace(3) %200, align 2, !dbg !30
  %202 = mul nuw nsw i32 %18, 17, !dbg !30
  %203 = add nuw nsw i32 %202, %21, !dbg !30
  %204 = zext nneg i32 %203 to i64, !dbg !30
  %205 = getelementptr half, ptr addrspace(3) @global_smem, i64 %204, !dbg !30
  %206 = load half, ptr addrspace(3) %205, align 2, !dbg !30
  %207 = add nuw nsw i32 %202, %153, !dbg !30
  %208 = zext nneg i32 %207 to i64, !dbg !30
  %209 = getelementptr half, ptr addrspace(3) @global_smem, i64 %208, !dbg !30
  %210 = load half, ptr addrspace(3) %209, align 2, !dbg !30
  %211 = add nuw nsw i32 %202, %158, !dbg !30
  %212 = zext nneg i32 %211 to i64, !dbg !30
  %213 = getelementptr half, ptr addrspace(3) @global_smem, i64 %212, !dbg !30
  %214 = load half, ptr addrspace(3) %213, align 2, !dbg !30
  %215 = add nuw nsw i32 %202, %163, !dbg !30
  %216 = zext nneg i32 %215 to i64, !dbg !30
  %217 = getelementptr half, ptr addrspace(3) @global_smem, i64 %216, !dbg !30
  %218 = load half, ptr addrspace(3) %217, align 2, !dbg !30
  %219 = sext i32 %49 to i64, !dbg !31
  %220 = getelementptr half, ptr addrspace(1) %1, i64 %219, !dbg !31
  %221 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %220, i1 %38) #2, !dbg !32
  %222 = bitcast i16 %221 to half, !dbg !32
  %223 = fpext half %222 to float, !dbg !33
  %224 = getelementptr half, ptr addrspace(1) %2, i64 %56, !dbg !34
  %225 = getelementptr half, ptr addrspace(1) %2, i64 %58, !dbg !34
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %224, i1 %60) #2, !dbg !35
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !35
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !35
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !35
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !35
  %231 = trunc i32 %227 to i16, !dbg !35
  %extelt.offset8 = lshr i32 %227, 16, !dbg !35
  %232 = trunc i32 %extelt.offset8 to i16, !dbg !35
  %233 = trunc i32 %228 to i16, !dbg !35
  %extelt.offset9 = lshr i32 %228, 16, !dbg !35
  %234 = trunc i32 %extelt.offset9 to i16, !dbg !35
  %235 = trunc i32 %229 to i16, !dbg !35
  %extelt.offset10 = lshr i32 %229, 16, !dbg !35
  %236 = trunc i32 %extelt.offset10 to i16, !dbg !35
  %237 = trunc i32 %230 to i16, !dbg !35
  %extelt.offset11 = lshr i32 %230, 16, !dbg !35
  %238 = trunc i32 %extelt.offset11 to i16, !dbg !35
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %225, i1 %61) #2, !dbg !35
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !35
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !35
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !35
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !35
  %244 = trunc i32 %240 to i16, !dbg !35
  %extelt.offset12 = lshr i32 %240, 16, !dbg !35
  %245 = trunc i32 %extelt.offset12 to i16, !dbg !35
  %246 = trunc i32 %241 to i16, !dbg !35
  %extelt.offset13 = lshr i32 %241, 16, !dbg !35
  %247 = trunc i32 %extelt.offset13 to i16, !dbg !35
  %248 = trunc i32 %242 to i16, !dbg !35
  %extelt.offset14 = lshr i32 %242, 16, !dbg !35
  %249 = trunc i32 %extelt.offset14 to i16, !dbg !35
  %250 = trunc i32 %243 to i16, !dbg !35
  %extelt.offset15 = lshr i32 %243, 16, !dbg !35
  %251 = trunc i32 %extelt.offset15 to i16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %231, ptr addrspace(3) %95, align 2, !dbg !36
  store i16 %232, ptr addrspace(3) %99, align 2, !dbg !36
  store i16 %233, ptr addrspace(3) %103, align 2, !dbg !36
  store i16 %234, ptr addrspace(3) %107, align 2, !dbg !36
  store i16 %235, ptr addrspace(3) %111, align 2, !dbg !36
  store i16 %236, ptr addrspace(3) %115, align 2, !dbg !36
  store i16 %237, ptr addrspace(3) %119, align 2, !dbg !36
  store i16 %238, ptr addrspace(3) %123, align 2, !dbg !36
  store i16 %244, ptr addrspace(3) %126, align 2, !dbg !36
  store i16 %245, ptr addrspace(3) %129, align 2, !dbg !36
  store i16 %246, ptr addrspace(3) %132, align 2, !dbg !36
  store i16 %247, ptr addrspace(3) %135, align 2, !dbg !36
  store i16 %248, ptr addrspace(3) %138, align 2, !dbg !36
  store i16 %249, ptr addrspace(3) %141, align 2, !dbg !36
  store i16 %250, ptr addrspace(3) %144, align 2, !dbg !36
  store i16 %251, ptr addrspace(3) %147, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %252 = load half, ptr addrspace(3) %151, align 2, !dbg !36
  %253 = load half, ptr addrspace(3) %156, align 2, !dbg !36
  %254 = load half, ptr addrspace(3) %161, align 2, !dbg !36
  %255 = load half, ptr addrspace(3) %166, align 2, !dbg !36
  %256 = load half, ptr addrspace(3) %171, align 2, !dbg !36
  %257 = load half, ptr addrspace(3) %175, align 2, !dbg !36
  %258 = load half, ptr addrspace(3) %179, align 2, !dbg !36
  %259 = load half, ptr addrspace(3) %183, align 2, !dbg !36
  %260 = load half, ptr addrspace(3) %188, align 2, !dbg !36
  %261 = load half, ptr addrspace(3) %192, align 2, !dbg !36
  %262 = load half, ptr addrspace(3) %196, align 2, !dbg !36
  %263 = load half, ptr addrspace(3) %200, align 2, !dbg !36
  %264 = load half, ptr addrspace(3) %205, align 2, !dbg !36
  %265 = load half, ptr addrspace(3) %209, align 2, !dbg !36
  %266 = load half, ptr addrspace(3) %213, align 2, !dbg !36
  %267 = load half, ptr addrspace(3) %217, align 2, !dbg !36
  %268 = mul i32 %28, 2700, !dbg !37
  %269 = mul i32 %29, 2700, !dbg !37
  %270 = mul i32 %30, 2700, !dbg !37
  %271 = mul i32 %31, 2700, !dbg !37
  %272 = add i32 %268, %43, !dbg !38
  %273 = add i32 %269, %43, !dbg !38
  %274 = add i32 %270, %43, !dbg !38
  %275 = add i32 %271, %43, !dbg !38
  %276 = sext i32 %272 to i64, !dbg !39
  %277 = getelementptr half, ptr addrspace(1) %3, i64 %276, !dbg !39
  %278 = sext i32 %273 to i64, !dbg !39
  %279 = getelementptr half, ptr addrspace(1) %3, i64 %278, !dbg !39
  %280 = sext i32 %274 to i64, !dbg !39
  %281 = getelementptr half, ptr addrspace(1) %3, i64 %280, !dbg !39
  %282 = sext i32 %275 to i64, !dbg !39
  %283 = getelementptr half, ptr addrspace(1) %3, i64 %282, !dbg !39
  %284 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %277, i1 %62) #2, !dbg !40
  %285 = extractvalue { i32, i32 } %284, 0, !dbg !40
  %286 = extractvalue { i32, i32 } %284, 1, !dbg !40
  %extelt.offset16 = lshr i32 %285, 16, !dbg !40
  %extelt.offset17 = lshr i32 %286, 16, !dbg !40
  %287 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %279, i1 %63) #2, !dbg !40
  %288 = extractvalue { i32, i32 } %287, 0, !dbg !40
  %289 = extractvalue { i32, i32 } %287, 1, !dbg !40
  %extelt.offset18 = lshr i32 %288, 16, !dbg !40
  %extelt.offset19 = lshr i32 %289, 16, !dbg !40
  %290 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %281, i1 %64) #2, !dbg !40
  %291 = extractvalue { i32, i32 } %290, 0, !dbg !40
  %292 = extractvalue { i32, i32 } %290, 1, !dbg !40
  %extelt.offset20 = lshr i32 %291, 16, !dbg !40
  %extelt.offset21 = lshr i32 %292, 16, !dbg !40
  %293 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %283, i1 %65) #2, !dbg !40
  %294 = extractvalue { i32, i32 } %293, 0, !dbg !40
  %295 = extractvalue { i32, i32 } %293, 1, !dbg !40
  %extelt.offset22 = lshr i32 %294, 16, !dbg !40
  %extelt.offset23 = lshr i32 %295, 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %296 = shl nuw nsw i32 %urem, 1, !dbg !41
  %297 = zext nneg i32 %296 to i64, !dbg !41
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !41
  %299 = insertelement <1 x float> undef, float %223, i64 0, !dbg !41
  store <1 x float> %299, ptr addrspace(3) %298, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %300 = shl nuw nsw i32 %15, 1, !dbg !41
  %301 = zext nneg i32 %300 to i64, !dbg !41
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i64 %301, !dbg !41
  %303 = load float, ptr addrspace(3) %302, align 4, !dbg !41
  %304 = shl nuw nsw i32 %16, 1, !dbg !41
  %305 = zext nneg i32 %304 to i64, !dbg !41
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !41
  %307 = load float, ptr addrspace(3) %306, align 4, !dbg !41
  %308 = shl nuw nsw i32 %17, 1, !dbg !41
  %309 = zext nneg i32 %308 to i64, !dbg !41
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !41
  %311 = load float, ptr addrspace(3) %310, align 4, !dbg !41
  %312 = shl nuw nsw i32 %18, 1, !dbg !41
  %313 = zext nneg i32 %312 to i64, !dbg !41
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i64 %313, !dbg !41
  %315 = load float, ptr addrspace(3) %314, align 4, !dbg !41
  %316 = getelementptr half, ptr addrspace(1) %4, i64 %276, !dbg !42
  %317 = getelementptr half, ptr addrspace(1) %4, i64 %278, !dbg !42
  %318 = getelementptr half, ptr addrspace(1) %4, i64 %280, !dbg !42
  %319 = getelementptr half, ptr addrspace(1) %4, i64 %282, !dbg !42
  %320 = insertelement <2 x half> poison, half %152, i64 0, !dbg !30
  %321 = insertelement <2 x half> %320, half %157, i64 1, !dbg !30
  %322 = fpext <2 x half> %321 to <2 x float>, !dbg !30
  %323 = insertelement <2 x half> poison, half %252, i64 0, !dbg !43
  %324 = insertelement <2 x half> %323, half %253, i64 1, !dbg !43
  %325 = fpext <2 x half> %324 to <2 x float>, !dbg !43
  %326 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !40
  %327 = insertelement <2 x i32> %326, i32 %extelt.offset16, i64 1, !dbg !40
  %328 = trunc <2 x i32> %327 to <2 x i16>, !dbg !40
  %329 = bitcast <2 x i16> %328 to <2 x half>, !dbg !40
  %330 = fpext <2 x half> %329 to <2 x float>, !dbg !44
  %331 = insertelement <2 x float> poison, float %303, i64 0, !dbg !41
  %332 = shufflevector <2 x float> %331, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %333 = fadd <2 x float> %332, %322, !dbg !41
  %334 = fmul <2 x float> %325, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %335 = fadd <2 x float> %334, %333, !dbg !36
  %336 = fadd <2 x float> %335, %330, !dbg !46
  %337 = fptrunc <2 x float> %336 to <2 x half>, !dbg !47
  %338 = insertelement <2 x half> poison, half %162, i64 0, !dbg !30
  %339 = insertelement <2 x half> %338, half %167, i64 1, !dbg !30
  %340 = fpext <2 x half> %339 to <2 x float>, !dbg !30
  %341 = insertelement <2 x half> poison, half %254, i64 0, !dbg !43
  %342 = insertelement <2 x half> %341, half %255, i64 1, !dbg !43
  %343 = fpext <2 x half> %342 to <2 x float>, !dbg !43
  %344 = insertelement <2 x i32> poison, i32 %286, i64 0, !dbg !40
  %345 = insertelement <2 x i32> %344, i32 %extelt.offset17, i64 1, !dbg !40
  %346 = trunc <2 x i32> %345 to <2 x i16>, !dbg !40
  %347 = bitcast <2 x i16> %346 to <2 x half>, !dbg !40
  %348 = fpext <2 x half> %347 to <2 x float>, !dbg !44
  %349 = fadd <2 x float> %332, %340, !dbg !41
  %350 = fmul <2 x float> %343, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %351 = fadd <2 x float> %350, %349, !dbg !36
  %352 = fadd <2 x float> %351, %348, !dbg !46
  %353 = fptrunc <2 x float> %352 to <2 x half>, !dbg !47
  %354 = insertelement <2 x half> poison, half %172, i64 0, !dbg !30
  %355 = insertelement <2 x half> %354, half %176, i64 1, !dbg !30
  %356 = fpext <2 x half> %355 to <2 x float>, !dbg !30
  %357 = insertelement <2 x half> poison, half %256, i64 0, !dbg !43
  %358 = insertelement <2 x half> %357, half %257, i64 1, !dbg !43
  %359 = fpext <2 x half> %358 to <2 x float>, !dbg !43
  %360 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !40
  %361 = insertelement <2 x i32> %360, i32 %extelt.offset18, i64 1, !dbg !40
  %362 = trunc <2 x i32> %361 to <2 x i16>, !dbg !40
  %363 = bitcast <2 x i16> %362 to <2 x half>, !dbg !40
  %364 = fpext <2 x half> %363 to <2 x float>, !dbg !44
  %365 = insertelement <2 x float> poison, float %307, i64 0, !dbg !41
  %366 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %367 = fadd <2 x float> %366, %356, !dbg !41
  %368 = fmul <2 x float> %359, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %369 = fadd <2 x float> %368, %367, !dbg !36
  %370 = fadd <2 x float> %369, %364, !dbg !46
  %371 = fptrunc <2 x float> %370 to <2 x half>, !dbg !47
  %372 = insertelement <2 x half> poison, half %180, i64 0, !dbg !30
  %373 = insertelement <2 x half> %372, half %184, i64 1, !dbg !30
  %374 = fpext <2 x half> %373 to <2 x float>, !dbg !30
  %375 = insertelement <2 x half> poison, half %258, i64 0, !dbg !43
  %376 = insertelement <2 x half> %375, half %259, i64 1, !dbg !43
  %377 = fpext <2 x half> %376 to <2 x float>, !dbg !43
  %378 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !40
  %379 = insertelement <2 x i32> %378, i32 %extelt.offset19, i64 1, !dbg !40
  %380 = trunc <2 x i32> %379 to <2 x i16>, !dbg !40
  %381 = bitcast <2 x i16> %380 to <2 x half>, !dbg !40
  %382 = fpext <2 x half> %381 to <2 x float>, !dbg !44
  %383 = fadd <2 x float> %366, %374, !dbg !41
  %384 = fmul <2 x float> %377, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %385 = fadd <2 x float> %384, %383, !dbg !36
  %386 = fadd <2 x float> %385, %382, !dbg !46
  %387 = fptrunc <2 x float> %386 to <2 x half>, !dbg !47
  %388 = insertelement <2 x half> poison, half %189, i64 0, !dbg !30
  %389 = insertelement <2 x half> %388, half %193, i64 1, !dbg !30
  %390 = fpext <2 x half> %389 to <2 x float>, !dbg !30
  %391 = insertelement <2 x half> poison, half %260, i64 0, !dbg !43
  %392 = insertelement <2 x half> %391, half %261, i64 1, !dbg !43
  %393 = fpext <2 x half> %392 to <2 x float>, !dbg !43
  %394 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !40
  %395 = insertelement <2 x i32> %394, i32 %extelt.offset20, i64 1, !dbg !40
  %396 = trunc <2 x i32> %395 to <2 x i16>, !dbg !40
  %397 = bitcast <2 x i16> %396 to <2 x half>, !dbg !40
  %398 = fpext <2 x half> %397 to <2 x float>, !dbg !44
  %399 = insertelement <2 x float> poison, float %311, i64 0, !dbg !41
  %400 = shufflevector <2 x float> %399, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %401 = fadd <2 x float> %400, %390, !dbg !41
  %402 = fmul <2 x float> %393, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %403 = fadd <2 x float> %402, %401, !dbg !36
  %404 = fadd <2 x float> %403, %398, !dbg !46
  %405 = fptrunc <2 x float> %404 to <2 x half>, !dbg !47
  %406 = insertelement <2 x half> poison, half %197, i64 0, !dbg !30
  %407 = insertelement <2 x half> %406, half %201, i64 1, !dbg !30
  %408 = fpext <2 x half> %407 to <2 x float>, !dbg !30
  %409 = insertelement <2 x half> poison, half %262, i64 0, !dbg !43
  %410 = insertelement <2 x half> %409, half %263, i64 1, !dbg !43
  %411 = fpext <2 x half> %410 to <2 x float>, !dbg !43
  %412 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !40
  %413 = insertelement <2 x i32> %412, i32 %extelt.offset21, i64 1, !dbg !40
  %414 = trunc <2 x i32> %413 to <2 x i16>, !dbg !40
  %415 = bitcast <2 x i16> %414 to <2 x half>, !dbg !40
  %416 = fpext <2 x half> %415 to <2 x float>, !dbg !44
  %417 = fadd <2 x float> %400, %408, !dbg !41
  %418 = fmul <2 x float> %411, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %419 = fadd <2 x float> %418, %417, !dbg !36
  %420 = fadd <2 x float> %419, %416, !dbg !46
  %421 = fptrunc <2 x float> %420 to <2 x half>, !dbg !47
  %422 = insertelement <2 x half> poison, half %206, i64 0, !dbg !30
  %423 = insertelement <2 x half> %422, half %210, i64 1, !dbg !30
  %424 = fpext <2 x half> %423 to <2 x float>, !dbg !30
  %425 = insertelement <2 x half> poison, half %264, i64 0, !dbg !43
  %426 = insertelement <2 x half> %425, half %265, i64 1, !dbg !43
  %427 = fpext <2 x half> %426 to <2 x float>, !dbg !43
  %428 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !40
  %429 = insertelement <2 x i32> %428, i32 %extelt.offset22, i64 1, !dbg !40
  %430 = trunc <2 x i32> %429 to <2 x i16>, !dbg !40
  %431 = bitcast <2 x i16> %430 to <2 x half>, !dbg !40
  %432 = fpext <2 x half> %431 to <2 x float>, !dbg !44
  %433 = insertelement <2 x float> poison, float %315, i64 0, !dbg !41
  %434 = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %435 = fadd <2 x float> %434, %424, !dbg !41
  %436 = fmul <2 x float> %427, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %437 = fadd <2 x float> %436, %435, !dbg !36
  %438 = fadd <2 x float> %437, %432, !dbg !46
  %439 = fptrunc <2 x float> %438 to <2 x half>, !dbg !47
  %440 = insertelement <2 x half> poison, half %214, i64 0, !dbg !30
  %441 = insertelement <2 x half> %440, half %218, i64 1, !dbg !30
  %442 = fpext <2 x half> %441 to <2 x float>, !dbg !30
  %443 = insertelement <2 x half> poison, half %266, i64 0, !dbg !43
  %444 = insertelement <2 x half> %443, half %267, i64 1, !dbg !43
  %445 = fpext <2 x half> %444 to <2 x float>, !dbg !43
  %446 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !40
  %447 = insertelement <2 x i32> %446, i32 %extelt.offset23, i64 1, !dbg !40
  %448 = trunc <2 x i32> %447 to <2 x i16>, !dbg !40
  %449 = bitcast <2 x i16> %448 to <2 x half>, !dbg !40
  %450 = fpext <2 x half> %449 to <2 x float>, !dbg !44
  %451 = fadd <2 x float> %434, %442, !dbg !41
  %452 = fmul <2 x float> %445, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %453 = fadd <2 x float> %452, %451, !dbg !36
  %454 = fadd <2 x float> %453, %450, !dbg !46
  %455 = fptrunc <2 x float> %454 to <2 x half>, !dbg !47
  %456 = bitcast <2 x half> %337 to i32, !dbg !47
  %457 = bitcast <2 x half> %353 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %456, i32 %457, ptr addrspace(1) %316, i1 %62) #2, !dbg !47
  %458 = bitcast <2 x half> %371 to i32, !dbg !47
  %459 = bitcast <2 x half> %387 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %458, i32 %459, ptr addrspace(1) %317, i1 %63) #2, !dbg !47
  %460 = bitcast <2 x half> %405 to i32, !dbg !47
  %461 = bitcast <2 x half> %421 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %460, i32 %461, ptr addrspace(1) %318, i1 %64) #2, !dbg !47
  %462 = bitcast <2 x half> %439 to i32, !dbg !47
  %463 = bitcast <2 x half> %455 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %462, i32 %463, ptr addrspace(1) %319, i1 %65) #2, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cuwudlitabc4tos2oztf6jaxh24gzbno753bi6gidux5mkpnwqqu.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/uw")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 30, column: 18, scope: !5)
!23 = !DILocation(line: 33, column: 40, scope: !5)
!24 = !DILocation(line: 33, column: 54, scope: !5)
!25 = !DILocation(line: 33, column: 36, scope: !5)
!26 = !DILocation(line: 33, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 30, scope: !5)
!28 = !DILocation(line: 33, column: 68, scope: !5)
!29 = !DILocation(line: 33, column: 60, scope: !5)
!30 = !DILocation(line: 33, column: 108, scope: !5)
!31 = !DILocation(line: 34, column: 30, scope: !5)
!32 = !DILocation(line: 34, column: 35, scope: !5)
!33 = !DILocation(line: 34, column: 75, scope: !5)
!34 = !DILocation(line: 35, column: 30, scope: !5)
!35 = !DILocation(line: 35, column: 60, scope: !5)
!36 = !DILocation(line: 40, column: 18, scope: !5)
!37 = !DILocation(line: 36, column: 41, scope: !5)
!38 = !DILocation(line: 36, column: 36, scope: !5)
!39 = !DILocation(line: 36, column: 30, scope: !5)
!40 = !DILocation(line: 36, column: 47, scope: !5)
!41 = !DILocation(line: 37, column: 18, scope: !5)
!42 = !DILocation(line: 42, column: 25, scope: !5)
!43 = !DILocation(line: 35, column: 108, scope: !5)
!44 = !DILocation(line: 36, column: 95, scope: !5)
!45 = !DILocation(line: 39, column: 18, scope: !5)
!46 = !DILocation(line: 41, column: 18, scope: !5)
!47 = !DILocation(line: 42, column: 48, scope: !5)
!48 = !DILocation(line: 42, column: 4, scope: !5)
