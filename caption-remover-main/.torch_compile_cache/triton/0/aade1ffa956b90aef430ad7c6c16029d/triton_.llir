; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3de4e(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !5 {
.peel.begin:
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %5, 255, !dbg !8
  %6 = shl nuw nsw i32 %urem, 1, !dbg !8
  %7 = or i32 %urem, 256, !dbg !8
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %9 = icmp slt i32 %8, 704, !dbg !10
  %.frozen = freeze i32 %8
  %10 = sdiv i32 %.frozen, 32, !dbg !11
  %11 = mul i32 %10, 32
  %.decomposed = sub i32 %.frozen, %11
  %12 = mul nsw i32 %.decomposed, 10, !dbg !12
  %13 = mul i32 %10, 864000, !dbg !13
  %14 = add i32 %13, %12
  %15 = zext nneg i32 %urem to i64
  %16 = getelementptr float, ptr addrspace(3) @global_smem, i64 %15
  %17 = zext nneg i32 %7 to i64
  %18 = getelementptr float, ptr addrspace(3) @global_smem, i64 %17
  %19 = zext nneg i32 %6 to i64
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19
  %21 = getelementptr inbounds <2 x float>, ptr addrspace(3) %20, i64 0, i64 1
  %22 = or i32 %6, 512, !dbg !14
  %23 = urem i32 %6, 10, !dbg !15
  %.frozen90 = freeze i32 %22
  %24 = udiv i32 %.frozen90, 10, !dbg !16
  %25 = mul i32 %24, 10
  %.decomposed91 = sub i32 %.frozen90, %25
  %26 = udiv i32 %urem, 5, !dbg !16
  %27 = mul nuw nsw i32 %26, 320, !dbg !17
  %28 = mul nuw nsw i32 %24, 320, !dbg !17
  %29 = add i32 %14, %23, !dbg !18
  %30 = add i32 %29, %27, !dbg !19
  %31 = add i32 %14, %.decomposed91, !dbg !18
  %32 = add i32 %31, %28, !dbg !19
  %33 = sext i32 %30 to i64, !dbg !20
  %34 = getelementptr half, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = sext i32 %32 to i64, !dbg !20
  %36 = getelementptr half, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %9, i32 0, i1 %9) #3, !dbg !21
  %38 = trunc i32 %37 to i16, !dbg !21
  %39 = bitcast i16 %38 to half, !dbg !21
  %extelt.offset.peel = lshr i32 %37, 16, !dbg !21
  %40 = trunc i32 %extelt.offset.peel to i16, !dbg !21
  %41 = bitcast i16 %40 to half, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %9, i32 0, i1 %9) #3, !dbg !21
  %43 = trunc i32 %42 to i16, !dbg !21
  %44 = bitcast i16 %43 to half, !dbg !21
  %extelt.offset1.peel = lshr i32 %42, 16, !dbg !21
  %45 = trunc i32 %extelt.offset1.peel to i16, !dbg !21
  %46 = bitcast i16 %45 to half, !dbg !21
  %47 = fpext half %39 to float, !dbg !22
  %48 = fpext half %41 to float, !dbg !22
  %49 = fpext half %44 to float, !dbg !22
  %50 = fpext half %46 to float, !dbg !22
  %51 = select i1 %9, float %47, float 0.000000e+00, !dbg !23
  %52 = select i1 %9, float %48, float 0.000000e+00, !dbg !23
  %53 = select i1 %9, float %49, float 0.000000e+00, !dbg !23
  %54 = select i1 %9, float %50, float 0.000000e+00, !dbg !23
  %55 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !24
  %56 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !24
  %57 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !24
  %58 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !24
  br label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %59 = phi float [ %55, %.peel.begin ], [ %160, %._crit_edge ]
  %60 = phi float [ %56, %.peel.begin ], [ %161, %._crit_edge ]
  %61 = phi float [ %57, %.peel.begin ], [ %162, %._crit_edge ]
  %62 = phi float [ %58, %.peel.begin ], [ %163, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %.peel.begin ], [ %156, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %.peel.begin ], [ %157, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %.peel.begin ], [ %158, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %.peel.begin ], [ %159, %._crit_edge ]
  %67 = phi float [ %51, %.peel.begin ], [ %152, %._crit_edge ]
  %68 = phi float [ %52, %.peel.begin ], [ %153, %._crit_edge ]
  %69 = phi float [ %53, %.peel.begin ], [ %154, %._crit_edge ]
  %70 = phi float [ %54, %.peel.begin ], [ %155, %._crit_edge ]
  %71 = phi i32 [ 1024, %.peel.begin ], [ %164, %._crit_edge ]
  %72 = or i32 %71, %6, !dbg !14
  %73 = or i32 %72, 512, !dbg !14
  %74 = or i32 %71, %7, !dbg !14
  %75 = or i32 %urem, %71, !dbg !14
  %76 = or i32 %75, 512, !dbg !14
  %77 = or i32 %75, 768, !dbg !14
  %78 = icmp ult i32 %72, 27000, !dbg !26
  %79 = icmp ult i32 %73, 27000, !dbg !26
  %80 = icmp ult i32 %74, 27000, !dbg !26
  %81 = icmp ult i32 %76, 27000, !dbg !26
  %82 = icmp ult i32 %77, 27000, !dbg !26
  %.frozen92 = freeze i32 %72
  %83 = udiv i32 %.frozen92, 10, !dbg !16
  %84 = mul i32 %83, 10
  %.decomposed93 = sub i32 %.frozen92, %84
  %.frozen94 = freeze i32 %73
  %85 = udiv i32 %.frozen94, 10, !dbg !16
  %86 = mul i32 %85, 10
  %.decomposed95 = sub i32 %.frozen94, %86
  %87 = mul i32 %83, 320, !dbg !17
  %88 = mul i32 %85, 320, !dbg !17
  %89 = add i32 %14, %.decomposed93, !dbg !18
  %90 = add i32 %89, %87, !dbg !19
  %91 = add i32 %14, %.decomposed95, !dbg !18
  %92 = add i32 %91, %88, !dbg !19
  %93 = sext i32 %90 to i64, !dbg !20
  %94 = getelementptr half, ptr addrspace(1) %0, i64 %93, !dbg !20
  %95 = sext i32 %92 to i64, !dbg !20
  %96 = getelementptr half, ptr addrspace(1) %0, i64 %95, !dbg !20
  %97 = and i1 %9, %78, !dbg !27
  %98 = and i1 %9, %79, !dbg !27
  %99 = and i1 %9, %80, !dbg !27
  %100 = and i1 %9, %81, !dbg !27
  %101 = and i1 %9, %82, !dbg !27
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %97, i32 0, i1 %97) #3, !dbg !21
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %98, i32 0, i1 %98) #3, !dbg !21
  %extelt.offset1 = lshr i32 %103, 16, !dbg !21
  %104 = trunc i32 %extelt.offset1 to i16, !dbg !21
  %105 = bitcast i16 %104 to half, !dbg !21
  %106 = fpext half %105 to float, !dbg !22
  %107 = trunc i32 %103 to i16, !dbg !21
  %108 = bitcast i16 %107 to half, !dbg !21
  %109 = fpext half %108 to float, !dbg !22
  %extelt.offset = lshr i32 %102, 16, !dbg !21
  %110 = trunc i32 %extelt.offset to i16, !dbg !21
  %111 = bitcast i16 %110 to half, !dbg !21
  %112 = fpext half %111 to float, !dbg !22
  %113 = trunc i32 %102 to i16, !dbg !21
  %114 = bitcast i16 %113 to half, !dbg !21
  %115 = fpext half %114 to float, !dbg !22
  %116 = fsub float %115, %67, !dbg !28
  %117 = fsub float %112, %68, !dbg !28
  %118 = fsub float %109, %69, !dbg !28
  %119 = fsub float %106, %70, !dbg !28
  %120 = fadd float %59, 1.000000e+00, !dbg !32
  %121 = fadd float %60, 1.000000e+00, !dbg !32
  %122 = fadd float %61, 1.000000e+00, !dbg !32
  %123 = fadd float %62, 1.000000e+00, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %124 = insertelement <1 x float> undef, float %120, i64 0, !dbg !32
  store <1 x float> %124, ptr addrspace(3) %16, align 4, !dbg !32
  %125 = insertelement <1 x float> undef, float %121, i64 0, !dbg !32
  store <1 x float> %125, ptr addrspace(3) %18, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %126 = load float, ptr addrspace(3) %20, align 8, !dbg !32
  %127 = load float, ptr addrspace(3) %21, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %128 = insertelement <1 x float> undef, float %122, i64 0, !dbg !32
  store <1 x float> %128, ptr addrspace(3) %16, align 4, !dbg !32
  %129 = insertelement <1 x float> undef, float %123, i64 0, !dbg !32
  store <1 x float> %129, ptr addrspace(3) %18, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %130 = load float, ptr addrspace(3) %20, align 8, !dbg !32
  %131 = load float, ptr addrspace(3) %21, align 4, !dbg !32
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %126) #3, !dbg !33
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %127) #3, !dbg !33
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %130) #3, !dbg !33
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %131) #3, !dbg !33
  %136 = fadd float %67, %132, !dbg !34
  %137 = fadd float %68, %133, !dbg !34
  %138 = fadd float %69, %134, !dbg !34
  %139 = fadd float %70, %135, !dbg !34
  %140 = fsub float %115, %136, !dbg !35
  %141 = fsub float %112, %137, !dbg !35
  %142 = fsub float %109, %138, !dbg !35
  %143 = fsub float %106, %139, !dbg !35
  %144 = fmul float %116, %140, !dbg !36
  %145 = fmul float %117, %141, !dbg !36
  %146 = fmul float %118, %142, !dbg !36
  %147 = fmul float %119, %143, !dbg !36
  %148 = fadd float %63, %144, !dbg !37
  %149 = fadd float %64, %145, !dbg !37
  %150 = fadd float %65, %146, !dbg !37
  %151 = fadd float %66, %147, !dbg !37
  %152 = select i1 %97, float %136, float %67, !dbg !23
  %153 = select i1 %97, float %137, float %68, !dbg !23
  %154 = select i1 %98, float %138, float %69, !dbg !23
  %155 = select i1 %98, float %139, float %70, !dbg !23
  %156 = select i1 %97, float %148, float %63, !dbg !38
  %157 = select i1 %97, float %149, float %64, !dbg !38
  %158 = select i1 %98, float %150, float %65, !dbg !38
  %159 = select i1 %98, float %151, float %66, !dbg !38
  %160 = select i1 %9, float %120, float %59, !dbg !24
  %161 = select i1 %99, float %121, float %60, !dbg !24
  %162 = select i1 %100, float %122, float %61, !dbg !24
  %163 = select i1 %101, float %123, float %62, !dbg !24
  %164 = add nuw nsw i32 %71, 1024, !dbg !25
  %165 = icmp ult i32 %71, 25976, !dbg !25
  br i1 %165, label %._crit_edge, label %.loopexit, !dbg !25, !llvm.loop !39

.loopexit:                                        ; preds = %._crit_edge
  %166 = lshr i32 %5, 5, !dbg !8
  %167 = and i32 %166, 7, !dbg !8
  %168 = and i32 %5, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %169 = insertelement <1 x float> undef, float %160, i64 0, !dbg !25
  store <1 x float> %169, ptr addrspace(3) %16, align 4, !dbg !25
  %170 = insertelement <1 x float> undef, float %161, i64 0, !dbg !25
  store <1 x float> %170, ptr addrspace(3) %18, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %171 = load float, ptr addrspace(3) %20, align 8, !dbg !25
  %172 = getelementptr inbounds <2 x float>, ptr addrspace(3) %20, i64 0, i64 1, !dbg !25
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %174 = insertelement <1 x float> undef, float %162, i64 0, !dbg !25
  store <1 x float> %174, ptr addrspace(3) %16, align 4, !dbg !25
  %175 = insertelement <1 x float> undef, float %163, i64 0, !dbg !25
  store <1 x float> %175, ptr addrspace(3) %18, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %176 = load float, ptr addrspace(3) %20, align 8, !dbg !25
  %177 = load float, ptr addrspace(3) %172, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %178 = fsub float %153, %152, !dbg !43
  %179 = fadd float %171, %173, !dbg !47
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !48
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %179) #3, !dbg !49
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !50
  %183 = fmul float %178, %182, !dbg !51
  %184 = fadd float %152, %183, !dbg !52
  %185 = fadd float %156, %157, !dbg !53
  %186 = fmul float %178, %178, !dbg !54
  %187 = fmul float %186, %171, !dbg !55
  %188 = fmul float %187, %182, !dbg !56
  %189 = fadd float %185, %188, !dbg !57
  %190 = fsub float %154, %184, !dbg !43
  %191 = fadd float %179, %176, !dbg !47
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !48
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %191) #3, !dbg !49
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !50
  %195 = fmul float %194, %190, !dbg !51
  %196 = fadd float %184, %195, !dbg !52
  %197 = fadd float %158, %189, !dbg !53
  %198 = fmul float %190, %190, !dbg !54
  %199 = fmul float %179, %198, !dbg !55
  %200 = fmul float %194, %199, !dbg !56
  %201 = fadd float %197, %200, !dbg !57
  %202 = fsub float %155, %196, !dbg !43
  %203 = fadd float %177, %191, !dbg !47
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !48
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %203) #3, !dbg !49
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !50
  %207 = fmul float %206, %202, !dbg !51
  %208 = fadd float %196, %207, !dbg !52
  %209 = fadd float %159, %201, !dbg !53
  %210 = fmul float %202, %202, !dbg !54
  %211 = fmul float %191, %210, !dbg !55
  %212 = fmul float %206, %211, !dbg !56
  %213 = fadd float %209, %212, !dbg !57
  %214 = bitcast float %208 to i32, !dbg !41
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !41
  %216 = bitcast i32 %215 to float, !dbg !41
  %217 = bitcast float %213 to i32, !dbg !41
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !41
  %219 = bitcast i32 %218 to float, !dbg !41
  %220 = bitcast float %203 to i32, !dbg !41
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !41
  %222 = bitcast i32 %221 to float, !dbg !41
  %223 = fsub float %216, %208, !dbg !43
  %224 = fadd float %203, %222, !dbg !47
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !48
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %224) #3, !dbg !49
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !50
  %228 = fmul float %227, %223, !dbg !51
  %229 = fadd float %208, %228, !dbg !52
  %230 = fadd float %213, %219, !dbg !53
  %231 = fmul float %223, %223, !dbg !54
  %232 = fmul float %203, %231, !dbg !55
  %233 = fmul float %227, %232, !dbg !56
  %234 = fadd float %230, %233, !dbg !57
  %235 = bitcast float %229 to i32, !dbg !41
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !41
  %237 = bitcast i32 %236 to float, !dbg !41
  %238 = bitcast float %234 to i32, !dbg !41
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !41
  %240 = bitcast i32 %239 to float, !dbg !41
  %241 = bitcast float %224 to i32, !dbg !41
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !41
  %243 = bitcast i32 %242 to float, !dbg !41
  %244 = fsub float %237, %229, !dbg !43
  %245 = fadd float %224, %243, !dbg !47
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !48
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %245) #3, !dbg !49
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !50
  %249 = fmul float %244, %248, !dbg !51
  %250 = fadd float %229, %249, !dbg !52
  %251 = fadd float %234, %240, !dbg !53
  %252 = fmul float %244, %244, !dbg !54
  %253 = fmul float %224, %252, !dbg !55
  %254 = fmul float %248, %253, !dbg !56
  %255 = fadd float %251, %254, !dbg !57
  %256 = bitcast float %250 to i32, !dbg !41
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !41
  %258 = bitcast i32 %257 to float, !dbg !41
  %259 = bitcast float %255 to i32, !dbg !41
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !41
  %261 = bitcast i32 %260 to float, !dbg !41
  %262 = bitcast float %245 to i32, !dbg !41
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !41
  %264 = bitcast i32 %263 to float, !dbg !41
  %265 = fsub float %258, %250, !dbg !43
  %266 = fadd float %245, %264, !dbg !47
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !48
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #3, !dbg !49
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !50
  %270 = fmul float %265, %269, !dbg !51
  %271 = fadd float %250, %270, !dbg !52
  %272 = fadd float %255, %261, !dbg !53
  %273 = fmul float %265, %265, !dbg !54
  %274 = fmul float %245, %273, !dbg !55
  %275 = fmul float %269, %274, !dbg !56
  %276 = fadd float %272, %275, !dbg !57
  %277 = bitcast float %271 to i32, !dbg !41
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !41
  %279 = bitcast i32 %278 to float, !dbg !41
  %280 = bitcast float %276 to i32, !dbg !41
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !41
  %282 = bitcast i32 %281 to float, !dbg !41
  %283 = bitcast float %266 to i32, !dbg !41
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !41
  %285 = bitcast i32 %284 to float, !dbg !41
  %286 = fsub float %279, %271, !dbg !43
  %287 = fadd float %266, %285, !dbg !47
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !48
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #3, !dbg !49
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !50
  %291 = fmul float %286, %290, !dbg !51
  %292 = fadd float %271, %291, !dbg !52
  %293 = fadd float %276, %282, !dbg !53
  %294 = fmul float %286, %286, !dbg !54
  %295 = fmul float %266, %294, !dbg !55
  %296 = fmul float %290, %295, !dbg !56
  %297 = fadd float %293, %296, !dbg !57
  %298 = bitcast float %292 to i32, !dbg !41
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !41
  %300 = bitcast i32 %299 to float, !dbg !41
  %301 = bitcast float %297 to i32, !dbg !41
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !41
  %303 = bitcast i32 %302 to float, !dbg !41
  %304 = bitcast float %287 to i32, !dbg !41
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 1, i32 31), !dbg !41
  %306 = bitcast i32 %305 to float, !dbg !41
  %307 = fsub float %300, %292, !dbg !43
  %308 = fadd float %287, %306, !dbg !47
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !48
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #3, !dbg !49
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !50
  %312 = fmul float %307, %311, !dbg !51
  %313 = fadd float %292, %312, !dbg !52
  %314 = fadd float %297, %303, !dbg !53
  %315 = fmul float %307, %307, !dbg !54
  %316 = fmul float %287, %315, !dbg !55
  %317 = fmul float %311, %316, !dbg !56
  %318 = fadd float %314, %317, !dbg !57
  %319 = icmp eq i32 %168, 0, !dbg !41
  %320 = zext nneg i32 %167 to i64, !dbg !41
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, float %313, i1 %319) #3, !dbg !41
  %322 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %320, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, float %318, i1 %319) #3, !dbg !41
  %323 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %320, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, float %308, i1 %319) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %324 = icmp slt i32 %5, 8, !dbg !41
  %325 = sext i32 %5 to i64, !dbg !41
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !41
  %327 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %326, i1 %324) #3, !dbg !41
  %328 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %325, !dbg !41
  %329 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %328, i1 %324) #3, !dbg !41
  %330 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %325, !dbg !41
  %331 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %330, i1 %324) #3, !dbg !41
  %332 = bitcast float %327 to i32, !dbg !41
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 4, i32 31), !dbg !41
  %334 = bitcast i32 %333 to float, !dbg !41
  %335 = bitcast float %329 to i32, !dbg !41
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 4, i32 31), !dbg !41
  %337 = bitcast i32 %336 to float, !dbg !41
  %338 = bitcast float %331 to i32, !dbg !41
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 4, i32 31), !dbg !41
  %340 = bitcast i32 %339 to float, !dbg !41
  %341 = fsub float %334, %327, !dbg !43
  %342 = fadd float %331, %340, !dbg !47
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !48
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %342) #3, !dbg !49
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !50
  %346 = fmul float %341, %345, !dbg !51
  %347 = fadd float %327, %346, !dbg !52
  %348 = fadd float %329, %337, !dbg !53
  %349 = fmul float %341, %341, !dbg !54
  %350 = fmul float %331, %349, !dbg !55
  %351 = fmul float %350, %345, !dbg !56
  %352 = fadd float %348, %351, !dbg !57
  %353 = bitcast float %347 to i32, !dbg !41
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 2, i32 31), !dbg !41
  %355 = bitcast i32 %354 to float, !dbg !41
  %356 = bitcast float %352 to i32, !dbg !41
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 2, i32 31), !dbg !41
  %358 = bitcast i32 %357 to float, !dbg !41
  %359 = bitcast float %342 to i32, !dbg !41
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 2, i32 31), !dbg !41
  %361 = bitcast i32 %360 to float, !dbg !41
  %362 = fsub float %355, %347, !dbg !43
  %363 = fadd float %342, %361, !dbg !47
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !48
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #3, !dbg !49
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !50
  %367 = fmul float %362, %366, !dbg !51
  %368 = fadd float %347, %367, !dbg !52
  %369 = fadd float %352, %358, !dbg !53
  %370 = fmul float %362, %362, !dbg !54
  %371 = fmul float %342, %370, !dbg !55
  %372 = fmul float %366, %371, !dbg !56
  %373 = fadd float %369, %372, !dbg !57
  %374 = bitcast float %368 to i32, !dbg !41
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !41
  %376 = bitcast i32 %375 to float, !dbg !41
  %377 = bitcast float %373 to i32, !dbg !41
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !41
  %379 = bitcast i32 %378 to float, !dbg !41
  %380 = bitcast float %363 to i32, !dbg !41
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 1, i32 31), !dbg !41
  %382 = bitcast i32 %381 to float, !dbg !41
  %383 = fsub float %376, %368, !dbg !43
  %384 = fadd float %363, %382, !dbg !47
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !48
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %384) #3, !dbg !49
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !50
  %388 = fmul float %383, %387, !dbg !51
  %389 = fadd float %368, %388, !dbg !52
  %390 = fadd float %373, %379, !dbg !53
  %391 = fmul float %383, %383, !dbg !54
  %392 = fmul float %363, %391, !dbg !55
  %393 = fmul float %387, %392, !dbg !56
  %394 = fadd float %390, %393, !dbg !57
  %395 = and i32 %5, 7, !dbg !41
  %396 = icmp eq i32 %395, 0, !dbg !41
  %397 = and i1 %324, %396, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, float %389, i1 %397) #3, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, float %394, i1 %397) #3, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, float %384, i1 %397) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %398 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !41
  %399 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %400 = insertelement <1 x float> undef, float %398, i64 0, !dbg !58
  store <1 x float> %400, ptr addrspace(3) @global_smem, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %401 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %402 = insertelement <1 x float> undef, float %399, i64 0, !dbg !59
  store <1 x float> %402, ptr addrspace(3) @global_smem, align 4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %403 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !59
  %404 = sext i32 %8 to i64, !dbg !60
  %405 = getelementptr float, ptr addrspace(1) %1, i64 %404, !dbg !60
  %406 = icmp eq i32 %urem, 0, !dbg !61
  %407 = and i1 %406, %9, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %401, ptr addrspace(1) %405, i1 %407) #3, !dbg !61
  %408 = getelementptr float, ptr addrspace(1) %2, i64 %404, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %403, ptr addrspace(1) %408, i1 %407) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cjnurs6kp75pzncq6t6h2r6yy6rzotarjsjur4xxhbyc4wrjm7qo.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/jn")
!3 = !{ptr @triton__0d1d2d3de4e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3de4e, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3de4e", linkageName: "triton__0d1d2d3de4e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 33, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 28, column: 20, scope: !5)
!12 = !DILocation(line: 38, column: 43, scope: !5)
!13 = !DILocation(line: 38, column: 68, scope: !5)
!14 = !DILocation(line: 34, column: 27, scope: !5)
!15 = !DILocation(line: 36, column: 22, scope: !5)
!16 = !DILocation(line: 37, column: 24, scope: !5)
!17 = !DILocation(line: 38, column: 54, scope: !5)
!18 = !DILocation(line: 38, column: 50, scope: !5)
!19 = !DILocation(line: 38, column: 61, scope: !5)
!20 = !DILocation(line: 38, column: 34, scope: !5)
!21 = !DILocation(line: 38, column: 74, scope: !5)
!22 = !DILocation(line: 38, column: 134, scope: !5)
!23 = !DILocation(line: 44, column: 60, scope: !5)
!24 = !DILocation(line: 46, column: 64, scope: !5)
!25 = !DILocation(line: 33, column: 36, scope: !5)
!26 = !DILocation(line: 35, column: 25, scope: !5)
!27 = !DILocation(line: 38, column: 82, scope: !5)
!28 = !DILocation(line: 110, column: 24, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !5, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!31 = !DILocation(line: 42, column: 51, scope: !29)
!32 = !DILocation(line: 111, column: 30, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 112, column: 34, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 112, column: 26, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 113, column: 39, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 113, column: 31, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 113, column: 22, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 45, column: 56, scope: !5)
!39 = distinct !{!39, !40}
!40 = !{!"llvm.loop.peeled.count", i32 1}
!41 = !DILocation(line: 131, column: 46, scope: !29, inlinedAt: !42)
!42 = !DILocation(line: 48, column: 41, scope: !29)
!43 = !DILocation(line: 119, column: 21, scope: !44, inlinedAt: !45)
!44 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!45 = !DILocation(line: 131, column: 46, scope: !44, inlinedAt: !46)
!46 = !DILocation(line: 48, column: 41, scope: !44)
!47 = !DILocation(line: 120, column: 28, scope: !44, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 39, scope: !44, inlinedAt: !45)
!49 = !DILocation(line: 121, column: 60, scope: !44, inlinedAt: !45)
!50 = !DILocation(line: 121, column: 49, scope: !44, inlinedAt: !45)
!51 = !DILocation(line: 123, column: 25, scope: !44, inlinedAt: !45)
!52 = !DILocation(line: 123, column: 17, scope: !44, inlinedAt: !45)
!53 = !DILocation(line: 124, column: 15, scope: !44, inlinedAt: !45)
!54 = !DILocation(line: 124, column: 30, scope: !44, inlinedAt: !45)
!55 = !DILocation(line: 124, column: 38, scope: !44, inlinedAt: !45)
!56 = !DILocation(line: 124, column: 49, scope: !44, inlinedAt: !45)
!57 = !DILocation(line: 124, column: 22, scope: !44, inlinedAt: !45)
!58 = !DILocation(line: 50, column: 20, scope: !5)
!59 = !DILocation(line: 51, column: 20, scope: !5)
!60 = !DILocation(line: 53, column: 25, scope: !5)
!61 = !DILocation(line: 53, column: 36, scope: !5)
!62 = !DILocation(line: 54, column: 25, scope: !5)
!63 = !DILocation(line: 54, column: 36, scope: !5)
!64 = !DILocation(line: 54, column: 4, scope: !5)
