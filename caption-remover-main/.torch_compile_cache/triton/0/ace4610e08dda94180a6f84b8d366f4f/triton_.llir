; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d78de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = and i32 %10, 31, !dbg !10
  %12 = lshr i32 %10, 5, !dbg !10
  %13 = and i32 %12, 7, !dbg !10
  %urem = shl i32 %10, 3, !dbg !10
  %14 = and i32 %urem, 2040, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = icmp slt i32 %15, %7, !dbg !12
  %17 = icmp ult i32 %14, 1280, !dbg !13
  %18 = mul i32 %15, 1280, !dbg !14
  %19 = add i32 %18, %14, !dbg !15
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr half, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = and i1 %17, %16, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %28 = trunc i32 %24 to i16, !dbg !18
  %29 = bitcast i16 %28 to half, !dbg !18
  %extelt.offset = lshr i32 %24, 16, !dbg !18
  %30 = trunc i32 %extelt.offset to i16, !dbg !18
  %31 = bitcast i16 %30 to half, !dbg !18
  %32 = trunc i32 %25 to i16, !dbg !18
  %33 = bitcast i16 %32 to half, !dbg !18
  %extelt.offset1 = lshr i32 %25, 16, !dbg !18
  %34 = trunc i32 %extelt.offset1 to i16, !dbg !18
  %35 = bitcast i16 %34 to half, !dbg !18
  %36 = trunc i32 %26 to i16, !dbg !18
  %37 = bitcast i16 %36 to half, !dbg !18
  %extelt.offset2 = lshr i32 %26, 16, !dbg !18
  %38 = trunc i32 %extelt.offset2 to i16, !dbg !18
  %39 = bitcast i16 %38 to half, !dbg !18
  %40 = trunc i32 %27 to i16, !dbg !18
  %41 = bitcast i16 %40 to half, !dbg !18
  %extelt.offset3 = lshr i32 %27, 16, !dbg !18
  %42 = trunc i32 %extelt.offset3 to i16, !dbg !18
  %43 = bitcast i16 %42 to half, !dbg !18
  %44 = fpext half %29 to float, !dbg !19
  %45 = fpext half %31 to float, !dbg !19
  %46 = fpext half %33 to float, !dbg !19
  %47 = fpext half %35 to float, !dbg !19
  %48 = fpext half %37 to float, !dbg !19
  %49 = fpext half %39 to float, !dbg !19
  %50 = fpext half %41 to float, !dbg !19
  %51 = fpext half %43 to float, !dbg !19
  %52 = zext nneg i32 %14 to i64, !dbg !20
  %53 = getelementptr half, ptr addrspace(1) %1, i64 %52, !dbg !20
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %extelt.offset4 = lshr i32 %55, 16, !dbg !21
  %extelt.offset5 = lshr i32 %56, 16, !dbg !21
  %extelt.offset6 = lshr i32 %57, 16, !dbg !21
  %extelt.offset7 = lshr i32 %58, 16, !dbg !21
  %59 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !21
  %60 = insertelement <2 x i32> %59, i32 %extelt.offset4, i64 1, !dbg !21
  %61 = trunc <2 x i32> %60 to <2 x i16>, !dbg !21
  %62 = bitcast <2 x i16> %61 to <2 x half>, !dbg !21
  %63 = fpext <2 x half> %62 to <2 x float>, !dbg !22
  %64 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !21
  %65 = insertelement <2 x i32> %64, i32 %extelt.offset5, i64 1, !dbg !21
  %66 = trunc <2 x i32> %65 to <2 x i16>, !dbg !21
  %67 = bitcast <2 x i16> %66 to <2 x half>, !dbg !21
  %68 = fpext <2 x half> %67 to <2 x float>, !dbg !22
  %69 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !21
  %70 = insertelement <2 x i32> %69, i32 %extelt.offset6, i64 1, !dbg !21
  %71 = trunc <2 x i32> %70 to <2 x i16>, !dbg !21
  %72 = bitcast <2 x i16> %71 to <2 x half>, !dbg !21
  %73 = fpext <2 x half> %72 to <2 x float>, !dbg !22
  %74 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !21
  %75 = insertelement <2 x i32> %74, i32 %extelt.offset7, i64 1, !dbg !21
  %76 = trunc <2 x i32> %75 to <2 x i16>, !dbg !21
  %77 = bitcast <2 x i16> %76 to <2 x half>, !dbg !21
  %78 = fpext <2 x half> %77 to <2 x float>, !dbg !22
  %79 = getelementptr half, ptr addrspace(1) %2, i64 %20, !dbg !23
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !24
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !24
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !24
  %85 = trunc i32 %81 to i16, !dbg !24
  %86 = bitcast i16 %85 to half, !dbg !24
  %extelt.offset8 = lshr i32 %81, 16, !dbg !24
  %87 = trunc i32 %extelt.offset8 to i16, !dbg !24
  %88 = bitcast i16 %87 to half, !dbg !24
  %89 = trunc i32 %82 to i16, !dbg !24
  %90 = bitcast i16 %89 to half, !dbg !24
  %extelt.offset9 = lshr i32 %82, 16, !dbg !24
  %91 = trunc i32 %extelt.offset9 to i16, !dbg !24
  %92 = bitcast i16 %91 to half, !dbg !24
  %93 = trunc i32 %83 to i16, !dbg !24
  %94 = bitcast i16 %93 to half, !dbg !24
  %extelt.offset10 = lshr i32 %83, 16, !dbg !24
  %95 = trunc i32 %extelt.offset10 to i16, !dbg !24
  %96 = bitcast i16 %95 to half, !dbg !24
  %97 = trunc i32 %84 to i16, !dbg !24
  %98 = bitcast i16 %97 to half, !dbg !24
  %extelt.offset11 = lshr i32 %84, 16, !dbg !24
  %99 = trunc i32 %extelt.offset11 to i16, !dbg !24
  %100 = bitcast i16 %99 to half, !dbg !24
  %101 = fpext half %86 to float, !dbg !25
  %102 = fpext half %88 to float, !dbg !25
  %103 = fpext half %90 to float, !dbg !25
  %104 = fpext half %92 to float, !dbg !25
  %105 = fpext half %94 to float, !dbg !25
  %106 = fpext half %96 to float, !dbg !25
  %107 = fpext half %98 to float, !dbg !25
  %108 = fpext half %100 to float, !dbg !25
  %109 = getelementptr half, ptr addrspace(1) %3, i64 %20, !dbg !26
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !27
  %115 = trunc i32 %111 to i16, !dbg !27
  %116 = bitcast i16 %115 to half, !dbg !27
  %extelt.offset12 = lshr i32 %111, 16, !dbg !27
  %117 = trunc i32 %extelt.offset12 to i16, !dbg !27
  %118 = bitcast i16 %117 to half, !dbg !27
  %119 = trunc i32 %112 to i16, !dbg !27
  %120 = bitcast i16 %119 to half, !dbg !27
  %extelt.offset13 = lshr i32 %112, 16, !dbg !27
  %121 = trunc i32 %extelt.offset13 to i16, !dbg !27
  %122 = bitcast i16 %121 to half, !dbg !27
  %123 = trunc i32 %113 to i16, !dbg !27
  %124 = bitcast i16 %123 to half, !dbg !27
  %extelt.offset14 = lshr i32 %113, 16, !dbg !27
  %125 = trunc i32 %extelt.offset14 to i16, !dbg !27
  %126 = bitcast i16 %125 to half, !dbg !27
  %127 = trunc i32 %114 to i16, !dbg !27
  %128 = bitcast i16 %127 to half, !dbg !27
  %extelt.offset15 = lshr i32 %114, 16, !dbg !27
  %129 = trunc i32 %extelt.offset15 to i16, !dbg !27
  %130 = bitcast i16 %129 to half, !dbg !27
  %131 = fpext half %116 to float, !dbg !28
  %132 = fpext half %118 to float, !dbg !28
  %133 = fpext half %120 to float, !dbg !28
  %134 = fpext half %122 to float, !dbg !28
  %135 = fpext half %124 to float, !dbg !28
  %136 = fpext half %126 to float, !dbg !28
  %137 = fpext half %128 to float, !dbg !28
  %138 = fpext half %130 to float, !dbg !28
  %139 = extractelement <2 x float> %63, i64 0, !dbg !29
  %140 = fadd float %139, %44, !dbg !29
  %141 = extractelement <2 x float> %63, i64 1, !dbg !29
  %142 = fadd float %141, %45, !dbg !29
  %143 = extractelement <2 x float> %68, i64 0, !dbg !29
  %144 = fadd float %143, %46, !dbg !29
  %145 = extractelement <2 x float> %68, i64 1, !dbg !29
  %146 = fadd float %145, %47, !dbg !29
  %147 = extractelement <2 x float> %73, i64 0, !dbg !29
  %148 = fadd float %147, %48, !dbg !29
  %149 = extractelement <2 x float> %73, i64 1, !dbg !29
  %150 = fadd float %149, %49, !dbg !29
  %151 = extractelement <2 x float> %78, i64 0, !dbg !29
  %152 = fadd float %151, %50, !dbg !29
  %153 = extractelement <2 x float> %78, i64 1, !dbg !29
  %154 = fadd float %153, %51, !dbg !29
  %155 = fmul float %101, 1.250000e-01, !dbg !30
  %156 = fmul float %102, 1.250000e-01, !dbg !30
  %157 = fmul float %103, 1.250000e-01, !dbg !30
  %158 = fmul float %104, 1.250000e-01, !dbg !30
  %159 = fmul float %105, 1.250000e-01, !dbg !30
  %160 = fmul float %106, 1.250000e-01, !dbg !30
  %161 = fmul float %107, 1.250000e-01, !dbg !30
  %162 = fmul float %108, 1.250000e-01, !dbg !30
  %163 = fadd float %140, %155, !dbg !31
  %164 = fadd float %142, %156, !dbg !31
  %165 = fadd float %144, %157, !dbg !31
  %166 = fadd float %146, %158, !dbg !31
  %167 = fadd float %148, %159, !dbg !31
  %168 = fadd float %150, %160, !dbg !31
  %169 = fadd float %152, %161, !dbg !31
  %170 = fadd float %154, %162, !dbg !31
  %171 = fadd float %163, %131, !dbg !32
  %172 = fadd float %164, %132, !dbg !32
  %173 = fadd float %165, %133, !dbg !32
  %174 = fadd float %166, %134, !dbg !32
  %175 = fadd float %167, %135, !dbg !32
  %176 = fadd float %168, %136, !dbg !32
  %177 = fadd float %169, %137, !dbg !32
  %178 = fadd float %170, %138, !dbg !32
  %179 = select i1 %22, float %171, float 0.000000e+00, !dbg !33
  %180 = select i1 %22, float %172, float 0.000000e+00, !dbg !33
  %181 = select i1 %22, float %173, float 0.000000e+00, !dbg !33
  %182 = select i1 %22, float %174, float 0.000000e+00, !dbg !33
  %183 = select i1 %22, float %175, float 0.000000e+00, !dbg !33
  %184 = select i1 %22, float %176, float 0.000000e+00, !dbg !33
  %185 = select i1 %22, float %177, float 0.000000e+00, !dbg !33
  %186 = select i1 %22, float %178, float 0.000000e+00, !dbg !33
  %187 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !34
  %188 = fsub float %180, %179, !dbg !35
  %189 = select i1 %22, float 2.000000e+00, float 0.000000e+00, !dbg !41
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !42
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %189) #6, !dbg !43
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !44
  %193 = fmul float %192, %188, !dbg !45
  %194 = fadd float %179, %193, !dbg !46
  %195 = fmul float %188, %188, !dbg !47
  %196 = fmul float %187, %195, !dbg !48
  %197 = fmul float %192, %196, !dbg !49
  %198 = fadd float %197, 0.000000e+00, !dbg !50
  %199 = fsub float %181, %194, !dbg !35
  %200 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !41
  %201 = fcmp oeq float %200, 0.000000e+00, !dbg !42
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %200) #6, !dbg !43
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !44
  %204 = fmul float %203, %199, !dbg !45
  %205 = fadd float %194, %204, !dbg !46
  %206 = fmul float %199, %199, !dbg !47
  %207 = fmul float %189, %206, !dbg !48
  %208 = fmul float %203, %207, !dbg !49
  %209 = fadd float %198, %208, !dbg !50
  %210 = fsub float %182, %205, !dbg !35
  %211 = select i1 %22, float 4.000000e+00, float 0.000000e+00, !dbg !41
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !42
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %211) #6, !dbg !43
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !44
  %215 = fmul float %214, %210, !dbg !45
  %216 = fadd float %205, %215, !dbg !46
  %217 = fmul float %210, %210, !dbg !47
  %218 = fmul float %200, %217, !dbg !48
  %219 = fmul float %214, %218, !dbg !49
  %220 = fadd float %209, %219, !dbg !50
  %221 = fsub float %183, %216, !dbg !35
  %222 = select i1 %22, float 5.000000e+00, float 0.000000e+00, !dbg !41
  %223 = fcmp oeq float %222, 0.000000e+00, !dbg !42
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %222) #6, !dbg !43
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !44
  %226 = fmul float %225, %221, !dbg !45
  %227 = fadd float %216, %226, !dbg !46
  %228 = fmul float %221, %221, !dbg !47
  %229 = fmul float %211, %228, !dbg !48
  %230 = fmul float %225, %229, !dbg !49
  %231 = fadd float %220, %230, !dbg !50
  %232 = fsub float %184, %227, !dbg !35
  %233 = select i1 %22, float 6.000000e+00, float 0.000000e+00, !dbg !41
  %234 = fcmp oeq float %233, 0.000000e+00, !dbg !42
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %233) #6, !dbg !43
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !44
  %237 = fmul float %236, %232, !dbg !45
  %238 = fadd float %227, %237, !dbg !46
  %239 = fmul float %232, %232, !dbg !47
  %240 = fmul float %222, %239, !dbg !48
  %241 = fmul float %236, %240, !dbg !49
  %242 = fadd float %231, %241, !dbg !50
  %243 = fsub float %185, %238, !dbg !35
  %244 = select i1 %22, float 7.000000e+00, float 0.000000e+00, !dbg !41
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !42
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %244) #6, !dbg !43
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !44
  %248 = fmul float %247, %243, !dbg !45
  %249 = fadd float %238, %248, !dbg !46
  %250 = fmul float %243, %243, !dbg !47
  %251 = fmul float %233, %250, !dbg !48
  %252 = fmul float %247, %251, !dbg !49
  %253 = fadd float %242, %252, !dbg !50
  %254 = fsub float %186, %249, !dbg !35
  %255 = select i1 %22, float 8.000000e+00, float 0.000000e+00, !dbg !41
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !42
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %255) #6, !dbg !43
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !44
  %259 = fmul float %258, %254, !dbg !45
  %260 = fadd float %249, %259, !dbg !46
  %261 = fmul float %254, %254, !dbg !47
  %262 = fmul float %244, %261, !dbg !48
  %263 = fmul float %258, %262, !dbg !49
  %264 = fadd float %253, %263, !dbg !50
  %265 = bitcast float %260 to i32, !dbg !51
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 16, i32 31), !dbg !51
  %267 = bitcast i32 %266 to float, !dbg !51
  %268 = bitcast float %264 to i32, !dbg !51
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 16, i32 31), !dbg !51
  %270 = bitcast i32 %269 to float, !dbg !51
  %271 = bitcast float %255 to i32, !dbg !51
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 16, i32 31), !dbg !51
  %273 = bitcast i32 %272 to float, !dbg !51
  %274 = fsub float %267, %260, !dbg !35
  %275 = fadd float %255, %273, !dbg !41
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !42
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float %275) #6, !dbg !43
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !44
  %279 = fmul float %278, %274, !dbg !45
  %280 = fadd float %260, %279, !dbg !46
  %281 = fadd float %264, %270, !dbg !53
  %282 = fmul float %274, %274, !dbg !47
  %283 = fmul float %255, %282, !dbg !48
  %284 = fmul float %278, %283, !dbg !49
  %285 = fadd float %281, %284, !dbg !50
  %286 = bitcast float %280 to i32, !dbg !51
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 8, i32 31), !dbg !51
  %288 = bitcast i32 %287 to float, !dbg !51
  %289 = bitcast float %285 to i32, !dbg !51
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 8, i32 31), !dbg !51
  %291 = bitcast i32 %290 to float, !dbg !51
  %292 = bitcast float %275 to i32, !dbg !51
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 8, i32 31), !dbg !51
  %294 = bitcast i32 %293 to float, !dbg !51
  %295 = fsub float %288, %280, !dbg !35
  %296 = fadd float %275, %294, !dbg !41
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !42
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float %296) #6, !dbg !43
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !44
  %300 = fmul float %299, %295, !dbg !45
  %301 = fadd float %280, %300, !dbg !46
  %302 = fadd float %285, %291, !dbg !53
  %303 = fmul float %295, %295, !dbg !47
  %304 = fmul float %275, %303, !dbg !48
  %305 = fmul float %299, %304, !dbg !49
  %306 = fadd float %302, %305, !dbg !50
  %307 = bitcast float %301 to i32, !dbg !51
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 4, i32 31), !dbg !51
  %309 = bitcast i32 %308 to float, !dbg !51
  %310 = bitcast float %306 to i32, !dbg !51
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 4, i32 31), !dbg !51
  %312 = bitcast i32 %311 to float, !dbg !51
  %313 = bitcast float %296 to i32, !dbg !51
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 4, i32 31), !dbg !51
  %315 = bitcast i32 %314 to float, !dbg !51
  %316 = fsub float %309, %301, !dbg !35
  %317 = fadd float %296, %315, !dbg !41
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !42
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %317) #6, !dbg !43
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !44
  %321 = fmul float %320, %316, !dbg !45
  %322 = fadd float %301, %321, !dbg !46
  %323 = fadd float %306, %312, !dbg !53
  %324 = fmul float %316, %316, !dbg !47
  %325 = fmul float %296, %324, !dbg !48
  %326 = fmul float %320, %325, !dbg !49
  %327 = fadd float %323, %326, !dbg !50
  %328 = bitcast float %322 to i32, !dbg !51
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !51
  %330 = bitcast i32 %329 to float, !dbg !51
  %331 = bitcast float %327 to i32, !dbg !51
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 2, i32 31), !dbg !51
  %333 = bitcast i32 %332 to float, !dbg !51
  %334 = bitcast float %317 to i32, !dbg !51
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 2, i32 31), !dbg !51
  %336 = bitcast i32 %335 to float, !dbg !51
  %337 = fsub float %330, %322, !dbg !35
  %338 = fadd float %317, %336, !dbg !41
  %339 = fcmp oeq float %338, 0.000000e+00, !dbg !42
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %336, float %338) #6, !dbg !43
  %341 = select i1 %339, float 0.000000e+00, float %340, !dbg !44
  %342 = fmul float %341, %337, !dbg !45
  %343 = fadd float %322, %342, !dbg !46
  %344 = fadd float %327, %333, !dbg !53
  %345 = fmul float %337, %337, !dbg !47
  %346 = fmul float %317, %345, !dbg !48
  %347 = fmul float %341, %346, !dbg !49
  %348 = fadd float %344, %347, !dbg !50
  %349 = bitcast float %343 to i32, !dbg !51
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 1, i32 31), !dbg !51
  %351 = bitcast i32 %350 to float, !dbg !51
  %352 = bitcast float %348 to i32, !dbg !51
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 1, i32 31), !dbg !51
  %354 = bitcast i32 %353 to float, !dbg !51
  %355 = bitcast float %338 to i32, !dbg !51
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 1, i32 31), !dbg !51
  %357 = bitcast i32 %356 to float, !dbg !51
  %358 = fsub float %351, %343, !dbg !35
  %359 = fadd float %338, %357, !dbg !41
  %360 = fcmp oeq float %359, 0.000000e+00, !dbg !42
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float %359) #6, !dbg !43
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !44
  %363 = fmul float %362, %358, !dbg !45
  %364 = fadd float %343, %363, !dbg !46
  %365 = fadd float %348, %354, !dbg !53
  %366 = fmul float %358, %358, !dbg !47
  %367 = fmul float %338, %366, !dbg !48
  %368 = fmul float %362, %367, !dbg !49
  %369 = fadd float %365, %368, !dbg !50
  %370 = icmp eq i32 %11, 0, !dbg !51
  %371 = zext nneg i32 %13 to i64, !dbg !51
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i64 %371, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, float %364, i1 %370) #6, !dbg !51
  %373 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %371, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, float %369, i1 %370) #6, !dbg !51
  %374 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %371, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, float %359, i1 %370) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %375 = icmp slt i32 %10, 8, !dbg !51
  %376 = sext i32 %10 to i64, !dbg !51
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i64 %376, !dbg !51
  %378 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %377, i1 %375) #6, !dbg !51
  %379 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %376, !dbg !51
  %380 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %379, i1 %375) #6, !dbg !51
  %381 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %376, !dbg !51
  %382 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %381, i1 %375) #6, !dbg !51
  %383 = bitcast float %378 to i32, !dbg !51
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 4, i32 31), !dbg !51
  %385 = bitcast i32 %384 to float, !dbg !51
  %386 = bitcast float %380 to i32, !dbg !51
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 4, i32 31), !dbg !51
  %388 = bitcast i32 %387 to float, !dbg !51
  %389 = bitcast float %382 to i32, !dbg !51
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 4, i32 31), !dbg !51
  %391 = bitcast i32 %390 to float, !dbg !51
  %392 = fsub float %385, %378, !dbg !35
  %393 = fadd float %382, %391, !dbg !41
  %394 = fcmp oeq float %393, 0.000000e+00, !dbg !42
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float %393) #6, !dbg !43
  %396 = select i1 %394, float 0.000000e+00, float %395, !dbg !44
  %397 = fmul float %392, %396, !dbg !45
  %398 = fadd float %378, %397, !dbg !46
  %399 = fadd float %380, %388, !dbg !53
  %400 = fmul float %392, %392, !dbg !47
  %401 = fmul float %382, %400, !dbg !48
  %402 = fmul float %401, %396, !dbg !49
  %403 = fadd float %399, %402, !dbg !50
  %404 = bitcast float %398 to i32, !dbg !51
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 2, i32 31), !dbg !51
  %406 = bitcast i32 %405 to float, !dbg !51
  %407 = bitcast float %403 to i32, !dbg !51
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !51
  %409 = bitcast i32 %408 to float, !dbg !51
  %410 = bitcast float %393 to i32, !dbg !51
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 2, i32 31), !dbg !51
  %412 = bitcast i32 %411 to float, !dbg !51
  %413 = fsub float %406, %398, !dbg !35
  %414 = fadd float %393, %412, !dbg !41
  %415 = fcmp oeq float %414, 0.000000e+00, !dbg !42
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %412, float %414) #6, !dbg !43
  %417 = select i1 %415, float 0.000000e+00, float %416, !dbg !44
  %418 = fmul float %413, %417, !dbg !45
  %419 = fadd float %398, %418, !dbg !46
  %420 = fadd float %403, %409, !dbg !53
  %421 = fmul float %413, %413, !dbg !47
  %422 = fmul float %393, %421, !dbg !48
  %423 = fmul float %417, %422, !dbg !49
  %424 = fadd float %420, %423, !dbg !50
  %425 = bitcast float %419 to i32, !dbg !51
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 1, i32 31), !dbg !51
  %427 = bitcast i32 %426 to float, !dbg !51
  %428 = bitcast float %424 to i32, !dbg !51
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 1, i32 31), !dbg !51
  %430 = bitcast i32 %429 to float, !dbg !51
  %431 = bitcast float %414 to i32, !dbg !51
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 1, i32 31), !dbg !51
  %433 = bitcast i32 %432 to float, !dbg !51
  %434 = fsub float %427, %419, !dbg !35
  %435 = fadd float %414, %433, !dbg !41
  %436 = fcmp oeq float %435, 0.000000e+00, !dbg !42
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float %435) #6, !dbg !43
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !44
  %439 = fmul float %434, %438, !dbg !45
  %440 = fadd float %419, %439, !dbg !46
  %441 = fadd float %424, %430, !dbg !53
  %442 = fmul float %434, %434, !dbg !47
  %443 = fmul float %414, %442, !dbg !48
  %444 = fmul float %438, %443, !dbg !49
  %445 = fadd float %441, %444, !dbg !50
  %446 = and i32 %10, 7, !dbg !51
  %447 = icmp eq i32 %446, 0, !dbg !51
  %448 = and i1 %375, %447, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, float %440, i1 %448) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, float %445, i1 %448) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, float %435, i1 %448) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %449 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !51
  %450 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !51
  %451 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !54
  %452 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !55
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !56
  %454 = getelementptr half, ptr addrspace(1) %4, i64 %52, !dbg !57
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %454, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !58
  %456 = getelementptr half, ptr addrspace(1) %5, i64 %52, !dbg !59
  %457 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %456, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !60
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float 1.280000e+03) #6, !dbg !61
  %466 = fadd float %458, 0x3EE4F8B580000000, !dbg !62
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %.not.i = icmp eq i32 %467, 0, !dbg !63
  br i1 %.not.i, label %470, label %468, !dbg !63

468:                                              ; preds = %9
  %469 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %466), !dbg !63
  br label %__nv_rsqrtf.exit, !dbg !63

470:                                              ; preds = %9
  %471 = tail call float @llvm.nvvm.rsqrt.approx.f(float %466), !dbg !63
  br label %__nv_rsqrtf.exit, !dbg !63

__nv_rsqrtf.exit:                                 ; preds = %468, %470
  %.0.i = phi float [ %469, %468 ], [ %471, %470 ], !dbg !63
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !63
  %479 = extractvalue { i32, i32, i32, i32 } %451, 3, !dbg !54
  %extelt.offset19 = lshr i32 %479, 16, !dbg !54
  %480 = extractvalue { i32, i32, i32, i32 } %452, 3, !dbg !55
  %extelt.offset23 = lshr i32 %480, 16, !dbg !55
  %481 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !56
  %extelt.offset27 = lshr i32 %481, 16, !dbg !56
  %482 = extractvalue { i32, i32, i32, i32 } %451, 2, !dbg !54
  %extelt.offset18 = lshr i32 %482, 16, !dbg !54
  %483 = extractvalue { i32, i32, i32, i32 } %452, 2, !dbg !55
  %extelt.offset22 = lshr i32 %483, 16, !dbg !55
  %484 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !56
  %extelt.offset26 = lshr i32 %484, 16, !dbg !56
  %485 = extractvalue { i32, i32, i32, i32 } %451, 1, !dbg !54
  %extelt.offset17 = lshr i32 %485, 16, !dbg !54
  %486 = extractvalue { i32, i32, i32, i32 } %452, 1, !dbg !55
  %extelt.offset21 = lshr i32 %486, 16, !dbg !55
  %487 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !56
  %extelt.offset25 = lshr i32 %487, 16, !dbg !56
  %488 = extractvalue { i32, i32, i32, i32 } %451, 0, !dbg !54
  %extelt.offset16 = lshr i32 %488, 16, !dbg !54
  %489 = extractvalue { i32, i32, i32, i32 } %452, 0, !dbg !55
  %extelt.offset20 = lshr i32 %489, 16, !dbg !55
  %490 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !56
  %extelt.offset24 = lshr i32 %490, 16, !dbg !56
  %491 = extractvalue { i32, i32, i32, i32 } %457, 3, !dbg !60
  %extelt.offset35 = lshr i32 %491, 16, !dbg !60
  %492 = extractvalue { i32, i32, i32, i32 } %457, 2, !dbg !60
  %extelt.offset34 = lshr i32 %492, 16, !dbg !60
  %493 = extractvalue { i32, i32, i32, i32 } %457, 1, !dbg !60
  %extelt.offset33 = lshr i32 %493, 16, !dbg !60
  %494 = extractvalue { i32, i32, i32, i32 } %457, 0, !dbg !60
  %extelt.offset32 = lshr i32 %494, 16, !dbg !60
  %495 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !58
  %extelt.offset31 = lshr i32 %495, 16, !dbg !58
  %496 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !58
  %extelt.offset30 = lshr i32 %496, 16, !dbg !58
  %497 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !58
  %extelt.offset29 = lshr i32 %497, 16, !dbg !58
  %498 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !58
  %extelt.offset28 = lshr i32 %498, 16, !dbg !58
  %499 = getelementptr half, ptr addrspace(1) %6, i64 %20, !dbg !64
  %500 = insertelement <2 x i32> poison, i32 %488, i64 0, !dbg !54
  %501 = insertelement <2 x i32> %500, i32 %extelt.offset16, i64 1, !dbg !54
  %502 = trunc <2 x i32> %501 to <2 x i16>, !dbg !54
  %503 = bitcast <2 x i16> %502 to <2 x half>, !dbg !54
  %504 = fpext <2 x half> %503 to <2 x float>, !dbg !65
  %505 = fadd <2 x float> %63, %504, !dbg !66
  %506 = insertelement <2 x i32> poison, i32 %489, i64 0, !dbg !55
  %507 = insertelement <2 x i32> %506, i32 %extelt.offset20, i64 1, !dbg !55
  %508 = trunc <2 x i32> %507 to <2 x i16>, !dbg !55
  %509 = bitcast <2 x i16> %508 to <2 x half>, !dbg !55
  %510 = fpext <2 x half> %509 to <2 x float>, !dbg !67
  %511 = fmul <2 x float> %510, <float 1.250000e-01, float 1.250000e-01>, !dbg !68
  %512 = fadd <2 x float> %505, %511, !dbg !69
  %513 = insertelement <2 x i32> poison, i32 %490, i64 0, !dbg !56
  %514 = insertelement <2 x i32> %513, i32 %extelt.offset24, i64 1, !dbg !56
  %515 = trunc <2 x i32> %514 to <2 x i16>, !dbg !56
  %516 = bitcast <2 x i16> %515 to <2 x half>, !dbg !56
  %517 = fpext <2 x half> %516 to <2 x float>, !dbg !70
  %518 = fadd <2 x float> %512, %517, !dbg !71
  %519 = insertelement <2 x float> poison, float %449, i64 0, !dbg !72
  %520 = shufflevector <2 x float> %519, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %521 = fsub <2 x float> %518, %520, !dbg !72
  %522 = insertelement <2 x i32> poison, i32 %494, i64 0, !dbg !60
  %523 = insertelement <2 x i32> %522, i32 %extelt.offset32, i64 1, !dbg !60
  %524 = trunc <2 x i32> %523 to <2 x i16>, !dbg !60
  %525 = bitcast <2 x i16> %524 to <2 x half>, !dbg !60
  %526 = fpext <2 x half> %525 to <2 x float>, !dbg !73
  %527 = insertelement <2 x i32> poison, i32 %498, i64 0, !dbg !58
  %528 = insertelement <2 x i32> %527, i32 %extelt.offset28, i64 1, !dbg !58
  %529 = trunc <2 x i32> %528 to <2 x i16>, !dbg !58
  %530 = bitcast <2 x i16> %529 to <2 x half>, !dbg !58
  %531 = fpext <2 x half> %530 to <2 x float>, !dbg !74
  %532 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !75
  %533 = shufflevector <2 x float> %532, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !75
  %534 = fmul <2 x float> %521, %533, !dbg !75
  %535 = fmul <2 x float> %534, %531, !dbg !76
  %536 = fadd <2 x float> %535, %526, !dbg !77
  %537 = fptrunc <2 x float> %536 to <2 x half>, !dbg !78
  %538 = insertelement <2 x i32> poison, i32 %485, i64 0, !dbg !54
  %539 = insertelement <2 x i32> %538, i32 %extelt.offset17, i64 1, !dbg !54
  %540 = trunc <2 x i32> %539 to <2 x i16>, !dbg !54
  %541 = bitcast <2 x i16> %540 to <2 x half>, !dbg !54
  %542 = fpext <2 x half> %541 to <2 x float>, !dbg !65
  %543 = fadd <2 x float> %68, %542, !dbg !66
  %544 = insertelement <2 x i32> poison, i32 %486, i64 0, !dbg !55
  %545 = insertelement <2 x i32> %544, i32 %extelt.offset21, i64 1, !dbg !55
  %546 = trunc <2 x i32> %545 to <2 x i16>, !dbg !55
  %547 = bitcast <2 x i16> %546 to <2 x half>, !dbg !55
  %548 = fpext <2 x half> %547 to <2 x float>, !dbg !67
  %549 = fmul <2 x float> %548, <float 1.250000e-01, float 1.250000e-01>, !dbg !68
  %550 = fadd <2 x float> %543, %549, !dbg !69
  %551 = insertelement <2 x i32> poison, i32 %487, i64 0, !dbg !56
  %552 = insertelement <2 x i32> %551, i32 %extelt.offset25, i64 1, !dbg !56
  %553 = trunc <2 x i32> %552 to <2 x i16>, !dbg !56
  %554 = bitcast <2 x i16> %553 to <2 x half>, !dbg !56
  %555 = fpext <2 x half> %554 to <2 x float>, !dbg !70
  %556 = fadd <2 x float> %550, %555, !dbg !71
  %557 = fsub <2 x float> %556, %520, !dbg !72
  %558 = insertelement <2 x i32> poison, i32 %493, i64 0, !dbg !60
  %559 = insertelement <2 x i32> %558, i32 %extelt.offset33, i64 1, !dbg !60
  %560 = trunc <2 x i32> %559 to <2 x i16>, !dbg !60
  %561 = bitcast <2 x i16> %560 to <2 x half>, !dbg !60
  %562 = fpext <2 x half> %561 to <2 x float>, !dbg !73
  %563 = insertelement <2 x i32> poison, i32 %497, i64 0, !dbg !58
  %564 = insertelement <2 x i32> %563, i32 %extelt.offset29, i64 1, !dbg !58
  %565 = trunc <2 x i32> %564 to <2 x i16>, !dbg !58
  %566 = bitcast <2 x i16> %565 to <2 x half>, !dbg !58
  %567 = fpext <2 x half> %566 to <2 x float>, !dbg !74
  %568 = fmul <2 x float> %557, %533, !dbg !75
  %569 = fmul <2 x float> %568, %567, !dbg !76
  %570 = fadd <2 x float> %569, %562, !dbg !77
  %571 = fptrunc <2 x float> %570 to <2 x half>, !dbg !78
  %572 = insertelement <2 x i32> poison, i32 %482, i64 0, !dbg !54
  %573 = insertelement <2 x i32> %572, i32 %extelt.offset18, i64 1, !dbg !54
  %574 = trunc <2 x i32> %573 to <2 x i16>, !dbg !54
  %575 = bitcast <2 x i16> %574 to <2 x half>, !dbg !54
  %576 = fpext <2 x half> %575 to <2 x float>, !dbg !65
  %577 = fadd <2 x float> %73, %576, !dbg !66
  %578 = insertelement <2 x i32> poison, i32 %483, i64 0, !dbg !55
  %579 = insertelement <2 x i32> %578, i32 %extelt.offset22, i64 1, !dbg !55
  %580 = trunc <2 x i32> %579 to <2 x i16>, !dbg !55
  %581 = bitcast <2 x i16> %580 to <2 x half>, !dbg !55
  %582 = fpext <2 x half> %581 to <2 x float>, !dbg !67
  %583 = fmul <2 x float> %582, <float 1.250000e-01, float 1.250000e-01>, !dbg !68
  %584 = fadd <2 x float> %577, %583, !dbg !69
  %585 = insertelement <2 x i32> poison, i32 %484, i64 0, !dbg !56
  %586 = insertelement <2 x i32> %585, i32 %extelt.offset26, i64 1, !dbg !56
  %587 = trunc <2 x i32> %586 to <2 x i16>, !dbg !56
  %588 = bitcast <2 x i16> %587 to <2 x half>, !dbg !56
  %589 = fpext <2 x half> %588 to <2 x float>, !dbg !70
  %590 = fadd <2 x float> %584, %589, !dbg !71
  %591 = fsub <2 x float> %590, %520, !dbg !72
  %592 = insertelement <2 x i32> poison, i32 %492, i64 0, !dbg !60
  %593 = insertelement <2 x i32> %592, i32 %extelt.offset34, i64 1, !dbg !60
  %594 = trunc <2 x i32> %593 to <2 x i16>, !dbg !60
  %595 = bitcast <2 x i16> %594 to <2 x half>, !dbg !60
  %596 = fpext <2 x half> %595 to <2 x float>, !dbg !73
  %597 = insertelement <2 x i32> poison, i32 %496, i64 0, !dbg !58
  %598 = insertelement <2 x i32> %597, i32 %extelt.offset30, i64 1, !dbg !58
  %599 = trunc <2 x i32> %598 to <2 x i16>, !dbg !58
  %600 = bitcast <2 x i16> %599 to <2 x half>, !dbg !58
  %601 = fpext <2 x half> %600 to <2 x float>, !dbg !74
  %602 = fmul <2 x float> %591, %533, !dbg !75
  %603 = fmul <2 x float> %602, %601, !dbg !76
  %604 = fadd <2 x float> %603, %596, !dbg !77
  %605 = fptrunc <2 x float> %604 to <2 x half>, !dbg !78
  %606 = insertelement <2 x i32> poison, i32 %479, i64 0, !dbg !54
  %607 = insertelement <2 x i32> %606, i32 %extelt.offset19, i64 1, !dbg !54
  %608 = trunc <2 x i32> %607 to <2 x i16>, !dbg !54
  %609 = bitcast <2 x i16> %608 to <2 x half>, !dbg !54
  %610 = fpext <2 x half> %609 to <2 x float>, !dbg !65
  %611 = fadd <2 x float> %78, %610, !dbg !66
  %612 = insertelement <2 x i32> poison, i32 %480, i64 0, !dbg !55
  %613 = insertelement <2 x i32> %612, i32 %extelt.offset23, i64 1, !dbg !55
  %614 = trunc <2 x i32> %613 to <2 x i16>, !dbg !55
  %615 = bitcast <2 x i16> %614 to <2 x half>, !dbg !55
  %616 = fpext <2 x half> %615 to <2 x float>, !dbg !67
  %617 = fmul <2 x float> %616, <float 1.250000e-01, float 1.250000e-01>, !dbg !68
  %618 = fadd <2 x float> %611, %617, !dbg !69
  %619 = insertelement <2 x i32> poison, i32 %481, i64 0, !dbg !56
  %620 = insertelement <2 x i32> %619, i32 %extelt.offset27, i64 1, !dbg !56
  %621 = trunc <2 x i32> %620 to <2 x i16>, !dbg !56
  %622 = bitcast <2 x i16> %621 to <2 x half>, !dbg !56
  %623 = fpext <2 x half> %622 to <2 x float>, !dbg !70
  %624 = fadd <2 x float> %618, %623, !dbg !71
  %625 = fsub <2 x float> %624, %520, !dbg !72
  %626 = insertelement <2 x i32> poison, i32 %491, i64 0, !dbg !60
  %627 = insertelement <2 x i32> %626, i32 %extelt.offset35, i64 1, !dbg !60
  %628 = trunc <2 x i32> %627 to <2 x i16>, !dbg !60
  %629 = bitcast <2 x i16> %628 to <2 x half>, !dbg !60
  %630 = fpext <2 x half> %629 to <2 x float>, !dbg !73
  %631 = insertelement <2 x i32> poison, i32 %495, i64 0, !dbg !58
  %632 = insertelement <2 x i32> %631, i32 %extelt.offset31, i64 1, !dbg !58
  %633 = trunc <2 x i32> %632 to <2 x i16>, !dbg !58
  %634 = bitcast <2 x i16> %633 to <2 x half>, !dbg !58
  %635 = fpext <2 x half> %634 to <2 x float>, !dbg !74
  %636 = fmul <2 x float> %625, %533, !dbg !75
  %637 = fmul <2 x float> %636, %635, !dbg !76
  %638 = fadd <2 x float> %637, %630, !dbg !77
  %639 = fptrunc <2 x float> %638 to <2 x half>, !dbg !78
  %640 = bitcast <2 x half> %537 to i32, !dbg !78
  %641 = bitcast <2 x half> %571 to i32, !dbg !78
  %642 = bitcast <2 x half> %605 to i32, !dbg !78
  %643 = bitcast <2 x half> %639 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %640, i32 %641, i32 %642, i32 %643, ptr addrspace(1) %499, i1 %22) #6, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c7gjlsraophn6gr2fp7qrdalq3kect5huapgzcsyggee3yyt3bgn.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/7g")
!4 = !{ptr @triton__0d1d2d3d4d5d6d78de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d78de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d78de", linkageName: "triton__0d1d2d3d4d5d6d78de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 25, scope: !7)
!14 = !DILocation(line: 34, column: 45, scope: !7)
!15 = !DILocation(line: 34, column: 40, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 59, scope: !7)
!18 = !DILocation(line: 34, column: 51, scope: !7)
!19 = !DILocation(line: 34, column: 110, scope: !7)
!20 = !DILocation(line: 35, column: 34, scope: !7)
!21 = !DILocation(line: 35, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 90, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 51, scope: !7)
!25 = !DILocation(line: 36, column: 110, scope: !7)
!26 = !DILocation(line: 37, column: 34, scope: !7)
!27 = !DILocation(line: 37, column: 51, scope: !7)
!28 = !DILocation(line: 37, column: 110, scope: !7)
!29 = !DILocation(line: 38, column: 22, scope: !7)
!30 = !DILocation(line: 40, column: 22, scope: !7)
!31 = !DILocation(line: 41, column: 22, scope: !7)
!32 = !DILocation(line: 44, column: 23, scope: !7)
!33 = !DILocation(line: 50, column: 62, scope: !7)
!34 = !DILocation(line: 52, column: 66, scope: !7)
!35 = !DILocation(line: 119, column: 21, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 131, column: 46, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 54, column: 44, scope: !36)
!41 = !DILocation(line: 120, column: 28, scope: !36, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 39, scope: !36, inlinedAt: !39)
!43 = !DILocation(line: 121, column: 60, scope: !36, inlinedAt: !39)
!44 = !DILocation(line: 121, column: 49, scope: !36, inlinedAt: !39)
!45 = !DILocation(line: 123, column: 25, scope: !36, inlinedAt: !39)
!46 = !DILocation(line: 123, column: 17, scope: !36, inlinedAt: !39)
!47 = !DILocation(line: 124, column: 30, scope: !36, inlinedAt: !39)
!48 = !DILocation(line: 124, column: 38, scope: !36, inlinedAt: !39)
!49 = !DILocation(line: 124, column: 49, scope: !36, inlinedAt: !39)
!50 = !DILocation(line: 124, column: 22, scope: !36, inlinedAt: !39)
!51 = !DILocation(line: 131, column: 46, scope: !38, inlinedAt: !52)
!52 = !DILocation(line: 54, column: 44, scope: !38)
!53 = !DILocation(line: 124, column: 15, scope: !36, inlinedAt: !39)
!54 = !DILocation(line: 63, column: 52, scope: !7)
!55 = !DILocation(line: 65, column: 52, scope: !7)
!56 = !DILocation(line: 66, column: 52, scope: !7)
!57 = !DILocation(line: 67, column: 35, scope: !7)
!58 = !DILocation(line: 67, column: 40, scope: !7)
!59 = !DILocation(line: 68, column: 35, scope: !7)
!60 = !DILocation(line: 68, column: 40, scope: !7)
!61 = !DILocation(line: 79, column: 24, scope: !7)
!62 = !DILocation(line: 81, column: 24, scope: !7)
!63 = !DILocation(line: 82, column: 32, scope: !7)
!64 = !DILocation(line: 89, column: 29, scope: !7)
!65 = !DILocation(line: 63, column: 112, scope: !7)
!66 = !DILocation(line: 69, column: 24, scope: !7)
!67 = !DILocation(line: 65, column: 112, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 24, scope: !7)
!70 = !DILocation(line: 66, column: 112, scope: !7)
!71 = !DILocation(line: 75, column: 24, scope: !7)
!72 = !DILocation(line: 77, column: 24, scope: !7)
!73 = !DILocation(line: 68, column: 91, scope: !7)
!74 = !DILocation(line: 67, column: 91, scope: !7)
!75 = !DILocation(line: 83, column: 24, scope: !7)
!76 = !DILocation(line: 85, column: 24, scope: !7)
!77 = !DILocation(line: 87, column: 24, scope: !7)
!78 = !DILocation(line: 89, column: 53, scope: !7)
!79 = !DILocation(line: 59, column: 4, scope: !7)
