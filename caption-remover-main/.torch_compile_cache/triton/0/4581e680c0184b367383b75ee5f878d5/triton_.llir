; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 127, !dbg !9
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %13 = add i32 %12, 1, !dbg !12
  %14 = shl i32 %11, 2, !dbg !13
  %15 = mul i32 %14, %13, !dbg !14
  %16 = or i32 %15, 1, !dbg !15
  %17 = or i32 %15, 2, !dbg !15
  %18 = or i32 %15, 3, !dbg !15
  %19 = icmp slt i32 %15, 28160, !dbg !16
  %20 = icmp slt i32 %16, 28160, !dbg !16
  %21 = icmp slt i32 %17, 28160, !dbg !16
  %22 = icmp slt i32 %18, 28160, !dbg !16
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %24 = shl i32 %23, 8, !dbg !18
  %25 = or i32 %24, %10, !dbg !19
  %26 = or i32 %25, 128, !dbg !19
  %27 = icmp slt i32 %25, %7, !dbg !20
  %28 = icmp slt i32 %26, %7, !dbg !20
  %29 = srem i32 %15, 1280, !dbg !21
  %30 = srem i32 %16, 1280, !dbg !21
  %31 = srem i32 %17, 1280, !dbg !21
  %32 = srem i32 %18, 1280, !dbg !21
  %33 = mul i32 %25, 28160, !dbg !22
  %34 = mul i32 %26, 28160, !dbg !22
  %35 = add i32 %33, %15, !dbg !23
  %36 = add i32 %15, %34, !dbg !23
  %37 = sext i32 %35 to i64, !dbg !24
  %38 = getelementptr half, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %36 to i64, !dbg !24
  %40 = getelementptr half, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = and i1 %19, %27, !dbg !25
  %42 = and i1 %28, %19, !dbg !25
  %43 = and i1 %27, %20, !dbg !25
  %44 = and i1 %28, %20, !dbg !25
  %45 = and i1 %27, %21, !dbg !25
  %46 = and i1 %28, %21, !dbg !25
  %47 = and i1 %27, %22, !dbg !25
  %48 = and i1 %28, %22, !dbg !25
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %41) #2, !dbg !26
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %52 = trunc i32 %50 to i16, !dbg !26
  %extelt.offset = lshr i32 %50, 16, !dbg !26
  %53 = trunc i32 %extelt.offset to i16, !dbg !26
  %54 = trunc i32 %51 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %51, 16, !dbg !26
  %55 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %42) #2, !dbg !26
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !26
  %59 = trunc i32 %57 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %57, 16, !dbg !26
  %60 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %61 = trunc i32 %58 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %58, 16, !dbg !26
  %62 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %63 = zext nneg i32 %10 to i64, !dbg !27
  %64 = getelementptr half, ptr addrspace(3) @global_smem, i64 %63, !dbg !27
  store i16 %52, ptr addrspace(3) %64, align 2, !dbg !27
  %65 = add nuw nsw i32 %10, 129, !dbg !27
  %66 = zext nneg i32 %65 to i64, !dbg !27
  %67 = getelementptr half, ptr addrspace(3) @global_smem, i64 %66, !dbg !27
  store i16 %53, ptr addrspace(3) %67, align 2, !dbg !27
  %68 = add nuw nsw i32 %10, 258, !dbg !27
  %69 = zext nneg i32 %68 to i64, !dbg !27
  %70 = getelementptr half, ptr addrspace(3) @global_smem, i64 %69, !dbg !27
  store i16 %54, ptr addrspace(3) %70, align 2, !dbg !27
  %71 = add nuw nsw i32 %10, 387, !dbg !27
  %72 = zext nneg i32 %71 to i64, !dbg !27
  %73 = getelementptr half, ptr addrspace(3) @global_smem, i64 %72, !dbg !27
  store i16 %55, ptr addrspace(3) %73, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %74 = load half, ptr addrspace(3) %64, align 2, !dbg !27
  %75 = load half, ptr addrspace(3) %67, align 2, !dbg !27
  %76 = load half, ptr addrspace(3) %70, align 2, !dbg !27
  %77 = load half, ptr addrspace(3) %73, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  store i16 %59, ptr addrspace(3) %64, align 2, !dbg !27
  store i16 %60, ptr addrspace(3) %67, align 2, !dbg !27
  store i16 %61, ptr addrspace(3) %70, align 2, !dbg !27
  store i16 %62, ptr addrspace(3) %73, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %78 = load half, ptr addrspace(3) %64, align 2, !dbg !27
  %79 = load half, ptr addrspace(3) %67, align 2, !dbg !27
  %80 = load half, ptr addrspace(3) %70, align 2, !dbg !27
  %81 = load half, ptr addrspace(3) %73, align 2, !dbg !27
  %82 = fpext half %74 to float, !dbg !28
  %83 = fpext half %78 to float, !dbg !28
  %84 = fpext half %75 to float, !dbg !28
  %85 = fpext half %79 to float, !dbg !28
  %86 = fpext half %76 to float, !dbg !28
  %87 = fpext half %80 to float, !dbg !28
  %88 = fpext half %77 to float, !dbg !28
  %89 = fpext half %81 to float, !dbg !28
  %90 = sext i32 %29 to i64, !dbg !29
  %91 = getelementptr half, ptr addrspace(1) %1, i64 %90, !dbg !29
  %92 = sext i32 %30 to i64, !dbg !29
  %93 = getelementptr half, ptr addrspace(1) %1, i64 %92, !dbg !29
  %94 = sext i32 %31 to i64, !dbg !29
  %95 = getelementptr half, ptr addrspace(1) %1, i64 %94, !dbg !29
  %96 = sext i32 %32 to i64, !dbg !29
  %97 = getelementptr half, ptr addrspace(1) %1, i64 %96, !dbg !29
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %91, i1 %19) #2, !dbg !30
  %99 = bitcast i16 %98 to half, !dbg !30
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %93, i1 %20) #2, !dbg !30
  %101 = bitcast i16 %100 to half, !dbg !30
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %95, i1 %21) #2, !dbg !30
  %103 = bitcast i16 %102 to half, !dbg !30
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %97, i1 %22) #2, !dbg !30
  %105 = bitcast i16 %104 to half, !dbg !30
  %106 = fpext half %99 to float, !dbg !31
  %107 = fpext half %101 to float, !dbg !31
  %108 = fpext half %103 to float, !dbg !31
  %109 = fpext half %105 to float, !dbg !31
  %110 = mul i32 %5, %4, !dbg !32
  %111 = mul i32 %15, %110, !dbg !33
  %112 = mul i32 %16, %110, !dbg !33
  %113 = mul i32 %17, %110, !dbg !33
  %114 = mul i32 %18, %110, !dbg !33
  %115 = add i32 %25, %111, !dbg !34
  %116 = add i32 %111, %26, !dbg !34
  %117 = add i32 %112, %25, !dbg !34
  %118 = add i32 %112, %26, !dbg !34
  %119 = add i32 %113, %25, !dbg !34
  %120 = add i32 %113, %26, !dbg !34
  %121 = add i32 %114, %25, !dbg !34
  %122 = add i32 %114, %26, !dbg !34
  %123 = sext i32 %115 to i64, !dbg !35
  %124 = getelementptr half, ptr addrspace(1) %2, i64 %123, !dbg !35
  %125 = sext i32 %116 to i64, !dbg !35
  %126 = getelementptr half, ptr addrspace(1) %2, i64 %125, !dbg !35
  %127 = sext i32 %117 to i64, !dbg !35
  %128 = getelementptr half, ptr addrspace(1) %2, i64 %127, !dbg !35
  %129 = sext i32 %118 to i64, !dbg !35
  %130 = getelementptr half, ptr addrspace(1) %2, i64 %129, !dbg !35
  %131 = sext i32 %119 to i64, !dbg !35
  %132 = getelementptr half, ptr addrspace(1) %2, i64 %131, !dbg !35
  %133 = sext i32 %120 to i64, !dbg !35
  %134 = getelementptr half, ptr addrspace(1) %2, i64 %133, !dbg !35
  %135 = sext i32 %121 to i64, !dbg !35
  %136 = getelementptr half, ptr addrspace(1) %2, i64 %135, !dbg !35
  %137 = sext i32 %122 to i64, !dbg !35
  %138 = getelementptr half, ptr addrspace(1) %2, i64 %137, !dbg !35
  %139 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %124, i1 %41) #2, !dbg !36
  %140 = bitcast i16 %139 to half, !dbg !36
  %141 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %126, i1 %42) #2, !dbg !36
  %142 = bitcast i16 %141 to half, !dbg !36
  %143 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %128, i1 %43) #2, !dbg !36
  %144 = bitcast i16 %143 to half, !dbg !36
  %145 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %130, i1 %44) #2, !dbg !36
  %146 = bitcast i16 %145 to half, !dbg !36
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %132, i1 %45) #2, !dbg !36
  %148 = bitcast i16 %147 to half, !dbg !36
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %134, i1 %46) #2, !dbg !36
  %150 = bitcast i16 %149 to half, !dbg !36
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %136, i1 %47) #2, !dbg !36
  %152 = bitcast i16 %151 to half, !dbg !36
  %153 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %138, i1 %48) #2, !dbg !36
  %154 = bitcast i16 %153 to half, !dbg !36
  %155 = fpext half %140 to float, !dbg !37
  %156 = fpext half %142 to float, !dbg !37
  %157 = fpext half %144 to float, !dbg !37
  %158 = fpext half %146 to float, !dbg !37
  %159 = fpext half %148 to float, !dbg !37
  %160 = fpext half %150 to float, !dbg !37
  %161 = fpext half %152 to float, !dbg !37
  %162 = fpext half %154 to float, !dbg !37
  %163 = fadd float %82, %106, !dbg !27
  %164 = fadd float %83, %106, !dbg !27
  %165 = fadd float %84, %107, !dbg !27
  %166 = fadd float %85, %107, !dbg !27
  %167 = fadd float %86, %108, !dbg !27
  %168 = fadd float %87, %108, !dbg !27
  %169 = fadd float %88, %109, !dbg !27
  %170 = fadd float %89, %109, !dbg !27
  %171 = fadd float %163, %155, !dbg !38
  %172 = fadd float %164, %156, !dbg !38
  %173 = fadd float %165, %157, !dbg !38
  %174 = fadd float %166, %158, !dbg !38
  %175 = fadd float %167, %159, !dbg !38
  %176 = fadd float %168, %160, !dbg !38
  %177 = fadd float %169, %161, !dbg !38
  %178 = fadd float %170, %162, !dbg !38
  %179 = getelementptr half, ptr addrspace(1) %3, i64 %123, !dbg !39
  %180 = getelementptr half, ptr addrspace(1) %3, i64 %125, !dbg !39
  %181 = getelementptr half, ptr addrspace(1) %3, i64 %127, !dbg !39
  %182 = getelementptr half, ptr addrspace(1) %3, i64 %129, !dbg !39
  %183 = getelementptr half, ptr addrspace(1) %3, i64 %131, !dbg !39
  %184 = getelementptr half, ptr addrspace(1) %3, i64 %133, !dbg !39
  %185 = getelementptr half, ptr addrspace(1) %3, i64 %135, !dbg !39
  %186 = getelementptr half, ptr addrspace(1) %3, i64 %137, !dbg !39
  %187 = fptrunc float %171 to half, !dbg !40
  %188 = fptrunc float %172 to half, !dbg !40
  %189 = fptrunc float %173 to half, !dbg !40
  %190 = fptrunc float %174 to half, !dbg !40
  %191 = fptrunc float %175 to half, !dbg !40
  %192 = fptrunc float %176 to half, !dbg !40
  %193 = fptrunc float %177 to half, !dbg !40
  %194 = fptrunc float %178 to half, !dbg !40
  %195 = bitcast half %187 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %195, ptr addrspace(1) %179, i1 %41) #2, !dbg !40
  %196 = bitcast half %188 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %196, ptr addrspace(1) %180, i1 %42) #2, !dbg !40
  %197 = bitcast half %189 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %197, ptr addrspace(1) %181, i1 %43) #2, !dbg !40
  %198 = bitcast half %190 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %198, ptr addrspace(1) %182, i1 %44) #2, !dbg !40
  %199 = bitcast half %191 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %199, ptr addrspace(1) %183, i1 %45) #2, !dbg !40
  %200 = bitcast half %192 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %200, ptr addrspace(1) %184, i1 %46) #2, !dbg !40
  %201 = bitcast half %193 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %201, ptr addrspace(1) %185, i1 %47) #2, !dbg !40
  %202 = bitcast half %194 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %202, ptr addrspace(1) %186, i1 %48) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c5lfiujh4m6mmrxkiywtbi2vmoy2hagcofoij37usmtrd6bv5cr4.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/5l")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 30, column: 18, scope: !5)
!22 = !DILocation(line: 31, column: 42, scope: !5)
!23 = !DILocation(line: 31, column: 36, scope: !5)
!24 = !DILocation(line: 31, column: 30, scope: !5)
!25 = !DILocation(line: 31, column: 56, scope: !5)
!26 = !DILocation(line: 31, column: 48, scope: !5)
!27 = !DILocation(line: 34, column: 18, scope: !5)
!28 = !DILocation(line: 31, column: 96, scope: !5)
!29 = !DILocation(line: 32, column: 30, scope: !5)
!30 = !DILocation(line: 32, column: 35, scope: !5)
!31 = !DILocation(line: 32, column: 75, scope: !5)
!32 = !DILocation(line: 33, column: 40, scope: !5)
!33 = !DILocation(line: 33, column: 44, scope: !5)
!34 = !DILocation(line: 33, column: 36, scope: !5)
!35 = !DILocation(line: 33, column: 30, scope: !5)
!36 = !DILocation(line: 33, column: 50, scope: !5)
!37 = !DILocation(line: 33, column: 98, scope: !5)
!38 = !DILocation(line: 35, column: 18, scope: !5)
!39 = !DILocation(line: 36, column: 25, scope: !5)
!40 = !DILocation(line: 36, column: 51, scope: !5)
!41 = !DILocation(line: 36, column: 4, scope: !5)
