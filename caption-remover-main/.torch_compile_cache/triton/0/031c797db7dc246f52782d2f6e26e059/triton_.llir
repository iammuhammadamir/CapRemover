; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 1, !dbg !10
  %7 = and i32 %6, 510, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %9 = shl i32 %8, 9, !dbg !12
  %10 = or i32 %9, %7, !dbg !13
  %.frozen = freeze i32 %10
  %11 = sdiv i32 %.frozen, 1280, !dbg !14
  %12 = mul i32 %11, 1280
  %.decomposed = sub i32 %.frozen, %12
  %13 = mul i32 %11, 2560, !dbg !15
  %14 = add i32 %13, %.decomposed, !dbg !16
  %15 = sext i32 %14 to i64, !dbg !17
  %16 = getelementptr half, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #4, !dbg !18
  %18 = sext i32 %.decomposed to i64, !dbg !19
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %18, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !20
  %21 = add nsw i32 %.decomposed, 1280, !dbg !21
  %22 = add i32 %21, %13, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr half, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #4, !dbg !24
  %extelt.offset2 = lshr i32 %25, 16, !dbg !24
  %26 = zext nneg i32 %21 to i64, !dbg !25
  %27 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !26
  %extelt.offset3 = lshr i32 %28, 16, !dbg !26
  %29 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !24
  %30 = insertelement <2 x i32> %29, i32 %extelt.offset2, i64 1, !dbg !24
  %31 = trunc <2 x i32> %30 to <2 x i16>, !dbg !24
  %32 = bitcast <2 x i16> %31 to <2 x half>, !dbg !24
  %33 = fpext <2 x half> %32 to <2 x float>, !dbg !27
  %34 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !26
  %35 = insertelement <2 x i32> %34, i32 %extelt.offset3, i64 1, !dbg !26
  %36 = trunc <2 x i32> %35 to <2 x i16>, !dbg !26
  %37 = bitcast <2 x i16> %36 to <2 x half>, !dbg !26
  %38 = fpext <2 x half> %37 to <2 x float>, !dbg !28
  %39 = fadd <2 x float> %33, %38, !dbg !29
  %40 = extractelement <2 x float> %39, i64 0, !dbg !30
  %41 = fmul float %40, 0x3FE6A09E60000000, !dbg !30
  %42 = extractelement <2 x float> %39, i64 1, !dbg !30
  %43 = fmul float %42, 0x3FE6A09E60000000, !dbg !30
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %44, 0, !dbg !31
  %45 = tail call float @llvm.nvvm.fabs.ftz.f(float %41) #4, !dbg !31
  %46 = tail call float @llvm.nvvm.fabs.f(float %41) #4, !dbg !31
  %.0.i = select i1 %.not.i, float %46, float %45, !dbg !31
  %47 = fcmp oge float %.0.i, 0x3FF00C1FC0000000, !dbg !31
  br i1 %47, label %__nv_fabsf.exit1.i, label %49, !dbg !31

__nv_fabsf.exit1.i:                               ; preds = %4
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not1.i = icmp eq i32 %48, 0, !dbg !31
  %.01.i = select i1 %.not1.i, float %46, float %45, !dbg !31
  br label %__internal_fmad.exit.i, !dbg !31

49:                                               ; preds = %4
  %50 = fmul float %41, %41, !dbg !31
  br label %__internal_fmad.exit.i, !dbg !31

__internal_fmad.exit.i:                           ; preds = %49, %__nv_fabsf.exit1.i
  %51 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %49 ], !dbg !31
  %52 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %49 ], !dbg !31
  %53 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %49 ], !dbg !31
  %54 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %49 ], !dbg !31
  %55 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %49 ], !dbg !31
  %56 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %49 ], !dbg !31
  %57 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %49 ], !dbg !31
  %58 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %50, %49 ], !dbg !31
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not2.i = icmp eq i32 %59, 0, !dbg !31
  %60 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %57, float %58, float %56) #4, !dbg !31
  %61 = tail call float @llvm.nvvm.fma.rn.f(float %57, float %58, float %56) #4, !dbg !31
  %.02.i = select i1 %.not2.i, float %61, float %60, !dbg !31
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not3.i = icmp eq i32 %62, 0, !dbg !31
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %58, float %55) #4, !dbg !31
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %58, float %55) #4, !dbg !31
  %.03.i = select i1 %.not3.i, float %64, float %63, !dbg !31
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not4.i = icmp eq i32 %65, 0, !dbg !31
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %58, float %54) #4, !dbg !31
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %58, float %54) #4, !dbg !31
  %.04.i = select i1 %.not4.i, float %67, float %66, !dbg !31
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not5.i = icmp eq i32 %68, 0, !dbg !31
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %58, float %53) #4, !dbg !31
  %70 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %58, float %53) #4, !dbg !31
  %.05.i = select i1 %.not5.i, float %70, float %69, !dbg !31
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not6.i = icmp eq i32 %71, 0, !dbg !31
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %58, float %52) #4, !dbg !31
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %58, float %52) #4, !dbg !31
  %.06.i = select i1 %.not6.i, float %73, float %72, !dbg !31
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not7.i = icmp eq i32 %74, 0, !dbg !31
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %58, float %51) #4, !dbg !31
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %58, float %51) #4, !dbg !31
  %.07.i = select i1 %.not7.i, float %76, float %75, !dbg !31
  %77 = fneg float %58, !dbg !31
  %78 = select i1 %47, float %77, float %41, !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not8.i = icmp eq i32 %79, 0, !dbg !31
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %78, float %78) #4, !dbg !31
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %78, float %78) #4, !dbg !31
  %.08.i = select i1 %.not8.i, float %81, float %80, !dbg !31
  br i1 %47, label %82, label %__nv_erff.exit, !dbg !31

82:                                               ; preds = %__internal_fmad.exit.i
  %83 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #4, !dbg !31
  %84 = fsub float 1.000000e+00, %83, !dbg !31
  %85 = bitcast float %84 to i32, !dbg !31
  %86 = bitcast float %41 to i32, !dbg !31
  %87 = and i32 %86, -2147483648, !dbg !31
  %88 = or i32 %87, %85, !dbg !31
  %89 = bitcast i32 %88 to float, !dbg !31
  br label %__nv_erff.exit, !dbg !31

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %82
  %r.0.i = phi float [ %89, %82 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !31
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i4 = icmp eq i32 %90, 0, !dbg !31
  %91 = tail call float @llvm.nvvm.fabs.ftz.f(float %43) #4, !dbg !31
  %92 = tail call float @llvm.nvvm.fabs.f(float %43) #4, !dbg !31
  %.0.i5 = select i1 %.not.i4, float %92, float %91, !dbg !31
  %93 = fcmp oge float %.0.i5, 0x3FF00C1FC0000000, !dbg !31
  br i1 %93, label %__nv_fabsf.exit1.i22, label %95, !dbg !31

__nv_fabsf.exit1.i22:                             ; preds = %__nv_erff.exit
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not1.i23 = icmp eq i32 %94, 0, !dbg !31
  %.01.i24 = select i1 %.not1.i23, float %92, float %91, !dbg !31
  br label %__internal_fmad.exit.i6, !dbg !31

95:                                               ; preds = %__nv_erff.exit
  %96 = fmul float %43, %43, !dbg !31
  br label %__internal_fmad.exit.i6, !dbg !31

__internal_fmad.exit.i6:                          ; preds = %95, %__nv_fabsf.exit1.i22
  %97 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i22 ], [ 0x3FC06EBA60000000, %95 ], !dbg !31
  %98 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i22 ], [ 0xBFD8127580000000, %95 ], !dbg !31
  %99 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i22 ], [ 0x3FBCE315E0000000, %95 ], !dbg !31
  %100 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i22 ], [ 0xBF9B837CE0000000, %95 ], !dbg !31
  %101 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i22 ], [ 0x3F755ABD40000000, %95 ], !dbg !31
  %102 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i22 ], [ 0xBF4AE9A400000000, %95 ], !dbg !31
  %103 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i22 ], [ 0x3F163D2D40000000, %95 ], !dbg !31
  %104 = phi float [ %.01.i24, %__nv_fabsf.exit1.i22 ], [ %96, %95 ], !dbg !31
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not2.i7 = icmp eq i32 %105, 0, !dbg !31
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %103, float %104, float %102) #4, !dbg !31
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %103, float %104, float %102) #4, !dbg !31
  %.02.i8 = select i1 %.not2.i7, float %107, float %106, !dbg !31
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not3.i9 = icmp eq i32 %108, 0, !dbg !31
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i8, float %104, float %101) #4, !dbg !31
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i8, float %104, float %101) #4, !dbg !31
  %.03.i10 = select i1 %.not3.i9, float %110, float %109, !dbg !31
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not4.i11 = icmp eq i32 %111, 0, !dbg !31
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i10, float %104, float %100) #4, !dbg !31
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i10, float %104, float %100) #4, !dbg !31
  %.04.i12 = select i1 %.not4.i11, float %113, float %112, !dbg !31
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not5.i13 = icmp eq i32 %114, 0, !dbg !31
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i12, float %104, float %99) #4, !dbg !31
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i12, float %104, float %99) #4, !dbg !31
  %.05.i14 = select i1 %.not5.i13, float %116, float %115, !dbg !31
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not6.i15 = icmp eq i32 %117, 0, !dbg !31
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %104, float %98) #4, !dbg !31
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %104, float %98) #4, !dbg !31
  %.06.i16 = select i1 %.not6.i15, float %119, float %118, !dbg !31
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not7.i17 = icmp eq i32 %120, 0, !dbg !31
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i16, float %104, float %97) #4, !dbg !31
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i16, float %104, float %97) #4, !dbg !31
  %.07.i18 = select i1 %.not7.i17, float %122, float %121, !dbg !31
  %123 = fneg float %104, !dbg !31
  %124 = select i1 %93, float %123, float %43, !dbg !31
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not8.i19 = icmp eq i32 %125, 0, !dbg !31
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i18, float %124, float %124) #4, !dbg !31
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i18, float %124, float %124) #4, !dbg !31
  %.08.i20 = select i1 %.not8.i19, float %127, float %126, !dbg !31
  br i1 %93, label %128, label %__nv_erff.exit25, !dbg !31

128:                                              ; preds = %__internal_fmad.exit.i6
  %129 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i20) #4, !dbg !31
  %130 = fsub float 1.000000e+00, %129, !dbg !31
  %131 = bitcast float %130 to i32, !dbg !31
  %132 = bitcast float %43 to i32, !dbg !31
  %133 = and i32 %132, -2147483648, !dbg !31
  %134 = or i32 %133, %131, !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  br label %__nv_erff.exit25, !dbg !31

__nv_erff.exit25:                                 ; preds = %__internal_fmad.exit.i6, %128
  %r.0.i21 = phi float [ %135, %128 ], [ %.08.i20, %__internal_fmad.exit.i6 ], !dbg !31
  %136 = fmul <2 x float> %39, <float 5.000000e-01, float 5.000000e-01>, !dbg !32
  %extelt.offset = lshr i32 %17, 16, !dbg !18
  %extelt.offset1 = lshr i32 %20, 16, !dbg !20
  %137 = insertelement <2 x float> poison, float %r.0.i, i64 0, !dbg !33
  %138 = insertelement <2 x float> %137, float %r.0.i21, i64 1, !dbg !33
  %139 = fadd <2 x float> %138, <float 1.000000e+00, float 1.000000e+00>, !dbg !33
  %140 = sext i32 %10 to i64, !dbg !34
  %141 = getelementptr half, ptr addrspace(1) %2, i64 %140, !dbg !34
  %142 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %143 = insertelement <2 x i32> %142, i32 %extelt.offset, i64 1, !dbg !18
  %144 = trunc <2 x i32> %143 to <2 x i16>, !dbg !18
  %145 = bitcast <2 x i16> %144 to <2 x half>, !dbg !18
  %146 = fpext <2 x half> %145 to <2 x float>, !dbg !35
  %147 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %148 = insertelement <2 x i32> %147, i32 %extelt.offset1, i64 1, !dbg !20
  %149 = trunc <2 x i32> %148 to <2 x i16>, !dbg !20
  %150 = bitcast <2 x i16> %149 to <2 x half>, !dbg !20
  %151 = fpext <2 x half> %150 to <2 x float>, !dbg !36
  %152 = fadd <2 x float> %146, %151, !dbg !37
  %153 = fmul <2 x float> %136, %139, !dbg !38
  %154 = fmul <2 x float> %152, %153, !dbg !39
  %155 = fptrunc <2 x float> %154 to <2 x half>, !dbg !40
  %156 = bitcast <2 x half> %155 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %141, i1 true) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_erff(float %a) local_unnamed_addr #1 {
__nv_fabsf.exit:
  %0 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %0, 0
  %1 = tail call float @llvm.nvvm.fabs.ftz.f(float %a) #4
  %2 = tail call float @llvm.nvvm.fabs.f(float %a) #4
  %.0 = select i1 %.not, float %2, float %1
  %3 = fcmp oge float %.0, 0x3FF00C1FC0000000
  br i1 %3, label %__nv_fabsf.exit1, label %5

__nv_fabsf.exit1:                                 ; preds = %__nv_fabsf.exit
  %4 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not1 = icmp eq i32 %4, 0
  %.01 = select i1 %.not1, float %2, float %1
  br label %__internal_fmad.exit

5:                                                ; preds = %__nv_fabsf.exit
  %6 = fmul float %a, %a
  br label %__internal_fmad.exit

__internal_fmad.exit:                             ; preds = %5, %__nv_fabsf.exit1
  %7 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1 ], [ 0x3FC06EBA60000000, %5 ]
  %8 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1 ], [ 0xBFD8127580000000, %5 ]
  %9 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1 ], [ 0x3FBCE315E0000000, %5 ]
  %10 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1 ], [ 0xBF9B837CE0000000, %5 ]
  %11 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1 ], [ 0x3F755ABD40000000, %5 ]
  %12 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1 ], [ 0xBF4AE9A400000000, %5 ]
  %13 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1 ], [ 0x3F163D2D40000000, %5 ]
  %14 = phi float [ %.01, %__nv_fabsf.exit1 ], [ %6, %5 ]
  %15 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not2 = icmp eq i32 %15, 0
  %16 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %13, float %14, float %12) #4
  %17 = tail call float @llvm.nvvm.fma.rn.f(float %13, float %14, float %12) #4
  %.02 = select i1 %.not2, float %17, float %16
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not3 = icmp eq i32 %18, 0
  %19 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02, float %14, float %11) #4
  %20 = tail call float @llvm.nvvm.fma.rn.f(float %.02, float %14, float %11) #4
  %.03 = select i1 %.not3, float %20, float %19
  %21 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not4 = icmp eq i32 %21, 0
  %22 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03, float %14, float %10) #4
  %23 = tail call float @llvm.nvvm.fma.rn.f(float %.03, float %14, float %10) #4
  %.04 = select i1 %.not4, float %23, float %22
  %24 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not5 = icmp eq i32 %24, 0
  %25 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04, float %14, float %9) #4
  %26 = tail call float @llvm.nvvm.fma.rn.f(float %.04, float %14, float %9) #4
  %.05 = select i1 %.not5, float %26, float %25
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not6 = icmp eq i32 %27, 0
  %28 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05, float %14, float %8) #4
  %29 = tail call float @llvm.nvvm.fma.rn.f(float %.05, float %14, float %8) #4
  %.06 = select i1 %.not6, float %29, float %28
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not7 = icmp eq i32 %30, 0
  %31 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06, float %14, float %7) #4
  %32 = tail call float @llvm.nvvm.fma.rn.f(float %.06, float %14, float %7) #4
  %.07 = select i1 %.not7, float %32, float %31
  %33 = fneg float %14
  %34 = select i1 %3, float %33, float %a
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not8 = icmp eq i32 %35, 0
  %36 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07, float %34, float %34) #4
  %37 = tail call float @llvm.nvvm.fma.rn.f(float %.07, float %34, float %34) #4
  %.08 = select i1 %.not8, float %37, float %36
  br i1 %3, label %38, label %46

38:                                               ; preds = %__internal_fmad.exit
  %39 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08) #4
  %40 = fsub float 1.000000e+00, %39
  %41 = bitcast float %40 to i32
  %42 = bitcast float %a to i32
  %43 = and i32 %42, -2147483648
  %44 = or i32 %43, %41
  %45 = bitcast i32 %44 to float
  br label %46

46:                                               ; preds = %38, %__internal_fmad.exit
  %r.0 = phi float [ %45, %38 ], [ %.08, %__internal_fmad.exit ]
  ret float %r.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cjwjed22iptbz4dqfbfyn3cxvaw2eopgbfiqa4w4zna5t4q5mnqq.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/jw")
!4 = !{ptr @triton__0d1d2d3de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3de", linkageName: "triton__0d1d2d3de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 36, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 22, column: 33, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 20, scope: !7)
!15 = !DILocation(line: 28, column: 41, scope: !7)
!16 = !DILocation(line: 28, column: 36, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 47, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 37, scope: !7)
!22 = !DILocation(line: 30, column: 43, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 54, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 63, scope: !7)
!28 = !DILocation(line: 31, column: 81, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 26, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 25, scope: !7)
!35 = !DILocation(line: 28, column: 56, scope: !7)
!36 = !DILocation(line: 29, column: 74, scope: !7)
!37 = !DILocation(line: 32, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 37, scope: !7)
!41 = !DILocation(line: 45, column: 4, scope: !7)
