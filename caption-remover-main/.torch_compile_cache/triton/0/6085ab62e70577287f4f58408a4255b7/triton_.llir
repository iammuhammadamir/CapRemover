; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 7, !dbg !8
  %11 = or i32 %10, 8, !dbg !8
  %12 = shl i32 %7, 3, !dbg !8
  %13 = and i32 %12, 8, !dbg !8
  %14 = shl nuw nsw i32 %8, 3, !dbg !9
  %15 = lshr i32 %8, 1, !dbg !9
  %16 = shl nuw nsw i32 %10, 4, !dbg !9
  %17 = or i32 %16, %15, !dbg !9
  %18 = or i32 %17, 128, !dbg !9
  %urem = and i32 %7, 255, !dbg !9
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %21 = add i32 %20, 1, !dbg !12
  %22 = shl i32 %19, 4, !dbg !13
  %23 = mul i32 %22, %21, !dbg !14
  %24 = or i32 %23, %10, !dbg !15
  %25 = or i32 %23, %11, !dbg !15
  %26 = or i32 %23, %13, !dbg !15
  %27 = icmp slt i32 %24, 4048, !dbg !16
  %28 = icmp slt i32 %25, 4048, !dbg !16
  %29 = icmp slt i32 %26, 4048, !dbg !16
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %31 = shl i32 %30, 8, !dbg !18
  %32 = or i32 %31, %14, !dbg !19
  %33 = or i32 %31, %17, !dbg !19
  %34 = or i32 %31, %18, !dbg !19
  %35 = or i32 %31, %urem, !dbg !19
  %36 = icmp slt i32 %32, 1280, !dbg !20
  %37 = icmp slt i32 %33, 1280, !dbg !20
  %38 = icmp slt i32 %34, 1280, !dbg !20
  %39 = icmp slt i32 %35, 1280, !dbg !20
  %.frozen = freeze i32 %26
  %40 = sdiv i32 %.frozen, 184, !dbg !21
  %41 = mul i32 %40, 184
  %.decomposed = sub i32 %.frozen, %41
  %42 = mul i32 %24, 1280, !dbg !22
  %43 = mul i32 %25, 1280, !dbg !22
  %44 = add i32 %42, %32, !dbg !23
  %45 = add i32 %43, %32, !dbg !23
  %46 = sext i32 %44 to i64, !dbg !24
  %47 = getelementptr half, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %45 to i64, !dbg !24
  %49 = getelementptr half, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = and i1 %36, %27, !dbg !25
  %51 = and i1 %36, %28, !dbg !25
  %52 = and i1 %37, %29, !dbg !25
  %53 = and i1 %38, %29, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %50) #2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = trunc i32 %55 to i16, !dbg !26
  %extelt.offset = lshr i32 %55, 16, !dbg !26
  %60 = trunc i32 %extelt.offset to i16, !dbg !26
  %61 = trunc i32 %56 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %56, 16, !dbg !26
  %62 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %63 = trunc i32 %57 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %57, 16, !dbg !26
  %64 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %65 = trunc i32 %58 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %58, 16, !dbg !26
  %66 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %51) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = trunc i32 %68 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %68, 16, !dbg !26
  %73 = trunc i32 %extelt.offset4 to i16, !dbg !26
  %74 = trunc i32 %69 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %69, 16, !dbg !26
  %75 = trunc i32 %extelt.offset5 to i16, !dbg !26
  %76 = trunc i32 %70 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %70, 16, !dbg !26
  %77 = trunc i32 %extelt.offset6 to i16, !dbg !26
  %78 = trunc i32 %71 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %71, 16, !dbg !26
  %79 = trunc i32 %extelt.offset7 to i16, !dbg !26
  %80 = mul nuw nsw i32 %8, 192, !dbg !27
  %81 = or i32 %80, %10, !dbg !27
  %82 = zext nneg i32 %81 to i64, !dbg !27
  %83 = getelementptr half, ptr addrspace(3) @global_smem, i64 %82, !dbg !27
  store i16 %59, ptr addrspace(3) %83, align 2, !dbg !27
  %84 = or i32 %80, 24, !dbg !27
  %85 = or i32 %84, %10, !dbg !27
  %86 = zext nneg i32 %85 to i64, !dbg !27
  %87 = getelementptr half, ptr addrspace(3) @global_smem, i64 %86, !dbg !27
  store i16 %60, ptr addrspace(3) %87, align 2, !dbg !27
  %88 = or i32 %80, 48, !dbg !27
  %89 = or i32 %88, %10, !dbg !27
  %90 = zext nneg i32 %89 to i64, !dbg !27
  %91 = getelementptr half, ptr addrspace(3) @global_smem, i64 %90, !dbg !27
  store i16 %61, ptr addrspace(3) %91, align 2, !dbg !27
  %92 = add nuw nsw i32 %80, 72, !dbg !27
  %93 = or i32 %92, %10, !dbg !27
  %94 = zext nneg i32 %93 to i64, !dbg !27
  %95 = getelementptr half, ptr addrspace(3) @global_smem, i64 %94, !dbg !27
  store i16 %62, ptr addrspace(3) %95, align 2, !dbg !27
  %96 = add nuw nsw i32 %80, 96, !dbg !27
  %97 = or i32 %96, %10, !dbg !27
  %98 = zext nneg i32 %97 to i64, !dbg !27
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !27
  store i16 %63, ptr addrspace(3) %99, align 2, !dbg !27
  %100 = add nuw nsw i32 %80, 120, !dbg !27
  %101 = or i32 %100, %10, !dbg !27
  %102 = zext nneg i32 %101 to i64, !dbg !27
  %103 = getelementptr half, ptr addrspace(3) @global_smem, i64 %102, !dbg !27
  store i16 %64, ptr addrspace(3) %103, align 2, !dbg !27
  %104 = add nuw nsw i32 %80, 144, !dbg !27
  %105 = or i32 %104, %10, !dbg !27
  %106 = zext nneg i32 %105 to i64, !dbg !27
  %107 = getelementptr half, ptr addrspace(3) @global_smem, i64 %106, !dbg !27
  store i16 %65, ptr addrspace(3) %107, align 2, !dbg !27
  %108 = add nuw nsw i32 %80, 168, !dbg !27
  %109 = or i32 %108, %10, !dbg !27
  %110 = zext nneg i32 %109 to i64, !dbg !27
  %111 = getelementptr half, ptr addrspace(3) @global_smem, i64 %110, !dbg !27
  store i16 %66, ptr addrspace(3) %111, align 2, !dbg !27
  %112 = or i32 %11, %80, !dbg !27
  %113 = zext nneg i32 %112 to i64, !dbg !27
  %114 = getelementptr half, ptr addrspace(3) @global_smem, i64 %113, !dbg !27
  store i16 %72, ptr addrspace(3) %114, align 2, !dbg !27
  %115 = add nuw nsw i32 %84, %11, !dbg !27
  %116 = zext nneg i32 %115 to i64, !dbg !27
  %117 = getelementptr half, ptr addrspace(3) @global_smem, i64 %116, !dbg !27
  store i16 %73, ptr addrspace(3) %117, align 2, !dbg !27
  %118 = or i32 %88, %11, !dbg !27
  %119 = zext nneg i32 %118 to i64, !dbg !27
  %120 = getelementptr half, ptr addrspace(3) @global_smem, i64 %119, !dbg !27
  store i16 %74, ptr addrspace(3) %120, align 2, !dbg !27
  %121 = add nuw nsw i32 %92, %11, !dbg !27
  %122 = zext nneg i32 %121 to i64, !dbg !27
  %123 = getelementptr half, ptr addrspace(3) @global_smem, i64 %122, !dbg !27
  store i16 %75, ptr addrspace(3) %123, align 2, !dbg !27
  %124 = or i32 %96, %11, !dbg !27
  %125 = zext nneg i32 %124 to i64, !dbg !27
  %126 = getelementptr half, ptr addrspace(3) @global_smem, i64 %125, !dbg !27
  store i16 %76, ptr addrspace(3) %126, align 2, !dbg !27
  %127 = add nuw nsw i32 %100, %11, !dbg !27
  %128 = zext nneg i32 %127 to i64, !dbg !27
  %129 = getelementptr half, ptr addrspace(3) @global_smem, i64 %128, !dbg !27
  store i16 %77, ptr addrspace(3) %129, align 2, !dbg !27
  %130 = or i32 %104, %11, !dbg !27
  %131 = zext nneg i32 %130 to i64, !dbg !27
  %132 = getelementptr half, ptr addrspace(3) @global_smem, i64 %131, !dbg !27
  store i16 %78, ptr addrspace(3) %132, align 2, !dbg !27
  %133 = add nuw nsw i32 %108, %11, !dbg !27
  %134 = zext nneg i32 %133 to i64, !dbg !27
  %135 = getelementptr half, ptr addrspace(3) @global_smem, i64 %134, !dbg !27
  store i16 %79, ptr addrspace(3) %135, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %136 = mul nuw nsw i32 %17, 24, !dbg !27
  %137 = add nuw nsw i32 %136, %13, !dbg !27
  %138 = zext nneg i32 %137 to i64, !dbg !27
  %139 = getelementptr half, ptr addrspace(3) @global_smem, i64 %138, !dbg !27
  %140 = getelementptr inbounds <8 x half>, ptr addrspace(3) %139, i64 0, i64 2, !dbg !27
  %141 = getelementptr inbounds <8 x half>, ptr addrspace(3) %139, i64 0, i64 4, !dbg !27
  %142 = getelementptr inbounds <8 x half>, ptr addrspace(3) %139, i64 0, i64 6, !dbg !27
  %143 = mul nuw nsw i32 %18, 24, !dbg !27
  %144 = add nuw nsw i32 %143, %13, !dbg !27
  %145 = zext nneg i32 %144 to i64, !dbg !27
  %146 = getelementptr half, ptr addrspace(3) @global_smem, i64 %145, !dbg !27
  %147 = getelementptr inbounds <8 x half>, ptr addrspace(3) %146, i64 0, i64 2, !dbg !27
  %148 = getelementptr inbounds <8 x half>, ptr addrspace(3) %146, i64 0, i64 4, !dbg !27
  %149 = getelementptr inbounds <8 x half>, ptr addrspace(3) %146, i64 0, i64 6, !dbg !27
  %150 = sext i32 %35 to i64, !dbg !28
  %151 = getelementptr half, ptr addrspace(1) %1, i64 %150, !dbg !28
  %152 = getelementptr half, ptr addrspace(1) %2, i64 %46, !dbg !29
  %153 = getelementptr half, ptr addrspace(1) %2, i64 %48, !dbg !29
  %154 = shl nuw nsw i32 %urem, 1, !dbg !30
  %155 = zext nneg i32 %154 to i64, !dbg !30
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i64 %155, !dbg !30
  %157 = shl nuw nsw i32 %17, 1, !dbg !30
  %158 = zext nneg i32 %157 to i64, !dbg !30
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i64 %158, !dbg !30
  %160 = shl nuw nsw i32 %18, 1, !dbg !30
  %161 = zext nneg i32 %160 to i64, !dbg !30
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i64 %161, !dbg !30
  %163 = mul i32 %33, 184, !dbg !31
  %164 = mul i32 %34, 184, !dbg !31
  %165 = mul i32 %40, 235520, !dbg !32
  %166 = add i32 %165, %.decomposed, !dbg !33
  %167 = add i32 %166, %163, !dbg !34
  %168 = add i32 %166, %164, !dbg !34
  %169 = sext i32 %167 to i64, !dbg !35
  %170 = getelementptr half, ptr addrspace(1) %3, i64 %169, !dbg !35
  %171 = sext i32 %168 to i64, !dbg !35
  %172 = getelementptr half, ptr addrspace(1) %3, i64 %171, !dbg !35
  %173 = load <2 x half>, ptr addrspace(3) %142, align 4, !dbg !27
  %174 = fpext <2 x half> %173 to <2 x float>, !dbg !27
  %175 = load <2 x half>, ptr addrspace(3) %141, align 8, !dbg !27
  %176 = fpext <2 x half> %175 to <2 x float>, !dbg !27
  %177 = load <2 x half>, ptr addrspace(3) %140, align 4, !dbg !27
  %178 = fpext <2 x half> %177 to <2 x float>, !dbg !27
  %179 = load <2 x half>, ptr addrspace(3) %139, align 16, !dbg !27
  %180 = fpext <2 x half> %179 to <2 x float>, !dbg !27
  %181 = load <2 x half>, ptr addrspace(3) %149, align 4, !dbg !27
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !27
  %183 = load <2 x half>, ptr addrspace(3) %148, align 8, !dbg !27
  %184 = fpext <2 x half> %183 to <2 x float>, !dbg !27
  %185 = load <2 x half>, ptr addrspace(3) %147, align 4, !dbg !27
  %186 = fpext <2 x half> %185 to <2 x float>, !dbg !27
  %187 = load <2 x half>, ptr addrspace(3) %146, align 16, !dbg !27
  %188 = fpext <2 x half> %187 to <2 x float>, !dbg !27
  %189 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %151, i1 %39) #2, !dbg !36
  %190 = bitcast i16 %189 to half, !dbg !36
  %191 = fpext half %190 to float, !dbg !37
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %50) #2, !dbg !38
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !38
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !38
  %197 = trunc i32 %193 to i16, !dbg !38
  %extelt.offset8 = lshr i32 %193, 16, !dbg !38
  %198 = trunc i32 %extelt.offset8 to i16, !dbg !38
  %199 = trunc i32 %194 to i16, !dbg !38
  %extelt.offset9 = lshr i32 %194, 16, !dbg !38
  %200 = trunc i32 %extelt.offset9 to i16, !dbg !38
  %201 = trunc i32 %195 to i16, !dbg !38
  %extelt.offset10 = lshr i32 %195, 16, !dbg !38
  %202 = trunc i32 %extelt.offset10 to i16, !dbg !38
  %203 = trunc i32 %196 to i16, !dbg !38
  %extelt.offset11 = lshr i32 %196, 16, !dbg !38
  %204 = trunc i32 %extelt.offset11 to i16, !dbg !38
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %51) #2, !dbg !38
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !38
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !38
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !38
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !38
  %210 = trunc i32 %206 to i16, !dbg !38
  %extelt.offset12 = lshr i32 %206, 16, !dbg !38
  %211 = trunc i32 %extelt.offset12 to i16, !dbg !38
  %212 = trunc i32 %207 to i16, !dbg !38
  %extelt.offset13 = lshr i32 %207, 16, !dbg !38
  %213 = trunc i32 %extelt.offset13 to i16, !dbg !38
  %214 = trunc i32 %208 to i16, !dbg !38
  %extelt.offset14 = lshr i32 %208, 16, !dbg !38
  %215 = trunc i32 %extelt.offset14 to i16, !dbg !38
  %216 = trunc i32 %209 to i16, !dbg !38
  %extelt.offset15 = lshr i32 %209, 16, !dbg !38
  %217 = trunc i32 %extelt.offset15 to i16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  store i16 %197, ptr addrspace(3) %83, align 2, !dbg !39
  store i16 %198, ptr addrspace(3) %87, align 2, !dbg !39
  store i16 %199, ptr addrspace(3) %91, align 2, !dbg !39
  store i16 %200, ptr addrspace(3) %95, align 2, !dbg !39
  store i16 %201, ptr addrspace(3) %99, align 2, !dbg !39
  store i16 %202, ptr addrspace(3) %103, align 2, !dbg !39
  store i16 %203, ptr addrspace(3) %107, align 2, !dbg !39
  store i16 %204, ptr addrspace(3) %111, align 2, !dbg !39
  store i16 %210, ptr addrspace(3) %114, align 2, !dbg !39
  store i16 %211, ptr addrspace(3) %117, align 2, !dbg !39
  store i16 %212, ptr addrspace(3) %120, align 2, !dbg !39
  store i16 %213, ptr addrspace(3) %123, align 2, !dbg !39
  store i16 %214, ptr addrspace(3) %126, align 2, !dbg !39
  store i16 %215, ptr addrspace(3) %129, align 2, !dbg !39
  store i16 %216, ptr addrspace(3) %132, align 2, !dbg !39
  store i16 %217, ptr addrspace(3) %135, align 2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %218 = load <2 x half>, ptr addrspace(3) %139, align 16, !dbg !39
  %219 = load <2 x half>, ptr addrspace(3) %140, align 4, !dbg !39
  %220 = load <2 x half>, ptr addrspace(3) %141, align 8, !dbg !39
  %221 = load <2 x half>, ptr addrspace(3) %142, align 4, !dbg !39
  %222 = load <2 x half>, ptr addrspace(3) %146, align 16, !dbg !39
  %223 = load <2 x half>, ptr addrspace(3) %147, align 4, !dbg !39
  %224 = load <2 x half>, ptr addrspace(3) %148, align 8, !dbg !39
  %225 = load <2 x half>, ptr addrspace(3) %149, align 4, !dbg !39
  %226 = fpext <2 x half> %218 to <2 x float>, !dbg !40
  %227 = fpext <2 x half> %219 to <2 x float>, !dbg !40
  %228 = fpext <2 x half> %220 to <2 x float>, !dbg !40
  %229 = fpext <2 x half> %221 to <2 x float>, !dbg !40
  %230 = fpext <2 x half> %222 to <2 x float>, !dbg !40
  %231 = fpext <2 x half> %223 to <2 x float>, !dbg !40
  %232 = fpext <2 x half> %224 to <2 x float>, !dbg !40
  %233 = fpext <2 x half> %225 to <2 x float>, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %234 = insertelement <1 x float> undef, float %191, i64 0, !dbg !30
  store <1 x float> %234, ptr addrspace(3) %156, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %235 = load float, ptr addrspace(3) %159, align 4, !dbg !30
  %236 = load float, ptr addrspace(3) %162, align 4, !dbg !30
  %237 = insertelement <2 x float> poison, float %235, i64 0, !dbg !30
  %238 = shufflevector <2 x float> %237, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !30
  %239 = fadd <2 x float> %238, %180, !dbg !30
  %240 = fadd <2 x float> %238, %178, !dbg !30
  %241 = fadd <2 x float> %238, %176, !dbg !30
  %242 = fadd <2 x float> %238, %174, !dbg !30
  %243 = insertelement <2 x float> poison, float %236, i64 0, !dbg !30
  %244 = shufflevector <2 x float> %243, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !30
  %245 = fadd <2 x float> %244, %188, !dbg !30
  %246 = fadd <2 x float> %244, %186, !dbg !30
  %247 = fadd <2 x float> %244, %184, !dbg !30
  %248 = fadd <2 x float> %244, %182, !dbg !30
  %249 = fmul <2 x float> %226, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %250 = fmul <2 x float> %227, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %251 = fmul <2 x float> %228, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %252 = fmul <2 x float> %229, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %253 = fmul <2 x float> %230, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %254 = fmul <2 x float> %231, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %255 = fmul <2 x float> %232, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %256 = fmul <2 x float> %233, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %257 = fadd <2 x float> %249, %239, !dbg !42
  %258 = fadd <2 x float> %250, %240, !dbg !42
  %259 = fadd <2 x float> %251, %241, !dbg !42
  %260 = fadd <2 x float> %252, %242, !dbg !42
  %261 = fadd <2 x float> %253, %245, !dbg !42
  %262 = fadd <2 x float> %254, %246, !dbg !42
  %263 = fadd <2 x float> %255, %247, !dbg !42
  %264 = fadd <2 x float> %256, %248, !dbg !42
  %265 = fptrunc <2 x float> %257 to <2 x half>, !dbg !39
  %266 = fptrunc <2 x float> %258 to <2 x half>, !dbg !39
  %267 = fptrunc <2 x float> %259 to <2 x half>, !dbg !39
  %268 = fptrunc <2 x float> %260 to <2 x half>, !dbg !39
  %269 = fptrunc <2 x float> %261 to <2 x half>, !dbg !39
  %270 = fptrunc <2 x float> %262 to <2 x half>, !dbg !39
  %271 = fptrunc <2 x float> %263 to <2 x half>, !dbg !39
  %272 = fptrunc <2 x float> %264 to <2 x half>, !dbg !39
  %273 = bitcast <2 x half> %265 to i32, !dbg !39
  %274 = bitcast <2 x half> %266 to i32, !dbg !39
  %275 = bitcast <2 x half> %267 to i32, !dbg !39
  %276 = bitcast <2 x half> %268 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %273, i32 %274, i32 %275, i32 %276, ptr addrspace(1) %170, i1 %52) #2, !dbg !39
  %277 = bitcast <2 x half> %269 to i32, !dbg !39
  %278 = bitcast <2 x half> %270 to i32, !dbg !39
  %279 = bitcast <2 x half> %271 to i32, !dbg !39
  %280 = bitcast <2 x half> %272 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %172, i1 %53) #2, !dbg !39
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chh7iszk6ffhaazzfhwqeazairgxtcdh6ogpnu4oipif47wazn2t.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hh")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 41, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 55, scope: !5)
!26 = !DILocation(line: 33, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 95, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 35, column: 30, scope: !5)
!30 = !DILocation(line: 36, column: 18, scope: !5)
!31 = !DILocation(line: 40, column: 35, scope: !5)
!32 = !DILocation(line: 40, column: 49, scope: !5)
!33 = !DILocation(line: 40, column: 31, scope: !5)
!34 = !DILocation(line: 40, column: 42, scope: !5)
!35 = !DILocation(line: 40, column: 25, scope: !5)
!36 = !DILocation(line: 34, column: 35, scope: !5)
!37 = !DILocation(line: 34, column: 75, scope: !5)
!38 = !DILocation(line: 35, column: 47, scope: !5)
!39 = !DILocation(line: 40, column: 61, scope: !5)
!40 = !DILocation(line: 35, column: 95, scope: !5)
!41 = !DILocation(line: 38, column: 18, scope: !5)
!42 = !DILocation(line: 39, column: 18, scope: !5)
!43 = !DILocation(line: 40, column: 4, scope: !5)
