; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = lshr i32 %8, 6, !dbg !8
  %10 = and i32 %9, 3, !dbg !8
  %11 = or i32 %10, 4, !dbg !8
  %12 = or i32 %10, 8, !dbg !8
  %13 = or i32 %10, 12, !dbg !8
  %14 = shl i32 %8, 3, !dbg !8
  %15 = and i32 %14, 8, !dbg !8
  %16 = shl i32 %8, 2, !dbg !9
  %17 = and i32 %16, 252, !dbg !9
  %18 = lshr i32 %8, 1, !dbg !9
  %19 = and i32 %18, 127, !dbg !9
  %20 = or i32 %19, 128, !dbg !9
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %23 = add i32 %22, 1, !dbg !12
  %24 = shl i32 %21, 4, !dbg !13
  %25 = mul i32 %24, %23, !dbg !14
  %26 = or i32 %25, %10, !dbg !15
  %27 = or i32 %25, %11, !dbg !15
  %28 = or i32 %25, %12, !dbg !15
  %29 = or i32 %25, %13, !dbg !15
  %30 = or i32 %25, %15, !dbg !15
  %31 = icmp slt i32 %26, 7040, !dbg !16
  %32 = icmp slt i32 %27, 7040, !dbg !16
  %33 = icmp slt i32 %28, 7040, !dbg !16
  %34 = icmp slt i32 %29, 7040, !dbg !16
  %35 = icmp slt i32 %30, 7040, !dbg !16
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %37 = shl i32 %36, 8, !dbg !18
  %38 = or i32 %37, %17, !dbg !19
  %39 = or i32 %37, %19, !dbg !19
  %40 = or i32 %37, %20, !dbg !19
  %41 = icmp slt i32 %38, 2700, !dbg !20
  %42 = icmp slt i32 %39, 2700, !dbg !20
  %43 = icmp slt i32 %40, 2700, !dbg !20
  %.frozen = freeze i32 %30
  %44 = sdiv i32 %.frozen, 320, !dbg !21
  %45 = mul i32 %44, 320
  %.decomposed = sub i32 %.frozen, %45
  %46 = mul i32 %26, 2700, !dbg !22
  %47 = mul i32 %27, 2700, !dbg !22
  %48 = mul i32 %28, 2700, !dbg !22
  %49 = mul i32 %29, 2700, !dbg !22
  %50 = add i32 %46, %38, !dbg !23
  %51 = add i32 %47, %38, !dbg !23
  %52 = add i32 %48, %38, !dbg !23
  %53 = add i32 %49, %38, !dbg !23
  %54 = sext i32 %50 to i64, !dbg !24
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %51 to i64, !dbg !24
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %52 to i64, !dbg !24
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = sext i32 %53 to i64, !dbg !24
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !24
  %62 = and i1 %41, %31, !dbg !25
  %63 = and i1 %41, %32, !dbg !25
  %64 = and i1 %41, %33, !dbg !25
  %65 = and i1 %41, %34, !dbg !25
  %66 = and i1 %42, %35, !dbg !25
  %67 = and i1 %43, %35, !dbg !25
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %62) #2, !dbg !26
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !26
  %71 = trunc i32 %69 to i16, !dbg !26
  %extelt.offset = lshr i32 %69, 16, !dbg !26
  %72 = trunc i32 %extelt.offset to i16, !dbg !26
  %73 = trunc i32 %70 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %70, 16, !dbg !26
  %74 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %63) #2, !dbg !26
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !26
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !26
  %78 = trunc i32 %76 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %76, 16, !dbg !26
  %79 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %80 = trunc i32 %77 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %77, 16, !dbg !26
  %81 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %64) #2, !dbg !26
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !26
  %85 = trunc i32 %83 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %83, 16, !dbg !26
  %86 = trunc i32 %extelt.offset4 to i16, !dbg !26
  %87 = trunc i32 %84 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %84, 16, !dbg !26
  %88 = trunc i32 %extelt.offset5 to i16, !dbg !26
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %65) #2, !dbg !26
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !26
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !26
  %92 = trunc i32 %90 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %90, 16, !dbg !26
  %93 = trunc i32 %extelt.offset6 to i16, !dbg !26
  %94 = trunc i32 %91 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %91, 16, !dbg !26
  %95 = trunc i32 %extelt.offset7 to i16, !dbg !26
  %96 = mul nuw nsw i32 %17, 24, !dbg !27
  %97 = or i32 %96, %10, !dbg !27
  %98 = zext nneg i32 %97 to i64, !dbg !27
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !27
  store i16 %71, ptr addrspace(3) %99, align 2, !dbg !27
  %100 = or i32 %17, 1, !dbg !27
  %101 = mul nuw nsw i32 %100, 24, !dbg !27
  %102 = or i32 %101, %10, !dbg !27
  %103 = zext nneg i32 %102 to i64, !dbg !27
  %104 = getelementptr half, ptr addrspace(3) @global_smem, i64 %103, !dbg !27
  store i16 %72, ptr addrspace(3) %104, align 2, !dbg !27
  %105 = or i32 %17, 2, !dbg !27
  %106 = mul nuw nsw i32 %105, 24, !dbg !27
  %107 = or i32 %106, %10, !dbg !27
  %108 = zext nneg i32 %107 to i64, !dbg !27
  %109 = getelementptr half, ptr addrspace(3) @global_smem, i64 %108, !dbg !27
  store i16 %73, ptr addrspace(3) %109, align 2, !dbg !27
  %110 = or i32 %17, 3, !dbg !27
  %111 = mul nuw nsw i32 %110, 24, !dbg !27
  %112 = or i32 %111, %10, !dbg !27
  %113 = zext nneg i32 %112 to i64, !dbg !27
  %114 = getelementptr half, ptr addrspace(3) @global_smem, i64 %113, !dbg !27
  store i16 %74, ptr addrspace(3) %114, align 2, !dbg !27
  %115 = or i32 %96, %11, !dbg !27
  %116 = zext nneg i32 %115 to i64, !dbg !27
  %117 = getelementptr half, ptr addrspace(3) @global_smem, i64 %116, !dbg !27
  store i16 %78, ptr addrspace(3) %117, align 2, !dbg !27
  %118 = or i32 %101, %11, !dbg !27
  %119 = zext nneg i32 %118 to i64, !dbg !27
  %120 = getelementptr half, ptr addrspace(3) @global_smem, i64 %119, !dbg !27
  store i16 %79, ptr addrspace(3) %120, align 2, !dbg !27
  %121 = or i32 %106, %11, !dbg !27
  %122 = zext nneg i32 %121 to i64, !dbg !27
  %123 = getelementptr half, ptr addrspace(3) @global_smem, i64 %122, !dbg !27
  store i16 %80, ptr addrspace(3) %123, align 2, !dbg !27
  %124 = or i32 %111, %11, !dbg !27
  %125 = zext nneg i32 %124 to i64, !dbg !27
  %126 = getelementptr half, ptr addrspace(3) @global_smem, i64 %125, !dbg !27
  store i16 %81, ptr addrspace(3) %126, align 2, !dbg !27
  %127 = or i32 %96, %12, !dbg !27
  %128 = zext nneg i32 %127 to i64, !dbg !27
  %129 = getelementptr half, ptr addrspace(3) @global_smem, i64 %128, !dbg !27
  store i16 %85, ptr addrspace(3) %129, align 2, !dbg !27
  %130 = add nuw nsw i32 %101, %12, !dbg !27
  %131 = zext nneg i32 %130 to i64, !dbg !27
  %132 = getelementptr half, ptr addrspace(3) @global_smem, i64 %131, !dbg !27
  store i16 %86, ptr addrspace(3) %132, align 2, !dbg !27
  %133 = or i32 %106, %12, !dbg !27
  %134 = zext nneg i32 %133 to i64, !dbg !27
  %135 = getelementptr half, ptr addrspace(3) @global_smem, i64 %134, !dbg !27
  store i16 %87, ptr addrspace(3) %135, align 2, !dbg !27
  %136 = add nuw nsw i32 %111, %12, !dbg !27
  %137 = zext nneg i32 %136 to i64, !dbg !27
  %138 = getelementptr half, ptr addrspace(3) @global_smem, i64 %137, !dbg !27
  store i16 %88, ptr addrspace(3) %138, align 2, !dbg !27
  %139 = or i32 %96, %13, !dbg !27
  %140 = zext nneg i32 %139 to i64, !dbg !27
  %141 = getelementptr half, ptr addrspace(3) @global_smem, i64 %140, !dbg !27
  store i16 %92, ptr addrspace(3) %141, align 2, !dbg !27
  %142 = add nuw nsw i32 %101, %13, !dbg !27
  %143 = zext nneg i32 %142 to i64, !dbg !27
  %144 = getelementptr half, ptr addrspace(3) @global_smem, i64 %143, !dbg !27
  store i16 %93, ptr addrspace(3) %144, align 2, !dbg !27
  %145 = or i32 %106, %13, !dbg !27
  %146 = zext nneg i32 %145 to i64, !dbg !27
  %147 = getelementptr half, ptr addrspace(3) @global_smem, i64 %146, !dbg !27
  store i16 %94, ptr addrspace(3) %147, align 2, !dbg !27
  %148 = add nuw nsw i32 %111, %13, !dbg !27
  %149 = zext nneg i32 %148 to i64, !dbg !27
  %150 = getelementptr half, ptr addrspace(3) @global_smem, i64 %149, !dbg !27
  store i16 %95, ptr addrspace(3) %150, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %151 = mul nuw nsw i32 %19, 24, !dbg !27
  %152 = add nuw nsw i32 %151, %15, !dbg !27
  %153 = zext nneg i32 %152 to i64, !dbg !27
  %154 = getelementptr half, ptr addrspace(3) @global_smem, i64 %153, !dbg !27
  %155 = load half, ptr addrspace(3) %154, align 16, !dbg !27
  %156 = getelementptr inbounds <8 x half>, ptr addrspace(3) %154, i64 0, i64 1, !dbg !27
  %157 = load half, ptr addrspace(3) %156, align 2, !dbg !27
  %158 = getelementptr inbounds <8 x half>, ptr addrspace(3) %154, i64 0, i64 2, !dbg !27
  %159 = load half, ptr addrspace(3) %158, align 4, !dbg !27
  %160 = getelementptr inbounds <8 x half>, ptr addrspace(3) %154, i64 0, i64 3, !dbg !27
  %161 = load half, ptr addrspace(3) %160, align 2, !dbg !27
  %162 = getelementptr inbounds <8 x half>, ptr addrspace(3) %154, i64 0, i64 4, !dbg !27
  %163 = load half, ptr addrspace(3) %162, align 8, !dbg !27
  %164 = getelementptr inbounds <8 x half>, ptr addrspace(3) %154, i64 0, i64 5, !dbg !27
  %165 = load half, ptr addrspace(3) %164, align 2, !dbg !27
  %166 = getelementptr inbounds <8 x half>, ptr addrspace(3) %154, i64 0, i64 6, !dbg !27
  %167 = load half, ptr addrspace(3) %166, align 4, !dbg !27
  %168 = getelementptr inbounds <8 x half>, ptr addrspace(3) %154, i64 0, i64 7, !dbg !27
  %169 = load half, ptr addrspace(3) %168, align 2, !dbg !27
  %170 = mul nuw nsw i32 %20, 24, !dbg !27
  %171 = add nuw nsw i32 %170, %15, !dbg !27
  %172 = zext nneg i32 %171 to i64, !dbg !27
  %173 = getelementptr half, ptr addrspace(3) @global_smem, i64 %172, !dbg !27
  %174 = load half, ptr addrspace(3) %173, align 16, !dbg !27
  %175 = getelementptr inbounds <8 x half>, ptr addrspace(3) %173, i64 0, i64 1, !dbg !27
  %176 = load half, ptr addrspace(3) %175, align 2, !dbg !27
  %177 = getelementptr inbounds <8 x half>, ptr addrspace(3) %173, i64 0, i64 2, !dbg !27
  %178 = load half, ptr addrspace(3) %177, align 4, !dbg !27
  %179 = getelementptr inbounds <8 x half>, ptr addrspace(3) %173, i64 0, i64 3, !dbg !27
  %180 = load half, ptr addrspace(3) %179, align 2, !dbg !27
  %181 = getelementptr inbounds <8 x half>, ptr addrspace(3) %173, i64 0, i64 4, !dbg !27
  %182 = load half, ptr addrspace(3) %181, align 8, !dbg !27
  %183 = getelementptr inbounds <8 x half>, ptr addrspace(3) %173, i64 0, i64 5, !dbg !27
  %184 = load half, ptr addrspace(3) %183, align 2, !dbg !27
  %185 = getelementptr inbounds <8 x half>, ptr addrspace(3) %173, i64 0, i64 6, !dbg !27
  %186 = load half, ptr addrspace(3) %185, align 4, !dbg !27
  %187 = getelementptr inbounds <8 x half>, ptr addrspace(3) %173, i64 0, i64 7, !dbg !27
  %188 = load half, ptr addrspace(3) %187, align 2, !dbg !27
  %189 = fpext half %155 to float, !dbg !27
  %190 = fpext half %157 to float, !dbg !27
  %191 = fpext half %159 to float, !dbg !27
  %192 = fpext half %161 to float, !dbg !27
  %193 = fpext half %163 to float, !dbg !27
  %194 = fpext half %165 to float, !dbg !27
  %195 = fpext half %167 to float, !dbg !27
  %196 = fpext half %169 to float, !dbg !27
  %197 = fpext half %174 to float, !dbg !27
  %198 = fpext half %176 to float, !dbg !27
  %199 = fpext half %178 to float, !dbg !27
  %200 = fpext half %180 to float, !dbg !27
  %201 = fpext half %182 to float, !dbg !27
  %202 = fpext half %184 to float, !dbg !27
  %203 = fpext half %186 to float, !dbg !27
  %204 = fpext half %188 to float, !dbg !27
  %205 = mul i32 %39, 320, !dbg !28
  %206 = mul i32 %40, 320, !dbg !28
  %207 = mul i32 %44, 864000, !dbg !29
  %208 = add i32 %207, %.decomposed, !dbg !30
  %209 = add i32 %208, %205, !dbg !31
  %210 = add i32 %208, %206, !dbg !31
  %211 = sext i32 %209 to i64, !dbg !32
  %212 = getelementptr half, ptr addrspace(1) %1, i64 %211, !dbg !32
  %213 = sext i32 %210 to i64, !dbg !32
  %214 = getelementptr half, ptr addrspace(1) %1, i64 %213, !dbg !32
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %212, i1 %66) #2, !dbg !33
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !33
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !33
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !33
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !33
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %214, i1 %67) #2, !dbg !33
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !33
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !33
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !33
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !33
  %225 = trunc i32 %221 to i16, !dbg !33
  %226 = bitcast i16 %225 to half, !dbg !33
  %227 = trunc i32 %222 to i16, !dbg !33
  %228 = bitcast i16 %227 to half, !dbg !33
  %229 = trunc i32 %223 to i16, !dbg !33
  %230 = bitcast i16 %229 to half, !dbg !33
  %231 = trunc i32 %224 to i16, !dbg !33
  %232 = bitcast i16 %231 to half, !dbg !33
  %233 = fpext half %226 to float, !dbg !34
  %234 = fpext half %228 to float, !dbg !34
  %235 = fpext half %230 to float, !dbg !34
  %236 = fpext half %232 to float, !dbg !34
  %237 = sext i32 %.decomposed to i64, !dbg !35
  %238 = getelementptr half, ptr addrspace(1) %2, i64 %237, !dbg !35
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %238, i1 %35) #2, !dbg !36
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !36
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !36
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !36
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !36
  %extelt.offset16 = lshr i32 %240, 16, !dbg !36
  %244 = trunc i32 %extelt.offset16 to i16, !dbg !36
  %245 = bitcast i16 %244 to half, !dbg !36
  %extelt.offset17 = lshr i32 %241, 16, !dbg !36
  %246 = trunc i32 %extelt.offset17 to i16, !dbg !36
  %247 = bitcast i16 %246 to half, !dbg !36
  %extelt.offset18 = lshr i32 %242, 16, !dbg !36
  %248 = trunc i32 %extelt.offset18 to i16, !dbg !36
  %249 = bitcast i16 %248 to half, !dbg !36
  %extelt.offset19 = lshr i32 %243, 16, !dbg !36
  %250 = trunc i32 %extelt.offset19 to i16, !dbg !36
  %251 = bitcast i16 %250 to half, !dbg !36
  %252 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !33
  %253 = insertelement <2 x i32> %252, i32 %240, i64 1, !dbg !33
  %254 = trunc <2 x i32> %253 to <2 x i16>, !dbg !33
  %255 = bitcast <2 x i16> %254 to <2 x half>, !dbg !33
  %256 = fpext <2 x half> %255 to <2 x float>, !dbg !34
  %257 = fpext half %245 to float, !dbg !37
  %258 = insertelement <2 x i32> poison, i32 %217, i64 0, !dbg !33
  %259 = insertelement <2 x i32> %258, i32 %241, i64 1, !dbg !33
  %260 = trunc <2 x i32> %259 to <2 x i16>, !dbg !33
  %261 = bitcast <2 x i16> %260 to <2 x half>, !dbg !33
  %262 = fpext <2 x half> %261 to <2 x float>, !dbg !34
  %263 = fpext half %247 to float, !dbg !37
  %264 = insertelement <2 x i32> poison, i32 %218, i64 0, !dbg !33
  %265 = insertelement <2 x i32> %264, i32 %242, i64 1, !dbg !33
  %266 = trunc <2 x i32> %265 to <2 x i16>, !dbg !33
  %267 = bitcast <2 x i16> %266 to <2 x half>, !dbg !33
  %268 = fpext <2 x half> %267 to <2 x float>, !dbg !34
  %269 = fpext half %249 to float, !dbg !37
  %270 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !33
  %271 = insertelement <2 x i32> %270, i32 %243, i64 1, !dbg !33
  %272 = trunc <2 x i32> %271 to <2 x i16>, !dbg !33
  %273 = bitcast <2 x i16> %272 to <2 x half>, !dbg !33
  %274 = fpext <2 x half> %273 to <2 x float>, !dbg !34
  %275 = fpext half %251 to float, !dbg !37
  %276 = getelementptr half, ptr addrspace(1) %3, i64 %211, !dbg !38
  %277 = getelementptr half, ptr addrspace(1) %3, i64 %213, !dbg !38
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %276, i1 %66) #2, !dbg !39
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !39
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !39
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !39
  %283 = trunc i32 %279 to i16, !dbg !39
  %284 = bitcast i16 %283 to half, !dbg !39
  %285 = trunc i32 %280 to i16, !dbg !39
  %286 = bitcast i16 %285 to half, !dbg !39
  %287 = trunc i32 %281 to i16, !dbg !39
  %288 = bitcast i16 %287 to half, !dbg !39
  %289 = trunc i32 %282 to i16, !dbg !39
  %290 = bitcast i16 %289 to half, !dbg !39
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %277, i1 %67) #2, !dbg !39
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !39
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !39
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !39
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !39
  %296 = trunc i32 %292 to i16, !dbg !39
  %297 = bitcast i16 %296 to half, !dbg !39
  %298 = trunc i32 %293 to i16, !dbg !39
  %299 = bitcast i16 %298 to half, !dbg !39
  %300 = trunc i32 %294 to i16, !dbg !39
  %301 = bitcast i16 %300 to half, !dbg !39
  %302 = trunc i32 %295 to i16, !dbg !39
  %303 = bitcast i16 %302 to half, !dbg !39
  %304 = fpext half %284 to float, !dbg !40
  %305 = fpext half %286 to float, !dbg !40
  %306 = fpext half %288 to float, !dbg !40
  %307 = fpext half %290 to float, !dbg !40
  %308 = fpext half %297 to float, !dbg !40
  %309 = fpext half %299 to float, !dbg !40
  %310 = fpext half %301 to float, !dbg !40
  %311 = fpext half %303 to float, !dbg !40
  %312 = extractelement <2 x float> %256, i64 0, !dbg !41
  %313 = extractelement <2 x float> %256, i64 1, !dbg !41
  %314 = fadd float %312, %313, !dbg !41
  %315 = extractelement <2 x float> %262, i64 0, !dbg !41
  %316 = extractelement <2 x float> %262, i64 1, !dbg !41
  %317 = fadd float %315, %316, !dbg !41
  %318 = extractelement <2 x float> %268, i64 0, !dbg !41
  %319 = extractelement <2 x float> %268, i64 1, !dbg !41
  %320 = fadd float %318, %319, !dbg !41
  %321 = extractelement <2 x float> %274, i64 0, !dbg !41
  %322 = extractelement <2 x float> %274, i64 1, !dbg !41
  %323 = fadd float %321, %322, !dbg !41
  %324 = fadd float %313, %233, !dbg !41
  %325 = fadd float %316, %234, !dbg !41
  %326 = fadd float %319, %235, !dbg !41
  %327 = fadd float %322, %236, !dbg !41
  %328 = fmul float %304, 1.250000e-01, !dbg !42
  %329 = insertelement <2 x i32> %252, i32 %279, i64 1, !dbg !33
  %330 = lshr <2 x i32> %329, <i32 16, i32 16>, !dbg !33
  %331 = trunc <2 x i32> %330 to <2 x i16>, !dbg !33
  %332 = bitcast <2 x i16> %331 to <2 x half>, !dbg !33
  %333 = fpext <2 x half> %332 to <2 x float>, !dbg !34
  %334 = fmul float %305, 1.250000e-01, !dbg !42
  %335 = insertelement <2 x i32> %258, i32 %280, i64 1, !dbg !33
  %336 = lshr <2 x i32> %335, <i32 16, i32 16>, !dbg !33
  %337 = trunc <2 x i32> %336 to <2 x i16>, !dbg !33
  %338 = bitcast <2 x i16> %337 to <2 x half>, !dbg !33
  %339 = fpext <2 x half> %338 to <2 x float>, !dbg !34
  %340 = fmul float %306, 1.250000e-01, !dbg !42
  %341 = insertelement <2 x i32> %264, i32 %281, i64 1, !dbg !33
  %342 = lshr <2 x i32> %341, <i32 16, i32 16>, !dbg !33
  %343 = trunc <2 x i32> %342 to <2 x i16>, !dbg !33
  %344 = bitcast <2 x i16> %343 to <2 x half>, !dbg !33
  %345 = fpext <2 x half> %344 to <2 x float>, !dbg !34
  %346 = fmul float %307, 1.250000e-01, !dbg !42
  %347 = insertelement <2 x i32> %270, i32 %282, i64 1, !dbg !33
  %348 = lshr <2 x i32> %347, <i32 16, i32 16>, !dbg !33
  %349 = trunc <2 x i32> %348 to <2 x i16>, !dbg !33
  %350 = bitcast <2 x i16> %349 to <2 x half>, !dbg !33
  %351 = fpext <2 x half> %350 to <2 x float>, !dbg !34
  %352 = fmul float %308, 1.250000e-01, !dbg !42
  %353 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !33
  %354 = insertelement <2 x i32> %353, i32 %292, i64 1, !dbg !33
  %355 = lshr <2 x i32> %354, <i32 16, i32 16>, !dbg !33
  %356 = trunc <2 x i32> %355 to <2 x i16>, !dbg !33
  %357 = bitcast <2 x i16> %356 to <2 x half>, !dbg !33
  %358 = fpext <2 x half> %357 to <2 x float>, !dbg !34
  %359 = fmul float %309, 1.250000e-01, !dbg !42
  %360 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !33
  %361 = insertelement <2 x i32> %360, i32 %293, i64 1, !dbg !33
  %362 = lshr <2 x i32> %361, <i32 16, i32 16>, !dbg !33
  %363 = trunc <2 x i32> %362 to <2 x i16>, !dbg !33
  %364 = bitcast <2 x i16> %363 to <2 x half>, !dbg !33
  %365 = fpext <2 x half> %364 to <2 x float>, !dbg !34
  %366 = fmul float %310, 1.250000e-01, !dbg !42
  %367 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !33
  %368 = insertelement <2 x i32> %367, i32 %294, i64 1, !dbg !33
  %369 = lshr <2 x i32> %368, <i32 16, i32 16>, !dbg !33
  %370 = trunc <2 x i32> %369 to <2 x i16>, !dbg !33
  %371 = bitcast <2 x i16> %370 to <2 x half>, !dbg !33
  %372 = fpext <2 x half> %371 to <2 x float>, !dbg !34
  %373 = fmul float %311, 1.250000e-01, !dbg !42
  %374 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !33
  %375 = insertelement <2 x i32> %374, i32 %295, i64 1, !dbg !33
  %376 = lshr <2 x i32> %375, <i32 16, i32 16>, !dbg !33
  %377 = trunc <2 x i32> %376 to <2 x i16>, !dbg !33
  %378 = bitcast <2 x i16> %377 to <2 x half>, !dbg !33
  %379 = fpext <2 x half> %378 to <2 x float>, !dbg !34
  %380 = fadd float %314, %328, !dbg !43
  %381 = extractelement <2 x float> %333, i64 0, !dbg !43
  %382 = fadd float %381, %257, !dbg !43
  %383 = extractelement <2 x float> %333, i64 1, !dbg !43
  %384 = fmul float %383, 1.250000e-01, !dbg !43
  %385 = fadd float %382, %384, !dbg !43
  %386 = fadd float %317, %334, !dbg !43
  %387 = extractelement <2 x float> %339, i64 0, !dbg !43
  %388 = fadd float %387, %263, !dbg !43
  %389 = extractelement <2 x float> %339, i64 1, !dbg !43
  %390 = fmul float %389, 1.250000e-01, !dbg !43
  %391 = fadd float %388, %390, !dbg !43
  %392 = fadd float %320, %340, !dbg !43
  %393 = extractelement <2 x float> %345, i64 0, !dbg !43
  %394 = fadd float %393, %269, !dbg !43
  %395 = extractelement <2 x float> %345, i64 1, !dbg !43
  %396 = fmul float %395, 1.250000e-01, !dbg !43
  %397 = fadd float %394, %396, !dbg !43
  %398 = fadd float %323, %346, !dbg !43
  %399 = extractelement <2 x float> %351, i64 0, !dbg !43
  %400 = fadd float %399, %275, !dbg !43
  %401 = extractelement <2 x float> %351, i64 1, !dbg !43
  %402 = fmul float %401, 1.250000e-01, !dbg !43
  %403 = fadd float %400, %402, !dbg !43
  %404 = fadd float %324, %352, !dbg !43
  %405 = extractelement <2 x float> %358, i64 0, !dbg !43
  %406 = fadd float %405, %257, !dbg !43
  %407 = extractelement <2 x float> %358, i64 1, !dbg !43
  %408 = fmul float %407, 1.250000e-01, !dbg !43
  %409 = fadd float %406, %408, !dbg !43
  %410 = fadd float %325, %359, !dbg !43
  %411 = extractelement <2 x float> %365, i64 0, !dbg !43
  %412 = fadd float %411, %263, !dbg !43
  %413 = extractelement <2 x float> %365, i64 1, !dbg !43
  %414 = fmul float %413, 1.250000e-01, !dbg !43
  %415 = fadd float %412, %414, !dbg !43
  %416 = fadd float %326, %366, !dbg !43
  %417 = extractelement <2 x float> %372, i64 0, !dbg !43
  %418 = fadd float %417, %269, !dbg !43
  %419 = extractelement <2 x float> %372, i64 1, !dbg !43
  %420 = fmul float %419, 1.250000e-01, !dbg !43
  %421 = fadd float %418, %420, !dbg !43
  %422 = fadd float %327, %373, !dbg !43
  %423 = extractelement <2 x float> %379, i64 0, !dbg !43
  %424 = fadd float %423, %275, !dbg !43
  %425 = extractelement <2 x float> %379, i64 1, !dbg !43
  %426 = fmul float %425, 1.250000e-01, !dbg !43
  %427 = fadd float %424, %426, !dbg !43
  %428 = fadd float %380, %189, !dbg !44
  %429 = fadd float %385, %190, !dbg !44
  %430 = fadd float %386, %191, !dbg !44
  %431 = fadd float %391, %192, !dbg !44
  %432 = fadd float %392, %193, !dbg !44
  %433 = fadd float %397, %194, !dbg !44
  %434 = fadd float %398, %195, !dbg !44
  %435 = fadd float %403, %196, !dbg !44
  %436 = fadd float %404, %197, !dbg !44
  %437 = fadd float %409, %198, !dbg !44
  %438 = fadd float %410, %199, !dbg !44
  %439 = fadd float %415, %200, !dbg !44
  %440 = fadd float %416, %201, !dbg !44
  %441 = fadd float %421, %202, !dbg !44
  %442 = fadd float %422, %203, !dbg !44
  %443 = fadd float %427, %204, !dbg !44
  %444 = getelementptr half, ptr addrspace(1) %4, i64 %54, !dbg !45
  %445 = getelementptr half, ptr addrspace(1) %4, i64 %56, !dbg !45
  %446 = getelementptr half, ptr addrspace(1) %4, i64 %58, !dbg !45
  %447 = getelementptr half, ptr addrspace(1) %4, i64 %60, !dbg !45
  %448 = fptrunc float %428 to half, !dbg !46
  %449 = fptrunc float %429 to half, !dbg !46
  %450 = fptrunc float %430 to half, !dbg !46
  %451 = fptrunc float %431 to half, !dbg !46
  %452 = fptrunc float %432 to half, !dbg !46
  %453 = fptrunc float %433 to half, !dbg !46
  %454 = fptrunc float %434 to half, !dbg !46
  %455 = fptrunc float %435 to half, !dbg !46
  %456 = fptrunc float %436 to half, !dbg !46
  %457 = fptrunc float %437 to half, !dbg !46
  %458 = fptrunc float %438 to half, !dbg !46
  %459 = fptrunc float %439 to half, !dbg !46
  %460 = fptrunc float %440 to half, !dbg !46
  %461 = fptrunc float %441 to half, !dbg !46
  %462 = fptrunc float %442 to half, !dbg !46
  %463 = fptrunc float %443 to half, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %464 = mul nuw nsw i32 %15, 257, !dbg !46
  %465 = add nuw nsw i32 %464, %19, !dbg !46
  %466 = zext nneg i32 %465 to i64, !dbg !46
  %467 = getelementptr half, ptr addrspace(3) @global_smem, i64 %466, !dbg !46
  %468 = insertelement <1 x half> undef, half %448, i64 0, !dbg !46
  store <1 x half> %468, ptr addrspace(3) %467, align 2, !dbg !46
  %469 = add nuw nsw i32 %464, 257, !dbg !46
  %470 = add nuw nsw i32 %469, %19, !dbg !46
  %471 = zext nneg i32 %470 to i64, !dbg !46
  %472 = getelementptr half, ptr addrspace(3) @global_smem, i64 %471, !dbg !46
  %473 = insertelement <1 x half> undef, half %449, i64 0, !dbg !46
  store <1 x half> %473, ptr addrspace(3) %472, align 2, !dbg !46
  %474 = add nuw nsw i32 %464, 514, !dbg !46
  %475 = add nuw nsw i32 %474, %19, !dbg !46
  %476 = zext nneg i32 %475 to i64, !dbg !46
  %477 = getelementptr half, ptr addrspace(3) @global_smem, i64 %476, !dbg !46
  %478 = insertelement <1 x half> undef, half %450, i64 0, !dbg !46
  store <1 x half> %478, ptr addrspace(3) %477, align 2, !dbg !46
  %479 = add nuw nsw i32 %464, 771, !dbg !46
  %480 = add nuw nsw i32 %479, %19, !dbg !46
  %481 = zext nneg i32 %480 to i64, !dbg !46
  %482 = getelementptr half, ptr addrspace(3) @global_smem, i64 %481, !dbg !46
  %483 = insertelement <1 x half> undef, half %451, i64 0, !dbg !46
  store <1 x half> %483, ptr addrspace(3) %482, align 2, !dbg !46
  %484 = add nuw nsw i32 %464, 1028, !dbg !46
  %485 = add nuw nsw i32 %484, %19, !dbg !46
  %486 = zext nneg i32 %485 to i64, !dbg !46
  %487 = getelementptr half, ptr addrspace(3) @global_smem, i64 %486, !dbg !46
  %488 = insertelement <1 x half> undef, half %452, i64 0, !dbg !46
  store <1 x half> %488, ptr addrspace(3) %487, align 2, !dbg !46
  %489 = add nuw nsw i32 %464, 1285, !dbg !46
  %490 = add nuw nsw i32 %489, %19, !dbg !46
  %491 = zext nneg i32 %490 to i64, !dbg !46
  %492 = getelementptr half, ptr addrspace(3) @global_smem, i64 %491, !dbg !46
  %493 = insertelement <1 x half> undef, half %453, i64 0, !dbg !46
  store <1 x half> %493, ptr addrspace(3) %492, align 2, !dbg !46
  %494 = add nuw nsw i32 %464, 1542, !dbg !46
  %495 = add nuw nsw i32 %494, %19, !dbg !46
  %496 = zext nneg i32 %495 to i64, !dbg !46
  %497 = getelementptr half, ptr addrspace(3) @global_smem, i64 %496, !dbg !46
  %498 = insertelement <1 x half> undef, half %454, i64 0, !dbg !46
  store <1 x half> %498, ptr addrspace(3) %497, align 2, !dbg !46
  %499 = add nuw nsw i32 %464, 1799, !dbg !46
  %500 = add nuw nsw i32 %499, %19, !dbg !46
  %501 = zext nneg i32 %500 to i64, !dbg !46
  %502 = getelementptr half, ptr addrspace(3) @global_smem, i64 %501, !dbg !46
  %503 = insertelement <1 x half> undef, half %455, i64 0, !dbg !46
  store <1 x half> %503, ptr addrspace(3) %502, align 2, !dbg !46
  %504 = add nuw nsw i32 %464, %20, !dbg !46
  %505 = zext nneg i32 %504 to i64, !dbg !46
  %506 = getelementptr half, ptr addrspace(3) @global_smem, i64 %505, !dbg !46
  %507 = insertelement <1 x half> undef, half %456, i64 0, !dbg !46
  store <1 x half> %507, ptr addrspace(3) %506, align 2, !dbg !46
  %508 = add nuw nsw i32 %469, %20, !dbg !46
  %509 = zext nneg i32 %508 to i64, !dbg !46
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i64 %509, !dbg !46
  %511 = insertelement <1 x half> undef, half %457, i64 0, !dbg !46
  store <1 x half> %511, ptr addrspace(3) %510, align 2, !dbg !46
  %512 = add nuw nsw i32 %474, %20, !dbg !46
  %513 = zext nneg i32 %512 to i64, !dbg !46
  %514 = getelementptr half, ptr addrspace(3) @global_smem, i64 %513, !dbg !46
  %515 = insertelement <1 x half> undef, half %458, i64 0, !dbg !46
  store <1 x half> %515, ptr addrspace(3) %514, align 2, !dbg !46
  %516 = add nuw nsw i32 %479, %20, !dbg !46
  %517 = zext nneg i32 %516 to i64, !dbg !46
  %518 = getelementptr half, ptr addrspace(3) @global_smem, i64 %517, !dbg !46
  %519 = insertelement <1 x half> undef, half %459, i64 0, !dbg !46
  store <1 x half> %519, ptr addrspace(3) %518, align 2, !dbg !46
  %520 = add nuw nsw i32 %484, %20, !dbg !46
  %521 = zext nneg i32 %520 to i64, !dbg !46
  %522 = getelementptr half, ptr addrspace(3) @global_smem, i64 %521, !dbg !46
  %523 = insertelement <1 x half> undef, half %460, i64 0, !dbg !46
  store <1 x half> %523, ptr addrspace(3) %522, align 2, !dbg !46
  %524 = add nuw nsw i32 %489, %20, !dbg !46
  %525 = zext nneg i32 %524 to i64, !dbg !46
  %526 = getelementptr half, ptr addrspace(3) @global_smem, i64 %525, !dbg !46
  %527 = insertelement <1 x half> undef, half %461, i64 0, !dbg !46
  store <1 x half> %527, ptr addrspace(3) %526, align 2, !dbg !46
  %528 = add nuw nsw i32 %494, %20, !dbg !46
  %529 = zext nneg i32 %528 to i64, !dbg !46
  %530 = getelementptr half, ptr addrspace(3) @global_smem, i64 %529, !dbg !46
  %531 = insertelement <1 x half> undef, half %462, i64 0, !dbg !46
  store <1 x half> %531, ptr addrspace(3) %530, align 2, !dbg !46
  %532 = add nuw nsw i32 %499, %20, !dbg !46
  %533 = zext nneg i32 %532 to i64, !dbg !46
  %534 = getelementptr half, ptr addrspace(3) @global_smem, i64 %533, !dbg !46
  %535 = insertelement <1 x half> undef, half %463, i64 0, !dbg !46
  store <1 x half> %535, ptr addrspace(3) %534, align 2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %536 = mul nuw nsw i32 %10, 257, !dbg !46
  %537 = add nuw nsw i32 %536, %17, !dbg !46
  %538 = zext nneg i32 %537 to i64, !dbg !46
  %539 = getelementptr half, ptr addrspace(3) @global_smem, i64 %538, !dbg !46
  %540 = load <1 x half>, ptr addrspace(3) %539, align 2, !dbg !46
  %541 = add nuw nsw i32 %536, %100, !dbg !46
  %542 = zext nneg i32 %541 to i64, !dbg !46
  %543 = getelementptr half, ptr addrspace(3) @global_smem, i64 %542, !dbg !46
  %544 = load <1 x half>, ptr addrspace(3) %543, align 2, !dbg !46
  %545 = add nuw nsw i32 %536, %105, !dbg !46
  %546 = zext nneg i32 %545 to i64, !dbg !46
  %547 = getelementptr half, ptr addrspace(3) @global_smem, i64 %546, !dbg !46
  %548 = load <1 x half>, ptr addrspace(3) %547, align 2, !dbg !46
  %549 = add nuw nsw i32 %536, %110, !dbg !46
  %550 = zext nneg i32 %549 to i64, !dbg !46
  %551 = getelementptr half, ptr addrspace(3) @global_smem, i64 %550, !dbg !46
  %552 = load <1 x half>, ptr addrspace(3) %551, align 2, !dbg !46
  %553 = mul nuw nsw i32 %11, 257, !dbg !46
  %554 = add nuw nsw i32 %553, %17, !dbg !46
  %555 = zext nneg i32 %554 to i64, !dbg !46
  %556 = getelementptr half, ptr addrspace(3) @global_smem, i64 %555, !dbg !46
  %557 = load <1 x half>, ptr addrspace(3) %556, align 2, !dbg !46
  %558 = add nuw nsw i32 %553, %100, !dbg !46
  %559 = zext nneg i32 %558 to i64, !dbg !46
  %560 = getelementptr half, ptr addrspace(3) @global_smem, i64 %559, !dbg !46
  %561 = load <1 x half>, ptr addrspace(3) %560, align 2, !dbg !46
  %562 = add nuw nsw i32 %553, %105, !dbg !46
  %563 = zext nneg i32 %562 to i64, !dbg !46
  %564 = getelementptr half, ptr addrspace(3) @global_smem, i64 %563, !dbg !46
  %565 = load <1 x half>, ptr addrspace(3) %564, align 2, !dbg !46
  %566 = add nuw nsw i32 %553, %110, !dbg !46
  %567 = zext nneg i32 %566 to i64, !dbg !46
  %568 = getelementptr half, ptr addrspace(3) @global_smem, i64 %567, !dbg !46
  %569 = load <1 x half>, ptr addrspace(3) %568, align 2, !dbg !46
  %570 = mul nuw nsw i32 %12, 257, !dbg !46
  %571 = add nuw nsw i32 %570, %17, !dbg !46
  %572 = zext nneg i32 %571 to i64, !dbg !46
  %573 = getelementptr half, ptr addrspace(3) @global_smem, i64 %572, !dbg !46
  %574 = load <1 x half>, ptr addrspace(3) %573, align 2, !dbg !46
  %575 = add nuw nsw i32 %570, %100, !dbg !46
  %576 = zext nneg i32 %575 to i64, !dbg !46
  %577 = getelementptr half, ptr addrspace(3) @global_smem, i64 %576, !dbg !46
  %578 = load <1 x half>, ptr addrspace(3) %577, align 2, !dbg !46
  %579 = add nuw nsw i32 %570, %105, !dbg !46
  %580 = zext nneg i32 %579 to i64, !dbg !46
  %581 = getelementptr half, ptr addrspace(3) @global_smem, i64 %580, !dbg !46
  %582 = load <1 x half>, ptr addrspace(3) %581, align 2, !dbg !46
  %583 = add nuw nsw i32 %570, %110, !dbg !46
  %584 = zext nneg i32 %583 to i64, !dbg !46
  %585 = getelementptr half, ptr addrspace(3) @global_smem, i64 %584, !dbg !46
  %586 = load <1 x half>, ptr addrspace(3) %585, align 2, !dbg !46
  %587 = mul nuw nsw i32 %13, 257, !dbg !46
  %588 = add nuw nsw i32 %587, %17, !dbg !46
  %589 = zext nneg i32 %588 to i64, !dbg !46
  %590 = getelementptr half, ptr addrspace(3) @global_smem, i64 %589, !dbg !46
  %591 = load <1 x half>, ptr addrspace(3) %590, align 2, !dbg !46
  %592 = add nuw nsw i32 %587, %100, !dbg !46
  %593 = zext nneg i32 %592 to i64, !dbg !46
  %594 = getelementptr half, ptr addrspace(3) @global_smem, i64 %593, !dbg !46
  %595 = load <1 x half>, ptr addrspace(3) %594, align 2, !dbg !46
  %596 = add nuw nsw i32 %587, %105, !dbg !46
  %597 = zext nneg i32 %596 to i64, !dbg !46
  %598 = getelementptr half, ptr addrspace(3) @global_smem, i64 %597, !dbg !46
  %599 = load <1 x half>, ptr addrspace(3) %598, align 2, !dbg !46
  %600 = add nuw nsw i32 %587, %110, !dbg !46
  %601 = zext nneg i32 %600 to i64, !dbg !46
  %602 = getelementptr half, ptr addrspace(3) @global_smem, i64 %601, !dbg !46
  %603 = load <1 x half>, ptr addrspace(3) %602, align 2, !dbg !46
  %604 = shufflevector <1 x half> %540, <1 x half> %544, <2 x i32> <i32 0, i32 1>, !dbg !46
  %605 = bitcast <2 x half> %604 to i32, !dbg !46
  %606 = shufflevector <1 x half> %548, <1 x half> %552, <2 x i32> <i32 0, i32 1>, !dbg !46
  %607 = bitcast <2 x half> %606 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %605, i32 %607, ptr addrspace(1) %444, i1 %62) #2, !dbg !46
  %608 = shufflevector <1 x half> %557, <1 x half> %561, <2 x i32> <i32 0, i32 1>, !dbg !46
  %609 = bitcast <2 x half> %608 to i32, !dbg !46
  %610 = shufflevector <1 x half> %565, <1 x half> %569, <2 x i32> <i32 0, i32 1>, !dbg !46
  %611 = bitcast <2 x half> %610 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %609, i32 %611, ptr addrspace(1) %445, i1 %63) #2, !dbg !46
  %612 = shufflevector <1 x half> %574, <1 x half> %578, <2 x i32> <i32 0, i32 1>, !dbg !46
  %613 = bitcast <2 x half> %612 to i32, !dbg !46
  %614 = shufflevector <1 x half> %582, <1 x half> %586, <2 x i32> <i32 0, i32 1>, !dbg !46
  %615 = bitcast <2 x half> %614 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %613, i32 %615, ptr addrspace(1) %446, i1 %64) #2, !dbg !46
  %616 = shufflevector <1 x half> %591, <1 x half> %595, <2 x i32> <i32 0, i32 1>, !dbg !46
  %617 = bitcast <2 x half> %616 to i32, !dbg !46
  %618 = shufflevector <1 x half> %599, <1 x half> %603, <2 x i32> <i32 0, i32 1>, !dbg !46
  %619 = bitcast <2 x half> %618 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %617, i32 %619, ptr addrspace(1) %447, i1 %65) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvk77foil2cmgtxf3tky32mtvmynvcpxcyxs7fk4towlrhqtdrni.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/vk")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 41, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 55, scope: !5)
!26 = !DILocation(line: 33, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 95, scope: !5)
!28 = !DILocation(line: 34, column: 40, scope: !5)
!29 = !DILocation(line: 34, column: 54, scope: !5)
!30 = !DILocation(line: 34, column: 36, scope: !5)
!31 = !DILocation(line: 34, column: 47, scope: !5)
!32 = !DILocation(line: 34, column: 30, scope: !5)
!33 = !DILocation(line: 34, column: 60, scope: !5)
!34 = !DILocation(line: 34, column: 108, scope: !5)
!35 = !DILocation(line: 35, column: 30, scope: !5)
!36 = !DILocation(line: 35, column: 35, scope: !5)
!37 = !DILocation(line: 35, column: 75, scope: !5)
!38 = !DILocation(line: 36, column: 30, scope: !5)
!39 = !DILocation(line: 36, column: 60, scope: !5)
!40 = !DILocation(line: 36, column: 108, scope: !5)
!41 = !DILocation(line: 37, column: 18, scope: !5)
!42 = !DILocation(line: 39, column: 18, scope: !5)
!43 = !DILocation(line: 40, column: 18, scope: !5)
!44 = !DILocation(line: 41, column: 18, scope: !5)
!45 = !DILocation(line: 44, column: 25, scope: !5)
!46 = !DILocation(line: 44, column: 49, scope: !5)
!47 = !DILocation(line: 44, column: 4, scope: !5)
