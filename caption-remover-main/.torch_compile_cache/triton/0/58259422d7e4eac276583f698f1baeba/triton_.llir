; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = and i32 %8, 7, !dbg !8
  %12 = shl nuw nsw i32 %11, 2, !dbg !8
  %13 = and i32 %10, 7, !dbg !9
  %14 = lshr i32 %9, 3, !dbg !9
  %15 = shl nuw nsw i32 %13, 2, !dbg !9
  %16 = or i32 %15, %14, !dbg !9
  %17 = or i32 %12, 1, !dbg !10
  %18 = or i32 %12, 2, !dbg !10
  %19 = or i32 %12, 3, !dbg !10
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %21 = shl i32 %20, 5, !dbg !15
  %22 = or i32 %21, %12, !dbg !16
  %23 = or i32 %21, %9, !dbg !16
  %24 = icmp slt i32 %22, 32, !dbg !17
  %25 = icmp slt i32 %23, 32, !dbg !17
  %26 = icmp ult i32 %16, 18, !dbg !18
  %27 = shl nuw nsw i32 %16, 5, !dbg !19
  %28 = add i32 %22, %27, !dbg !20
  %29 = sext i32 %28 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = and i1 %26, %24, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !24
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = bitcast i32 %56 to float, !dbg !27
  %61 = select i1 %31, float %37, float 0.000000e+00, !dbg !28
  %62 = select i1 %31, float %38, float 0.000000e+00, !dbg !28
  %63 = select i1 %31, float %39, float 0.000000e+00, !dbg !28
  %64 = select i1 %31, float %40, float 0.000000e+00, !dbg !28
  %65 = select i1 %31, float %47, float 0.000000e+00, !dbg !29
  %66 = select i1 %31, float %48, float 0.000000e+00, !dbg !29
  %67 = select i1 %31, float %49, float 0.000000e+00, !dbg !29
  %68 = select i1 %31, float %50, float 0.000000e+00, !dbg !29
  %69 = select i1 %31, float %57, float 0.000000e+00, !dbg !30
  %70 = select i1 %31, float %58, float 0.000000e+00, !dbg !30
  %71 = select i1 %31, float %59, float 0.000000e+00, !dbg !30
  %72 = select i1 %31, float %60, float 0.000000e+00, !dbg !30
  %73 = bitcast float %61 to i32, !dbg !10
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !10
  %75 = bitcast i32 %74 to float, !dbg !10
  %76 = bitcast float %65 to i32, !dbg !10
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !10
  %78 = bitcast i32 %77 to float, !dbg !10
  %79 = bitcast float %69 to i32, !dbg !10
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 16, i32 31), !dbg !10
  %81 = bitcast i32 %80 to float, !dbg !10
  %82 = fsub float %75, %61, !dbg !31
  %83 = fadd float %69, %81, !dbg !35
  %84 = fcmp oeq float %83, 0.000000e+00, !dbg !36
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float %83) #3, !dbg !37
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !38
  %87 = fmul float %82, %86, !dbg !39
  %88 = fadd float %61, %87, !dbg !40
  %89 = fadd float %65, %78, !dbg !41
  %90 = fmul float %82, %82, !dbg !42
  %91 = fmul float %69, %90, !dbg !43
  %92 = fmul float %91, %86, !dbg !44
  %93 = fadd float %89, %92, !dbg !45
  %94 = bitcast float %88 to i32, !dbg !10
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !10
  %96 = bitcast i32 %95 to float, !dbg !10
  %97 = bitcast float %93 to i32, !dbg !10
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !10
  %99 = bitcast i32 %98 to float, !dbg !10
  %100 = bitcast float %83 to i32, !dbg !10
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !10
  %102 = bitcast i32 %101 to float, !dbg !10
  %103 = fsub float %96, %88, !dbg !31
  %104 = fadd float %83, %102, !dbg !35
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !36
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %104) #3, !dbg !37
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !38
  %108 = fmul float %103, %107, !dbg !39
  %109 = fadd float %88, %108, !dbg !40
  %110 = fadd float %93, %99, !dbg !41
  %111 = fmul float %103, %103, !dbg !42
  %112 = fmul float %83, %111, !dbg !43
  %113 = fmul float %107, %112, !dbg !44
  %114 = fadd float %110, %113, !dbg !45
  %115 = bitcast float %62 to i32, !dbg !10
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !10
  %117 = bitcast i32 %116 to float, !dbg !10
  %118 = bitcast float %66 to i32, !dbg !10
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !10
  %120 = bitcast i32 %119 to float, !dbg !10
  %121 = bitcast float %70 to i32, !dbg !10
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 16, i32 31), !dbg !10
  %123 = bitcast i32 %122 to float, !dbg !10
  %124 = fsub float %117, %62, !dbg !31
  %125 = fadd float %70, %123, !dbg !35
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !36
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %125) #3, !dbg !37
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !38
  %129 = fmul float %124, %128, !dbg !39
  %130 = fadd float %62, %129, !dbg !40
  %131 = fadd float %66, %120, !dbg !41
  %132 = fmul float %124, %124, !dbg !42
  %133 = fmul float %70, %132, !dbg !43
  %134 = fmul float %133, %128, !dbg !44
  %135 = fadd float %131, %134, !dbg !45
  %136 = bitcast float %130 to i32, !dbg !10
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !10
  %138 = bitcast i32 %137 to float, !dbg !10
  %139 = bitcast float %135 to i32, !dbg !10
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !10
  %141 = bitcast i32 %140 to float, !dbg !10
  %142 = bitcast float %125 to i32, !dbg !10
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !10
  %144 = bitcast i32 %143 to float, !dbg !10
  %145 = fsub float %138, %130, !dbg !31
  %146 = fadd float %125, %144, !dbg !35
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !36
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %146) #3, !dbg !37
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !38
  %150 = fmul float %145, %149, !dbg !39
  %151 = fadd float %130, %150, !dbg !40
  %152 = fadd float %135, %141, !dbg !41
  %153 = fmul float %145, %145, !dbg !42
  %154 = fmul float %125, %153, !dbg !43
  %155 = fmul float %149, %154, !dbg !44
  %156 = fadd float %152, %155, !dbg !45
  %157 = bitcast float %63 to i32, !dbg !10
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 16, i32 31), !dbg !10
  %159 = bitcast i32 %158 to float, !dbg !10
  %160 = bitcast float %67 to i32, !dbg !10
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !10
  %162 = bitcast i32 %161 to float, !dbg !10
  %163 = bitcast float %71 to i32, !dbg !10
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 16, i32 31), !dbg !10
  %165 = bitcast i32 %164 to float, !dbg !10
  %166 = fsub float %159, %63, !dbg !31
  %167 = fadd float %71, %165, !dbg !35
  %168 = fcmp oeq float %167, 0.000000e+00, !dbg !36
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %167) #3, !dbg !37
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !38
  %171 = fmul float %166, %170, !dbg !39
  %172 = fadd float %63, %171, !dbg !40
  %173 = fadd float %67, %162, !dbg !41
  %174 = fmul float %166, %166, !dbg !42
  %175 = fmul float %71, %174, !dbg !43
  %176 = fmul float %175, %170, !dbg !44
  %177 = fadd float %173, %176, !dbg !45
  %178 = bitcast float %172 to i32, !dbg !10
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 8, i32 31), !dbg !10
  %180 = bitcast i32 %179 to float, !dbg !10
  %181 = bitcast float %177 to i32, !dbg !10
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !10
  %183 = bitcast i32 %182 to float, !dbg !10
  %184 = bitcast float %167 to i32, !dbg !10
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 8, i32 31), !dbg !10
  %186 = bitcast i32 %185 to float, !dbg !10
  %187 = fsub float %180, %172, !dbg !31
  %188 = fadd float %167, %186, !dbg !35
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !36
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %188) #3, !dbg !37
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !38
  %192 = fmul float %187, %191, !dbg !39
  %193 = fadd float %172, %192, !dbg !40
  %194 = fadd float %177, %183, !dbg !41
  %195 = fmul float %187, %187, !dbg !42
  %196 = fmul float %167, %195, !dbg !43
  %197 = fmul float %191, %196, !dbg !44
  %198 = fadd float %194, %197, !dbg !45
  %199 = bitcast float %64 to i32, !dbg !10
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !10
  %201 = bitcast i32 %200 to float, !dbg !10
  %202 = bitcast float %68 to i32, !dbg !10
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !10
  %204 = bitcast i32 %203 to float, !dbg !10
  %205 = bitcast float %72 to i32, !dbg !10
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !10
  %207 = bitcast i32 %206 to float, !dbg !10
  %208 = fsub float %201, %64, !dbg !31
  %209 = fadd float %72, %207, !dbg !35
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !36
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %209) #3, !dbg !37
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !38
  %213 = fmul float %208, %212, !dbg !39
  %214 = fadd float %64, %213, !dbg !40
  %215 = fadd float %68, %204, !dbg !41
  %216 = fmul float %208, %208, !dbg !42
  %217 = fmul float %72, %216, !dbg !43
  %218 = fmul float %217, %212, !dbg !44
  %219 = fadd float %215, %218, !dbg !45
  %220 = bitcast float %214 to i32, !dbg !10
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !10
  %222 = bitcast i32 %221 to float, !dbg !10
  %223 = bitcast float %219 to i32, !dbg !10
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !10
  %225 = bitcast i32 %224 to float, !dbg !10
  %226 = bitcast float %209 to i32, !dbg !10
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !10
  %228 = bitcast i32 %227 to float, !dbg !10
  %229 = fsub float %222, %214, !dbg !31
  %230 = fadd float %209, %228, !dbg !35
  %231 = fcmp oeq float %230, 0.000000e+00, !dbg !36
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %230) #3, !dbg !37
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !38
  %234 = fmul float %229, %233, !dbg !39
  %235 = fadd float %214, %234, !dbg !40
  %236 = fadd float %219, %225, !dbg !41
  %237 = fmul float %229, %229, !dbg !42
  %238 = fmul float %209, %237, !dbg !43
  %239 = fmul float %233, %238, !dbg !44
  %240 = fadd float %236, %239, !dbg !45
  %241 = icmp ult i32 %9, 8, !dbg !10
  %242 = shl nuw nsw i32 %11, 5, !dbg !10
  %243 = or i32 %242, %13, !dbg !10
  %244 = zext nneg i32 %243 to i64, !dbg !10
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i64 %244, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, float %109, i1 %241) #3, !dbg !10
  %246 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %244, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, float %114, i1 %241) #3, !dbg !10
  %247 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %244, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, float %104, i1 %241) #3, !dbg !10
  %248 = shl nuw nsw i32 %17, 3, !dbg !10
  %249 = or i32 %248, %13, !dbg !10
  %250 = zext nneg i32 %249 to i64, !dbg !10
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i64 %250, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, float %151, i1 %241) #3, !dbg !10
  %252 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %250, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, float %156, i1 %241) #3, !dbg !10
  %253 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %250, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, float %146, i1 %241) #3, !dbg !10
  %254 = shl nuw nsw i32 %18, 3, !dbg !10
  %255 = or i32 %254, %13, !dbg !10
  %256 = zext nneg i32 %255 to i64, !dbg !10
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, float %193, i1 %241) #3, !dbg !10
  %258 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %256, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, float %198, i1 %241) #3, !dbg !10
  %259 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %256, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, float %188, i1 %241) #3, !dbg !10
  %260 = shl nuw nsw i32 %19, 3, !dbg !10
  %261 = or i32 %260, %13, !dbg !10
  %262 = zext nneg i32 %261 to i64, !dbg !10
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i64 %262, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, float %235, i1 %241) #3, !dbg !10
  %264 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %262, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, float %240, i1 %241) #3, !dbg !10
  %265 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %262, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, float %230, i1 %241) #3, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !10
  %266 = icmp slt i32 %8, 256, !dbg !10
  %267 = sext i32 %8 to i64, !dbg !10
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i64 %267, !dbg !10
  %269 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %268, i1 %266) #3, !dbg !10
  %270 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %267, !dbg !10
  %271 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %270, i1 %266) #3, !dbg !10
  %272 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %267, !dbg !10
  %273 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %272, i1 %266) #3, !dbg !10
  %274 = bitcast float %269 to i32, !dbg !10
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 4, i32 31), !dbg !10
  %276 = bitcast i32 %275 to float, !dbg !10
  %277 = bitcast float %271 to i32, !dbg !10
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !10
  %279 = bitcast i32 %278 to float, !dbg !10
  %280 = bitcast float %273 to i32, !dbg !10
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !10
  %282 = bitcast i32 %281 to float, !dbg !10
  %283 = fsub float %276, %269, !dbg !31
  %284 = fadd float %273, %282, !dbg !35
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !36
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %284) #3, !dbg !37
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !38
  %288 = fmul float %283, %287, !dbg !39
  %289 = fadd float %269, %288, !dbg !40
  %290 = fadd float %271, %279, !dbg !41
  %291 = fmul float %283, %283, !dbg !42
  %292 = fmul float %273, %291, !dbg !43
  %293 = fmul float %292, %287, !dbg !44
  %294 = fadd float %290, %293, !dbg !45
  %295 = bitcast float %289 to i32, !dbg !10
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !10
  %297 = bitcast i32 %296 to float, !dbg !10
  %298 = bitcast float %294 to i32, !dbg !10
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 2, i32 31), !dbg !10
  %300 = bitcast i32 %299 to float, !dbg !10
  %301 = bitcast float %284 to i32, !dbg !10
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !10
  %303 = bitcast i32 %302 to float, !dbg !10
  %304 = fsub float %297, %289, !dbg !31
  %305 = fadd float %284, %303, !dbg !35
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !36
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %305) #3, !dbg !37
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !38
  %309 = fmul float %304, %308, !dbg !39
  %310 = fadd float %289, %309, !dbg !40
  %311 = fadd float %294, %300, !dbg !41
  %312 = fmul float %304, %304, !dbg !42
  %313 = fmul float %284, %312, !dbg !43
  %314 = fmul float %308, %313, !dbg !44
  %315 = fadd float %311, %314, !dbg !45
  %316 = bitcast float %310 to i32, !dbg !10
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 1, i32 31), !dbg !10
  %318 = bitcast i32 %317 to float, !dbg !10
  %319 = bitcast float %315 to i32, !dbg !10
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !10
  %321 = bitcast i32 %320 to float, !dbg !10
  %322 = bitcast float %305 to i32, !dbg !10
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !10
  %324 = bitcast i32 %323 to float, !dbg !10
  %325 = fsub float %318, %310, !dbg !31
  %326 = fadd float %305, %324, !dbg !35
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !36
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %324, float %326) #3, !dbg !37
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !38
  %330 = fmul float %325, %329, !dbg !39
  %331 = fadd float %310, %330, !dbg !40
  %332 = fadd float %315, %321, !dbg !41
  %333 = fmul float %325, %325, !dbg !42
  %334 = fmul float %305, %333, !dbg !43
  %335 = fmul float %329, %334, !dbg !44
  %336 = fadd float %332, %335, !dbg !45
  %337 = icmp eq i32 %11, 0, !dbg !10
  %338 = and i1 %266, %337, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, float %331, i1 %338) #3, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, float %336, i1 %338) #3, !dbg !10
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, float %326, i1 %338) #3, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !10
  %339 = zext nneg i32 %242 to i64, !dbg !10
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i64 %339, !dbg !10
  %341 = load float, ptr addrspace(3) %340, align 4, !dbg !10
  %342 = zext nneg i32 %248 to i64, !dbg !10
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i64 %342, !dbg !10
  %344 = load float, ptr addrspace(3) %343, align 4, !dbg !10
  %345 = zext nneg i32 %254 to i64, !dbg !10
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i64 %345, !dbg !10
  %347 = load float, ptr addrspace(3) %346, align 4, !dbg !10
  %348 = zext nneg i32 %260 to i64, !dbg !10
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i64 %348, !dbg !10
  %350 = load float, ptr addrspace(3) %349, align 4, !dbg !10
  %351 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %339, !dbg !10
  %352 = load float, ptr addrspace(3) %351, align 4, !dbg !10
  %353 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %342, !dbg !10
  %354 = load float, ptr addrspace(3) %353, align 4, !dbg !10
  %355 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %345, !dbg !10
  %356 = load float, ptr addrspace(3) %355, align 4, !dbg !10
  %357 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %348, !dbg !10
  %358 = load float, ptr addrspace(3) %357, align 4, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %359 = zext nneg i32 %12 to i64, !dbg !46
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i64 %359, !dbg !46
  %361 = insertelement <1 x float> undef, float %341, i64 0, !dbg !46
  store <1 x float> %361, ptr addrspace(3) %360, align 4, !dbg !46
  %362 = zext nneg i32 %17 to i64, !dbg !46
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i64 %362, !dbg !46
  %364 = insertelement <1 x float> undef, float %344, i64 0, !dbg !46
  store <1 x float> %364, ptr addrspace(3) %363, align 4, !dbg !46
  %365 = zext nneg i32 %18 to i64, !dbg !46
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i64 %365, !dbg !46
  %367 = insertelement <1 x float> undef, float %347, i64 0, !dbg !46
  store <1 x float> %367, ptr addrspace(3) %366, align 4, !dbg !46
  %368 = zext nneg i32 %19 to i64, !dbg !46
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i64 %368, !dbg !46
  %370 = insertelement <1 x float> undef, float %350, i64 0, !dbg !46
  store <1 x float> %370, ptr addrspace(3) %369, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %371 = zext nneg i32 %9 to i64, !dbg !46
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i64 %371, !dbg !46
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %374 = insertelement <1 x float> undef, float %352, i64 0, !dbg !47
  store <1 x float> %374, ptr addrspace(3) %360, align 4, !dbg !47
  %375 = insertelement <1 x float> undef, float %354, i64 0, !dbg !47
  store <1 x float> %375, ptr addrspace(3) %363, align 4, !dbg !47
  %376 = insertelement <1 x float> undef, float %356, i64 0, !dbg !47
  store <1 x float> %376, ptr addrspace(3) %366, align 4, !dbg !47
  %377 = insertelement <1 x float> undef, float %358, i64 0, !dbg !47
  store <1 x float> %377, ptr addrspace(3) %369, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %378 = load i32, ptr addrspace(3) %372, align 4, !dbg !47
  %379 = sext i32 %23 to i64, !dbg !48
  %380 = getelementptr float, ptr addrspace(1) %3, i64 %379, !dbg !48
  %381 = icmp eq i32 %13, 0, !dbg !49
  %382 = and i1 %381, %25, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %380, i1 %382) #3, !dbg !49
  %383 = getelementptr float, ptr addrspace(1) %4, i64 %379, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %378, ptr addrspace(1) %383, i1 %382) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cxuipnka3pv5je3dzh4v7jl6y435phrfdgzqcawitbvhrrl2cgwo.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/xu")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 34, scope: !5)
!10 = !DILocation(line: 131, column: 46, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !5, file: !12, discriminator: 0)
!12 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!13 = !DILocation(line: 41, column: 67, scope: !11)
!14 = !DILocation(line: 24, column: 28, scope: !5)
!15 = !DILocation(line: 24, column: 33, scope: !5)
!16 = !DILocation(line: 25, column: 23, scope: !5)
!17 = !DILocation(line: 26, column: 21, scope: !5)
!18 = !DILocation(line: 29, column: 21, scope: !5)
!19 = !DILocation(line: 32, column: 39, scope: !5)
!20 = !DILocation(line: 32, column: 36, scope: !5)
!21 = !DILocation(line: 32, column: 30, scope: !5)
!22 = !DILocation(line: 32, column: 53, scope: !5)
!23 = !DILocation(line: 32, column: 45, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 45, scope: !5)
!26 = !DILocation(line: 34, column: 30, scope: !5)
!27 = !DILocation(line: 34, column: 45, scope: !5)
!28 = !DILocation(line: 38, column: 41, scope: !5)
!29 = !DILocation(line: 39, column: 41, scope: !5)
!30 = !DILocation(line: 40, column: 41, scope: !5)
!31 = !DILocation(line: 119, column: 21, scope: !32, inlinedAt: !33)
!32 = distinct !DILexicalBlockFile(scope: !11, file: !12, discriminator: 0)
!33 = !DILocation(line: 131, column: 46, scope: !32, inlinedAt: !34)
!34 = !DILocation(line: 41, column: 67, scope: !32)
!35 = !DILocation(line: 120, column: 28, scope: !32, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 39, scope: !32, inlinedAt: !33)
!37 = !DILocation(line: 121, column: 60, scope: !32, inlinedAt: !33)
!38 = !DILocation(line: 121, column: 49, scope: !32, inlinedAt: !33)
!39 = !DILocation(line: 123, column: 25, scope: !32, inlinedAt: !33)
!40 = !DILocation(line: 123, column: 17, scope: !32, inlinedAt: !33)
!41 = !DILocation(line: 124, column: 15, scope: !32, inlinedAt: !33)
!42 = !DILocation(line: 124, column: 30, scope: !32, inlinedAt: !33)
!43 = !DILocation(line: 124, column: 38, scope: !32, inlinedAt: !33)
!44 = !DILocation(line: 124, column: 49, scope: !32, inlinedAt: !33)
!45 = !DILocation(line: 124, column: 22, scope: !32, inlinedAt: !33)
!46 = !DILocation(line: 42, column: 18, scope: !5)
!47 = !DILocation(line: 43, column: 18, scope: !5)
!48 = !DILocation(line: 45, column: 25, scope: !5)
!49 = !DILocation(line: 45, column: 37, scope: !5)
!50 = !DILocation(line: 46, column: 25, scope: !5)
!51 = !DILocation(line: 46, column: 37, scope: !5)
!52 = !DILocation(line: 46, column: 4, scope: !5)
