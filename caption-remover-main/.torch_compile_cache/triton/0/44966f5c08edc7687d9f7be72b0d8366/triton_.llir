; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = and i32 %11, 7, !dbg !10
  %13 = lshr i32 %10, 2, !dbg !10
  %14 = shl nuw nsw i32 %12, 3, !dbg !10
  %15 = or i32 %14, %13, !dbg !10
  %16 = or i32 %15, 64, !dbg !10
  %17 = or i32 %15, 128, !dbg !10
  %18 = or i32 %15, 192, !dbg !10
  %urem = and i32 %9, 255, !dbg !10
  %19 = shl i32 %9, 2, !dbg !11
  %20 = and i32 %19, 12, !dbg !11
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !12
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !13
  %23 = add i32 %22, 1, !dbg !14
  %24 = shl i32 %21, 8, !dbg !15
  %25 = mul i32 %24, %23, !dbg !16
  %26 = or i32 %25, %15, !dbg !17
  %27 = or i32 %25, %16, !dbg !17
  %28 = or i32 %25, %17, !dbg !17
  %29 = or i32 %25, %18, !dbg !17
  %30 = or i32 %25, %urem, !dbg !17
  %31 = icmp slt i32 %26, 7040, !dbg !18
  %32 = icmp slt i32 %27, 7040, !dbg !18
  %33 = icmp slt i32 %28, 7040, !dbg !18
  %34 = icmp slt i32 %29, 7040, !dbg !18
  %35 = icmp slt i32 %30, 7040, !dbg !18
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !19
  %37 = shl i32 %36, 4, !dbg !20
  %38 = or i32 %37, %20, !dbg !21
  %39 = icmp slt i32 %38, 2700, !dbg !22
  %.frozen = freeze i32 %30
  %40 = sdiv i32 %.frozen, 320, !dbg !23
  %41 = mul i32 %40, 320
  %.decomposed = sub i32 %.frozen, %41
  %42 = mul i32 %26, 2700, !dbg !24
  %43 = mul i32 %27, 2700, !dbg !24
  %44 = mul i32 %28, 2700, !dbg !24
  %45 = mul i32 %29, 2700, !dbg !24
  %46 = add i32 %42, %38, !dbg !25
  %47 = add i32 %43, %38, !dbg !25
  %48 = add i32 %44, %38, !dbg !25
  %49 = add i32 %45, %38, !dbg !25
  %50 = sext i32 %46 to i64, !dbg !26
  %51 = getelementptr half, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = sext i32 %47 to i64, !dbg !26
  %53 = getelementptr half, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = sext i32 %48 to i64, !dbg !26
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = sext i32 %49 to i64, !dbg !26
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !26
  %58 = and i1 %39, %31, !dbg !27
  %59 = and i1 %39, %32, !dbg !27
  %60 = and i1 %39, %33, !dbg !27
  %61 = and i1 %39, %34, !dbg !27
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %58) #5, !dbg !28
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !28
  %65 = trunc i32 %63 to i16, !dbg !28
  %extelt.offset = lshr i32 %63, 16, !dbg !28
  %66 = trunc i32 %extelt.offset to i16, !dbg !28
  %67 = trunc i32 %64 to i16, !dbg !28
  %extelt.offset1 = lshr i32 %64, 16, !dbg !28
  %68 = trunc i32 %extelt.offset1 to i16, !dbg !28
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %59) #5, !dbg !28
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !28
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !28
  %72 = trunc i32 %70 to i16, !dbg !28
  %extelt.offset2 = lshr i32 %70, 16, !dbg !28
  %73 = trunc i32 %extelt.offset2 to i16, !dbg !28
  %74 = trunc i32 %71 to i16, !dbg !28
  %extelt.offset3 = lshr i32 %71, 16, !dbg !28
  %75 = trunc i32 %extelt.offset3 to i16, !dbg !28
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %60) #5, !dbg !28
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !28
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !28
  %79 = trunc i32 %77 to i16, !dbg !28
  %extelt.offset4 = lshr i32 %77, 16, !dbg !28
  %80 = trunc i32 %extelt.offset4 to i16, !dbg !28
  %81 = trunc i32 %78 to i16, !dbg !28
  %extelt.offset5 = lshr i32 %78, 16, !dbg !28
  %82 = trunc i32 %extelt.offset5 to i16, !dbg !28
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %61) #5, !dbg !28
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !28
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !28
  %86 = trunc i32 %84 to i16, !dbg !28
  %extelt.offset6 = lshr i32 %84, 16, !dbg !28
  %87 = trunc i32 %extelt.offset6 to i16, !dbg !28
  %88 = trunc i32 %85 to i16, !dbg !28
  %extelt.offset7 = lshr i32 %85, 16, !dbg !28
  %89 = trunc i32 %extelt.offset7 to i16, !dbg !28
  %90 = mul nuw nsw i32 %15, 17, !dbg !29
  %91 = add nuw nsw i32 %90, %20, !dbg !29
  %92 = zext nneg i32 %91 to i64, !dbg !29
  %93 = getelementptr half, ptr addrspace(3) @global_smem, i64 %92, !dbg !29
  store i16 %65, ptr addrspace(3) %93, align 2, !dbg !29
  %94 = or i32 %20, 1, !dbg !29
  %95 = add nuw nsw i32 %90, %94, !dbg !29
  %96 = zext nneg i32 %95 to i64, !dbg !29
  %97 = getelementptr half, ptr addrspace(3) @global_smem, i64 %96, !dbg !29
  store i16 %66, ptr addrspace(3) %97, align 2, !dbg !29
  %98 = or i32 %20, 2, !dbg !29
  %99 = add nuw nsw i32 %90, %98, !dbg !29
  %100 = zext nneg i32 %99 to i64, !dbg !29
  %101 = getelementptr half, ptr addrspace(3) @global_smem, i64 %100, !dbg !29
  store i16 %67, ptr addrspace(3) %101, align 2, !dbg !29
  %102 = or i32 %20, 3, !dbg !29
  %103 = add nuw nsw i32 %90, %102, !dbg !29
  %104 = zext nneg i32 %103 to i64, !dbg !29
  %105 = getelementptr half, ptr addrspace(3) @global_smem, i64 %104, !dbg !29
  store i16 %68, ptr addrspace(3) %105, align 2, !dbg !29
  %106 = mul nuw nsw i32 %16, 17, !dbg !29
  %107 = add nuw nsw i32 %106, %20, !dbg !29
  %108 = zext nneg i32 %107 to i64, !dbg !29
  %109 = getelementptr half, ptr addrspace(3) @global_smem, i64 %108, !dbg !29
  store i16 %72, ptr addrspace(3) %109, align 2, !dbg !29
  %110 = add nuw nsw i32 %106, %94, !dbg !29
  %111 = zext nneg i32 %110 to i64, !dbg !29
  %112 = getelementptr half, ptr addrspace(3) @global_smem, i64 %111, !dbg !29
  store i16 %73, ptr addrspace(3) %112, align 2, !dbg !29
  %113 = add nuw nsw i32 %106, %98, !dbg !29
  %114 = zext nneg i32 %113 to i64, !dbg !29
  %115 = getelementptr half, ptr addrspace(3) @global_smem, i64 %114, !dbg !29
  store i16 %74, ptr addrspace(3) %115, align 2, !dbg !29
  %116 = add nuw nsw i32 %106, %102, !dbg !29
  %117 = zext nneg i32 %116 to i64, !dbg !29
  %118 = getelementptr half, ptr addrspace(3) @global_smem, i64 %117, !dbg !29
  store i16 %75, ptr addrspace(3) %118, align 2, !dbg !29
  %119 = mul nuw nsw i32 %17, 17, !dbg !29
  %120 = add nuw nsw i32 %119, %20, !dbg !29
  %121 = zext nneg i32 %120 to i64, !dbg !29
  %122 = getelementptr half, ptr addrspace(3) @global_smem, i64 %121, !dbg !29
  store i16 %79, ptr addrspace(3) %122, align 2, !dbg !29
  %123 = add nuw nsw i32 %119, %94, !dbg !29
  %124 = zext nneg i32 %123 to i64, !dbg !29
  %125 = getelementptr half, ptr addrspace(3) @global_smem, i64 %124, !dbg !29
  store i16 %80, ptr addrspace(3) %125, align 2, !dbg !29
  %126 = add nuw nsw i32 %119, %98, !dbg !29
  %127 = zext nneg i32 %126 to i64, !dbg !29
  %128 = getelementptr half, ptr addrspace(3) @global_smem, i64 %127, !dbg !29
  store i16 %81, ptr addrspace(3) %128, align 2, !dbg !29
  %129 = add nuw nsw i32 %119, %102, !dbg !29
  %130 = zext nneg i32 %129 to i64, !dbg !29
  %131 = getelementptr half, ptr addrspace(3) @global_smem, i64 %130, !dbg !29
  store i16 %82, ptr addrspace(3) %131, align 2, !dbg !29
  %132 = mul nuw nsw i32 %18, 17, !dbg !29
  %133 = add nuw nsw i32 %132, %20, !dbg !29
  %134 = zext nneg i32 %133 to i64, !dbg !29
  %135 = getelementptr half, ptr addrspace(3) @global_smem, i64 %134, !dbg !29
  store i16 %86, ptr addrspace(3) %135, align 2, !dbg !29
  %136 = add nuw nsw i32 %132, %94, !dbg !29
  %137 = zext nneg i32 %136 to i64, !dbg !29
  %138 = getelementptr half, ptr addrspace(3) @global_smem, i64 %137, !dbg !29
  store i16 %87, ptr addrspace(3) %138, align 2, !dbg !29
  %139 = add nuw nsw i32 %132, %98, !dbg !29
  %140 = zext nneg i32 %139 to i64, !dbg !29
  %141 = getelementptr half, ptr addrspace(3) @global_smem, i64 %140, !dbg !29
  store i16 %88, ptr addrspace(3) %141, align 2, !dbg !29
  %142 = add nuw nsw i32 %132, %102, !dbg !29
  %143 = zext nneg i32 %142 to i64, !dbg !29
  %144 = getelementptr half, ptr addrspace(3) @global_smem, i64 %143, !dbg !29
  store i16 %89, ptr addrspace(3) %144, align 2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %145 = mul nuw nsw i32 %urem, 17, !dbg !29
  %146 = zext nneg i32 %145 to i64, !dbg !29
  %147 = getelementptr half, ptr addrspace(3) @global_smem, i64 %146, !dbg !29
  %148 = load <1 x half>, ptr addrspace(3) %147, align 2, !dbg !29
  %149 = add nuw nsw i32 %145, 1, !dbg !29
  %150 = zext nneg i32 %149 to i64, !dbg !29
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i64 %150, !dbg !29
  %152 = load <1 x half>, ptr addrspace(3) %151, align 2, !dbg !29
  %153 = add nuw nsw i32 %145, 2, !dbg !29
  %154 = zext nneg i32 %153 to i64, !dbg !29
  %155 = getelementptr half, ptr addrspace(3) @global_smem, i64 %154, !dbg !29
  %156 = load <1 x half>, ptr addrspace(3) %155, align 2, !dbg !29
  %157 = add nuw nsw i32 %145, 3, !dbg !29
  %158 = zext nneg i32 %157 to i64, !dbg !29
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i64 %158, !dbg !29
  %160 = load <1 x half>, ptr addrspace(3) %159, align 2, !dbg !29
  %161 = add nuw nsw i32 %145, 4, !dbg !29
  %162 = zext nneg i32 %161 to i64, !dbg !29
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i64 %162, !dbg !29
  %164 = load <1 x half>, ptr addrspace(3) %163, align 2, !dbg !29
  %165 = add nuw nsw i32 %145, 5, !dbg !29
  %166 = zext nneg i32 %165 to i64, !dbg !29
  %167 = getelementptr half, ptr addrspace(3) @global_smem, i64 %166, !dbg !29
  %168 = load <1 x half>, ptr addrspace(3) %167, align 2, !dbg !29
  %169 = add nuw nsw i32 %145, 6, !dbg !29
  %170 = zext nneg i32 %169 to i64, !dbg !29
  %171 = getelementptr half, ptr addrspace(3) @global_smem, i64 %170, !dbg !29
  %172 = load <1 x half>, ptr addrspace(3) %171, align 2, !dbg !29
  %173 = add nuw nsw i32 %145, 7, !dbg !29
  %174 = zext nneg i32 %173 to i64, !dbg !29
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !29
  %176 = load <1 x half>, ptr addrspace(3) %175, align 2, !dbg !29
  %177 = add nuw nsw i32 %145, 8, !dbg !29
  %178 = zext nneg i32 %177 to i64, !dbg !29
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i64 %178, !dbg !29
  %180 = load <1 x half>, ptr addrspace(3) %179, align 2, !dbg !29
  %181 = add nuw nsw i32 %145, 9, !dbg !29
  %182 = zext nneg i32 %181 to i64, !dbg !29
  %183 = getelementptr half, ptr addrspace(3) @global_smem, i64 %182, !dbg !29
  %184 = load <1 x half>, ptr addrspace(3) %183, align 2, !dbg !29
  %185 = add nuw nsw i32 %145, 10, !dbg !29
  %186 = zext nneg i32 %185 to i64, !dbg !29
  %187 = getelementptr half, ptr addrspace(3) @global_smem, i64 %186, !dbg !29
  %188 = load <1 x half>, ptr addrspace(3) %187, align 2, !dbg !29
  %189 = add nuw nsw i32 %145, 11, !dbg !29
  %190 = zext nneg i32 %189 to i64, !dbg !29
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !29
  %192 = load <1 x half>, ptr addrspace(3) %191, align 2, !dbg !29
  %193 = add nuw nsw i32 %145, 12, !dbg !29
  %194 = zext nneg i32 %193 to i64, !dbg !29
  %195 = getelementptr half, ptr addrspace(3) @global_smem, i64 %194, !dbg !29
  %196 = load <1 x half>, ptr addrspace(3) %195, align 2, !dbg !29
  %197 = add nuw nsw i32 %145, 13, !dbg !29
  %198 = zext nneg i32 %197 to i64, !dbg !29
  %199 = getelementptr half, ptr addrspace(3) @global_smem, i64 %198, !dbg !29
  %200 = load <1 x half>, ptr addrspace(3) %199, align 2, !dbg !29
  %201 = add nuw nsw i32 %145, 14, !dbg !29
  %202 = zext nneg i32 %201 to i64, !dbg !29
  %203 = getelementptr half, ptr addrspace(3) @global_smem, i64 %202, !dbg !29
  %204 = load <1 x half>, ptr addrspace(3) %203, align 2, !dbg !29
  %205 = add nuw nsw i32 %145, 15, !dbg !29
  %206 = zext nneg i32 %205 to i64, !dbg !29
  %207 = getelementptr half, ptr addrspace(3) @global_smem, i64 %206, !dbg !29
  %208 = load <1 x half>, ptr addrspace(3) %207, align 2, !dbg !29
  %209 = shl nsw i32 %40, 5, !dbg !30
  %.lhs.trunc = trunc i32 %.decomposed to i16, !dbg !31
  %210 = sdiv i16 %.lhs.trunc, 10, !dbg !31
  %.sext = sext i16 %210 to i32, !dbg !31
  %211 = add nsw i32 %209, %.sext, !dbg !32
  %212 = sext i32 %211 to i64, !dbg !33
  %213 = getelementptr float, ptr addrspace(1) %1, i64 %212, !dbg !33
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %35) #5, !dbg !34
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %212, !dbg !35
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %35) #5, !dbg !36
  %217 = bitcast i32 %216 to float, !dbg !36
  %218 = sext i32 %.decomposed to i64, !dbg !37
  %219 = getelementptr half, ptr addrspace(1) %3, i64 %218, !dbg !37
  %220 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %219, i1 %35) #5, !dbg !38
  %221 = getelementptr half, ptr addrspace(1) %4, i64 %218, !dbg !39
  %222 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %221, i1 %35) #5, !dbg !40
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float 2.700000e+04) #5, !dbg !41
  %224 = fadd float %223, 0x3EB0C6F7A0000000, !dbg !42
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %225, 0, !dbg !43
  br i1 %.not.i, label %228, label %226, !dbg !43

226:                                              ; preds = %8
  %227 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %224), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

228:                                              ; preds = %8
  %229 = tail call float @llvm.nvvm.rsqrt.approx.f(float %224), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %226, %228
  %.0.i = phi float [ %227, %226 ], [ %229, %228 ], !dbg !43
  %230 = extractelement <1 x half> %208, i64 0, !dbg !29
  %231 = fpext half %230 to float, !dbg !29
  %232 = bitcast i32 %214 to float, !dbg !34
  %233 = fsub float %231, %232, !dbg !44
  %234 = extractelement <1 x half> %204, i64 0, !dbg !29
  %235 = fpext half %234 to float, !dbg !29
  %236 = fsub float %235, %232, !dbg !44
  %237 = extractelement <1 x half> %200, i64 0, !dbg !29
  %238 = fpext half %237 to float, !dbg !29
  %239 = fsub float %238, %232, !dbg !44
  %240 = extractelement <1 x half> %196, i64 0, !dbg !29
  %241 = fpext half %240 to float, !dbg !29
  %242 = fsub float %241, %232, !dbg !44
  %243 = extractelement <1 x half> %192, i64 0, !dbg !29
  %244 = fpext half %243 to float, !dbg !29
  %245 = fsub float %244, %232, !dbg !44
  %246 = extractelement <1 x half> %188, i64 0, !dbg !29
  %247 = fpext half %246 to float, !dbg !29
  %248 = fsub float %247, %232, !dbg !44
  %249 = extractelement <1 x half> %184, i64 0, !dbg !29
  %250 = fpext half %249 to float, !dbg !29
  %251 = fsub float %250, %232, !dbg !44
  %252 = extractelement <1 x half> %180, i64 0, !dbg !29
  %253 = fpext half %252 to float, !dbg !29
  %254 = fsub float %253, %232, !dbg !44
  %255 = extractelement <1 x half> %176, i64 0, !dbg !29
  %256 = fpext half %255 to float, !dbg !29
  %257 = fsub float %256, %232, !dbg !44
  %258 = extractelement <1 x half> %172, i64 0, !dbg !29
  %259 = fpext half %258 to float, !dbg !29
  %260 = fsub float %259, %232, !dbg !44
  %261 = extractelement <1 x half> %168, i64 0, !dbg !29
  %262 = fpext half %261 to float, !dbg !29
  %263 = fsub float %262, %232, !dbg !44
  %264 = extractelement <1 x half> %164, i64 0, !dbg !29
  %265 = fpext half %264 to float, !dbg !29
  %266 = fsub float %265, %232, !dbg !44
  %267 = extractelement <1 x half> %160, i64 0, !dbg !29
  %268 = fpext half %267 to float, !dbg !29
  %269 = fsub float %268, %232, !dbg !44
  %270 = extractelement <1 x half> %156, i64 0, !dbg !29
  %271 = fpext half %270 to float, !dbg !29
  %272 = fsub float %271, %232, !dbg !44
  %273 = extractelement <1 x half> %152, i64 0, !dbg !29
  %274 = fpext half %273 to float, !dbg !29
  %275 = fsub float %274, %232, !dbg !44
  %276 = extractelement <1 x half> %148, i64 0, !dbg !29
  %277 = fpext half %276 to float, !dbg !29
  %278 = fsub float %277, %232, !dbg !44
  %279 = bitcast i16 %222 to half, !dbg !40
  %280 = fpext half %279 to float, !dbg !45
  %281 = bitcast i16 %220 to half, !dbg !38
  %282 = fpext half %281 to float, !dbg !46
  %283 = or i32 %37, %12, !dbg !11
  %284 = or i32 %283, 8, !dbg !21
  %285 = icmp slt i32 %284, 2700, !dbg !22
  %286 = shl nuw nsw i32 %10, 3, !dbg !10
  %287 = or i32 %25, %286, !dbg !17
  %288 = icmp slt i32 %287, 7040, !dbg !18
  %289 = and i1 %285, %288, !dbg !27
  %290 = icmp slt i32 %283, 2700, !dbg !22
  %291 = and i1 %290, %288, !dbg !27
  %.frozen22 = freeze i32 %287
  %292 = sdiv i32 %.frozen22, 320, !dbg !23
  %293 = mul i32 %292, 320
  %.decomposed23 = sub i32 %.frozen22, %293
  %294 = fmul float %278, %.0.i, !dbg !47
  %295 = fmul float %275, %.0.i, !dbg !47
  %296 = fmul float %272, %.0.i, !dbg !47
  %297 = fmul float %269, %.0.i, !dbg !47
  %298 = fmul float %266, %.0.i, !dbg !47
  %299 = fmul float %263, %.0.i, !dbg !47
  %300 = fmul float %260, %.0.i, !dbg !47
  %301 = fmul float %257, %.0.i, !dbg !47
  %302 = fmul float %254, %.0.i, !dbg !47
  %303 = fmul float %251, %.0.i, !dbg !47
  %304 = fmul float %248, %.0.i, !dbg !47
  %305 = fmul float %245, %.0.i, !dbg !47
  %306 = fmul float %242, %.0.i, !dbg !47
  %307 = fmul float %239, %.0.i, !dbg !47
  %308 = fmul float %236, %.0.i, !dbg !47
  %309 = fmul float %233, %.0.i, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %310 = zext nneg i32 %urem to i64, !dbg !47
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i64 %310, !dbg !47
  %312 = insertelement <1 x float> undef, float %294, i64 0, !dbg !47
  store <1 x float> %312, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %313 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %314 = insertelement <1 x float> undef, float %295, i64 0, !dbg !47
  store <1 x float> %314, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %315 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %316 = insertelement <1 x float> undef, float %296, i64 0, !dbg !47
  store <1 x float> %316, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %317 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %318 = insertelement <1 x float> undef, float %297, i64 0, !dbg !47
  store <1 x float> %318, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %319 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %320 = insertelement <1 x float> undef, float %298, i64 0, !dbg !47
  store <1 x float> %320, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %321 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %322 = insertelement <1 x float> undef, float %299, i64 0, !dbg !47
  store <1 x float> %322, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %323 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %324 = insertelement <1 x float> undef, float %300, i64 0, !dbg !47
  store <1 x float> %324, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %325 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %326 = insertelement <1 x float> undef, float %301, i64 0, !dbg !47
  store <1 x float> %326, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %327 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %328 = insertelement <1 x float> undef, float %302, i64 0, !dbg !47
  store <1 x float> %328, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %329 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %330 = insertelement <1 x float> undef, float %303, i64 0, !dbg !47
  store <1 x float> %330, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %331 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %332 = insertelement <1 x float> undef, float %304, i64 0, !dbg !47
  store <1 x float> %332, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %333 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %334 = insertelement <1 x float> undef, float %305, i64 0, !dbg !47
  store <1 x float> %334, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %335 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %336 = insertelement <1 x float> undef, float %306, i64 0, !dbg !47
  store <1 x float> %336, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %337 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %338 = insertelement <1 x float> undef, float %307, i64 0, !dbg !47
  store <1 x float> %338, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %339 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %340 = insertelement <1 x float> undef, float %308, i64 0, !dbg !47
  store <1 x float> %340, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %341 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %342 = insertelement <1 x float> undef, float %309, i64 0, !dbg !47
  store <1 x float> %342, ptr addrspace(3) %311, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %343 = load float, ptr addrspace(3) %311, align 4, !dbg !47
  %344 = fmul float %313, %282, !dbg !48
  %345 = fmul float %315, %282, !dbg !48
  %346 = fmul float %317, %282, !dbg !48
  %347 = fmul float %319, %282, !dbg !48
  %348 = fmul float %321, %282, !dbg !48
  %349 = fmul float %323, %282, !dbg !48
  %350 = fmul float %325, %282, !dbg !48
  %351 = fmul float %327, %282, !dbg !48
  %352 = fmul float %329, %282, !dbg !48
  %353 = fmul float %331, %282, !dbg !48
  %354 = fmul float %333, %282, !dbg !48
  %355 = fmul float %335, %282, !dbg !48
  %356 = fmul float %337, %282, !dbg !48
  %357 = fmul float %339, %282, !dbg !48
  %358 = fmul float %341, %282, !dbg !48
  %359 = fmul float %343, %282, !dbg !48
  %360 = fadd float %344, %280, !dbg !49
  %361 = fadd float %345, %280, !dbg !49
  %362 = fadd float %346, %280, !dbg !49
  %363 = fadd float %347, %280, !dbg !49
  %364 = fadd float %348, %280, !dbg !49
  %365 = fadd float %349, %280, !dbg !49
  %366 = fadd float %350, %280, !dbg !49
  %367 = fadd float %351, %280, !dbg !49
  %368 = fadd float %352, %280, !dbg !49
  %369 = fadd float %353, %280, !dbg !49
  %370 = fadd float %354, %280, !dbg !49
  %371 = fadd float %355, %280, !dbg !49
  %372 = fadd float %356, %280, !dbg !49
  %373 = fadd float %357, %280, !dbg !49
  %374 = fadd float %358, %280, !dbg !49
  %375 = fadd float %359, %280, !dbg !49
  %376 = mul i32 %283, 320, !dbg !50
  %377 = mul i32 %284, 320, !dbg !50
  %378 = mul i32 %292, 864000, !dbg !51
  %379 = add i32 %378, %.decomposed23, !dbg !52
  %380 = add i32 %379, %376, !dbg !53
  %381 = add i32 %379, %377, !dbg !53
  %382 = sext i32 %380 to i64, !dbg !54
  %383 = getelementptr half, ptr addrspace(1) %5, i64 %382, !dbg !54
  %384 = sext i32 %381 to i64, !dbg !54
  %385 = getelementptr half, ptr addrspace(1) %5, i64 %384, !dbg !54
  %386 = fptrunc float %360 to half, !dbg !55
  %387 = fptrunc float %361 to half, !dbg !55
  %388 = fptrunc float %362 to half, !dbg !55
  %389 = fptrunc float %363 to half, !dbg !55
  %390 = fptrunc float %364 to half, !dbg !55
  %391 = fptrunc float %365 to half, !dbg !55
  %392 = fptrunc float %366 to half, !dbg !55
  %393 = fptrunc float %367 to half, !dbg !55
  %394 = fptrunc float %368 to half, !dbg !55
  %395 = fptrunc float %369 to half, !dbg !55
  %396 = fptrunc float %370 to half, !dbg !55
  %397 = fptrunc float %371 to half, !dbg !55
  %398 = fptrunc float %372 to half, !dbg !55
  %399 = fptrunc float %373 to half, !dbg !55
  %400 = fptrunc float %374 to half, !dbg !55
  %401 = fptrunc float %375 to half, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %402 = getelementptr half, ptr addrspace(3) @global_smem, i64 %310, !dbg !55
  %403 = insertelement <1 x half> undef, half %386, i64 0, !dbg !55
  store <1 x half> %403, ptr addrspace(3) %402, align 2, !dbg !55
  %404 = add nuw nsw i32 %urem, 264, !dbg !55
  %405 = zext nneg i32 %404 to i64, !dbg !55
  %406 = getelementptr half, ptr addrspace(3) @global_smem, i64 %405, !dbg !55
  %407 = insertelement <1 x half> undef, half %387, i64 0, !dbg !55
  store <1 x half> %407, ptr addrspace(3) %406, align 2, !dbg !55
  %408 = add nuw nsw i32 %urem, 528, !dbg !55
  %409 = zext nneg i32 %408 to i64, !dbg !55
  %410 = getelementptr half, ptr addrspace(3) @global_smem, i64 %409, !dbg !55
  %411 = insertelement <1 x half> undef, half %388, i64 0, !dbg !55
  store <1 x half> %411, ptr addrspace(3) %410, align 2, !dbg !55
  %412 = add nuw nsw i32 %urem, 792, !dbg !55
  %413 = zext nneg i32 %412 to i64, !dbg !55
  %414 = getelementptr half, ptr addrspace(3) @global_smem, i64 %413, !dbg !55
  %415 = insertelement <1 x half> undef, half %389, i64 0, !dbg !55
  store <1 x half> %415, ptr addrspace(3) %414, align 2, !dbg !55
  %416 = add nuw nsw i32 %urem, 1056, !dbg !55
  %417 = zext nneg i32 %416 to i64, !dbg !55
  %418 = getelementptr half, ptr addrspace(3) @global_smem, i64 %417, !dbg !55
  %419 = insertelement <1 x half> undef, half %390, i64 0, !dbg !55
  store <1 x half> %419, ptr addrspace(3) %418, align 2, !dbg !55
  %420 = add nuw nsw i32 %urem, 1320, !dbg !55
  %421 = zext nneg i32 %420 to i64, !dbg !55
  %422 = getelementptr half, ptr addrspace(3) @global_smem, i64 %421, !dbg !55
  %423 = insertelement <1 x half> undef, half %391, i64 0, !dbg !55
  store <1 x half> %423, ptr addrspace(3) %422, align 2, !dbg !55
  %424 = add nuw nsw i32 %urem, 1584, !dbg !55
  %425 = zext nneg i32 %424 to i64, !dbg !55
  %426 = getelementptr half, ptr addrspace(3) @global_smem, i64 %425, !dbg !55
  %427 = insertelement <1 x half> undef, half %392, i64 0, !dbg !55
  store <1 x half> %427, ptr addrspace(3) %426, align 2, !dbg !55
  %428 = add nuw nsw i32 %urem, 1848, !dbg !55
  %429 = zext nneg i32 %428 to i64, !dbg !55
  %430 = getelementptr half, ptr addrspace(3) @global_smem, i64 %429, !dbg !55
  %431 = insertelement <1 x half> undef, half %393, i64 0, !dbg !55
  store <1 x half> %431, ptr addrspace(3) %430, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %432 = mul nuw nsw i32 %12, 264, !dbg !55
  %433 = add nuw nsw i32 %432, %286, !dbg !55
  %434 = zext nneg i32 %433 to i64, !dbg !55
  %435 = getelementptr half, ptr addrspace(3) @global_smem, i64 %434, !dbg !55
  %436 = load <4 x i32>, ptr addrspace(3) %435, align 16, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %437 = insertelement <1 x half> undef, half %394, i64 0, !dbg !55
  store <1 x half> %437, ptr addrspace(3) %402, align 2, !dbg !55
  %438 = insertelement <1 x half> undef, half %395, i64 0, !dbg !55
  store <1 x half> %438, ptr addrspace(3) %406, align 2, !dbg !55
  %439 = insertelement <1 x half> undef, half %396, i64 0, !dbg !55
  store <1 x half> %439, ptr addrspace(3) %410, align 2, !dbg !55
  %440 = insertelement <1 x half> undef, half %397, i64 0, !dbg !55
  store <1 x half> %440, ptr addrspace(3) %414, align 2, !dbg !55
  %441 = insertelement <1 x half> undef, half %398, i64 0, !dbg !55
  store <1 x half> %441, ptr addrspace(3) %418, align 2, !dbg !55
  %442 = insertelement <1 x half> undef, half %399, i64 0, !dbg !55
  store <1 x half> %442, ptr addrspace(3) %422, align 2, !dbg !55
  %443 = insertelement <1 x half> undef, half %400, i64 0, !dbg !55
  store <1 x half> %443, ptr addrspace(3) %426, align 2, !dbg !55
  %444 = insertelement <1 x half> undef, half %401, i64 0, !dbg !55
  store <1 x half> %444, ptr addrspace(3) %430, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %445 = load <4 x i32>, ptr addrspace(3) %435, align 16, !dbg !55
  %.extract = extractelement <4 x i32> %436, i64 0, !dbg !55
  %.extract9 = extractelement <4 x i32> %436, i64 1, !dbg !55
  %.extract11 = extractelement <4 x i32> %436, i64 2, !dbg !55
  %.extract13 = extractelement <4 x i32> %436, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract11, i32 %.extract13, ptr addrspace(1) %383, i1 %291) #5, !dbg !55
  %.extract15 = extractelement <4 x i32> %445, i64 0, !dbg !55
  %.extract17 = extractelement <4 x i32> %445, i64 1, !dbg !55
  %.extract19 = extractelement <4 x i32> %445, i64 2, !dbg !55
  %.extract21 = extractelement <4 x i32> %445, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract17, i32 %.extract19, i32 %.extract21, ptr addrspace(1) %385, i1 %289) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cfvyxurgla4cqgfzgr3o5bokrvxex7l7wrraswfjqnvrp4ayaxah.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/fv")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7", linkageName: "triton__0d1d2d3d4d5d6de7", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 44, scope: !7)
!11 = !DILocation(line: 27, column: 44, scope: !7)
!12 = !DILocation(line: 23, column: 28, scope: !7)
!13 = !DILocation(line: 23, column: 48, scope: !7)
!14 = !DILocation(line: 23, column: 53, scope: !7)
!15 = !DILocation(line: 23, column: 34, scope: !7)
!16 = !DILocation(line: 23, column: 58, scope: !7)
!17 = !DILocation(line: 24, column: 23, scope: !7)
!18 = !DILocation(line: 25, column: 21, scope: !7)
!19 = !DILocation(line: 26, column: 28, scope: !7)
!20 = !DILocation(line: 26, column: 33, scope: !7)
!21 = !DILocation(line: 27, column: 23, scope: !7)
!22 = !DILocation(line: 28, column: 21, scope: !7)
!23 = !DILocation(line: 32, column: 20, scope: !7)
!24 = !DILocation(line: 33, column: 41, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 55, scope: !7)
!28 = !DILocation(line: 33, column: 47, scope: !7)
!29 = !DILocation(line: 33, column: 95, scope: !7)
!30 = !DILocation(line: 34, column: 34, scope: !7)
!31 = !DILocation(line: 34, column: 47, scope: !7)
!32 = !DILocation(line: 34, column: 41, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 53, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 53, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 43, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 27, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 37, column: 76, scope: !7)
!46 = !DILocation(line: 36, column: 76, scope: !7)
!47 = !DILocation(line: 45, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 35, scope: !7)
!51 = !DILocation(line: 51, column: 49, scope: !7)
!52 = !DILocation(line: 51, column: 31, scope: !7)
!53 = !DILocation(line: 51, column: 42, scope: !7)
!54 = !DILocation(line: 51, column: 25, scope: !7)
!55 = !DILocation(line: 51, column: 62, scope: !7)
!56 = !DILocation(line: 51, column: 4, scope: !7)
