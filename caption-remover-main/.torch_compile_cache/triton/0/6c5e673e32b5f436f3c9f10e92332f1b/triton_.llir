; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %9, 255, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %11 = icmp slt i32 %10, 576, !dbg !10
  %.frozen = freeze i32 %10
  %12 = sdiv i32 %.frozen, 32, !dbg !11
  %13 = mul i32 %12, 32
  %.decomposed = sub i32 %.frozen, %13
  %14 = mul i32 %5, %4, !dbg !12
  %15 = mul i32 %14, 220, !dbg !13
  %16 = add i32 %15, 17, !dbg !14
  %17 = sdiv i32 %16, 18, !dbg !15
  %18 = mul i32 %12, %17, !dbg !16
  %19 = mul i32 %14, 22, !dbg !17
  %20 = mul i32 %14, 10, !dbg !18
  %21 = mul i32 %20, %.decomposed, !dbg !19
  %22 = mul i32 %14, 320, !dbg !20
  %23 = icmp sgt i32 %7, 0, !dbg !21
  br i1 %23, label %.lr.ph.preheader, label %._crit_edge, !dbg !21

.lr.ph.preheader:                                 ; preds = %8
  %24 = insertelement <4 x i32> poison, i32 %7, i64 0
  %25 = shufflevector <4 x i32> %24, <4 x i32> poison, <4 x i32> zeroinitializer
  %26 = insertelement <4 x i32> poison, i32 %18, i64 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> poison, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i32> poison, i32 %15, i64 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> poison, <4 x i32> zeroinitializer
  %30 = insertelement <4 x i1> poison, i1 %11, i64 0
  %31 = shufflevector <4 x i1> %30, <4 x i1> poison, <4 x i32> zeroinitializer
  br label %.lr.ph, !dbg !21

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %32 = phi i32 [ %176, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %33 = phi <4 x float> [ %169, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %34 = phi <4 x float> [ %174, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %35 = phi <4 x float> [ %170, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %36 = phi <4 x float> [ %173, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %37 = phi <4 x float> [ %172, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %38 = phi <4 x float> [ %175, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %39 = fadd <4 x float> %35, zeroinitializer, !dbg !22
  %40 = or i32 %32, %urem, !dbg !26
  %41 = or i32 %40, 256, !dbg !26
  %42 = or i32 %40, 512, !dbg !26
  %43 = or i32 %40, 768, !dbg !26
  %44 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !27
  %45 = insertelement <4 x i32> %44, i32 %41, i64 1, !dbg !27
  %46 = insertelement <4 x i32> %45, i32 %42, i64 2, !dbg !27
  %47 = insertelement <4 x i32> %46, i32 %43, i64 3, !dbg !27
  %48 = icmp slt <4 x i32> %47, %25, !dbg !27
  %49 = add <4 x i32> %47, %27, !dbg !28
  %50 = icmp slt <4 x i32> %49, %29, !dbg !29
  %51 = extractelement <4 x i32> %49, i64 0, !dbg !30
  %.frozen27 = freeze i32 %51
  %.frozen28 = freeze i32 %19
  %52 = sdiv i32 %.frozen27, %.frozen28, !dbg !31
  %53 = extractelement <4 x i32> %49, i64 1, !dbg !30
  %.frozen30 = freeze i32 %53
  %.frozen31 = freeze i32 %19
  %54 = sdiv i32 %.frozen30, %.frozen31, !dbg !31
  %55 = extractelement <4 x i32> %49, i64 2, !dbg !30
  %.frozen33 = freeze i32 %55
  %.frozen34 = freeze i32 %19
  %56 = sdiv i32 %.frozen33, %.frozen34, !dbg !31
  %57 = extractelement <4 x i32> %49, i64 3, !dbg !30
  %.frozen36 = freeze i32 %57
  %.frozen37 = freeze i32 %19
  %58 = sdiv i32 %.frozen36, %.frozen37, !dbg !31
  %59 = srem i32 %52, 10, !dbg !32
  %60 = srem i32 %54, 10, !dbg !32
  %61 = srem i32 %56, 10, !dbg !32
  %62 = srem i32 %58, 10, !dbg !32
  %63 = mul i32 %59, %14, !dbg !33
  %64 = mul i32 %60, %14, !dbg !33
  %65 = mul i32 %61, %14, !dbg !33
  %66 = mul i32 %62, %14, !dbg !33
  %67 = add i32 %63, %21, !dbg !34
  %68 = add i32 %64, %21, !dbg !34
  %69 = add i32 %65, %21, !dbg !34
  %70 = add i32 %66, %21, !dbg !34
  %71 = mul i32 %52, %.frozen28
  %.decomposed29 = sub i32 %.frozen27, %71
  %72 = mul i32 %54, %.frozen31
  %.decomposed32 = sub i32 %.frozen30, %72
  %73 = mul i32 %56, %.frozen34
  %.decomposed35 = sub i32 %.frozen33, %73
  %74 = mul i32 %58, %.frozen37
  %.decomposed38 = sub i32 %.frozen36, %74
  %.frozen39 = freeze i32 %14
  %75 = sdiv i32 %.decomposed29, %.frozen39, !dbg !35
  %.frozen41 = freeze i32 %14
  %76 = sdiv i32 %.decomposed32, %.frozen41, !dbg !35
  %.frozen43 = freeze i32 %14
  %77 = sdiv i32 %.decomposed35, %.frozen43, !dbg !35
  %.frozen45 = freeze i32 %14
  %78 = sdiv i32 %.decomposed38, %.frozen45, !dbg !35
  %79 = mul i32 %75, %22, !dbg !36
  %80 = mul i32 %76, %22, !dbg !36
  %81 = mul i32 %77, %22, !dbg !36
  %82 = mul i32 %78, %22, !dbg !36
  %83 = add i32 %67, %79, !dbg !37
  %84 = add i32 %68, %80, !dbg !37
  %85 = add i32 %69, %81, !dbg !37
  %86 = add i32 %70, %82, !dbg !37
  %87 = mul i32 %75, %.frozen39
  %.decomposed40 = sub i32 %.decomposed29, %87
  %88 = mul i32 %76, %.frozen41
  %.decomposed42 = sub i32 %.decomposed32, %88
  %89 = mul i32 %77, %.frozen43
  %.decomposed44 = sub i32 %.decomposed35, %89
  %90 = mul i32 %78, %.frozen45
  %.decomposed46 = sub i32 %.decomposed38, %90
  %91 = add i32 %83, %.decomposed40, !dbg !38
  %92 = add i32 %84, %.decomposed42, !dbg !38
  %93 = add i32 %85, %.decomposed44, !dbg !38
  %94 = add i32 %86, %.decomposed46, !dbg !38
  %95 = sext i32 %91 to i64, !dbg !39
  %96 = getelementptr half, ptr addrspace(1) %0, i64 %95, !dbg !39
  %97 = sext i32 %92 to i64, !dbg !39
  %98 = getelementptr half, ptr addrspace(1) %0, i64 %97, !dbg !39
  %99 = sext i32 %93 to i64, !dbg !39
  %100 = getelementptr half, ptr addrspace(1) %0, i64 %99, !dbg !39
  %101 = sext i32 %94 to i64, !dbg !39
  %102 = getelementptr half, ptr addrspace(1) %0, i64 %101, !dbg !39
  %103 = and <4 x i1> %48, %50, !dbg !40
  %104 = extractelement <4 x i1> %103, i64 0, !dbg !40
  %105 = and <4 x i1> %48, %50, !dbg !40
  %106 = extractelement <4 x i1> %105, i64 1, !dbg !40
  %107 = and <4 x i1> %48, %50, !dbg !40
  %108 = extractelement <4 x i1> %107, i64 2, !dbg !40
  %109 = and <4 x i1> %48, %50, !dbg !40
  %110 = extractelement <4 x i1> %109, i64 3, !dbg !40
  %111 = and i1 %11, %104, !dbg !41
  %112 = and i1 %11, %106, !dbg !41
  %113 = and i1 %11, %108, !dbg !41
  %114 = and i1 %11, %110, !dbg !41
  %115 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %96, i1 %111, i16 0, i1 %111) #3, !dbg !42
  %116 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %98, i1 %112, i16 0, i1 %112) #3, !dbg !42
  %117 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %100, i1 %113, i16 0, i1 %113) #3, !dbg !42
  %118 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 %114, i16 0, i1 %114) #3, !dbg !42
  %119 = insertelement <4 x i16> poison, i16 %115, i64 0, !dbg !42
  %120 = insertelement <4 x i16> %119, i16 %116, i64 1, !dbg !42
  %121 = insertelement <4 x i16> %120, i16 %117, i64 2, !dbg !42
  %122 = insertelement <4 x i16> %121, i16 %118, i64 3, !dbg !42
  %123 = bitcast <4 x i16> %122 to <4 x half>, !dbg !42
  %124 = fpext <4 x half> %123 to <4 x float>, !dbg !43
  %125 = select <4 x i1> %50, <4 x float> %124, <4 x float> zeroinitializer, !dbg !44
  %126 = select <4 x i1> %50, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer, !dbg !45
  %127 = fsub <4 x float> %125, %33, !dbg !46
  %128 = fadd <4 x float> %126, %34, !dbg !47
  %129 = fcmp oeq <4 x float> %128, zeroinitializer, !dbg !48
  %130 = extractelement <4 x float> %128, i64 0, !dbg !49
  %131 = extractelement <4 x float> %128, i64 1, !dbg !49
  %132 = extractelement <4 x float> %128, i64 2, !dbg !49
  %133 = extractelement <4 x float> %128, i64 3, !dbg !49
  %134 = and <4 x i1> %31, %48, !dbg !50
  %135 = fadd <4 x float> %126, %36, !dbg !47
  %136 = fcmp oeq <4 x float> %135, zeroinitializer, !dbg !48
  %137 = extractelement <4 x float> %135, i64 0, !dbg !49
  %138 = extractelement <4 x float> %126, i64 0, !dbg !49
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %137) #3, !dbg !49
  %140 = extractelement <4 x float> %135, i64 1, !dbg !49
  %141 = extractelement <4 x float> %126, i64 1, !dbg !49
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %140) #3, !dbg !49
  %143 = extractelement <4 x float> %135, i64 2, !dbg !49
  %144 = extractelement <4 x float> %126, i64 2, !dbg !49
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %143) #3, !dbg !49
  %146 = extractelement <4 x float> %135, i64 3, !dbg !49
  %147 = extractelement <4 x float> %126, i64 3, !dbg !49
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %146) #3, !dbg !49
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %130) #3, !dbg !49
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %131) #3, !dbg !49
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %132) #3, !dbg !49
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %133) #3, !dbg !49
  %153 = insertelement <4 x float> poison, float %139, i64 0, !dbg !51
  %154 = insertelement <4 x float> %153, float %142, i64 1, !dbg !51
  %155 = insertelement <4 x float> %154, float %145, i64 2, !dbg !51
  %156 = insertelement <4 x float> %155, float %148, i64 3, !dbg !51
  %157 = select <4 x i1> %136, <4 x float> zeroinitializer, <4 x float> %156, !dbg !51
  %158 = insertelement <4 x float> poison, float %149, i64 0, !dbg !51
  %159 = insertelement <4 x float> %158, float %150, i64 1, !dbg !51
  %160 = insertelement <4 x float> %159, float %151, i64 2, !dbg !51
  %161 = insertelement <4 x float> %160, float %152, i64 3, !dbg !51
  %162 = select <4 x i1> %129, <4 x float> zeroinitializer, <4 x float> %161, !dbg !51
  %163 = fmul <4 x float> %127, %162, !dbg !52
  %164 = fmul <4 x float> %127, %127, !dbg !53
  %165 = fmul <4 x float> %37, %164, !dbg !54
  %166 = fmul <4 x float> %157, %165, !dbg !55
  %167 = fadd <4 x float> %39, %166, !dbg !56
  %168 = select <4 x i1> %134, <4 x float> %163, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !57
  %169 = fadd <4 x float> %33, %168, !dbg !57
  %170 = select <4 x i1> %134, <4 x float> %167, <4 x float> %35, !dbg !58
  %171 = select <4 x i1> %134, <4 x float> %126, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !59
  %172 = fadd <4 x float> %37, %171, !dbg !59
  %173 = select <4 x i1> %134, <4 x float> %135, <4 x float> %36, !dbg !59
  %174 = select <4 x i1> %134, <4 x float> %128, <4 x float> %34, !dbg !59
  %175 = fadd <4 x float> %38, %171, !dbg !59
  %176 = add i32 %32, 1024, !dbg !21
  %177 = icmp slt i32 %176, %7, !dbg !21
  br i1 %177, label %.lr.ph, label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.lr.ph, %8
  %178 = phi <4 x float> [ zeroinitializer, %8 ], [ %169, %.lr.ph ]
  %179 = phi <4 x float> [ zeroinitializer, %8 ], [ %170, %.lr.ph ]
  %180 = phi <4 x float> [ zeroinitializer, %8 ], [ %175, %.lr.ph ]
  %181 = lshr i32 %9, 5, !dbg !8
  %182 = and i32 %181, 7, !dbg !8
  %183 = and i32 %9, 31, !dbg !8
  %184 = shl nuw nsw i32 %urem, 1, !dbg !21
  %185 = zext nneg i32 %184 to i64, !dbg !21
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i64 %185, !dbg !21
  %187 = shufflevector <4 x float> %180, <4 x float> poison, <1 x i32> zeroinitializer, !dbg !21
  store <1 x float> %187, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %188 = load float, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %189 = shufflevector <4 x float> %180, <4 x float> poison, <1 x i32> <i32 1>, !dbg !21
  store <1 x float> %189, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %190 = load float, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %191 = shufflevector <4 x float> %180, <4 x float> poison, <1 x i32> <i32 2>, !dbg !21
  store <1 x float> %191, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %192 = load float, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %193 = shufflevector <4 x float> %180, <4 x float> poison, <1 x i32> <i32 3>, !dbg !21
  store <1 x float> %193, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %194 = load float, ptr addrspace(3) %186, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %195 = extractelement <4 x float> %178, i64 0, !dbg !62
  %196 = extractelement <4 x float> %178, i64 1, !dbg !62
  %197 = fsub float %196, %195, !dbg !62
  %198 = fadd float %188, %190, !dbg !66
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !67
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %198) #3, !dbg !68
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !69
  %202 = fmul float %197, %201, !dbg !70
  %203 = fadd float %195, %202, !dbg !71
  %shift = shufflevector <4 x float> %179, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !72
  %204 = fadd <4 x float> %179, %shift, !dbg !72
  %205 = extractelement <4 x float> %204, i64 0, !dbg !72
  %206 = fmul float %197, %197, !dbg !73
  %207 = fmul float %206, %188, !dbg !74
  %208 = fmul float %207, %201, !dbg !75
  %209 = fadd float %205, %208, !dbg !76
  %210 = extractelement <4 x float> %178, i64 2, !dbg !62
  %211 = fsub float %210, %203, !dbg !62
  %212 = fadd float %198, %192, !dbg !66
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !67
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %212) #3, !dbg !68
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !69
  %216 = fmul float %215, %211, !dbg !70
  %217 = fadd float %203, %216, !dbg !71
  %218 = extractelement <4 x float> %179, i64 2, !dbg !72
  %219 = fadd float %218, %209, !dbg !72
  %220 = fmul float %211, %211, !dbg !73
  %221 = fmul float %198, %220, !dbg !74
  %222 = fmul float %215, %221, !dbg !75
  %223 = fadd float %219, %222, !dbg !76
  %224 = extractelement <4 x float> %178, i64 3, !dbg !62
  %225 = fsub float %224, %217, !dbg !62
  %226 = fadd float %212, %194, !dbg !66
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !67
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %226) #3, !dbg !68
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !69
  %230 = fmul float %229, %225, !dbg !70
  %231 = fadd float %217, %230, !dbg !71
  %232 = extractelement <4 x float> %179, i64 3, !dbg !72
  %233 = fadd float %232, %223, !dbg !72
  %234 = fmul float %225, %225, !dbg !73
  %235 = fmul float %212, %234, !dbg !74
  %236 = fmul float %229, %235, !dbg !75
  %237 = fadd float %233, %236, !dbg !76
  %238 = bitcast float %231 to i32, !dbg !60
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 16, i32 31), !dbg !60
  %240 = bitcast i32 %239 to float, !dbg !60
  %241 = bitcast float %237 to i32, !dbg !60
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 16, i32 31), !dbg !60
  %243 = bitcast i32 %242 to float, !dbg !60
  %244 = bitcast float %226 to i32, !dbg !60
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 16, i32 31), !dbg !60
  %246 = bitcast i32 %245 to float, !dbg !60
  %247 = fsub float %240, %231, !dbg !62
  %248 = fadd float %226, %246, !dbg !66
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !67
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %248) #3, !dbg !68
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !69
  %252 = fmul float %251, %247, !dbg !70
  %253 = fadd float %231, %252, !dbg !71
  %254 = fadd float %237, %243, !dbg !72
  %255 = fmul float %247, %247, !dbg !73
  %256 = fmul float %226, %255, !dbg !74
  %257 = fmul float %251, %256, !dbg !75
  %258 = fadd float %254, %257, !dbg !76
  %259 = bitcast float %253 to i32, !dbg !60
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !60
  %261 = bitcast i32 %260 to float, !dbg !60
  %262 = bitcast float %258 to i32, !dbg !60
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !60
  %264 = bitcast i32 %263 to float, !dbg !60
  %265 = bitcast float %248 to i32, !dbg !60
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !60
  %267 = bitcast i32 %266 to float, !dbg !60
  %268 = fsub float %261, %253, !dbg !62
  %269 = fadd float %248, %267, !dbg !66
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !67
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #3, !dbg !68
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !69
  %273 = fmul float %268, %272, !dbg !70
  %274 = fadd float %253, %273, !dbg !71
  %275 = fadd float %258, %264, !dbg !72
  %276 = fmul float %268, %268, !dbg !73
  %277 = fmul float %248, %276, !dbg !74
  %278 = fmul float %272, %277, !dbg !75
  %279 = fadd float %275, %278, !dbg !76
  %280 = bitcast float %274 to i32, !dbg !60
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !60
  %282 = bitcast i32 %281 to float, !dbg !60
  %283 = bitcast float %279 to i32, !dbg !60
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !60
  %285 = bitcast i32 %284 to float, !dbg !60
  %286 = bitcast float %269 to i32, !dbg !60
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !60
  %288 = bitcast i32 %287 to float, !dbg !60
  %289 = fsub float %282, %274, !dbg !62
  %290 = fadd float %269, %288, !dbg !66
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !67
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %290) #3, !dbg !68
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !69
  %294 = fmul float %289, %293, !dbg !70
  %295 = fadd float %274, %294, !dbg !71
  %296 = fadd float %279, %285, !dbg !72
  %297 = fmul float %289, %289, !dbg !73
  %298 = fmul float %269, %297, !dbg !74
  %299 = fmul float %293, %298, !dbg !75
  %300 = fadd float %296, %299, !dbg !76
  %301 = bitcast float %295 to i32, !dbg !60
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !60
  %303 = bitcast i32 %302 to float, !dbg !60
  %304 = bitcast float %300 to i32, !dbg !60
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !60
  %306 = bitcast i32 %305 to float, !dbg !60
  %307 = bitcast float %290 to i32, !dbg !60
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !60
  %309 = bitcast i32 %308 to float, !dbg !60
  %310 = fsub float %303, %295, !dbg !62
  %311 = fadd float %290, %309, !dbg !66
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !67
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %311) #3, !dbg !68
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !69
  %315 = fmul float %310, %314, !dbg !70
  %316 = fadd float %295, %315, !dbg !71
  %317 = fadd float %300, %306, !dbg !72
  %318 = fmul float %310, %310, !dbg !73
  %319 = fmul float %290, %318, !dbg !74
  %320 = fmul float %314, %319, !dbg !75
  %321 = fadd float %317, %320, !dbg !76
  %322 = bitcast float %316 to i32, !dbg !60
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !60
  %324 = bitcast i32 %323 to float, !dbg !60
  %325 = bitcast float %321 to i32, !dbg !60
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !60
  %327 = bitcast i32 %326 to float, !dbg !60
  %328 = bitcast float %311 to i32, !dbg !60
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !60
  %330 = bitcast i32 %329 to float, !dbg !60
  %331 = fsub float %324, %316, !dbg !62
  %332 = fadd float %311, %330, !dbg !66
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !67
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %332) #3, !dbg !68
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !69
  %336 = fmul float %331, %335, !dbg !70
  %337 = fadd float %316, %336, !dbg !71
  %338 = fadd float %321, %327, !dbg !72
  %339 = fmul float %331, %331, !dbg !73
  %340 = fmul float %311, %339, !dbg !74
  %341 = fmul float %335, %340, !dbg !75
  %342 = fadd float %338, %341, !dbg !76
  %343 = icmp eq i32 %183, 0, !dbg !60
  %344 = zext nneg i32 %182 to i64, !dbg !60
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i64 %344, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, float %337, i1 %343) #3, !dbg !60
  %346 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %344, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, float %342, i1 %343) #3, !dbg !60
  %347 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %344, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, float %332, i1 %343) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %348 = icmp slt i32 %9, 8, !dbg !60
  %349 = sext i32 %9 to i64, !dbg !60
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i64 %349, !dbg !60
  %351 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %350, i1 %348) #3, !dbg !60
  %352 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %349, !dbg !60
  %353 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %352, i1 %348) #3, !dbg !60
  %354 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %349, !dbg !60
  %355 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %354, i1 %348) #3, !dbg !60
  %356 = bitcast float %351 to i32, !dbg !60
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 4, i32 31), !dbg !60
  %358 = bitcast i32 %357 to float, !dbg !60
  %359 = bitcast float %353 to i32, !dbg !60
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 4, i32 31), !dbg !60
  %361 = bitcast i32 %360 to float, !dbg !60
  %362 = bitcast float %355 to i32, !dbg !60
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 4, i32 31), !dbg !60
  %364 = bitcast i32 %363 to float, !dbg !60
  %365 = fsub float %358, %351, !dbg !62
  %366 = fadd float %355, %364, !dbg !66
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !67
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %366) #3, !dbg !68
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !69
  %370 = fmul float %365, %369, !dbg !70
  %371 = fadd float %351, %370, !dbg !71
  %372 = fadd float %353, %361, !dbg !72
  %373 = fmul float %365, %365, !dbg !73
  %374 = fmul float %355, %373, !dbg !74
  %375 = fmul float %374, %369, !dbg !75
  %376 = fadd float %372, %375, !dbg !76
  %377 = bitcast float %371 to i32, !dbg !60
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 2, i32 31), !dbg !60
  %379 = bitcast i32 %378 to float, !dbg !60
  %380 = bitcast float %376 to i32, !dbg !60
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 2, i32 31), !dbg !60
  %382 = bitcast i32 %381 to float, !dbg !60
  %383 = bitcast float %366 to i32, !dbg !60
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 2, i32 31), !dbg !60
  %385 = bitcast i32 %384 to float, !dbg !60
  %386 = fsub float %379, %371, !dbg !62
  %387 = fadd float %366, %385, !dbg !66
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !67
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float %387) #3, !dbg !68
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !69
  %391 = fmul float %386, %390, !dbg !70
  %392 = fadd float %371, %391, !dbg !71
  %393 = fadd float %376, %382, !dbg !72
  %394 = fmul float %386, %386, !dbg !73
  %395 = fmul float %366, %394, !dbg !74
  %396 = fmul float %390, %395, !dbg !75
  %397 = fadd float %393, %396, !dbg !76
  %398 = bitcast float %392 to i32, !dbg !60
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 1, i32 31), !dbg !60
  %400 = bitcast i32 %399 to float, !dbg !60
  %401 = bitcast float %397 to i32, !dbg !60
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 1, i32 31), !dbg !60
  %403 = bitcast i32 %402 to float, !dbg !60
  %404 = bitcast float %387 to i32, !dbg !60
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 1, i32 31), !dbg !60
  %406 = bitcast i32 %405 to float, !dbg !60
  %407 = fsub float %400, %392, !dbg !62
  %408 = fadd float %387, %406, !dbg !66
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !67
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %406, float %408) #3, !dbg !68
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !69
  %412 = fmul float %407, %411, !dbg !70
  %413 = fadd float %392, %412, !dbg !71
  %414 = fadd float %397, %403, !dbg !72
  %415 = fmul float %407, %407, !dbg !73
  %416 = fmul float %387, %415, !dbg !74
  %417 = fmul float %411, %416, !dbg !75
  %418 = fadd float %414, %417, !dbg !76
  %419 = and i32 %9, 7, !dbg !60
  %420 = icmp eq i32 %419, 0, !dbg !60
  %421 = and i1 %348, %420, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, float %413, i1 %421) #3, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, float %418, i1 %421) #3, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, float %408, i1 %421) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %422 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !60
  %423 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !60
  %424 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), align 4, !dbg !60
  %425 = sext i32 %10 to i64, !dbg !77
  %426 = getelementptr float, ptr addrspace(1) %1, i64 %425, !dbg !77
  %427 = icmp eq i32 %urem, 0, !dbg !78
  %428 = and i1 %427, %11, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %426, i1 %428) #3, !dbg !78
  %429 = getelementptr float, ptr addrspace(1) %2, i64 %425, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %423, ptr addrspace(1) %429, i1 %428) #3, !dbg !80
  %430 = getelementptr float, ptr addrspace(1) %3, i64 %425, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %424, ptr addrspace(1) %430, i1 %428) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "crzbpbvacnahhooa6es7irs2i3p5cr6qnr7n2vu6o5zp2nmyzvie.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/rz")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 20, scope: !5)
!12 = !DILocation(line: 36, column: 36, scope: !5)
!13 = !DILocation(line: 36, column: 40, scope: !5)
!14 = !DILocation(line: 36, column: 32, scope: !5)
!15 = !DILocation(line: 36, column: 49, scope: !5)
!16 = !DILocation(line: 36, column: 25, scope: !5)
!17 = !DILocation(line: 39, column: 97, scope: !5)
!18 = !DILocation(line: 39, column: 120, scope: !5)
!19 = !DILocation(line: 39, column: 124, scope: !5)
!20 = !DILocation(line: 39, column: 139, scope: !5)
!21 = !DILocation(line: 32, column: 36, scope: !5)
!22 = !DILocation(line: 124, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !5, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!25 = !DILocation(line: 54, column: 26, scope: !23)
!26 = !DILocation(line: 33, column: 27, scope: !5)
!27 = !DILocation(line: 34, column: 25, scope: !5)
!28 = !DILocation(line: 36, column: 21, scope: !5)
!29 = !DILocation(line: 38, column: 22, scope: !5)
!30 = !DILocation(line: 39, column: 189, scope: !5)
!31 = !DILocation(line: 39, column: 90, scope: !5)
!32 = !DILocation(line: 39, column: 105, scope: !5)
!33 = !DILocation(line: 39, column: 44, scope: !5)
!34 = !DILocation(line: 39, column: 113, scope: !5)
!35 = !DILocation(line: 39, column: 206, scope: !5)
!36 = !DILocation(line: 39, column: 144, scope: !5)
!37 = !DILocation(line: 39, column: 131, scope: !5)
!38 = !DILocation(line: 39, column: 220, scope: !5)
!39 = !DILocation(line: 39, column: 34, scope: !5)
!40 = !DILocation(line: 39, column: 301, scope: !5)
!41 = !DILocation(line: 39, column: 308, scope: !5)
!42 = !DILocation(line: 39, column: 293, scope: !5)
!43 = !DILocation(line: 39, column: 359, scope: !5)
!44 = !DILocation(line: 42, column: 36, scope: !5)
!45 = !DILocation(line: 48, column: 38, scope: !5)
!46 = !DILocation(line: 119, column: 21, scope: !23, inlinedAt: !25)
!47 = !DILocation(line: 120, column: 28, scope: !23, inlinedAt: !25)
!48 = !DILocation(line: 121, column: 39, scope: !23, inlinedAt: !25)
!49 = !DILocation(line: 121, column: 60, scope: !23, inlinedAt: !25)
!50 = !DILocation(line: 56, column: 38, scope: !5)
!51 = !DILocation(line: 121, column: 49, scope: !23, inlinedAt: !25)
!52 = !DILocation(line: 123, column: 25, scope: !23, inlinedAt: !25)
!53 = !DILocation(line: 124, column: 30, scope: !23, inlinedAt: !25)
!54 = !DILocation(line: 124, column: 38, scope: !23, inlinedAt: !25)
!55 = !DILocation(line: 124, column: 49, scope: !23, inlinedAt: !25)
!56 = !DILocation(line: 124, column: 22, scope: !23, inlinedAt: !25)
!57 = !DILocation(line: 56, column: 62, scope: !5)
!58 = !DILocation(line: 57, column: 58, scope: !5)
!59 = !DILocation(line: 58, column: 66, scope: !5)
!60 = !DILocation(line: 131, column: 46, scope: !23, inlinedAt: !61)
!61 = !DILocation(line: 60, column: 44, scope: !23)
!62 = !DILocation(line: 119, column: 21, scope: !63, inlinedAt: !64)
!63 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!64 = !DILocation(line: 131, column: 46, scope: !63, inlinedAt: !65)
!65 = !DILocation(line: 60, column: 44, scope: !63)
!66 = !DILocation(line: 120, column: 28, scope: !63, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 39, scope: !63, inlinedAt: !64)
!68 = !DILocation(line: 121, column: 60, scope: !63, inlinedAt: !64)
!69 = !DILocation(line: 121, column: 49, scope: !63, inlinedAt: !64)
!70 = !DILocation(line: 123, column: 25, scope: !63, inlinedAt: !64)
!71 = !DILocation(line: 123, column: 17, scope: !63, inlinedAt: !64)
!72 = !DILocation(line: 124, column: 15, scope: !63, inlinedAt: !64)
!73 = !DILocation(line: 124, column: 30, scope: !63, inlinedAt: !64)
!74 = !DILocation(line: 124, column: 38, scope: !63, inlinedAt: !64)
!75 = !DILocation(line: 124, column: 49, scope: !63, inlinedAt: !64)
!76 = !DILocation(line: 124, column: 22, scope: !63, inlinedAt: !64)
!77 = !DILocation(line: 65, column: 25, scope: !5)
!78 = !DILocation(line: 65, column: 37, scope: !5)
!79 = !DILocation(line: 66, column: 25, scope: !5)
!80 = !DILocation(line: 66, column: 37, scope: !5)
!81 = !DILocation(line: 67, column: 25, scope: !5)
!82 = !DILocation(line: 67, column: 37, scope: !5)
!83 = !DILocation(line: 67, column: 4, scope: !5)
