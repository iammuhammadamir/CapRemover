; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %6 = shl i32 %5, 3, !dbg !8
  %7 = and i32 %6, 1016, !dbg !8
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %9 = shl i32 %8, 10, !dbg !10
  %10 = or i32 %9, %7, !dbg !11
  %11 = icmp slt i32 %10, 19008000, !dbg !12
  %12 = srem i32 %10, 320, !dbg !13
  %13 = sext i32 %10 to i64, !dbg !14
  %14 = getelementptr half, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 %11) #1, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %extelt.offset = lshr i32 %16, 16, !dbg !15
  %extelt.offset1 = lshr i32 %17, 16, !dbg !15
  %extelt.offset2 = lshr i32 %18, 16, !dbg !15
  %extelt.offset3 = lshr i32 %19, 16, !dbg !15
  %20 = sext i32 %12 to i64, !dbg !16
  %21 = getelementptr half, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %extelt.offset4 = lshr i32 %23, 16, !dbg !17
  %extelt.offset5 = lshr i32 %24, 16, !dbg !17
  %extelt.offset6 = lshr i32 %25, 16, !dbg !17
  %extelt.offset7 = lshr i32 %26, 16, !dbg !17
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %13, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %extelt.offset8 = lshr i32 %29, 16, !dbg !19
  %extelt.offset9 = lshr i32 %30, 16, !dbg !19
  %extelt.offset10 = lshr i32 %31, 16, !dbg !19
  %extelt.offset11 = lshr i32 %32, 16, !dbg !19
  %33 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %34 = insertelement <2 x i32> %33, i32 %extelt.offset, i64 1, !dbg !15
  %35 = trunc <2 x i32> %34 to <2 x i16>, !dbg !15
  %36 = bitcast <2 x i16> %35 to <2 x half>, !dbg !15
  %37 = fpext <2 x half> %36 to <2 x float>, !dbg !20
  %38 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !17
  %39 = insertelement <2 x i32> %38, i32 %extelt.offset4, i64 1, !dbg !17
  %40 = trunc <2 x i32> %39 to <2 x i16>, !dbg !17
  %41 = bitcast <2 x i16> %40 to <2 x half>, !dbg !17
  %42 = fpext <2 x half> %41 to <2 x float>, !dbg !21
  %43 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !19
  %44 = insertelement <2 x i32> %43, i32 %extelt.offset8, i64 1, !dbg !19
  %45 = trunc <2 x i32> %44 to <2 x i16>, !dbg !19
  %46 = bitcast <2 x i16> %45 to <2 x half>, !dbg !19
  %47 = fpext <2 x half> %46 to <2 x float>, !dbg !22
  %48 = fadd <2 x float> %37, %42, !dbg !23
  %49 = fadd <2 x float> %48, %47, !dbg !24
  %50 = fptrunc <2 x float> %49 to <2 x half>, !dbg !25
  %51 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %52 = insertelement <2 x i32> %51, i32 %extelt.offset1, i64 1, !dbg !15
  %53 = trunc <2 x i32> %52 to <2 x i16>, !dbg !15
  %54 = bitcast <2 x i16> %53 to <2 x half>, !dbg !15
  %55 = fpext <2 x half> %54 to <2 x float>, !dbg !20
  %56 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !17
  %57 = insertelement <2 x i32> %56, i32 %extelt.offset5, i64 1, !dbg !17
  %58 = trunc <2 x i32> %57 to <2 x i16>, !dbg !17
  %59 = bitcast <2 x i16> %58 to <2 x half>, !dbg !17
  %60 = fpext <2 x half> %59 to <2 x float>, !dbg !21
  %61 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %62 = insertelement <2 x i32> %61, i32 %extelt.offset9, i64 1, !dbg !19
  %63 = trunc <2 x i32> %62 to <2 x i16>, !dbg !19
  %64 = bitcast <2 x i16> %63 to <2 x half>, !dbg !19
  %65 = fpext <2 x half> %64 to <2 x float>, !dbg !22
  %66 = fadd <2 x float> %55, %60, !dbg !23
  %67 = fadd <2 x float> %66, %65, !dbg !24
  %68 = fptrunc <2 x float> %67 to <2 x half>, !dbg !25
  %69 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !15
  %70 = insertelement <2 x i32> %69, i32 %extelt.offset2, i64 1, !dbg !15
  %71 = trunc <2 x i32> %70 to <2 x i16>, !dbg !15
  %72 = bitcast <2 x i16> %71 to <2 x half>, !dbg !15
  %73 = fpext <2 x half> %72 to <2 x float>, !dbg !20
  %74 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %75 = insertelement <2 x i32> %74, i32 %extelt.offset6, i64 1, !dbg !17
  %76 = trunc <2 x i32> %75 to <2 x i16>, !dbg !17
  %77 = bitcast <2 x i16> %76 to <2 x half>, !dbg !17
  %78 = fpext <2 x half> %77 to <2 x float>, !dbg !21
  %79 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !19
  %80 = insertelement <2 x i32> %79, i32 %extelt.offset10, i64 1, !dbg !19
  %81 = trunc <2 x i32> %80 to <2 x i16>, !dbg !19
  %82 = bitcast <2 x i16> %81 to <2 x half>, !dbg !19
  %83 = fpext <2 x half> %82 to <2 x float>, !dbg !22
  %84 = fadd <2 x float> %73, %78, !dbg !23
  %85 = fadd <2 x float> %84, %83, !dbg !24
  %86 = fptrunc <2 x float> %85 to <2 x half>, !dbg !25
  %87 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !15
  %88 = insertelement <2 x i32> %87, i32 %extelt.offset3, i64 1, !dbg !15
  %89 = trunc <2 x i32> %88 to <2 x i16>, !dbg !15
  %90 = bitcast <2 x i16> %89 to <2 x half>, !dbg !15
  %91 = fpext <2 x half> %90 to <2 x float>, !dbg !20
  %92 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !17
  %93 = insertelement <2 x i32> %92, i32 %extelt.offset7, i64 1, !dbg !17
  %94 = trunc <2 x i32> %93 to <2 x i16>, !dbg !17
  %95 = bitcast <2 x i16> %94 to <2 x half>, !dbg !17
  %96 = fpext <2 x half> %95 to <2 x float>, !dbg !21
  %97 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !19
  %98 = insertelement <2 x i32> %97, i32 %extelt.offset11, i64 1, !dbg !19
  %99 = trunc <2 x i32> %98 to <2 x i16>, !dbg !19
  %100 = bitcast <2 x i16> %99 to <2 x half>, !dbg !19
  %101 = fpext <2 x half> %100 to <2 x float>, !dbg !22
  %102 = fadd <2 x float> %91, %96, !dbg !23
  %103 = fadd <2 x float> %102, %101, !dbg !24
  %104 = fptrunc <2 x float> %103 to <2 x half>, !dbg !25
  %105 = bitcast <2 x half> %50 to i32, !dbg !25
  %106 = bitcast <2 x half> %68 to i32, !dbg !25
  %107 = bitcast <2 x half> %86 to i32, !dbg !25
  %108 = bitcast <2 x half> %104 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %106, i32 %107, i32 %108, ptr addrspace(1) %14, i1 %11) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cpy3jtztsxbrd4vhzaphnjlokj2fgluh4vcruk2ulraznxutiqej.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/py")
!3 = !{ptr @triton__0d1d2d3de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3de", linkageName: "triton__0d1d2d3de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 36, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 22, column: 33, scope: !5)
!11 = !DILocation(line: 23, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 18, scope: !5)
!14 = !DILocation(line: 27, column: 34, scope: !5)
!15 = !DILocation(line: 27, column: 39, scope: !5)
!16 = !DILocation(line: 28, column: 30, scope: !5)
!17 = !DILocation(line: 28, column: 35, scope: !5)
!18 = !DILocation(line: 29, column: 30, scope: !5)
!19 = !DILocation(line: 29, column: 35, scope: !5)
!20 = !DILocation(line: 27, column: 49, scope: !5)
!21 = !DILocation(line: 28, column: 75, scope: !5)
!22 = !DILocation(line: 29, column: 45, scope: !5)
!23 = !DILocation(line: 30, column: 18, scope: !5)
!24 = !DILocation(line: 31, column: 18, scope: !5)
!25 = !DILocation(line: 32, column: 39, scope: !5)
!26 = !DILocation(line: 32, column: 4, scope: !5)
