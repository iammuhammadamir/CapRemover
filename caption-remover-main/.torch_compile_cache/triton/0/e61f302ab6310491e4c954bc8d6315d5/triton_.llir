; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3de4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %7 = and i32 %6, 127, !dbg !8
  %8 = or i32 %7, 128, !dbg !8
  %9 = or i32 %7, 256, !dbg !8
  %10 = or i32 %7, 384, !dbg !8
  %11 = or i32 %7, 512, !dbg !8
  %12 = or i32 %7, 640, !dbg !8
  %13 = or i32 %7, 768, !dbg !8
  %14 = or i32 %7, 896, !dbg !8
  %15 = shl nuw nsw i32 %7, 3, !dbg !8
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %18 = add i32 %17, 1, !dbg !11
  %19 = shl i32 %16, 10, !dbg !12
  %20 = mul i32 %19, %18, !dbg !13
  %21 = or i32 %20, %7, !dbg !14
  %22 = or i32 %20, %8, !dbg !14
  %23 = or i32 %20, %9, !dbg !14
  %24 = or i32 %20, %10, !dbg !14
  %25 = or i32 %20, %11, !dbg !14
  %26 = or i32 %20, %12, !dbg !14
  %27 = or i32 %20, %13, !dbg !14
  %28 = or i32 %20, %14, !dbg !14
  %29 = or i32 %20, %15, !dbg !14
  %30 = icmp slt i32 %21, 7040, !dbg !15
  %31 = icmp slt i32 %22, 7040, !dbg !15
  %32 = icmp slt i32 %23, 7040, !dbg !15
  %33 = icmp slt i32 %24, 7040, !dbg !15
  %34 = icmp slt i32 %25, 7040, !dbg !15
  %35 = icmp slt i32 %26, 7040, !dbg !15
  %36 = icmp slt i32 %27, 7040, !dbg !15
  %37 = icmp slt i32 %28, 7040, !dbg !15
  %38 = icmp slt i32 %29, 7040, !dbg !15
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !16
  %40 = icmp slt i32 %39, 2700, !dbg !17
  %.frozen = freeze i32 %29
  %41 = sdiv i32 %.frozen, 320, !dbg !18
  %42 = mul i32 %41, 320
  %.decomposed = sub i32 %.frozen, %42
  %43 = mul i32 %21, 2700, !dbg !19
  %44 = mul i32 %22, 2700, !dbg !19
  %45 = mul i32 %23, 2700, !dbg !19
  %46 = mul i32 %24, 2700, !dbg !19
  %47 = mul i32 %25, 2700, !dbg !19
  %48 = mul i32 %26, 2700, !dbg !19
  %49 = mul i32 %27, 2700, !dbg !19
  %50 = mul i32 %28, 2700, !dbg !19
  %51 = add i32 %43, %39, !dbg !20
  %52 = add i32 %44, %39, !dbg !20
  %53 = add i32 %45, %39, !dbg !20
  %54 = add i32 %46, %39, !dbg !20
  %55 = add i32 %47, %39, !dbg !20
  %56 = add i32 %48, %39, !dbg !20
  %57 = add i32 %49, %39, !dbg !20
  %58 = add i32 %50, %39, !dbg !20
  %59 = sext i32 %51 to i64, !dbg !21
  %60 = getelementptr half, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = sext i32 %52 to i64, !dbg !21
  %62 = getelementptr half, ptr addrspace(1) %0, i64 %61, !dbg !21
  %63 = sext i32 %53 to i64, !dbg !21
  %64 = getelementptr half, ptr addrspace(1) %0, i64 %63, !dbg !21
  %65 = sext i32 %54 to i64, !dbg !21
  %66 = getelementptr half, ptr addrspace(1) %0, i64 %65, !dbg !21
  %67 = sext i32 %55 to i64, !dbg !21
  %68 = getelementptr half, ptr addrspace(1) %0, i64 %67, !dbg !21
  %69 = sext i32 %56 to i64, !dbg !21
  %70 = getelementptr half, ptr addrspace(1) %0, i64 %69, !dbg !21
  %71 = sext i32 %57 to i64, !dbg !21
  %72 = getelementptr half, ptr addrspace(1) %0, i64 %71, !dbg !21
  %73 = sext i32 %58 to i64, !dbg !21
  %74 = getelementptr half, ptr addrspace(1) %0, i64 %73, !dbg !21
  %75 = and i1 %40, %30, !dbg !22
  %76 = and i1 %40, %31, !dbg !22
  %77 = and i1 %40, %32, !dbg !22
  %78 = and i1 %40, %33, !dbg !22
  %79 = and i1 %40, %34, !dbg !22
  %80 = and i1 %40, %35, !dbg !22
  %81 = and i1 %40, %36, !dbg !22
  %82 = and i1 %40, %37, !dbg !22
  %83 = and i1 %40, %38, !dbg !22
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %60, i1 %75) #2, !dbg !23
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %62, i1 %76) #2, !dbg !23
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %64, i1 %77) #2, !dbg !23
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %78) #2, !dbg !23
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %79) #2, !dbg !23
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %70, i1 %80) #2, !dbg !23
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %81) #2, !dbg !23
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %82) #2, !dbg !23
  %92 = zext nneg i32 %7 to i64, !dbg !24
  %93 = getelementptr half, ptr addrspace(3) @global_smem, i64 %92, !dbg !24
  store i16 %84, ptr addrspace(3) %93, align 2, !dbg !24
  %94 = zext nneg i32 %8 to i64, !dbg !24
  %95 = getelementptr half, ptr addrspace(3) @global_smem, i64 %94, !dbg !24
  store i16 %85, ptr addrspace(3) %95, align 2, !dbg !24
  %96 = zext nneg i32 %9 to i64, !dbg !24
  %97 = getelementptr half, ptr addrspace(3) @global_smem, i64 %96, !dbg !24
  store i16 %86, ptr addrspace(3) %97, align 2, !dbg !24
  %98 = zext nneg i32 %10 to i64, !dbg !24
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !24
  store i16 %87, ptr addrspace(3) %99, align 2, !dbg !24
  %100 = zext nneg i32 %11 to i64, !dbg !24
  %101 = getelementptr half, ptr addrspace(3) @global_smem, i64 %100, !dbg !24
  store i16 %88, ptr addrspace(3) %101, align 2, !dbg !24
  %102 = zext nneg i32 %12 to i64, !dbg !24
  %103 = getelementptr half, ptr addrspace(3) @global_smem, i64 %102, !dbg !24
  store i16 %89, ptr addrspace(3) %103, align 2, !dbg !24
  %104 = zext nneg i32 %13 to i64, !dbg !24
  %105 = getelementptr half, ptr addrspace(3) @global_smem, i64 %104, !dbg !24
  store i16 %90, ptr addrspace(3) %105, align 2, !dbg !24
  %106 = zext nneg i32 %14 to i64, !dbg !24
  %107 = getelementptr half, ptr addrspace(3) @global_smem, i64 %106, !dbg !24
  store i16 %91, ptr addrspace(3) %107, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %108 = zext nneg i32 %15 to i64, !dbg !24
  %109 = getelementptr half, ptr addrspace(3) @global_smem, i64 %108, !dbg !24
  %110 = mul i32 %39, 320, !dbg !25
  %111 = add i32 %.decomposed, %110, !dbg !26
  %112 = mul i32 %41, 864000, !dbg !27
  %113 = add i32 %111, %112, !dbg !28
  %114 = sext i32 %113 to i64, !dbg !29
  %115 = getelementptr half, ptr addrspace(1) %1, i64 %114, !dbg !29
  %.extract = load i32, ptr addrspace(3) %109, align 16, !dbg !24
  %116 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %109, i64 0, i64 1, !dbg !24
  %.extract2 = load i32, ptr addrspace(3) %116, align 4, !dbg !24
  %117 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %109, i64 0, i64 2, !dbg !24
  %.extract4 = load i32, ptr addrspace(3) %117, align 8, !dbg !24
  %118 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %109, i64 0, i64 3, !dbg !24
  %.extract6 = load i32, ptr addrspace(3) %118, align 4, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract2, i32 %.extract4, i32 %.extract6, ptr addrspace(1) %115, i1 %83) #2, !dbg !24
  %119 = getelementptr half, ptr addrspace(1) %2, i64 %114, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract2, i32 %.extract4, i32 %.extract6, ptr addrspace(1) %119, i1 %83) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c7dsumkjfchobmyjofmdmauevjopqud3vgzz2db5tzvndwi7zcua.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/7d")
!3 = !{ptr @triton__0d1d2d3de4, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3de4, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3de4", linkageName: "triton__0d1d2d3de4", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 23, column: 58, scope: !5)
!14 = !DILocation(line: 24, column: 23, scope: !5)
!15 = !DILocation(line: 25, column: 21, scope: !5)
!16 = !DILocation(line: 26, column: 28, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 32, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 41, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 30, scope: !5)
!22 = !DILocation(line: 33, column: 55, scope: !5)
!23 = !DILocation(line: 33, column: 47, scope: !5)
!24 = !DILocation(line: 34, column: 61, scope: !5)
!25 = !DILocation(line: 34, column: 35, scope: !5)
!26 = !DILocation(line: 34, column: 31, scope: !5)
!27 = !DILocation(line: 34, column: 49, scope: !5)
!28 = !DILocation(line: 34, column: 42, scope: !5)
!29 = !DILocation(line: 34, column: 25, scope: !5)
!30 = !DILocation(line: 35, column: 25, scope: !5)
!31 = !DILocation(line: 35, column: 61, scope: !5)
!32 = !DILocation(line: 35, column: 4, scope: !5)
