; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d234567de(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = shl i32 %9, 3, !dbg !8
  %11 = and i32 %10, 1016, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %13 = shl i32 %12, 10, !dbg !10
  %14 = or i32 %13, %11, !dbg !11
  %15 = or i32 %14, 1, !dbg !11
  %16 = or i32 %14, 2, !dbg !11
  %17 = or i32 %14, 3, !dbg !11
  %18 = or i32 %14, 4, !dbg !11
  %19 = or i32 %14, 5, !dbg !11
  %20 = or i32 %14, 6, !dbg !11
  %21 = or i32 %14, 7, !dbg !11
  %22 = icmp slt i32 %14, %7, !dbg !12
  %.frozen = freeze i32 %14
  %.frozen1 = freeze i32 %3
  %23 = sdiv i32 %.frozen, %.frozen1, !dbg !13
  %.frozen2 = freeze i32 %15
  %.frozen3 = freeze i32 %3
  %24 = sdiv i32 %.frozen2, %.frozen3, !dbg !13
  %.frozen5 = freeze i32 %16
  %.frozen6 = freeze i32 %3
  %25 = sdiv i32 %.frozen5, %.frozen6, !dbg !13
  %.frozen8 = freeze i32 %17
  %.frozen9 = freeze i32 %3
  %26 = sdiv i32 %.frozen8, %.frozen9, !dbg !13
  %.frozen11 = freeze i32 %18
  %.frozen12 = freeze i32 %3
  %27 = sdiv i32 %.frozen11, %.frozen12, !dbg !13
  %.frozen14 = freeze i32 %19
  %.frozen15 = freeze i32 %3
  %28 = sdiv i32 %.frozen14, %.frozen15, !dbg !13
  %.frozen17 = freeze i32 %20
  %.frozen18 = freeze i32 %3
  %29 = sdiv i32 %.frozen17, %.frozen18, !dbg !13
  %.frozen20 = freeze i32 %21
  %.frozen21 = freeze i32 %3
  %30 = sdiv i32 %.frozen20, %.frozen21, !dbg !13
  %31 = srem i32 %23, %2, !dbg !14
  %32 = srem i32 %24, %2, !dbg !14
  %33 = srem i32 %25, %2, !dbg !14
  %34 = srem i32 %26, %2, !dbg !14
  %35 = srem i32 %27, %2, !dbg !14
  %36 = srem i32 %28, %2, !dbg !14
  %37 = srem i32 %29, %2, !dbg !14
  %38 = srem i32 %30, %2, !dbg !14
  %39 = mul i32 %23, %.frozen1
  %.decomposed = sub i32 %.frozen, %39
  %40 = mul i32 %24, %.frozen3
  %.decomposed4 = sub i32 %.frozen2, %40
  %41 = mul i32 %25, %.frozen6
  %.decomposed7 = sub i32 %.frozen5, %41
  %42 = mul i32 %26, %.frozen9
  %.decomposed10 = sub i32 %.frozen8, %42
  %43 = mul i32 %27, %.frozen12
  %.decomposed13 = sub i32 %.frozen11, %43
  %44 = mul i32 %28, %.frozen15
  %.decomposed16 = sub i32 %.frozen14, %44
  %45 = mul i32 %29, %.frozen18
  %.decomposed19 = sub i32 %.frozen17, %45
  %46 = mul i32 %30, %.frozen21
  %.decomposed22 = sub i32 %.frozen20, %46
  %47 = sdiv i32 %14, %6, !dbg !15
  %48 = sdiv i32 %15, %6, !dbg !15
  %49 = sdiv i32 %16, %6, !dbg !15
  %50 = sdiv i32 %17, %6, !dbg !15
  %51 = sdiv i32 %18, %6, !dbg !15
  %52 = sdiv i32 %19, %6, !dbg !15
  %53 = sdiv i32 %20, %6, !dbg !15
  %54 = sdiv i32 %21, %6, !dbg !15
  %55 = sitofp i32 %31 to float, !dbg !16
  %56 = sitofp i32 %32 to float, !dbg !16
  %57 = sitofp i32 %33 to float, !dbg !16
  %58 = sitofp i32 %34 to float, !dbg !16
  %59 = sitofp i32 %35 to float, !dbg !16
  %60 = sitofp i32 %36 to float, !dbg !16
  %61 = sitofp i32 %37 to float, !dbg !16
  %62 = sitofp i32 %38 to float, !dbg !16
  %63 = sitofp i32 %2 to float, !dbg !17
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %63) #1, !dbg !17
  %65 = sitofp i32 %4 to float, !dbg !18
  %66 = fmul float %64, %65, !dbg !18
  %67 = fmul float %66, %55, !dbg !19
  %68 = fmul float %66, %56, !dbg !19
  %69 = fmul float %66, %57, !dbg !19
  %70 = fmul float %66, %58, !dbg !19
  %71 = fmul float %66, %59, !dbg !19
  %72 = fmul float %66, %60, !dbg !19
  %73 = fmul float %66, %61, !dbg !19
  %74 = fmul float %66, %62, !dbg !19
  %75 = fptosi float %67 to i64, !dbg !20
  %76 = fptosi float %68 to i64, !dbg !20
  %77 = fptosi float %69 to i64, !dbg !20
  %78 = fptosi float %70 to i64, !dbg !20
  %79 = fptosi float %71 to i64, !dbg !20
  %80 = fptosi float %72 to i64, !dbg !20
  %81 = fptosi float %73 to i64, !dbg !20
  %82 = fptosi float %74 to i64, !dbg !20
  %83 = sitofp i32 %.decomposed to float, !dbg !21
  %84 = sitofp i32 %.decomposed4 to float, !dbg !21
  %85 = sitofp i32 %.decomposed7 to float, !dbg !21
  %86 = sitofp i32 %.decomposed10 to float, !dbg !21
  %87 = sitofp i32 %.decomposed13 to float, !dbg !21
  %88 = sitofp i32 %.decomposed16 to float, !dbg !21
  %89 = sitofp i32 %.decomposed19 to float, !dbg !21
  %90 = sitofp i32 %.decomposed22 to float, !dbg !21
  %91 = sitofp i32 %3 to float, !dbg !22
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !22
  %93 = sitofp i32 %5 to float, !dbg !23
  %94 = fmul float %92, %93, !dbg !23
  %95 = fmul float %94, %83, !dbg !24
  %96 = fmul float %94, %84, !dbg !24
  %97 = fmul float %94, %85, !dbg !24
  %98 = fmul float %94, %86, !dbg !24
  %99 = fmul float %94, %87, !dbg !24
  %100 = fmul float %94, %88, !dbg !24
  %101 = fmul float %94, %89, !dbg !24
  %102 = fmul float %94, %90, !dbg !24
  %103 = fptosi float %95 to i64, !dbg !25
  %104 = fptosi float %96 to i64, !dbg !25
  %105 = fptosi float %97 to i64, !dbg !25
  %106 = fptosi float %98 to i64, !dbg !25
  %107 = fptosi float %99 to i64, !dbg !25
  %108 = fptosi float %100 to i64, !dbg !25
  %109 = fptosi float %101 to i64, !dbg !25
  %110 = fptosi float %102 to i64, !dbg !25
  %111 = sext i32 %5 to i64, !dbg !26
  %112 = mul i64 %75, %111, !dbg !26
  %113 = mul i64 %76, %111, !dbg !26
  %114 = mul i64 %77, %111, !dbg !26
  %115 = mul i64 %78, %111, !dbg !26
  %116 = mul i64 %79, %111, !dbg !26
  %117 = mul i64 %80, %111, !dbg !26
  %118 = mul i64 %81, %111, !dbg !26
  %119 = mul i64 %82, %111, !dbg !26
  %120 = mul i32 %5, %4, !dbg !27
  %121 = mul i32 %47, %120, !dbg !28
  %122 = mul i32 %48, %120, !dbg !28
  %123 = mul i32 %49, %120, !dbg !28
  %124 = mul i32 %50, %120, !dbg !28
  %125 = mul i32 %51, %120, !dbg !28
  %126 = mul i32 %52, %120, !dbg !28
  %127 = mul i32 %53, %120, !dbg !28
  %128 = mul i32 %54, %120, !dbg !28
  %129 = sext i32 %121 to i64, !dbg !29
  %130 = sext i32 %122 to i64, !dbg !29
  %131 = sext i32 %123 to i64, !dbg !29
  %132 = sext i32 %124 to i64, !dbg !29
  %133 = sext i32 %125 to i64, !dbg !29
  %134 = sext i32 %126 to i64, !dbg !29
  %135 = sext i32 %127 to i64, !dbg !29
  %136 = sext i32 %128 to i64, !dbg !29
  %137 = getelementptr half, ptr addrspace(1) %0, i64 %112, !dbg !30
  %138 = getelementptr half, ptr addrspace(1) %137, i64 %103, !dbg !30
  %139 = getelementptr half, ptr addrspace(1) %138, i64 %129, !dbg !30
  %140 = getelementptr half, ptr addrspace(1) %0, i64 %113, !dbg !30
  %141 = getelementptr half, ptr addrspace(1) %140, i64 %104, !dbg !30
  %142 = getelementptr half, ptr addrspace(1) %141, i64 %130, !dbg !30
  %143 = getelementptr half, ptr addrspace(1) %0, i64 %114, !dbg !30
  %144 = getelementptr half, ptr addrspace(1) %143, i64 %105, !dbg !30
  %145 = getelementptr half, ptr addrspace(1) %144, i64 %131, !dbg !30
  %146 = getelementptr half, ptr addrspace(1) %0, i64 %115, !dbg !30
  %147 = getelementptr half, ptr addrspace(1) %146, i64 %106, !dbg !30
  %148 = getelementptr half, ptr addrspace(1) %147, i64 %132, !dbg !30
  %149 = getelementptr half, ptr addrspace(1) %0, i64 %116, !dbg !30
  %150 = getelementptr half, ptr addrspace(1) %149, i64 %107, !dbg !30
  %151 = getelementptr half, ptr addrspace(1) %150, i64 %133, !dbg !30
  %152 = getelementptr half, ptr addrspace(1) %0, i64 %117, !dbg !30
  %153 = getelementptr half, ptr addrspace(1) %152, i64 %108, !dbg !30
  %154 = getelementptr half, ptr addrspace(1) %153, i64 %134, !dbg !30
  %155 = getelementptr half, ptr addrspace(1) %0, i64 %118, !dbg !30
  %156 = getelementptr half, ptr addrspace(1) %155, i64 %109, !dbg !30
  %157 = getelementptr half, ptr addrspace(1) %156, i64 %135, !dbg !30
  %158 = getelementptr half, ptr addrspace(1) %0, i64 %119, !dbg !30
  %159 = getelementptr half, ptr addrspace(1) %158, i64 %110, !dbg !30
  %160 = getelementptr half, ptr addrspace(1) %159, i64 %136, !dbg !30
  %161 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %139, i1 %22) #1, !dbg !31
  %162 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %142, i1 %22) #1, !dbg !31
  %163 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %145, i1 %22) #1, !dbg !31
  %164 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %148, i1 %22) #1, !dbg !31
  %165 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %151, i1 %22) #1, !dbg !31
  %166 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %154, i1 %22) #1, !dbg !31
  %167 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %157, i1 %22) #1, !dbg !31
  %168 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %160, i1 %22) #1, !dbg !31
  %169 = sext i32 %14 to i64, !dbg !32
  %170 = getelementptr half, ptr addrspace(1) %1, i64 %169, !dbg !32
  %171 = insertelement <2 x i16> undef, i16 %161, i64 0, !dbg !33
  %172 = insertelement <2 x i16> %171, i16 %162, i64 1, !dbg !33
  %173 = bitcast <2 x i16> %172 to i32, !dbg !33
  %174 = insertelement <2 x i16> undef, i16 %163, i64 0, !dbg !33
  %175 = insertelement <2 x i16> %174, i16 %164, i64 1, !dbg !33
  %176 = bitcast <2 x i16> %175 to i32, !dbg !33
  %177 = insertelement <2 x i16> undef, i16 %165, i64 0, !dbg !33
  %178 = insertelement <2 x i16> %177, i16 %166, i64 1, !dbg !33
  %179 = bitcast <2 x i16> %178 to i32, !dbg !33
  %180 = insertelement <2 x i16> undef, i16 %167, i64 0, !dbg !33
  %181 = insertelement <2 x i16> %180, i16 %168, i64 1, !dbg !33
  %182 = bitcast <2 x i16> %181 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %176, i32 %179, i32 %182, ptr addrspace(1) %170, i1 %22) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cb4edcsat5qpedfixbfqqlnwtrqggacjtpc76wycizabp7zvxn25.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/b4")
!3 = !{ptr @triton__0d1d234567de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d234567de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d234567de", linkageName: "triton__0d1d234567de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 36, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 24, column: 20, scope: !5)
!14 = !DILocation(line: 24, column: 27, scope: !5)
!15 = !DILocation(line: 26, column: 20, scope: !5)
!16 = !DILocation(line: 29, column: 19, scope: !5)
!17 = !DILocation(line: 35, column: 18, scope: !5)
!18 = !DILocation(line: 35, column: 16, scope: !5)
!19 = !DILocation(line: 37, column: 18, scope: !5)
!20 = !DILocation(line: 38, column: 20, scope: !5)
!21 = !DILocation(line: 40, column: 21, scope: !5)
!22 = !DILocation(line: 44, column: 19, scope: !5)
!23 = !DILocation(line: 44, column: 17, scope: !5)
!24 = !DILocation(line: 46, column: 20, scope: !5)
!25 = !DILocation(line: 47, column: 21, scope: !5)
!26 = !DILocation(line: 48, column: 44, scope: !5)
!27 = !DILocation(line: 48, column: 58, scope: !5)
!28 = !DILocation(line: 48, column: 62, scope: !5)
!29 = !DILocation(line: 48, column: 54, scope: !5)
!30 = !DILocation(line: 48, column: 31, scope: !5)
!31 = !DILocation(line: 48, column: 68, scope: !5)
!32 = !DILocation(line: 51, column: 25, scope: !5)
!33 = !DILocation(line: 51, column: 37, scope: !5)
!34 = !DILocation(line: 51, column: 4, scope: !5)
