; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = shl i32 %8, 3, !dbg !10
  %10 = and i32 %9, 1016, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %12 = shl i32 %11, 10, !dbg !12
  %13 = or i32 %12, %10, !dbg !13
  %14 = or i32 %13, 1, !dbg !13
  %15 = or i32 %13, 2, !dbg !13
  %16 = or i32 %13, 3, !dbg !13
  %17 = or i32 %13, 4, !dbg !13
  %18 = or i32 %13, 5, !dbg !13
  %19 = or i32 %13, 6, !dbg !13
  %20 = or i32 %13, 7, !dbg !13
  %21 = icmp slt i32 %13, 19008000, !dbg !14
  %22 = srem i32 %13, 320, !dbg !15
  %23 = srem i32 %14, 320, !dbg !15
  %24 = srem i32 %15, 320, !dbg !15
  %25 = srem i32 %16, 320, !dbg !15
  %26 = srem i32 %17, 320, !dbg !15
  %27 = srem i32 %18, 320, !dbg !15
  %28 = srem i32 %19, 320, !dbg !15
  %29 = srem i32 %20, 320, !dbg !15
  %30 = sdiv i32 %13, 864000, !dbg !16
  %31 = sext i32 %13 to i64, !dbg !17
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %21) #4, !dbg !18
  %34 = shl nsw i32 %30, 5, !dbg !19
  %.lhs.trunc = trunc i32 %22 to i16, !dbg !20
  %35 = sdiv i16 %.lhs.trunc, 10, !dbg !20
  %.sext = sext i16 %35 to i32, !dbg !20
  %.lhs.trunc33 = trunc i32 %23 to i16, !dbg !20
  %36 = sdiv i16 %.lhs.trunc33, 10, !dbg !20
  %.sext34 = sext i16 %36 to i32, !dbg !20
  %.lhs.trunc35 = trunc i32 %24 to i16, !dbg !20
  %37 = sdiv i16 %.lhs.trunc35, 10, !dbg !20
  %.sext36 = sext i16 %37 to i32, !dbg !20
  %.lhs.trunc37 = trunc i32 %25 to i16, !dbg !20
  %38 = sdiv i16 %.lhs.trunc37, 10, !dbg !20
  %.sext38 = sext i16 %38 to i32, !dbg !20
  %.lhs.trunc39 = trunc i32 %26 to i16, !dbg !20
  %39 = sdiv i16 %.lhs.trunc39, 10, !dbg !20
  %.sext40 = sext i16 %39 to i32, !dbg !20
  %.lhs.trunc41 = trunc i32 %27 to i16, !dbg !20
  %40 = sdiv i16 %.lhs.trunc41, 10, !dbg !20
  %.sext42 = sext i16 %40 to i32, !dbg !20
  %.lhs.trunc43 = trunc i32 %28 to i16, !dbg !20
  %41 = sdiv i16 %.lhs.trunc43, 10, !dbg !20
  %.sext44 = sext i16 %41 to i32, !dbg !20
  %.lhs.trunc45 = trunc i32 %29 to i16, !dbg !20
  %42 = sdiv i16 %.lhs.trunc45, 10, !dbg !20
  %.sext46 = sext i16 %42 to i32, !dbg !20
  %43 = add nsw i32 %34, %.sext, !dbg !21
  %44 = add nsw i32 %34, %.sext34, !dbg !21
  %45 = add nsw i32 %34, %.sext36, !dbg !21
  %46 = add nsw i32 %34, %.sext38, !dbg !21
  %47 = add nsw i32 %34, %.sext40, !dbg !21
  %48 = add nsw i32 %34, %.sext42, !dbg !21
  %49 = add nsw i32 %34, %.sext44, !dbg !21
  %50 = add nsw i32 %34, %.sext46, !dbg !21
  %51 = sext i32 %43 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !22
  %53 = sext i32 %44 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !22
  %55 = sext i32 %45 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !22
  %57 = sext i32 %46 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !22
  %59 = sext i32 %47 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !22
  %61 = sext i32 %48 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !22
  %63 = sext i32 %49 to i64, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !22
  %65 = sext i32 %50 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #4, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %21) #4, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #4, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %21) #4, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %21) #4, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %21) #4, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %21) #4, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %21) #4, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %21) #4, !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %21) #4, !dbg !25
  %86 = bitcast i32 %85 to float, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %21) #4, !dbg !25
  %88 = bitcast i32 %87 to float, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %21) #4, !dbg !25
  %90 = bitcast i32 %89 to float, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %21) #4, !dbg !25
  %92 = bitcast i32 %91 to float, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %21) #4, !dbg !25
  %94 = bitcast i32 %93 to float, !dbg !25
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #4, !dbg !25
  %96 = bitcast i32 %95 to float, !dbg !25
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %21) #4, !dbg !25
  %98 = bitcast i32 %97 to float, !dbg !25
  %99 = sext i32 %22 to i64, !dbg !26
  %100 = getelementptr half, ptr addrspace(1) %3, i64 %99, !dbg !26
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %21) #4, !dbg !27
  %102 = getelementptr half, ptr addrspace(1) %4, i64 %99, !dbg !28
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %21) #4, !dbg !29
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 2.700000e+04) #4, !dbg !30
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 2.700000e+04) #4, !dbg !30
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 2.700000e+04) #4, !dbg !30
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 2.700000e+04) #4, !dbg !30
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 2.700000e+04) #4, !dbg !30
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 2.700000e+04) #4, !dbg !30
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 2.700000e+04) #4, !dbg !30
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 2.700000e+04) #4, !dbg !30
  %112 = fadd float %104, 0x3EE4F8B580000000, !dbg !31
  %113 = fadd float %105, 0x3EE4F8B580000000, !dbg !31
  %114 = fadd float %106, 0x3EE4F8B580000000, !dbg !31
  %115 = fadd float %107, 0x3EE4F8B580000000, !dbg !31
  %116 = fadd float %108, 0x3EE4F8B580000000, !dbg !31
  %117 = fadd float %109, 0x3EE4F8B580000000, !dbg !31
  %118 = fadd float %110, 0x3EE4F8B580000000, !dbg !31
  %119 = fadd float %111, 0x3EE4F8B580000000, !dbg !31
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %120, 0, !dbg !32
  br i1 %.not.i, label %123, label %121, !dbg !32

121:                                              ; preds = %7
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

123:                                              ; preds = %7
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %121, %123
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], !dbg !32
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i12 = icmp eq i32 %125, 0, !dbg !32
  br i1 %.not.i12, label %128, label %126, !dbg !32

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !32
  br label %__nv_rsqrtf.exit14, !dbg !32

128:                                              ; preds = %__nv_rsqrtf.exit
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !32
  br label %__nv_rsqrtf.exit14, !dbg !32

__nv_rsqrtf.exit14:                               ; preds = %126, %128
  %.0.i13 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !32
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i15 = icmp eq i32 %130, 0, !dbg !32
  br i1 %.not.i15, label %133, label %131, !dbg !32

131:                                              ; preds = %__nv_rsqrtf.exit14
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %114), !dbg !32
  br label %__nv_rsqrtf.exit17, !dbg !32

133:                                              ; preds = %__nv_rsqrtf.exit14
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %114), !dbg !32
  br label %__nv_rsqrtf.exit17, !dbg !32

__nv_rsqrtf.exit17:                               ; preds = %131, %133
  %.0.i16 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i18 = icmp eq i32 %135, 0, !dbg !32
  br i1 %.not.i18, label %138, label %136, !dbg !32

136:                                              ; preds = %__nv_rsqrtf.exit17
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !32
  br label %__nv_rsqrtf.exit20, !dbg !32

138:                                              ; preds = %__nv_rsqrtf.exit17
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !32
  br label %__nv_rsqrtf.exit20, !dbg !32

__nv_rsqrtf.exit20:                               ; preds = %136, %138
  %.0.i19 = phi float [ %137, %136 ], [ %139, %138 ], !dbg !32
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i21 = icmp eq i32 %140, 0, !dbg !32
  br i1 %.not.i21, label %143, label %141, !dbg !32

141:                                              ; preds = %__nv_rsqrtf.exit20
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !32
  br label %__nv_rsqrtf.exit23, !dbg !32

143:                                              ; preds = %__nv_rsqrtf.exit20
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !32
  br label %__nv_rsqrtf.exit23, !dbg !32

__nv_rsqrtf.exit23:                               ; preds = %141, %143
  %.0.i22 = phi float [ %142, %141 ], [ %144, %143 ], !dbg !32
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i24 = icmp eq i32 %145, 0, !dbg !32
  br i1 %.not.i24, label %148, label %146, !dbg !32

146:                                              ; preds = %__nv_rsqrtf.exit23
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %117), !dbg !32
  br label %__nv_rsqrtf.exit26, !dbg !32

148:                                              ; preds = %__nv_rsqrtf.exit23
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %117), !dbg !32
  br label %__nv_rsqrtf.exit26, !dbg !32

__nv_rsqrtf.exit26:                               ; preds = %146, %148
  %.0.i25 = phi float [ %147, %146 ], [ %149, %148 ], !dbg !32
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i27 = icmp eq i32 %150, 0, !dbg !32
  br i1 %.not.i27, label %153, label %151, !dbg !32

151:                                              ; preds = %__nv_rsqrtf.exit26
  %152 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %118), !dbg !32
  br label %__nv_rsqrtf.exit29, !dbg !32

153:                                              ; preds = %__nv_rsqrtf.exit26
  %154 = tail call float @llvm.nvvm.rsqrt.approx.f(float %118), !dbg !32
  br label %__nv_rsqrtf.exit29, !dbg !32

__nv_rsqrtf.exit29:                               ; preds = %151, %153
  %.0.i28 = phi float [ %152, %151 ], [ %154, %153 ], !dbg !32
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i30 = icmp eq i32 %155, 0, !dbg !32
  br i1 %.not.i30, label %158, label %156, !dbg !32

156:                                              ; preds = %__nv_rsqrtf.exit29
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %119), !dbg !32
  br label %__nv_rsqrtf.exit32, !dbg !32

158:                                              ; preds = %__nv_rsqrtf.exit29
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %119), !dbg !32
  br label %__nv_rsqrtf.exit32, !dbg !32

__nv_rsqrtf.exit32:                               ; preds = %156, %158
  %.0.i31 = phi float [ %157, %156 ], [ %159, %158 ], !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %extelt.offset3 = lshr i32 %160, 16, !dbg !18
  %161 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !23
  %162 = insertelement <2 x i32> %161, i32 %74, i64 1, !dbg !23
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !23
  %164 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %extelt.offset2 = lshr i32 %164, 16, !dbg !18
  %165 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !23
  %166 = insertelement <2 x i32> %165, i32 %72, i64 1, !dbg !23
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !23
  %168 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %extelt.offset1 = lshr i32 %168, 16, !dbg !18
  %169 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !23
  %170 = insertelement <2 x i32> %169, i32 %70, i64 1, !dbg !23
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !23
  %172 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %extelt.offset = lshr i32 %172, 16, !dbg !18
  %173 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !23
  %174 = insertelement <2 x i32> %173, i32 %68, i64 1, !dbg !23
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !23
  %176 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !29
  %extelt.offset11 = lshr i32 %176, 16, !dbg !29
  %177 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !29
  %extelt.offset10 = lshr i32 %177, 16, !dbg !29
  %178 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !29
  %extelt.offset9 = lshr i32 %178, 16, !dbg !29
  %179 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !29
  %extelt.offset8 = lshr i32 %179, 16, !dbg !29
  %180 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !27
  %extelt.offset7 = lshr i32 %180, 16, !dbg !27
  %181 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !27
  %extelt.offset6 = lshr i32 %181, 16, !dbg !27
  %182 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !27
  %extelt.offset5 = lshr i32 %182, 16, !dbg !27
  %183 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !27
  %extelt.offset4 = lshr i32 %183, 16, !dbg !27
  %184 = getelementptr half, ptr addrspace(1) %5, i64 %31, !dbg !33
  %185 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !18
  %186 = insertelement <2 x i32> %185, i32 %extelt.offset3, i64 1, !dbg !18
  %187 = trunc <2 x i32> %186 to <2 x i16>, !dbg !18
  %188 = bitcast <2 x i16> %187 to <2 x half>, !dbg !18
  %189 = fpext <2 x half> %188 to <2 x float>, !dbg !34
  %190 = fsub <2 x float> %189, %163, !dbg !35
  %191 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !29
  %192 = insertelement <2 x i32> %191, i32 %extelt.offset11, i64 1, !dbg !29
  %193 = trunc <2 x i32> %192 to <2 x i16>, !dbg !29
  %194 = bitcast <2 x i16> %193 to <2 x half>, !dbg !29
  %195 = fpext <2 x half> %194 to <2 x float>, !dbg !36
  %196 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !27
  %197 = insertelement <2 x i32> %196, i32 %extelt.offset7, i64 1, !dbg !27
  %198 = trunc <2 x i32> %197 to <2 x i16>, !dbg !27
  %199 = bitcast <2 x i16> %198 to <2 x half>, !dbg !27
  %200 = fpext <2 x half> %199 to <2 x float>, !dbg !37
  %201 = insertelement <2 x float> poison, float %.0.i28, i64 0, !dbg !38
  %202 = insertelement <2 x float> %201, float %.0.i31, i64 1, !dbg !38
  %203 = fmul <2 x float> %190, %202, !dbg !38
  %204 = fmul <2 x float> %203, %200, !dbg !39
  %205 = fadd <2 x float> %204, %195, !dbg !40
  %206 = extractelement <2 x float> %205, i64 0, !dbg !41
  %207 = fsub float 0.000000e+00, %206, !dbg !41
  %208 = extractelement <2 x float> %205, i64 1, !dbg !41
  %209 = fsub float 0.000000e+00, %208, !dbg !41
  %210 = fmul float %207, 0x3FF7154760000000, !dbg !45
  %211 = fmul float %209, 0x3FF7154760000000, !dbg !45
  %212 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !18
  %213 = insertelement <2 x i32> %212, i32 %extelt.offset2, i64 1, !dbg !18
  %214 = trunc <2 x i32> %213 to <2 x i16>, !dbg !18
  %215 = bitcast <2 x i16> %214 to <2 x half>, !dbg !18
  %216 = fpext <2 x half> %215 to <2 x float>, !dbg !34
  %217 = fsub <2 x float> %216, %167, !dbg !35
  %218 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !29
  %219 = insertelement <2 x i32> %218, i32 %extelt.offset10, i64 1, !dbg !29
  %220 = trunc <2 x i32> %219 to <2 x i16>, !dbg !29
  %221 = bitcast <2 x i16> %220 to <2 x half>, !dbg !29
  %222 = fpext <2 x half> %221 to <2 x float>, !dbg !36
  %223 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !27
  %224 = insertelement <2 x i32> %223, i32 %extelt.offset6, i64 1, !dbg !27
  %225 = trunc <2 x i32> %224 to <2 x i16>, !dbg !27
  %226 = bitcast <2 x i16> %225 to <2 x half>, !dbg !27
  %227 = fpext <2 x half> %226 to <2 x float>, !dbg !37
  %228 = insertelement <2 x float> poison, float %.0.i22, i64 0, !dbg !38
  %229 = insertelement <2 x float> %228, float %.0.i25, i64 1, !dbg !38
  %230 = fmul <2 x float> %217, %229, !dbg !38
  %231 = fmul <2 x float> %230, %227, !dbg !39
  %232 = fadd <2 x float> %231, %222, !dbg !40
  %233 = extractelement <2 x float> %232, i64 0, !dbg !41
  %234 = fsub float 0.000000e+00, %233, !dbg !41
  %235 = extractelement <2 x float> %232, i64 1, !dbg !41
  %236 = fsub float 0.000000e+00, %235, !dbg !41
  %237 = fmul float %234, 0x3FF7154760000000, !dbg !45
  %238 = fmul float %236, 0x3FF7154760000000, !dbg !45
  %239 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !18
  %240 = insertelement <2 x i32> %239, i32 %extelt.offset1, i64 1, !dbg !18
  %241 = trunc <2 x i32> %240 to <2 x i16>, !dbg !18
  %242 = bitcast <2 x i16> %241 to <2 x half>, !dbg !18
  %243 = fpext <2 x half> %242 to <2 x float>, !dbg !34
  %244 = fsub <2 x float> %243, %171, !dbg !35
  %245 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !29
  %246 = insertelement <2 x i32> %245, i32 %extelt.offset9, i64 1, !dbg !29
  %247 = trunc <2 x i32> %246 to <2 x i16>, !dbg !29
  %248 = bitcast <2 x i16> %247 to <2 x half>, !dbg !29
  %249 = fpext <2 x half> %248 to <2 x float>, !dbg !36
  %250 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !27
  %251 = insertelement <2 x i32> %250, i32 %extelt.offset5, i64 1, !dbg !27
  %252 = trunc <2 x i32> %251 to <2 x i16>, !dbg !27
  %253 = bitcast <2 x i16> %252 to <2 x half>, !dbg !27
  %254 = fpext <2 x half> %253 to <2 x float>, !dbg !37
  %255 = insertelement <2 x float> poison, float %.0.i16, i64 0, !dbg !38
  %256 = insertelement <2 x float> %255, float %.0.i19, i64 1, !dbg !38
  %257 = fmul <2 x float> %244, %256, !dbg !38
  %258 = fmul <2 x float> %257, %254, !dbg !39
  %259 = fadd <2 x float> %258, %249, !dbg !40
  %260 = extractelement <2 x float> %259, i64 0, !dbg !41
  %261 = fsub float 0.000000e+00, %260, !dbg !41
  %262 = extractelement <2 x float> %259, i64 1, !dbg !41
  %263 = fsub float 0.000000e+00, %262, !dbg !41
  %264 = fmul float %261, 0x3FF7154760000000, !dbg !45
  %265 = fmul float %263, 0x3FF7154760000000, !dbg !45
  %266 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !18
  %267 = insertelement <2 x i32> %266, i32 %extelt.offset, i64 1, !dbg !18
  %268 = trunc <2 x i32> %267 to <2 x i16>, !dbg !18
  %269 = bitcast <2 x i16> %268 to <2 x half>, !dbg !18
  %270 = fpext <2 x half> %269 to <2 x float>, !dbg !34
  %271 = fsub <2 x float> %270, %175, !dbg !35
  %272 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !29
  %273 = insertelement <2 x i32> %272, i32 %extelt.offset8, i64 1, !dbg !29
  %274 = trunc <2 x i32> %273 to <2 x i16>, !dbg !29
  %275 = bitcast <2 x i16> %274 to <2 x half>, !dbg !29
  %276 = fpext <2 x half> %275 to <2 x float>, !dbg !36
  %277 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !27
  %278 = insertelement <2 x i32> %277, i32 %extelt.offset4, i64 1, !dbg !27
  %279 = trunc <2 x i32> %278 to <2 x i16>, !dbg !27
  %280 = bitcast <2 x i16> %279 to <2 x half>, !dbg !27
  %281 = fpext <2 x half> %280 to <2 x float>, !dbg !37
  %282 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !38
  %283 = insertelement <2 x float> %282, float %.0.i13, i64 1, !dbg !38
  %284 = fmul <2 x float> %271, %283, !dbg !38
  %285 = fmul <2 x float> %284, %281, !dbg !39
  %286 = fadd <2 x float> %285, %276, !dbg !40
  %287 = extractelement <2 x float> %286, i64 0, !dbg !41
  %288 = fsub float 0.000000e+00, %287, !dbg !41
  %289 = extractelement <2 x float> %286, i64 1, !dbg !41
  %290 = fsub float 0.000000e+00, %289, !dbg !41
  %291 = fmul float %288, 0x3FF7154760000000, !dbg !45
  %292 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %291) #4, !dbg !45
  %293 = fmul float %290, 0x3FF7154760000000, !dbg !45
  %294 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %293) #4, !dbg !45
  %295 = fadd float %292, 1.000000e+00, !dbg !46
  %296 = fadd float %294, 1.000000e+00, !dbg !46
  %297 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %264) #4, !dbg !45
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %265) #4, !dbg !45
  %299 = fadd float %297, 1.000000e+00, !dbg !46
  %300 = fadd float %298, 1.000000e+00, !dbg !46
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %237) #4, !dbg !45
  %302 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %238) #4, !dbg !45
  %303 = fadd float %301, 1.000000e+00, !dbg !46
  %304 = fadd float %302, 1.000000e+00, !dbg !46
  %305 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %210) #4, !dbg !45
  %306 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %211) #4, !dbg !45
  %307 = fadd float %305, 1.000000e+00, !dbg !46
  %308 = fadd float %306, 1.000000e+00, !dbg !46
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %295) #4, !dbg !47
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %296) #4, !dbg !47
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %299) #4, !dbg !47
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %300) #4, !dbg !47
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %303) #4, !dbg !47
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %304) #4, !dbg !47
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %307) #4, !dbg !47
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %308) #4, !dbg !47
  %317 = insertelement <2 x float> poison, float %309, i64 0, !dbg !48
  %318 = insertelement <2 x float> %317, float %310, i64 1, !dbg !48
  %319 = fmul <2 x float> %286, %318, !dbg !48
  %320 = insertelement <2 x float> poison, float %311, i64 0, !dbg !48
  %321 = insertelement <2 x float> %320, float %312, i64 1, !dbg !48
  %322 = fmul <2 x float> %259, %321, !dbg !48
  %323 = insertelement <2 x float> poison, float %313, i64 0, !dbg !48
  %324 = insertelement <2 x float> %323, float %314, i64 1, !dbg !48
  %325 = fmul <2 x float> %232, %324, !dbg !48
  %326 = insertelement <2 x float> poison, float %315, i64 0, !dbg !48
  %327 = insertelement <2 x float> %326, float %316, i64 1, !dbg !48
  %328 = fmul <2 x float> %205, %327, !dbg !48
  %329 = fptrunc <2 x float> %319 to <2 x half>, !dbg !49
  %330 = fptrunc <2 x float> %322 to <2 x half>, !dbg !49
  %331 = fptrunc <2 x float> %325 to <2 x half>, !dbg !49
  %332 = fptrunc <2 x float> %328 to <2 x half>, !dbg !49
  %333 = bitcast <2 x half> %329 to i32, !dbg !49
  %334 = bitcast <2 x half> %330 to i32, !dbg !49
  %335 = bitcast <2 x half> %331 to i32, !dbg !49
  %336 = bitcast <2 x half> %332 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %334, i32 %335, i32 %336, ptr addrspace(1) %184, i1 %21) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #1 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "chd4sseflmha3lnf53u2npw5gmvrxwe7bsxfkxczvjc7bfltsgyd.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hd")
!4 = !{ptr @triton__0d1d2d3d4d5d6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de", linkageName: "triton__0d1d2d3d4d5d6de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 36, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 22, column: 33, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 18, scope: !7)
!16 = !DILocation(line: 27, column: 20, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 47, scope: !7)
!21 = !DILocation(line: 29, column: 41, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 53, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 53, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 48, column: 25, scope: !7)
!34 = !DILocation(line: 28, column: 45, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 32, column: 76, scope: !7)
!37 = !DILocation(line: 31, column: 76, scope: !7)
!38 = !DILocation(line: 40, column: 19, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 27, column: 30, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!44 = !DILocation(line: 45, column: 23, scope: !42)
!45 = !DILocation(line: 27, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 27, column: 20, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 27, column: 16, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 37, scope: !7)
!50 = !DILocation(line: 48, column: 4, scope: !7)
