; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d910de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %13 = and i32 %12, 31, !dbg !10
  %14 = lshr i32 %12, 5, !dbg !10
  %15 = and i32 %14, 7, !dbg !10
  %urem = shl i32 %12, 3, !dbg !10
  %16 = and i32 %urem, 2040, !dbg !10
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %18 = icmp slt i32 %17, %9, !dbg !12
  %19 = icmp ult i32 %16, 1280, !dbg !13
  %20 = mul i32 %17, 1280, !dbg !14
  %21 = add i32 %20, %16, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr half, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = and i1 %19, %18, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %extelt.offset = lshr i32 %26, 16, !dbg !18
  %extelt.offset1 = lshr i32 %27, 16, !dbg !18
  %extelt.offset2 = lshr i32 %28, 16, !dbg !18
  %extelt.offset3 = lshr i32 %29, 16, !dbg !18
  %30 = zext nneg i32 %16 to i64, !dbg !19
  %31 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %extelt.offset4 = lshr i32 %33, 16, !dbg !20
  %extelt.offset5 = lshr i32 %34, 16, !dbg !20
  %extelt.offset6 = lshr i32 %35, 16, !dbg !20
  %extelt.offset7 = lshr i32 %36, 16, !dbg !20
  %37 = getelementptr half, ptr addrspace(1) %2, i64 %22, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %extelt.offset8 = lshr i32 %39, 16, !dbg !22
  %extelt.offset9 = lshr i32 %40, 16, !dbg !22
  %extelt.offset10 = lshr i32 %41, 16, !dbg !22
  %extelt.offset11 = lshr i32 %42, 16, !dbg !22
  %43 = getelementptr half, ptr addrspace(1) %3, i64 %30, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %extelt.offset12 = lshr i32 %45, 16, !dbg !24
  %extelt.offset13 = lshr i32 %46, 16, !dbg !24
  %extelt.offset14 = lshr i32 %47, 16, !dbg !24
  %extelt.offset15 = lshr i32 %48, 16, !dbg !24
  %49 = getelementptr half, ptr addrspace(1) %4, i64 %22, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %extelt.offset16 = lshr i32 %51, 16, !dbg !26
  %extelt.offset17 = lshr i32 %52, 16, !dbg !26
  %extelt.offset18 = lshr i32 %53, 16, !dbg !26
  %extelt.offset19 = lshr i32 %54, 16, !dbg !26
  %55 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %extelt.offset20 = lshr i32 %57, 16, !dbg !28
  %extelt.offset21 = lshr i32 %58, 16, !dbg !28
  %extelt.offset22 = lshr i32 %59, 16, !dbg !28
  %extelt.offset23 = lshr i32 %60, 16, !dbg !28
  %61 = select i1 %24, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %62 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !18
  %63 = insertelement <2 x i32> %62, i32 %extelt.offset, i64 1, !dbg !18
  %64 = trunc <2 x i32> %63 to <2 x i16>, !dbg !18
  %65 = bitcast <2 x i16> %64 to <2 x half>, !dbg !18
  %66 = fpext <2 x half> %65 to <2 x float>, !dbg !30
  %67 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !20
  %68 = insertelement <2 x i32> %67, i32 %extelt.offset4, i64 1, !dbg !20
  %69 = trunc <2 x i32> %68 to <2 x i16>, !dbg !20
  %70 = bitcast <2 x i16> %69 to <2 x half>, !dbg !20
  %71 = fpext <2 x half> %70 to <2 x float>, !dbg !31
  %72 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !22
  %73 = insertelement <2 x i32> %72, i32 %extelt.offset8, i64 1, !dbg !22
  %74 = trunc <2 x i32> %73 to <2 x i16>, !dbg !22
  %75 = bitcast <2 x i16> %74 to <2 x half>, !dbg !22
  %76 = fpext <2 x half> %75 to <2 x float>, !dbg !32
  %77 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !24
  %78 = insertelement <2 x i32> %77, i32 %extelt.offset12, i64 1, !dbg !24
  %79 = trunc <2 x i32> %78 to <2 x i16>, !dbg !24
  %80 = bitcast <2 x i16> %79 to <2 x half>, !dbg !24
  %81 = fpext <2 x half> %80 to <2 x float>, !dbg !33
  %82 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !26
  %83 = insertelement <2 x i32> %82, i32 %extelt.offset16, i64 1, !dbg !26
  %84 = trunc <2 x i32> %83 to <2 x i16>, !dbg !26
  %85 = bitcast <2 x i16> %84 to <2 x half>, !dbg !26
  %86 = fpext <2 x half> %85 to <2 x float>, !dbg !34
  %87 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !28
  %88 = insertelement <2 x i32> %87, i32 %extelt.offset20, i64 1, !dbg !28
  %89 = trunc <2 x i32> %88 to <2 x i16>, !dbg !28
  %90 = bitcast <2 x i16> %89 to <2 x half>, !dbg !28
  %91 = fpext <2 x half> %90 to <2 x float>, !dbg !35
  %92 = fadd <2 x float> %66, %71, !dbg !36
  %93 = fadd <2 x float> %76, %81, !dbg !37
  %94 = fadd <2 x float> %86, %91, !dbg !38
  %95 = fadd <2 x float> %93, %94, !dbg !39
  %96 = fadd <2 x float> %92, %95, !dbg !40
  %97 = extractelement <2 x float> %96, i64 0, !dbg !41
  %98 = select i1 %24, float %97, float 0.000000e+00, !dbg !41
  %99 = extractelement <2 x float> %96, i64 1, !dbg !41
  %100 = select i1 %24, float %99, float 0.000000e+00, !dbg !41
  %101 = fptrunc <2 x float> %96 to <2 x half>, !dbg !42
  %102 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !18
  %103 = insertelement <2 x i32> %102, i32 %extelt.offset1, i64 1, !dbg !18
  %104 = trunc <2 x i32> %103 to <2 x i16>, !dbg !18
  %105 = bitcast <2 x i16> %104 to <2 x half>, !dbg !18
  %106 = fpext <2 x half> %105 to <2 x float>, !dbg !30
  %107 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !20
  %108 = insertelement <2 x i32> %107, i32 %extelt.offset5, i64 1, !dbg !20
  %109 = trunc <2 x i32> %108 to <2 x i16>, !dbg !20
  %110 = bitcast <2 x i16> %109 to <2 x half>, !dbg !20
  %111 = fpext <2 x half> %110 to <2 x float>, !dbg !31
  %112 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !22
  %113 = insertelement <2 x i32> %112, i32 %extelt.offset9, i64 1, !dbg !22
  %114 = trunc <2 x i32> %113 to <2 x i16>, !dbg !22
  %115 = bitcast <2 x i16> %114 to <2 x half>, !dbg !22
  %116 = fpext <2 x half> %115 to <2 x float>, !dbg !32
  %117 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !24
  %118 = insertelement <2 x i32> %117, i32 %extelt.offset13, i64 1, !dbg !24
  %119 = trunc <2 x i32> %118 to <2 x i16>, !dbg !24
  %120 = bitcast <2 x i16> %119 to <2 x half>, !dbg !24
  %121 = fpext <2 x half> %120 to <2 x float>, !dbg !33
  %122 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !26
  %123 = insertelement <2 x i32> %122, i32 %extelt.offset17, i64 1, !dbg !26
  %124 = trunc <2 x i32> %123 to <2 x i16>, !dbg !26
  %125 = bitcast <2 x i16> %124 to <2 x half>, !dbg !26
  %126 = fpext <2 x half> %125 to <2 x float>, !dbg !34
  %127 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !28
  %128 = insertelement <2 x i32> %127, i32 %extelt.offset21, i64 1, !dbg !28
  %129 = trunc <2 x i32> %128 to <2 x i16>, !dbg !28
  %130 = bitcast <2 x i16> %129 to <2 x half>, !dbg !28
  %131 = fpext <2 x half> %130 to <2 x float>, !dbg !35
  %132 = fadd <2 x float> %106, %111, !dbg !36
  %133 = fadd <2 x float> %116, %121, !dbg !37
  %134 = fadd <2 x float> %126, %131, !dbg !38
  %135 = fadd <2 x float> %133, %134, !dbg !39
  %136 = fadd <2 x float> %132, %135, !dbg !40
  %137 = extractelement <2 x float> %136, i64 0, !dbg !41
  %138 = select i1 %24, float %137, float 0.000000e+00, !dbg !41
  %139 = extractelement <2 x float> %136, i64 1, !dbg !41
  %140 = select i1 %24, float %139, float 0.000000e+00, !dbg !41
  %141 = fptrunc <2 x float> %136 to <2 x half>, !dbg !42
  %142 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !18
  %143 = insertelement <2 x i32> %142, i32 %extelt.offset2, i64 1, !dbg !18
  %144 = trunc <2 x i32> %143 to <2 x i16>, !dbg !18
  %145 = bitcast <2 x i16> %144 to <2 x half>, !dbg !18
  %146 = fpext <2 x half> %145 to <2 x float>, !dbg !30
  %147 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !20
  %148 = insertelement <2 x i32> %147, i32 %extelt.offset6, i64 1, !dbg !20
  %149 = trunc <2 x i32> %148 to <2 x i16>, !dbg !20
  %150 = bitcast <2 x i16> %149 to <2 x half>, !dbg !20
  %151 = fpext <2 x half> %150 to <2 x float>, !dbg !31
  %152 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !22
  %153 = insertelement <2 x i32> %152, i32 %extelt.offset10, i64 1, !dbg !22
  %154 = trunc <2 x i32> %153 to <2 x i16>, !dbg !22
  %155 = bitcast <2 x i16> %154 to <2 x half>, !dbg !22
  %156 = fpext <2 x half> %155 to <2 x float>, !dbg !32
  %157 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !24
  %158 = insertelement <2 x i32> %157, i32 %extelt.offset14, i64 1, !dbg !24
  %159 = trunc <2 x i32> %158 to <2 x i16>, !dbg !24
  %160 = bitcast <2 x i16> %159 to <2 x half>, !dbg !24
  %161 = fpext <2 x half> %160 to <2 x float>, !dbg !33
  %162 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !26
  %163 = insertelement <2 x i32> %162, i32 %extelt.offset18, i64 1, !dbg !26
  %164 = trunc <2 x i32> %163 to <2 x i16>, !dbg !26
  %165 = bitcast <2 x i16> %164 to <2 x half>, !dbg !26
  %166 = fpext <2 x half> %165 to <2 x float>, !dbg !34
  %167 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !28
  %168 = insertelement <2 x i32> %167, i32 %extelt.offset22, i64 1, !dbg !28
  %169 = trunc <2 x i32> %168 to <2 x i16>, !dbg !28
  %170 = bitcast <2 x i16> %169 to <2 x half>, !dbg !28
  %171 = fpext <2 x half> %170 to <2 x float>, !dbg !35
  %172 = fadd <2 x float> %146, %151, !dbg !36
  %173 = fadd <2 x float> %156, %161, !dbg !37
  %174 = fadd <2 x float> %166, %171, !dbg !38
  %175 = fadd <2 x float> %173, %174, !dbg !39
  %176 = fadd <2 x float> %172, %175, !dbg !40
  %177 = extractelement <2 x float> %176, i64 0, !dbg !41
  %178 = select i1 %24, float %177, float 0.000000e+00, !dbg !41
  %179 = extractelement <2 x float> %176, i64 1, !dbg !41
  %180 = select i1 %24, float %179, float 0.000000e+00, !dbg !41
  %181 = fptrunc <2 x float> %176 to <2 x half>, !dbg !42
  %182 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !18
  %183 = insertelement <2 x i32> %182, i32 %extelt.offset3, i64 1, !dbg !18
  %184 = trunc <2 x i32> %183 to <2 x i16>, !dbg !18
  %185 = bitcast <2 x i16> %184 to <2 x half>, !dbg !18
  %186 = fpext <2 x half> %185 to <2 x float>, !dbg !30
  %187 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !20
  %188 = insertelement <2 x i32> %187, i32 %extelt.offset7, i64 1, !dbg !20
  %189 = trunc <2 x i32> %188 to <2 x i16>, !dbg !20
  %190 = bitcast <2 x i16> %189 to <2 x half>, !dbg !20
  %191 = fpext <2 x half> %190 to <2 x float>, !dbg !31
  %192 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !22
  %193 = insertelement <2 x i32> %192, i32 %extelt.offset11, i64 1, !dbg !22
  %194 = trunc <2 x i32> %193 to <2 x i16>, !dbg !22
  %195 = bitcast <2 x i16> %194 to <2 x half>, !dbg !22
  %196 = fpext <2 x half> %195 to <2 x float>, !dbg !32
  %197 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !24
  %198 = insertelement <2 x i32> %197, i32 %extelt.offset15, i64 1, !dbg !24
  %199 = trunc <2 x i32> %198 to <2 x i16>, !dbg !24
  %200 = bitcast <2 x i16> %199 to <2 x half>, !dbg !24
  %201 = fpext <2 x half> %200 to <2 x float>, !dbg !33
  %202 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !26
  %203 = insertelement <2 x i32> %202, i32 %extelt.offset19, i64 1, !dbg !26
  %204 = trunc <2 x i32> %203 to <2 x i16>, !dbg !26
  %205 = bitcast <2 x i16> %204 to <2 x half>, !dbg !26
  %206 = fpext <2 x half> %205 to <2 x float>, !dbg !34
  %207 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !28
  %208 = insertelement <2 x i32> %207, i32 %extelt.offset23, i64 1, !dbg !28
  %209 = trunc <2 x i32> %208 to <2 x i16>, !dbg !28
  %210 = bitcast <2 x i16> %209 to <2 x half>, !dbg !28
  %211 = fpext <2 x half> %210 to <2 x float>, !dbg !35
  %212 = fadd <2 x float> %186, %191, !dbg !36
  %213 = fadd <2 x float> %196, %201, !dbg !37
  %214 = fadd <2 x float> %206, %211, !dbg !38
  %215 = fadd <2 x float> %213, %214, !dbg !39
  %216 = fadd <2 x float> %212, %215, !dbg !40
  %217 = extractelement <2 x float> %216, i64 0, !dbg !41
  %218 = select i1 %24, float %217, float 0.000000e+00, !dbg !41
  %219 = extractelement <2 x float> %216, i64 1, !dbg !41
  %220 = select i1 %24, float %219, float 0.000000e+00, !dbg !41
  %221 = fptrunc <2 x float> %216 to <2 x half>, !dbg !42
  %222 = bitcast <2 x half> %101 to i32, !dbg !42
  %223 = bitcast <2 x half> %141 to i32, !dbg !42
  %224 = bitcast <2 x half> %181 to i32, !dbg !42
  %225 = bitcast <2 x half> %221 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %23, i1 %24) #6, !dbg !42
  %226 = fsub float %100, %98, !dbg !43
  %227 = select i1 %24, float 2.000000e+00, float 0.000000e+00, !dbg !49
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !50
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %227) #6, !dbg !51
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !52
  %231 = fmul float %230, %226, !dbg !53
  %232 = fadd float %98, %231, !dbg !54
  %233 = fmul float %226, %226, !dbg !55
  %234 = fmul float %61, %233, !dbg !56
  %235 = fmul float %230, %234, !dbg !57
  %236 = fadd float %235, 0.000000e+00, !dbg !58
  %237 = fsub float %138, %232, !dbg !43
  %238 = select i1 %24, float 3.000000e+00, float 0.000000e+00, !dbg !49
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !50
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %238) #6, !dbg !51
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !52
  %242 = fmul float %241, %237, !dbg !53
  %243 = fadd float %232, %242, !dbg !54
  %244 = fmul float %237, %237, !dbg !55
  %245 = fmul float %227, %244, !dbg !56
  %246 = fmul float %241, %245, !dbg !57
  %247 = fadd float %236, %246, !dbg !58
  %248 = fsub float %140, %243, !dbg !43
  %249 = select i1 %24, float 4.000000e+00, float 0.000000e+00, !dbg !49
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !50
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %249) #6, !dbg !51
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !52
  %253 = fmul float %252, %248, !dbg !53
  %254 = fadd float %243, %253, !dbg !54
  %255 = fmul float %248, %248, !dbg !55
  %256 = fmul float %238, %255, !dbg !56
  %257 = fmul float %252, %256, !dbg !57
  %258 = fadd float %247, %257, !dbg !58
  %259 = fsub float %178, %254, !dbg !43
  %260 = select i1 %24, float 5.000000e+00, float 0.000000e+00, !dbg !49
  %261 = fcmp oeq float %260, 0.000000e+00, !dbg !50
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %260) #6, !dbg !51
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !52
  %264 = fmul float %263, %259, !dbg !53
  %265 = fadd float %254, %264, !dbg !54
  %266 = fmul float %259, %259, !dbg !55
  %267 = fmul float %249, %266, !dbg !56
  %268 = fmul float %263, %267, !dbg !57
  %269 = fadd float %258, %268, !dbg !58
  %270 = fsub float %180, %265, !dbg !43
  %271 = select i1 %24, float 6.000000e+00, float 0.000000e+00, !dbg !49
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !50
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %271) #6, !dbg !51
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !52
  %275 = fmul float %274, %270, !dbg !53
  %276 = fadd float %265, %275, !dbg !54
  %277 = fmul float %270, %270, !dbg !55
  %278 = fmul float %260, %277, !dbg !56
  %279 = fmul float %274, %278, !dbg !57
  %280 = fadd float %269, %279, !dbg !58
  %281 = fsub float %218, %276, !dbg !43
  %282 = select i1 %24, float 7.000000e+00, float 0.000000e+00, !dbg !49
  %283 = fcmp oeq float %282, 0.000000e+00, !dbg !50
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %282) #6, !dbg !51
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !52
  %286 = fmul float %285, %281, !dbg !53
  %287 = fadd float %276, %286, !dbg !54
  %288 = fmul float %281, %281, !dbg !55
  %289 = fmul float %271, %288, !dbg !56
  %290 = fmul float %285, %289, !dbg !57
  %291 = fadd float %280, %290, !dbg !58
  %292 = fsub float %220, %287, !dbg !43
  %293 = select i1 %24, float 8.000000e+00, float 0.000000e+00, !dbg !49
  %294 = fcmp oeq float %293, 0.000000e+00, !dbg !50
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %293) #6, !dbg !51
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !52
  %297 = fmul float %296, %292, !dbg !53
  %298 = fadd float %287, %297, !dbg !54
  %299 = fmul float %292, %292, !dbg !55
  %300 = fmul float %282, %299, !dbg !56
  %301 = fmul float %296, %300, !dbg !57
  %302 = fadd float %291, %301, !dbg !58
  %303 = bitcast float %298 to i32, !dbg !59
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 16, i32 31), !dbg !59
  %305 = bitcast i32 %304 to float, !dbg !59
  %306 = bitcast float %302 to i32, !dbg !59
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 16, i32 31), !dbg !59
  %308 = bitcast i32 %307 to float, !dbg !59
  %309 = bitcast float %293 to i32, !dbg !59
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 16, i32 31), !dbg !59
  %311 = bitcast i32 %310 to float, !dbg !59
  %312 = fsub float %305, %298, !dbg !43
  %313 = fadd float %293, %311, !dbg !49
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !50
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #6, !dbg !51
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !52
  %317 = fmul float %316, %312, !dbg !53
  %318 = fadd float %298, %317, !dbg !54
  %319 = fadd float %302, %308, !dbg !61
  %320 = fmul float %312, %312, !dbg !55
  %321 = fmul float %293, %320, !dbg !56
  %322 = fmul float %316, %321, !dbg !57
  %323 = fadd float %319, %322, !dbg !58
  %324 = bitcast float %318 to i32, !dbg !59
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 8, i32 31), !dbg !59
  %326 = bitcast i32 %325 to float, !dbg !59
  %327 = bitcast float %323 to i32, !dbg !59
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 8, i32 31), !dbg !59
  %329 = bitcast i32 %328 to float, !dbg !59
  %330 = bitcast float %313 to i32, !dbg !59
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 8, i32 31), !dbg !59
  %332 = bitcast i32 %331 to float, !dbg !59
  %333 = fsub float %326, %318, !dbg !43
  %334 = fadd float %313, %332, !dbg !49
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !50
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %334) #6, !dbg !51
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !52
  %338 = fmul float %337, %333, !dbg !53
  %339 = fadd float %318, %338, !dbg !54
  %340 = fadd float %323, %329, !dbg !61
  %341 = fmul float %333, %333, !dbg !55
  %342 = fmul float %313, %341, !dbg !56
  %343 = fmul float %337, %342, !dbg !57
  %344 = fadd float %340, %343, !dbg !58
  %345 = bitcast float %339 to i32, !dbg !59
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 4, i32 31), !dbg !59
  %347 = bitcast i32 %346 to float, !dbg !59
  %348 = bitcast float %344 to i32, !dbg !59
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 4, i32 31), !dbg !59
  %350 = bitcast i32 %349 to float, !dbg !59
  %351 = bitcast float %334 to i32, !dbg !59
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 4, i32 31), !dbg !59
  %353 = bitcast i32 %352 to float, !dbg !59
  %354 = fsub float %347, %339, !dbg !43
  %355 = fadd float %334, %353, !dbg !49
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !50
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %355) #6, !dbg !51
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !52
  %359 = fmul float %358, %354, !dbg !53
  %360 = fadd float %339, %359, !dbg !54
  %361 = fadd float %344, %350, !dbg !61
  %362 = fmul float %354, %354, !dbg !55
  %363 = fmul float %334, %362, !dbg !56
  %364 = fmul float %358, %363, !dbg !57
  %365 = fadd float %361, %364, !dbg !58
  %366 = bitcast float %360 to i32, !dbg !59
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 2, i32 31), !dbg !59
  %368 = bitcast i32 %367 to float, !dbg !59
  %369 = bitcast float %365 to i32, !dbg !59
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 2, i32 31), !dbg !59
  %371 = bitcast i32 %370 to float, !dbg !59
  %372 = bitcast float %355 to i32, !dbg !59
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 2, i32 31), !dbg !59
  %374 = bitcast i32 %373 to float, !dbg !59
  %375 = fsub float %368, %360, !dbg !43
  %376 = fadd float %355, %374, !dbg !49
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !50
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %376) #6, !dbg !51
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !52
  %380 = fmul float %379, %375, !dbg !53
  %381 = fadd float %360, %380, !dbg !54
  %382 = fadd float %365, %371, !dbg !61
  %383 = fmul float %375, %375, !dbg !55
  %384 = fmul float %355, %383, !dbg !56
  %385 = fmul float %379, %384, !dbg !57
  %386 = fadd float %382, %385, !dbg !58
  %387 = bitcast float %381 to i32, !dbg !59
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !59
  %389 = bitcast i32 %388 to float, !dbg !59
  %390 = bitcast float %386 to i32, !dbg !59
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 1, i32 31), !dbg !59
  %392 = bitcast i32 %391 to float, !dbg !59
  %393 = bitcast float %376 to i32, !dbg !59
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 1, i32 31), !dbg !59
  %395 = bitcast i32 %394 to float, !dbg !59
  %396 = fsub float %389, %381, !dbg !43
  %397 = fadd float %376, %395, !dbg !49
  %398 = fcmp oeq float %397, 0.000000e+00, !dbg !50
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %397) #6, !dbg !51
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !52
  %401 = fmul float %400, %396, !dbg !53
  %402 = fadd float %381, %401, !dbg !54
  %403 = fadd float %386, %392, !dbg !61
  %404 = fmul float %396, %396, !dbg !55
  %405 = fmul float %376, %404, !dbg !56
  %406 = fmul float %400, %405, !dbg !57
  %407 = fadd float %403, %406, !dbg !58
  %408 = icmp eq i32 %13, 0, !dbg !59
  %409 = zext nneg i32 %15 to i64, !dbg !59
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i64 %409, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, float %402, i1 %408) #6, !dbg !59
  %411 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %409, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, float %407, i1 %408) #6, !dbg !59
  %412 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %409, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, float %397, i1 %408) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %413 = icmp slt i32 %12, 8, !dbg !59
  %414 = sext i32 %12 to i64, !dbg !59
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i64 %414, !dbg !59
  %416 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %415, i1 %413) #6, !dbg !59
  %417 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %414, !dbg !59
  %418 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %417, i1 %413) #6, !dbg !59
  %419 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %414, !dbg !59
  %420 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %419, i1 %413) #6, !dbg !59
  %421 = bitcast float %416 to i32, !dbg !59
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 4, i32 31), !dbg !59
  %423 = bitcast i32 %422 to float, !dbg !59
  %424 = bitcast float %418 to i32, !dbg !59
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 4, i32 31), !dbg !59
  %426 = bitcast i32 %425 to float, !dbg !59
  %427 = bitcast float %420 to i32, !dbg !59
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 4, i32 31), !dbg !59
  %429 = bitcast i32 %428 to float, !dbg !59
  %430 = fsub float %423, %416, !dbg !43
  %431 = fadd float %420, %429, !dbg !49
  %432 = fcmp oeq float %431, 0.000000e+00, !dbg !50
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %431) #6, !dbg !51
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !52
  %435 = fmul float %430, %434, !dbg !53
  %436 = fadd float %416, %435, !dbg !54
  %437 = fadd float %418, %426, !dbg !61
  %438 = fmul float %430, %430, !dbg !55
  %439 = fmul float %420, %438, !dbg !56
  %440 = fmul float %439, %434, !dbg !57
  %441 = fadd float %437, %440, !dbg !58
  %442 = bitcast float %436 to i32, !dbg !59
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 2, i32 31), !dbg !59
  %444 = bitcast i32 %443 to float, !dbg !59
  %445 = bitcast float %441 to i32, !dbg !59
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !59
  %447 = bitcast i32 %446 to float, !dbg !59
  %448 = bitcast float %431 to i32, !dbg !59
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !59
  %450 = bitcast i32 %449 to float, !dbg !59
  %451 = fsub float %444, %436, !dbg !43
  %452 = fadd float %431, %450, !dbg !49
  %453 = fcmp oeq float %452, 0.000000e+00, !dbg !50
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %452) #6, !dbg !51
  %455 = select i1 %453, float 0.000000e+00, float %454, !dbg !52
  %456 = fmul float %451, %455, !dbg !53
  %457 = fadd float %436, %456, !dbg !54
  %458 = fadd float %441, %447, !dbg !61
  %459 = fmul float %451, %451, !dbg !55
  %460 = fmul float %431, %459, !dbg !56
  %461 = fmul float %455, %460, !dbg !57
  %462 = fadd float %458, %461, !dbg !58
  %463 = bitcast float %457 to i32, !dbg !59
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 1, i32 31), !dbg !59
  %465 = bitcast i32 %464 to float, !dbg !59
  %466 = bitcast float %462 to i32, !dbg !59
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 1, i32 31), !dbg !59
  %468 = bitcast i32 %467 to float, !dbg !59
  %469 = bitcast float %452 to i32, !dbg !59
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 1, i32 31), !dbg !59
  %471 = bitcast i32 %470 to float, !dbg !59
  %472 = fsub float %465, %457, !dbg !43
  %473 = fadd float %452, %471, !dbg !49
  %474 = fcmp oeq float %473, 0.000000e+00, !dbg !50
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %471, float %473) #6, !dbg !51
  %476 = select i1 %474, float 0.000000e+00, float %475, !dbg !52
  %477 = fmul float %472, %476, !dbg !53
  %478 = fadd float %457, %477, !dbg !54
  %479 = fadd float %462, %468, !dbg !61
  %480 = fmul float %472, %472, !dbg !55
  %481 = fmul float %452, %480, !dbg !56
  %482 = fmul float %476, %481, !dbg !57
  %483 = fadd float %479, %482, !dbg !58
  %484 = and i32 %12, 7, !dbg !59
  %485 = icmp eq i32 %484, 0, !dbg !59
  %486 = and i1 %413, %485, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, float %478, i1 %486) #6, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, float %483, i1 %486) #6, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, float %473, i1 %486) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %487 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !59
  %488 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !59
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !62
  %490 = getelementptr half, ptr addrspace(1) %6, i64 %30, !dbg !63
  %491 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %490, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !64
  %492 = getelementptr half, ptr addrspace(1) %7, i64 %30, !dbg !65
  %493 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %492, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !66
  %494 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %495 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %497 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %498 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %499 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %500 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float 1.280000e+03) #6, !dbg !67
  %502 = fadd float %494, 0x3EE4F8B580000000, !dbg !68
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %.not.i = icmp eq i32 %503, 0, !dbg !69
  br i1 %.not.i, label %506, label %504, !dbg !69

504:                                              ; preds = %11
  %505 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %502), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

506:                                              ; preds = %11
  %507 = tail call float @llvm.nvvm.rsqrt.approx.f(float %502), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %504, %506
  %.0.i = phi float [ %505, %504 ], [ %507, %506 ], !dbg !69
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %510 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %515 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !62
  %extelt.offset27 = lshr i32 %515, 16, !dbg !62
  %516 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !62
  %extelt.offset26 = lshr i32 %516, 16, !dbg !62
  %517 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !62
  %extelt.offset25 = lshr i32 %517, 16, !dbg !62
  %518 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !62
  %extelt.offset24 = lshr i32 %518, 16, !dbg !62
  %519 = extractvalue { i32, i32, i32, i32 } %493, 3, !dbg !66
  %extelt.offset35 = lshr i32 %519, 16, !dbg !66
  %520 = extractvalue { i32, i32, i32, i32 } %493, 2, !dbg !66
  %extelt.offset34 = lshr i32 %520, 16, !dbg !66
  %521 = extractvalue { i32, i32, i32, i32 } %493, 1, !dbg !66
  %extelt.offset33 = lshr i32 %521, 16, !dbg !66
  %522 = extractvalue { i32, i32, i32, i32 } %493, 0, !dbg !66
  %extelt.offset32 = lshr i32 %522, 16, !dbg !66
  %523 = extractvalue { i32, i32, i32, i32 } %491, 3, !dbg !64
  %extelt.offset31 = lshr i32 %523, 16, !dbg !64
  %524 = extractvalue { i32, i32, i32, i32 } %491, 2, !dbg !64
  %extelt.offset30 = lshr i32 %524, 16, !dbg !64
  %525 = extractvalue { i32, i32, i32, i32 } %491, 1, !dbg !64
  %extelt.offset29 = lshr i32 %525, 16, !dbg !64
  %526 = extractvalue { i32, i32, i32, i32 } %491, 0, !dbg !64
  %extelt.offset28 = lshr i32 %526, 16, !dbg !64
  %527 = getelementptr half, ptr addrspace(1) %8, i64 %22, !dbg !70
  %528 = insertelement <2 x i32> poison, i32 %518, i64 0, !dbg !62
  %529 = insertelement <2 x i32> %528, i32 %extelt.offset24, i64 1, !dbg !62
  %530 = trunc <2 x i32> %529 to <2 x i16>, !dbg !62
  %531 = bitcast <2 x i16> %530 to <2 x half>, !dbg !62
  %532 = fpext <2 x half> %531 to <2 x float>, !dbg !71
  %533 = insertelement <2 x float> poison, float %487, i64 0, !dbg !72
  %534 = shufflevector <2 x float> %533, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %535 = fsub <2 x float> %532, %534, !dbg !72
  %536 = insertelement <2 x i32> poison, i32 %522, i64 0, !dbg !66
  %537 = insertelement <2 x i32> %536, i32 %extelt.offset32, i64 1, !dbg !66
  %538 = trunc <2 x i32> %537 to <2 x i16>, !dbg !66
  %539 = bitcast <2 x i16> %538 to <2 x half>, !dbg !66
  %540 = fpext <2 x half> %539 to <2 x float>, !dbg !73
  %541 = insertelement <2 x i32> poison, i32 %526, i64 0, !dbg !64
  %542 = insertelement <2 x i32> %541, i32 %extelt.offset28, i64 1, !dbg !64
  %543 = trunc <2 x i32> %542 to <2 x i16>, !dbg !64
  %544 = bitcast <2 x i16> %543 to <2 x half>, !dbg !64
  %545 = fpext <2 x half> %544 to <2 x float>, !dbg !74
  %546 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !75
  %547 = shufflevector <2 x float> %546, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !75
  %548 = fmul <2 x float> %535, %547, !dbg !75
  %549 = fmul <2 x float> %548, %545, !dbg !76
  %550 = fadd <2 x float> %549, %540, !dbg !77
  %551 = fptrunc <2 x float> %550 to <2 x half>, !dbg !78
  %552 = insertelement <2 x i32> poison, i32 %517, i64 0, !dbg !62
  %553 = insertelement <2 x i32> %552, i32 %extelt.offset25, i64 1, !dbg !62
  %554 = trunc <2 x i32> %553 to <2 x i16>, !dbg !62
  %555 = bitcast <2 x i16> %554 to <2 x half>, !dbg !62
  %556 = fpext <2 x half> %555 to <2 x float>, !dbg !71
  %557 = fsub <2 x float> %556, %534, !dbg !72
  %558 = insertelement <2 x i32> poison, i32 %521, i64 0, !dbg !66
  %559 = insertelement <2 x i32> %558, i32 %extelt.offset33, i64 1, !dbg !66
  %560 = trunc <2 x i32> %559 to <2 x i16>, !dbg !66
  %561 = bitcast <2 x i16> %560 to <2 x half>, !dbg !66
  %562 = fpext <2 x half> %561 to <2 x float>, !dbg !73
  %563 = insertelement <2 x i32> poison, i32 %525, i64 0, !dbg !64
  %564 = insertelement <2 x i32> %563, i32 %extelt.offset29, i64 1, !dbg !64
  %565 = trunc <2 x i32> %564 to <2 x i16>, !dbg !64
  %566 = bitcast <2 x i16> %565 to <2 x half>, !dbg !64
  %567 = fpext <2 x half> %566 to <2 x float>, !dbg !74
  %568 = fmul <2 x float> %557, %547, !dbg !75
  %569 = fmul <2 x float> %568, %567, !dbg !76
  %570 = fadd <2 x float> %569, %562, !dbg !77
  %571 = fptrunc <2 x float> %570 to <2 x half>, !dbg !78
  %572 = insertelement <2 x i32> poison, i32 %516, i64 0, !dbg !62
  %573 = insertelement <2 x i32> %572, i32 %extelt.offset26, i64 1, !dbg !62
  %574 = trunc <2 x i32> %573 to <2 x i16>, !dbg !62
  %575 = bitcast <2 x i16> %574 to <2 x half>, !dbg !62
  %576 = fpext <2 x half> %575 to <2 x float>, !dbg !71
  %577 = fsub <2 x float> %576, %534, !dbg !72
  %578 = insertelement <2 x i32> poison, i32 %520, i64 0, !dbg !66
  %579 = insertelement <2 x i32> %578, i32 %extelt.offset34, i64 1, !dbg !66
  %580 = trunc <2 x i32> %579 to <2 x i16>, !dbg !66
  %581 = bitcast <2 x i16> %580 to <2 x half>, !dbg !66
  %582 = fpext <2 x half> %581 to <2 x float>, !dbg !73
  %583 = insertelement <2 x i32> poison, i32 %524, i64 0, !dbg !64
  %584 = insertelement <2 x i32> %583, i32 %extelt.offset30, i64 1, !dbg !64
  %585 = trunc <2 x i32> %584 to <2 x i16>, !dbg !64
  %586 = bitcast <2 x i16> %585 to <2 x half>, !dbg !64
  %587 = fpext <2 x half> %586 to <2 x float>, !dbg !74
  %588 = fmul <2 x float> %577, %547, !dbg !75
  %589 = fmul <2 x float> %588, %587, !dbg !76
  %590 = fadd <2 x float> %589, %582, !dbg !77
  %591 = fptrunc <2 x float> %590 to <2 x half>, !dbg !78
  %592 = insertelement <2 x i32> poison, i32 %515, i64 0, !dbg !62
  %593 = insertelement <2 x i32> %592, i32 %extelt.offset27, i64 1, !dbg !62
  %594 = trunc <2 x i32> %593 to <2 x i16>, !dbg !62
  %595 = bitcast <2 x i16> %594 to <2 x half>, !dbg !62
  %596 = fpext <2 x half> %595 to <2 x float>, !dbg !71
  %597 = fsub <2 x float> %596, %534, !dbg !72
  %598 = insertelement <2 x i32> poison, i32 %519, i64 0, !dbg !66
  %599 = insertelement <2 x i32> %598, i32 %extelt.offset35, i64 1, !dbg !66
  %600 = trunc <2 x i32> %599 to <2 x i16>, !dbg !66
  %601 = bitcast <2 x i16> %600 to <2 x half>, !dbg !66
  %602 = fpext <2 x half> %601 to <2 x float>, !dbg !73
  %603 = insertelement <2 x i32> poison, i32 %523, i64 0, !dbg !64
  %604 = insertelement <2 x i32> %603, i32 %extelt.offset31, i64 1, !dbg !64
  %605 = trunc <2 x i32> %604 to <2 x i16>, !dbg !64
  %606 = bitcast <2 x i16> %605 to <2 x half>, !dbg !64
  %607 = fpext <2 x half> %606 to <2 x float>, !dbg !74
  %608 = fmul <2 x float> %597, %547, !dbg !75
  %609 = fmul <2 x float> %608, %607, !dbg !76
  %610 = fadd <2 x float> %609, %602, !dbg !77
  %611 = fptrunc <2 x float> %610 to <2 x half>, !dbg !78
  %612 = bitcast <2 x half> %551 to i32, !dbg !78
  %613 = bitcast <2 x half> %571 to i32, !dbg !78
  %614 = bitcast <2 x half> %591 to i32, !dbg !78
  %615 = bitcast <2 x half> %611 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %612, i32 %613, i32 %614, i32 %615, ptr addrspace(1) %527, i1 %24) #6, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cprpsxpr7hev3z2cpcrt63derb5pichysmuyp3qy4t7bm6en7w6r.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/pr")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d910de", linkageName: "triton__0d1d2d3d4d5d6d7d8d910de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 25, scope: !7)
!14 = !DILocation(line: 34, column: 49, scope: !7)
!15 = !DILocation(line: 34, column: 44, scope: !7)
!16 = !DILocation(line: 34, column: 38, scope: !7)
!17 = !DILocation(line: 34, column: 63, scope: !7)
!18 = !DILocation(line: 34, column: 55, scope: !7)
!19 = !DILocation(line: 35, column: 34, scope: !7)
!20 = !DILocation(line: 35, column: 39, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 51, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 39, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 51, scope: !7)
!27 = !DILocation(line: 39, column: 35, scope: !7)
!28 = !DILocation(line: 39, column: 40, scope: !7)
!29 = !DILocation(line: 55, column: 66, scope: !7)
!30 = !DILocation(line: 34, column: 115, scope: !7)
!31 = !DILocation(line: 35, column: 90, scope: !7)
!32 = !DILocation(line: 36, column: 111, scope: !7)
!33 = !DILocation(line: 37, column: 90, scope: !7)
!34 = !DILocation(line: 38, column: 111, scope: !7)
!35 = !DILocation(line: 39, column: 91, scope: !7)
!36 = !DILocation(line: 40, column: 22, scope: !7)
!37 = !DILocation(line: 43, column: 22, scope: !7)
!38 = !DILocation(line: 45, column: 23, scope: !7)
!39 = !DILocation(line: 46, column: 23, scope: !7)
!40 = !DILocation(line: 47, column: 23, scope: !7)
!41 = !DILocation(line: 53, column: 62, scope: !7)
!42 = !DILocation(line: 56, column: 56, scope: !7)
!43 = !DILocation(line: 119, column: 21, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!46 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!47 = !DILocation(line: 131, column: 46, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 58, column: 44, scope: !44)
!49 = !DILocation(line: 120, column: 28, scope: !44, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 39, scope: !44, inlinedAt: !47)
!51 = !DILocation(line: 121, column: 60, scope: !44, inlinedAt: !47)
!52 = !DILocation(line: 121, column: 49, scope: !44, inlinedAt: !47)
!53 = !DILocation(line: 123, column: 25, scope: !44, inlinedAt: !47)
!54 = !DILocation(line: 123, column: 17, scope: !44, inlinedAt: !47)
!55 = !DILocation(line: 124, column: 30, scope: !44, inlinedAt: !47)
!56 = !DILocation(line: 124, column: 38, scope: !44, inlinedAt: !47)
!57 = !DILocation(line: 124, column: 49, scope: !44, inlinedAt: !47)
!58 = !DILocation(line: 124, column: 22, scope: !44, inlinedAt: !47)
!59 = !DILocation(line: 131, column: 46, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 44, scope: !46)
!61 = !DILocation(line: 124, column: 15, scope: !44, inlinedAt: !47)
!62 = !DILocation(line: 67, column: 56, scope: !7)
!63 = !DILocation(line: 68, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 40, scope: !7)
!65 = !DILocation(line: 69, column: 35, scope: !7)
!66 = !DILocation(line: 69, column: 40, scope: !7)
!67 = !DILocation(line: 73, column: 24, scope: !7)
!68 = !DILocation(line: 75, column: 24, scope: !7)
!69 = !DILocation(line: 76, column: 32, scope: !7)
!70 = !DILocation(line: 83, column: 29, scope: !7)
!71 = !DILocation(line: 67, column: 116, scope: !7)
!72 = !DILocation(line: 71, column: 24, scope: !7)
!73 = !DILocation(line: 69, column: 91, scope: !7)
!74 = !DILocation(line: 68, column: 91, scope: !7)
!75 = !DILocation(line: 77, column: 24, scope: !7)
!76 = !DILocation(line: 79, column: 24, scope: !7)
!77 = !DILocation(line: 81, column: 24, scope: !7)
!78 = !DILocation(line: 83, column: 53, scope: !7)
!79 = !DILocation(line: 63, column: 4, scope: !7)
