; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d89101112de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %15 = lshr i32 %14, 6, !dbg !8
  %16 = and i32 %15, 1, !dbg !8
  %17 = shl i32 %14, 3, !dbg !9
  %18 = and i32 %17, 504, !dbg !9
  %19 = and i32 %14, 127, !dbg !9
  %20 = or i32 %19, 128, !dbg !9
  %21 = or i32 %19, 256, !dbg !9
  %22 = or i32 %19, 384, !dbg !9
  %23 = shl nuw nsw i32 %19, 2, !dbg !9
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %26 = add i32 %25, 1, !dbg !12
  %27 = shl i32 %24, 1, !dbg !13
  %28 = mul i32 %27, %26, !dbg !14
  %29 = or i32 %28, %16, !dbg !15
  %30 = or i32 %28, 1, !dbg !15
  %31 = icmp slt i32 %29, %11, !dbg !16
  %32 = icmp slt i32 %28, %11, !dbg !16
  %33 = icmp slt i32 %30, %11, !dbg !16
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %35 = shl i32 %34, 9, !dbg !18
  %36 = or i32 %35, %18, !dbg !19
  %37 = or i32 %35, %19, !dbg !19
  %38 = or i32 %35, %20, !dbg !19
  %39 = or i32 %35, %21, !dbg !19
  %40 = or i32 %35, %22, !dbg !19
  %41 = or i32 %35, %23, !dbg !19
  %42 = icmp slt i32 %36, 320, !dbg !20
  %43 = icmp slt i32 %37, 320, !dbg !20
  %44 = icmp slt i32 %38, 320, !dbg !20
  %45 = icmp slt i32 %39, 320, !dbg !20
  %46 = icmp slt i32 %40, 320, !dbg !20
  %47 = icmp slt i32 %41, 320, !dbg !20
  %.frozen = freeze i32 %28
  %.frozen24 = freeze i32 %8
  %48 = sdiv i32 %.frozen, %.frozen24, !dbg !21
  %49 = mul i32 %48, %.frozen24
  %.decomposed = sub i32 %.frozen, %49
  %.frozen25 = freeze i32 %30
  %.frozen26 = freeze i32 %8
  %50 = sdiv i32 %.frozen25, %.frozen26, !dbg !21
  %51 = mul i32 %50, %.frozen26
  %.decomposed27 = sub i32 %.frozen25, %51
  %52 = mul i32 %29, 320, !dbg !22
  %53 = add i32 %52, %36, !dbg !23
  %54 = sext i32 %53 to i64, !dbg !24
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = and i1 %42, %31, !dbg !25
  %57 = and i1 %32, %43, !dbg !25
  %58 = and i1 %32, %44, !dbg !25
  %59 = and i1 %32, %45, !dbg !25
  %60 = and i1 %32, %46, !dbg !25
  %61 = and i1 %43, %33, !dbg !25
  %62 = and i1 %44, %33, !dbg !25
  %63 = and i1 %45, %33, !dbg !25
  %64 = and i1 %46, %33, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %56) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = sext i32 %41 to i64, !dbg !27
  %71 = getelementptr half, ptr addrspace(1) %1, i64 %70, !dbg !27
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %47) #2, !dbg !28
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !28
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !28
  %75 = trunc i32 %73 to i16, !dbg !28
  %76 = bitcast i16 %75 to half, !dbg !28
  %extelt.offset4 = lshr i32 %73, 16, !dbg !28
  %77 = trunc i32 %extelt.offset4 to i16, !dbg !28
  %78 = bitcast i16 %77 to half, !dbg !28
  %79 = trunc i32 %74 to i16, !dbg !28
  %80 = bitcast i16 %79 to half, !dbg !28
  %extelt.offset5 = lshr i32 %74, 16, !dbg !28
  %81 = trunc i32 %extelt.offset5 to i16, !dbg !28
  %82 = bitcast i16 %81 to half, !dbg !28
  %83 = fpext half %76 to float, !dbg !29
  %84 = fpext half %78 to float, !dbg !29
  %85 = fpext half %80 to float, !dbg !29
  %86 = fpext half %82 to float, !dbg !29
  %87 = getelementptr half, ptr addrspace(1) %2, i64 %54, !dbg !30
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %56) #2, !dbg !31
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !31
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !31
  %93 = getelementptr half, ptr addrspace(1) %3, i64 %54, !dbg !32
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %56) #2, !dbg !33
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !33
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !33
  %99 = getelementptr half, ptr addrspace(1) %4, i64 %70, !dbg !34
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %99, i1 %47) #2, !dbg !35
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !35
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !35
  %103 = trunc i32 %101 to i16, !dbg !35
  %104 = bitcast i16 %103 to half, !dbg !35
  %extelt.offset14 = lshr i32 %101, 16, !dbg !35
  %105 = trunc i32 %extelt.offset14 to i16, !dbg !35
  %106 = bitcast i16 %105 to half, !dbg !35
  %107 = trunc i32 %102 to i16, !dbg !35
  %108 = bitcast i16 %107 to half, !dbg !35
  %extelt.offset15 = lshr i32 %102, 16, !dbg !35
  %109 = trunc i32 %extelt.offset15 to i16, !dbg !35
  %110 = bitcast i16 %109 to half, !dbg !35
  %111 = fpext half %104 to float, !dbg !36
  %112 = fpext half %106 to float, !dbg !36
  %113 = fpext half %108 to float, !dbg !36
  %114 = fpext half %110 to float, !dbg !36
  %115 = getelementptr half, ptr addrspace(1) %5, i64 %54, !dbg !37
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %56) #2, !dbg !38
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !38
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !38
  %121 = getelementptr half, ptr addrspace(1) %6, i64 %54, !dbg !39
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %56) #2, !dbg !40
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !40
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !40
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !40
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !40
  %127 = trunc i32 %123 to i16, !dbg !40
  %128 = bitcast i16 %127 to half, !dbg !40
  %extelt.offset20 = lshr i32 %123, 16, !dbg !40
  %129 = trunc i32 %extelt.offset20 to i16, !dbg !40
  %130 = bitcast i16 %129 to half, !dbg !40
  %131 = trunc i32 %124 to i16, !dbg !40
  %132 = bitcast i16 %131 to half, !dbg !40
  %extelt.offset21 = lshr i32 %124, 16, !dbg !40
  %133 = trunc i32 %extelt.offset21 to i16, !dbg !40
  %134 = bitcast i16 %133 to half, !dbg !40
  %135 = trunc i32 %125 to i16, !dbg !40
  %136 = bitcast i16 %135 to half, !dbg !40
  %extelt.offset22 = lshr i32 %125, 16, !dbg !40
  %137 = trunc i32 %extelt.offset22 to i16, !dbg !40
  %138 = bitcast i16 %137 to half, !dbg !40
  %139 = trunc i32 %126 to i16, !dbg !40
  %140 = bitcast i16 %139 to half, !dbg !40
  %extelt.offset23 = lshr i32 %126, 16, !dbg !40
  %141 = trunc i32 %extelt.offset23 to i16, !dbg !40
  %142 = bitcast i16 %141 to half, !dbg !40
  %143 = fpext half %128 to float, !dbg !41
  %144 = fpext half %130 to float, !dbg !41
  %145 = fpext half %132 to float, !dbg !41
  %146 = fpext half %134 to float, !dbg !41
  %147 = fpext half %136 to float, !dbg !41
  %148 = fpext half %138 to float, !dbg !41
  %149 = fpext half %140 to float, !dbg !41
  %150 = fpext half %142 to float, !dbg !41
  %151 = zext nneg i32 %23 to i64, !dbg !42
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %151, !dbg !42
  %153 = insertelement <1 x float> undef, float %83, i64 0, !dbg !42
  store <1 x float> %153, ptr addrspace(3) %152, align 4, !dbg !42
  %154 = or i32 %23, 1, !dbg !42
  %155 = zext nneg i32 %154 to i64, !dbg !42
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i64 %155, !dbg !42
  %157 = insertelement <1 x float> undef, float %84, i64 0, !dbg !42
  store <1 x float> %157, ptr addrspace(3) %156, align 4, !dbg !42
  %158 = or i32 %23, 2, !dbg !42
  %159 = zext nneg i32 %158 to i64, !dbg !42
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !42
  %161 = insertelement <1 x float> undef, float %85, i64 0, !dbg !42
  store <1 x float> %161, ptr addrspace(3) %160, align 4, !dbg !42
  %162 = or i32 %23, 3, !dbg !42
  %163 = zext nneg i32 %162 to i64, !dbg !42
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i64 %163, !dbg !42
  %165 = insertelement <1 x float> undef, float %86, i64 0, !dbg !42
  store <1 x float> %165, ptr addrspace(3) %164, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %166 = zext nneg i32 %18 to i64, !dbg !42
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i64 %166, !dbg !42
  %168 = load float, ptr addrspace(3) %167, align 4, !dbg !42
  %169 = or i32 %18, 1, !dbg !42
  %170 = zext nneg i32 %169 to i64, !dbg !42
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %170, !dbg !42
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !42
  %173 = or i32 %18, 2, !dbg !42
  %174 = zext nneg i32 %173 to i64, !dbg !42
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i64 %174, !dbg !42
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !42
  %177 = or i32 %18, 3, !dbg !42
  %178 = zext nneg i32 %177 to i64, !dbg !42
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i64 %178, !dbg !42
  %180 = load float, ptr addrspace(3) %179, align 4, !dbg !42
  %181 = or i32 %18, 4, !dbg !42
  %182 = zext nneg i32 %181 to i64, !dbg !42
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182, !dbg !42
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !42
  %185 = or i32 %18, 5, !dbg !42
  %186 = zext nneg i32 %185 to i64, !dbg !42
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !42
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !42
  %189 = or i32 %18, 6, !dbg !42
  %190 = zext nneg i32 %189 to i64, !dbg !42
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !42
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !42
  %193 = or i32 %18, 7, !dbg !42
  %194 = zext nneg i32 %193 to i64, !dbg !42
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194, !dbg !42
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %197 = insertelement <1 x float> undef, float %111, i64 0, !dbg !43
  store <1 x float> %197, ptr addrspace(3) %152, align 4, !dbg !43
  %198 = insertelement <1 x float> undef, float %112, i64 0, !dbg !43
  store <1 x float> %198, ptr addrspace(3) %156, align 4, !dbg !43
  %199 = insertelement <1 x float> undef, float %113, i64 0, !dbg !43
  store <1 x float> %199, ptr addrspace(3) %160, align 4, !dbg !43
  %200 = insertelement <1 x float> undef, float %114, i64 0, !dbg !43
  store <1 x float> %200, ptr addrspace(3) %164, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %201 = load float, ptr addrspace(3) %167, align 4, !dbg !43
  %202 = load float, ptr addrspace(3) %171, align 4, !dbg !43
  %203 = load float, ptr addrspace(3) %175, align 4, !dbg !43
  %204 = load float, ptr addrspace(3) %179, align 4, !dbg !43
  %205 = load float, ptr addrspace(3) %183, align 4, !dbg !43
  %206 = load float, ptr addrspace(3) %187, align 4, !dbg !43
  %207 = load float, ptr addrspace(3) %191, align 4, !dbg !43
  %208 = load float, ptr addrspace(3) %195, align 4, !dbg !43
  %209 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !26
  %210 = insertelement <2 x i32> %209, i32 %95, i64 1, !dbg !26
  %211 = trunc <2 x i32> %210 to <2 x i16>, !dbg !26
  %212 = bitcast <2 x i16> %211 to <2 x half>, !dbg !26
  %213 = fpext <2 x half> %212 to <2 x float>, !dbg !44
  %214 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !31
  %215 = insertelement <2 x i32> %214, i32 %117, i64 1, !dbg !31
  %216 = trunc <2 x i32> %215 to <2 x i16>, !dbg !31
  %217 = bitcast <2 x i16> %216 to <2 x half>, !dbg !31
  %218 = fpext <2 x half> %217 to <2 x float>, !dbg !45
  %219 = insertelement <2 x float> poison, float %168, i64 0, !dbg !42
  %220 = insertelement <2 x float> %219, float %201, i64 1, !dbg !42
  %221 = fadd <2 x float> %220, %213, !dbg !42
  %222 = fmul <2 x float> %218, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %223 = fadd <2 x float> %222, %221, !dbg !47
  %224 = lshr <2 x i32> %210, <i32 16, i32 16>, !dbg !26
  %225 = trunc <2 x i32> %224 to <2 x i16>, !dbg !26
  %226 = bitcast <2 x i16> %225 to <2 x half>, !dbg !26
  %227 = fpext <2 x half> %226 to <2 x float>, !dbg !44
  %228 = lshr <2 x i32> %215, <i32 16, i32 16>, !dbg !31
  %229 = trunc <2 x i32> %228 to <2 x i16>, !dbg !31
  %230 = bitcast <2 x i16> %229 to <2 x half>, !dbg !31
  %231 = fpext <2 x half> %230 to <2 x float>, !dbg !45
  %232 = insertelement <2 x float> poison, float %172, i64 0, !dbg !42
  %233 = insertelement <2 x float> %232, float %202, i64 1, !dbg !42
  %234 = fadd <2 x float> %233, %227, !dbg !42
  %235 = fmul <2 x float> %231, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %236 = fadd <2 x float> %235, %234, !dbg !47
  %237 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !26
  %238 = insertelement <2 x i32> %237, i32 %96, i64 1, !dbg !26
  %239 = trunc <2 x i32> %238 to <2 x i16>, !dbg !26
  %240 = bitcast <2 x i16> %239 to <2 x half>, !dbg !26
  %241 = fpext <2 x half> %240 to <2 x float>, !dbg !44
  %242 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !31
  %243 = insertelement <2 x i32> %242, i32 %118, i64 1, !dbg !31
  %244 = trunc <2 x i32> %243 to <2 x i16>, !dbg !31
  %245 = bitcast <2 x i16> %244 to <2 x half>, !dbg !31
  %246 = fpext <2 x half> %245 to <2 x float>, !dbg !45
  %247 = insertelement <2 x float> poison, float %176, i64 0, !dbg !42
  %248 = insertelement <2 x float> %247, float %203, i64 1, !dbg !42
  %249 = fadd <2 x float> %248, %241, !dbg !42
  %250 = fmul <2 x float> %246, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %251 = fadd <2 x float> %250, %249, !dbg !47
  %252 = lshr <2 x i32> %238, <i32 16, i32 16>, !dbg !26
  %253 = trunc <2 x i32> %252 to <2 x i16>, !dbg !26
  %254 = bitcast <2 x i16> %253 to <2 x half>, !dbg !26
  %255 = fpext <2 x half> %254 to <2 x float>, !dbg !44
  %256 = lshr <2 x i32> %243, <i32 16, i32 16>, !dbg !31
  %257 = trunc <2 x i32> %256 to <2 x i16>, !dbg !31
  %258 = bitcast <2 x i16> %257 to <2 x half>, !dbg !31
  %259 = fpext <2 x half> %258 to <2 x float>, !dbg !45
  %260 = insertelement <2 x float> poison, float %180, i64 0, !dbg !42
  %261 = insertelement <2 x float> %260, float %204, i64 1, !dbg !42
  %262 = fadd <2 x float> %261, %255, !dbg !42
  %263 = fmul <2 x float> %259, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %264 = fadd <2 x float> %263, %262, !dbg !47
  %265 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !26
  %266 = insertelement <2 x i32> %265, i32 %97, i64 1, !dbg !26
  %267 = trunc <2 x i32> %266 to <2 x i16>, !dbg !26
  %268 = bitcast <2 x i16> %267 to <2 x half>, !dbg !26
  %269 = fpext <2 x half> %268 to <2 x float>, !dbg !44
  %270 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !31
  %271 = insertelement <2 x i32> %270, i32 %119, i64 1, !dbg !31
  %272 = trunc <2 x i32> %271 to <2 x i16>, !dbg !31
  %273 = bitcast <2 x i16> %272 to <2 x half>, !dbg !31
  %274 = fpext <2 x half> %273 to <2 x float>, !dbg !45
  %275 = insertelement <2 x float> poison, float %184, i64 0, !dbg !42
  %276 = insertelement <2 x float> %275, float %205, i64 1, !dbg !42
  %277 = fadd <2 x float> %276, %269, !dbg !42
  %278 = fmul <2 x float> %274, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %279 = fadd <2 x float> %278, %277, !dbg !47
  %280 = lshr <2 x i32> %266, <i32 16, i32 16>, !dbg !26
  %281 = trunc <2 x i32> %280 to <2 x i16>, !dbg !26
  %282 = bitcast <2 x i16> %281 to <2 x half>, !dbg !26
  %283 = fpext <2 x half> %282 to <2 x float>, !dbg !44
  %284 = lshr <2 x i32> %271, <i32 16, i32 16>, !dbg !31
  %285 = trunc <2 x i32> %284 to <2 x i16>, !dbg !31
  %286 = bitcast <2 x i16> %285 to <2 x half>, !dbg !31
  %287 = fpext <2 x half> %286 to <2 x float>, !dbg !45
  %288 = insertelement <2 x float> poison, float %188, i64 0, !dbg !42
  %289 = insertelement <2 x float> %288, float %206, i64 1, !dbg !42
  %290 = fadd <2 x float> %289, %283, !dbg !42
  %291 = fmul <2 x float> %287, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %292 = fadd <2 x float> %291, %290, !dbg !47
  %293 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !26
  %294 = insertelement <2 x i32> %293, i32 %98, i64 1, !dbg !26
  %295 = trunc <2 x i32> %294 to <2 x i16>, !dbg !26
  %296 = bitcast <2 x i16> %295 to <2 x half>, !dbg !26
  %297 = fpext <2 x half> %296 to <2 x float>, !dbg !44
  %298 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !31
  %299 = insertelement <2 x i32> %298, i32 %120, i64 1, !dbg !31
  %300 = trunc <2 x i32> %299 to <2 x i16>, !dbg !31
  %301 = bitcast <2 x i16> %300 to <2 x half>, !dbg !31
  %302 = fpext <2 x half> %301 to <2 x float>, !dbg !45
  %303 = insertelement <2 x float> poison, float %192, i64 0, !dbg !42
  %304 = insertelement <2 x float> %303, float %207, i64 1, !dbg !42
  %305 = fadd <2 x float> %304, %297, !dbg !42
  %306 = fmul <2 x float> %302, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %307 = fadd <2 x float> %306, %305, !dbg !47
  %308 = lshr <2 x i32> %294, <i32 16, i32 16>, !dbg !26
  %309 = trunc <2 x i32> %308 to <2 x i16>, !dbg !26
  %310 = bitcast <2 x i16> %309 to <2 x half>, !dbg !26
  %311 = fpext <2 x half> %310 to <2 x float>, !dbg !44
  %312 = lshr <2 x i32> %299, <i32 16, i32 16>, !dbg !31
  %313 = trunc <2 x i32> %312 to <2 x i16>, !dbg !31
  %314 = bitcast <2 x i16> %313 to <2 x half>, !dbg !31
  %315 = fpext <2 x half> %314 to <2 x float>, !dbg !45
  %316 = insertelement <2 x float> poison, float %196, i64 0, !dbg !42
  %317 = insertelement <2 x float> %316, float %208, i64 1, !dbg !42
  %318 = fadd <2 x float> %317, %311, !dbg !42
  %319 = fmul <2 x float> %315, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %320 = fadd <2 x float> %319, %318, !dbg !47
  %321 = extractelement <2 x float> %223, i64 1, !dbg !48
  %322 = fadd float %321, %143, !dbg !48
  %323 = extractelement <2 x float> %236, i64 1, !dbg !48
  %324 = fadd float %323, %144, !dbg !48
  %325 = extractelement <2 x float> %251, i64 1, !dbg !48
  %326 = fadd float %325, %145, !dbg !48
  %327 = extractelement <2 x float> %264, i64 1, !dbg !48
  %328 = fadd float %327, %146, !dbg !48
  %329 = extractelement <2 x float> %279, i64 1, !dbg !48
  %330 = fadd float %329, %147, !dbg !48
  %331 = extractelement <2 x float> %292, i64 1, !dbg !48
  %332 = fadd float %331, %148, !dbg !48
  %333 = extractelement <2 x float> %307, i64 1, !dbg !48
  %334 = fadd float %333, %149, !dbg !48
  %335 = extractelement <2 x float> %320, i64 1, !dbg !48
  %336 = fadd float %335, %150, !dbg !48
  %337 = extractelement <2 x float> %223, i64 0, !dbg !49
  %338 = fadd float %337, %322, !dbg !49
  %339 = extractelement <2 x float> %236, i64 0, !dbg !49
  %340 = fadd float %339, %324, !dbg !49
  %341 = extractelement <2 x float> %251, i64 0, !dbg !49
  %342 = fadd float %341, %326, !dbg !49
  %343 = extractelement <2 x float> %264, i64 0, !dbg !49
  %344 = fadd float %343, %328, !dbg !49
  %345 = extractelement <2 x float> %279, i64 0, !dbg !49
  %346 = fadd float %345, %330, !dbg !49
  %347 = extractelement <2 x float> %292, i64 0, !dbg !49
  %348 = fadd float %347, %332, !dbg !49
  %349 = extractelement <2 x float> %307, i64 0, !dbg !49
  %350 = fadd float %349, %334, !dbg !49
  %351 = extractelement <2 x float> %320, i64 0, !dbg !49
  %352 = fadd float %351, %336, !dbg !49
  %353 = mul i32 %10, %9, !dbg !50
  %354 = mul i32 %37, %353, !dbg !51
  %355 = mul i32 %38, %353, !dbg !51
  %356 = mul i32 %39, %353, !dbg !51
  %357 = mul i32 %40, %353, !dbg !51
  %358 = mul i32 %353, 320, !dbg !52
  %359 = mul i32 %48, %358, !dbg !53
  %360 = mul i32 %50, %358, !dbg !53
  %361 = add i32 %359, %.decomposed, !dbg !54
  %362 = add i32 %361, %354, !dbg !55
  %363 = add i32 %361, %355, !dbg !55
  %364 = add i32 %361, %356, !dbg !55
  %365 = add i32 %361, %357, !dbg !55
  %366 = add i32 %360, %.decomposed27, !dbg !54
  %367 = add i32 %366, %354, !dbg !55
  %368 = add i32 %366, %355, !dbg !55
  %369 = add i32 %366, %356, !dbg !55
  %370 = add i32 %366, %357, !dbg !55
  %371 = sext i32 %362 to i64, !dbg !56
  %372 = getelementptr half, ptr addrspace(1) %7, i64 %371, !dbg !56
  %373 = sext i32 %363 to i64, !dbg !56
  %374 = getelementptr half, ptr addrspace(1) %7, i64 %373, !dbg !56
  %375 = sext i32 %364 to i64, !dbg !56
  %376 = getelementptr half, ptr addrspace(1) %7, i64 %375, !dbg !56
  %377 = sext i32 %365 to i64, !dbg !56
  %378 = getelementptr half, ptr addrspace(1) %7, i64 %377, !dbg !56
  %379 = sext i32 %367 to i64, !dbg !56
  %380 = getelementptr half, ptr addrspace(1) %7, i64 %379, !dbg !56
  %381 = sext i32 %368 to i64, !dbg !56
  %382 = getelementptr half, ptr addrspace(1) %7, i64 %381, !dbg !56
  %383 = sext i32 %369 to i64, !dbg !56
  %384 = getelementptr half, ptr addrspace(1) %7, i64 %383, !dbg !56
  %385 = sext i32 %370 to i64, !dbg !56
  %386 = getelementptr half, ptr addrspace(1) %7, i64 %385, !dbg !56
  %387 = fptrunc float %338 to half, !dbg !57
  %388 = fptrunc float %340 to half, !dbg !57
  %389 = fptrunc float %342 to half, !dbg !57
  %390 = fptrunc float %344 to half, !dbg !57
  %391 = fptrunc float %346 to half, !dbg !57
  %392 = fptrunc float %348 to half, !dbg !57
  %393 = fptrunc float %350 to half, !dbg !57
  %394 = fptrunc float %352 to half, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %395 = mul nuw nsw i32 %16, 513, !dbg !57
  %396 = add nuw nsw i32 %395, %18, !dbg !57
  %397 = zext nneg i32 %396 to i64, !dbg !57
  %398 = getelementptr half, ptr addrspace(3) @global_smem, i64 %397, !dbg !57
  %399 = insertelement <1 x half> undef, half %387, i64 0, !dbg !57
  store <1 x half> %399, ptr addrspace(3) %398, align 2, !dbg !57
  %400 = add nuw nsw i32 %395, %169, !dbg !57
  %401 = zext nneg i32 %400 to i64, !dbg !57
  %402 = getelementptr half, ptr addrspace(3) @global_smem, i64 %401, !dbg !57
  %403 = insertelement <1 x half> undef, half %388, i64 0, !dbg !57
  store <1 x half> %403, ptr addrspace(3) %402, align 2, !dbg !57
  %404 = add nuw nsw i32 %395, %173, !dbg !57
  %405 = zext nneg i32 %404 to i64, !dbg !57
  %406 = getelementptr half, ptr addrspace(3) @global_smem, i64 %405, !dbg !57
  %407 = insertelement <1 x half> undef, half %389, i64 0, !dbg !57
  store <1 x half> %407, ptr addrspace(3) %406, align 2, !dbg !57
  %408 = add nuw nsw i32 %395, %177, !dbg !57
  %409 = zext nneg i32 %408 to i64, !dbg !57
  %410 = getelementptr half, ptr addrspace(3) @global_smem, i64 %409, !dbg !57
  %411 = insertelement <1 x half> undef, half %390, i64 0, !dbg !57
  store <1 x half> %411, ptr addrspace(3) %410, align 2, !dbg !57
  %412 = add nuw nsw i32 %395, %181, !dbg !57
  %413 = zext nneg i32 %412 to i64, !dbg !57
  %414 = getelementptr half, ptr addrspace(3) @global_smem, i64 %413, !dbg !57
  %415 = insertelement <1 x half> undef, half %391, i64 0, !dbg !57
  store <1 x half> %415, ptr addrspace(3) %414, align 2, !dbg !57
  %416 = add nuw nsw i32 %395, %185, !dbg !57
  %417 = zext nneg i32 %416 to i64, !dbg !57
  %418 = getelementptr half, ptr addrspace(3) @global_smem, i64 %417, !dbg !57
  %419 = insertelement <1 x half> undef, half %392, i64 0, !dbg !57
  store <1 x half> %419, ptr addrspace(3) %418, align 2, !dbg !57
  %420 = add nuw nsw i32 %395, %189, !dbg !57
  %421 = zext nneg i32 %420 to i64, !dbg !57
  %422 = getelementptr half, ptr addrspace(3) @global_smem, i64 %421, !dbg !57
  %423 = insertelement <1 x half> undef, half %393, i64 0, !dbg !57
  store <1 x half> %423, ptr addrspace(3) %422, align 2, !dbg !57
  %424 = add nuw nsw i32 %395, %193, !dbg !57
  %425 = zext nneg i32 %424 to i64, !dbg !57
  %426 = getelementptr half, ptr addrspace(3) @global_smem, i64 %425, !dbg !57
  %427 = insertelement <1 x half> undef, half %394, i64 0, !dbg !57
  store <1 x half> %427, ptr addrspace(3) %426, align 2, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %428 = zext nneg i32 %19 to i64, !dbg !57
  %429 = getelementptr half, ptr addrspace(3) @global_smem, i64 %428, !dbg !57
  %430 = load i16, ptr addrspace(3) %429, align 2, !dbg !57
  %431 = zext nneg i32 %20 to i64, !dbg !57
  %432 = getelementptr half, ptr addrspace(3) @global_smem, i64 %431, !dbg !57
  %433 = load i16, ptr addrspace(3) %432, align 2, !dbg !57
  %434 = zext nneg i32 %21 to i64, !dbg !57
  %435 = getelementptr half, ptr addrspace(3) @global_smem, i64 %434, !dbg !57
  %436 = load i16, ptr addrspace(3) %435, align 2, !dbg !57
  %437 = zext nneg i32 %22 to i64, !dbg !57
  %438 = getelementptr half, ptr addrspace(3) @global_smem, i64 %437, !dbg !57
  %439 = load i16, ptr addrspace(3) %438, align 2, !dbg !57
  %440 = add nuw nsw i32 %19, 513, !dbg !57
  %441 = zext nneg i32 %440 to i64, !dbg !57
  %442 = getelementptr half, ptr addrspace(3) @global_smem, i64 %441, !dbg !57
  %443 = load i16, ptr addrspace(3) %442, align 2, !dbg !57
  %444 = add nuw nsw i32 %19, 641, !dbg !57
  %445 = zext nneg i32 %444 to i64, !dbg !57
  %446 = getelementptr half, ptr addrspace(3) @global_smem, i64 %445, !dbg !57
  %447 = load i16, ptr addrspace(3) %446, align 2, !dbg !57
  %448 = add nuw nsw i32 %19, 769, !dbg !57
  %449 = zext nneg i32 %448 to i64, !dbg !57
  %450 = getelementptr half, ptr addrspace(3) @global_smem, i64 %449, !dbg !57
  %451 = load i16, ptr addrspace(3) %450, align 2, !dbg !57
  %452 = add nuw nsw i32 %19, 897, !dbg !57
  %453 = zext nneg i32 %452 to i64, !dbg !57
  %454 = getelementptr half, ptr addrspace(3) @global_smem, i64 %453, !dbg !57
  %455 = load i16, ptr addrspace(3) %454, align 2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %430, ptr addrspace(1) %372, i1 %57) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %433, ptr addrspace(1) %374, i1 %58) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %436, ptr addrspace(1) %376, i1 %59) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %439, ptr addrspace(1) %378, i1 %60) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %443, ptr addrspace(1) %380, i1 %61) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %447, ptr addrspace(1) %382, i1 %62) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %451, ptr addrspace(1) %384, i1 %63) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %455, ptr addrspace(1) %386, i1 %64) #2, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cjqlvsnd5srvsisb5xahkilomuymdcyos2rtziv2oc6khxsqi43w.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/jq")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89101112de", linkageName: "triton__0d1d2d3d4d5d6d7d89101112de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 32, column: 40, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 54, scope: !5)
!26 = !DILocation(line: 32, column: 46, scope: !5)
!27 = !DILocation(line: 33, column: 30, scope: !5)
!28 = !DILocation(line: 33, column: 35, scope: !5)
!29 = !DILocation(line: 33, column: 75, scope: !5)
!30 = !DILocation(line: 34, column: 30, scope: !5)
!31 = !DILocation(line: 34, column: 46, scope: !5)
!32 = !DILocation(line: 35, column: 30, scope: !5)
!33 = !DILocation(line: 35, column: 46, scope: !5)
!34 = !DILocation(line: 36, column: 30, scope: !5)
!35 = !DILocation(line: 36, column: 35, scope: !5)
!36 = !DILocation(line: 36, column: 75, scope: !5)
!37 = !DILocation(line: 37, column: 31, scope: !5)
!38 = !DILocation(line: 37, column: 47, scope: !5)
!39 = !DILocation(line: 38, column: 31, scope: !5)
!40 = !DILocation(line: 38, column: 47, scope: !5)
!41 = !DILocation(line: 38, column: 95, scope: !5)
!42 = !DILocation(line: 39, column: 18, scope: !5)
!43 = !DILocation(line: 43, column: 18, scope: !5)
!44 = !DILocation(line: 32, column: 94, scope: !5)
!45 = !DILocation(line: 34, column: 94, scope: !5)
!46 = !DILocation(line: 41, column: 18, scope: !5)
!47 = !DILocation(line: 42, column: 18, scope: !5)
!48 = !DILocation(line: 48, column: 20, scope: !5)
!49 = !DILocation(line: 49, column: 19, scope: !5)
!50 = !DILocation(line: 50, column: 35, scope: !5)
!51 = !DILocation(line: 50, column: 39, scope: !5)
!52 = !DILocation(line: 50, column: 54, scope: !5)
!53 = !DILocation(line: 50, column: 58, scope: !5)
!54 = !DILocation(line: 50, column: 31, scope: !5)
!55 = !DILocation(line: 50, column: 46, scope: !5)
!56 = !DILocation(line: 50, column: 25, scope: !5)
!57 = !DILocation(line: 50, column: 71, scope: !5)
!58 = !DILocation(line: 50, column: 4, scope: !5)
