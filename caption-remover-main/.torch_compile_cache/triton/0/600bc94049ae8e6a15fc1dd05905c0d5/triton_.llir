; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = and i32 %10, 7, !dbg !8
  %12 = lshr i32 %9, 2, !dbg !8
  %13 = shl nuw nsw i32 %11, 3, !dbg !8
  %14 = or i32 %13, %12, !dbg !8
  %15 = or i32 %14, 64, !dbg !8
  %16 = or i32 %14, 128, !dbg !8
  %17 = or i32 %14, 192, !dbg !8
  %18 = shl nuw nsw i32 %9, 3, !dbg !8
  %urem = and i32 %8, 255, !dbg !8
  %19 = shl i32 %8, 2, !dbg !9
  %20 = and i32 %19, 12, !dbg !9
  %21 = or i32 %11, 8, !dbg !9
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %24 = add i32 %23, 1, !dbg !12
  %25 = shl i32 %22, 8, !dbg !13
  %26 = mul i32 %25, %24, !dbg !14
  %27 = or i32 %26, %14, !dbg !15
  %28 = or i32 %26, %15, !dbg !15
  %29 = or i32 %26, %16, !dbg !15
  %30 = or i32 %26, %17, !dbg !15
  %31 = or i32 %26, %18, !dbg !15
  %32 = or i32 %26, %urem, !dbg !15
  %33 = icmp slt i32 %27, 7040, !dbg !16
  %34 = icmp slt i32 %28, 7040, !dbg !16
  %35 = icmp slt i32 %29, 7040, !dbg !16
  %36 = icmp slt i32 %30, 7040, !dbg !16
  %37 = icmp slt i32 %31, 7040, !dbg !16
  %38 = icmp slt i32 %32, 7040, !dbg !16
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %40 = shl i32 %39, 4, !dbg !18
  %41 = or i32 %40, %20, !dbg !19
  %42 = or i32 %40, %11, !dbg !19
  %43 = or i32 %40, %21, !dbg !19
  %44 = icmp slt i32 %41, 2700, !dbg !20
  %45 = icmp slt i32 %42, 2700, !dbg !20
  %46 = icmp slt i32 %43, 2700, !dbg !20
  %.frozen = freeze i32 %31
  %47 = sdiv i32 %.frozen, 320, !dbg !21
  %48 = mul i32 %47, 320
  %.decomposed = sub i32 %.frozen, %48
  %49 = srem i32 %32, 320, !dbg !22
  %50 = mul i32 %27, 2700, !dbg !23
  %51 = mul i32 %28, 2700, !dbg !23
  %52 = mul i32 %29, 2700, !dbg !23
  %53 = mul i32 %30, 2700, !dbg !23
  %54 = add i32 %50, %41, !dbg !24
  %55 = add i32 %51, %41, !dbg !24
  %56 = add i32 %52, %41, !dbg !24
  %57 = add i32 %53, %41, !dbg !24
  %58 = sext i32 %54 to i64, !dbg !25
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %55 to i64, !dbg !25
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %56 to i64, !dbg !25
  %63 = getelementptr half, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = sext i32 %57 to i64, !dbg !25
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !25
  %66 = and i1 %44, %33, !dbg !26
  %67 = and i1 %44, %34, !dbg !26
  %68 = and i1 %44, %35, !dbg !26
  %69 = and i1 %44, %36, !dbg !26
  %70 = and i1 %45, %37, !dbg !26
  %71 = and i1 %46, %37, !dbg !26
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %66) #2, !dbg !27
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !27
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !27
  %extelt.offset = lshr i32 %73, 16, !dbg !27
  %extelt.offset1 = lshr i32 %74, 16, !dbg !27
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %67) #2, !dbg !27
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !27
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !27
  %extelt.offset2 = lshr i32 %76, 16, !dbg !27
  %extelt.offset3 = lshr i32 %77, 16, !dbg !27
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %68) #2, !dbg !27
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !27
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !27
  %extelt.offset4 = lshr i32 %79, 16, !dbg !27
  %extelt.offset5 = lshr i32 %80, 16, !dbg !27
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %69) #2, !dbg !27
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !27
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !27
  %extelt.offset6 = lshr i32 %82, 16, !dbg !27
  %extelt.offset7 = lshr i32 %83, 16, !dbg !27
  %84 = mul i32 %42, 320, !dbg !28
  %85 = mul i32 %43, 320, !dbg !28
  %86 = mul i32 %47, 864000, !dbg !29
  %87 = add i32 %86, %.decomposed, !dbg !30
  %88 = add i32 %87, %84, !dbg !31
  %89 = add i32 %87, %85, !dbg !31
  %90 = sext i32 %88 to i64, !dbg !32
  %91 = getelementptr half, ptr addrspace(1) %1, i64 %90, !dbg !32
  %92 = sext i32 %89 to i64, !dbg !32
  %93 = getelementptr half, ptr addrspace(1) %1, i64 %92, !dbg !32
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %70) #2, !dbg !33
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !33
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !33
  %99 = trunc i32 %95 to i16, !dbg !33
  %extelt.offset8 = lshr i32 %95, 16, !dbg !33
  %100 = trunc i32 %extelt.offset8 to i16, !dbg !33
  %101 = trunc i32 %96 to i16, !dbg !33
  %extelt.offset9 = lshr i32 %96, 16, !dbg !33
  %102 = trunc i32 %extelt.offset9 to i16, !dbg !33
  %103 = trunc i32 %97 to i16, !dbg !33
  %extelt.offset10 = lshr i32 %97, 16, !dbg !33
  %104 = trunc i32 %extelt.offset10 to i16, !dbg !33
  %105 = trunc i32 %98 to i16, !dbg !33
  %extelt.offset11 = lshr i32 %98, 16, !dbg !33
  %106 = trunc i32 %extelt.offset11 to i16, !dbg !33
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %71) #2, !dbg !33
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !33
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !33
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !33
  %112 = trunc i32 %108 to i16, !dbg !33
  %extelt.offset12 = lshr i32 %108, 16, !dbg !33
  %113 = trunc i32 %extelt.offset12 to i16, !dbg !33
  %114 = trunc i32 %109 to i16, !dbg !33
  %extelt.offset13 = lshr i32 %109, 16, !dbg !33
  %115 = trunc i32 %extelt.offset13 to i16, !dbg !33
  %116 = trunc i32 %110 to i16, !dbg !33
  %extelt.offset14 = lshr i32 %110, 16, !dbg !33
  %117 = trunc i32 %extelt.offset14 to i16, !dbg !33
  %118 = trunc i32 %111 to i16, !dbg !33
  %extelt.offset15 = lshr i32 %111, 16, !dbg !33
  %119 = trunc i32 %extelt.offset15 to i16, !dbg !33
  %120 = mul nuw nsw i32 %9, 136, !dbg !34
  %121 = or i32 %120, %11, !dbg !34
  %122 = zext nneg i32 %121 to i64, !dbg !34
  %123 = getelementptr half, ptr addrspace(3) @global_smem, i64 %122, !dbg !34
  store i16 %99, ptr addrspace(3) %123, align 2, !dbg !34
  %124 = add nuw nsw i32 %120, 17, !dbg !34
  %125 = add nuw nsw i32 %124, %11, !dbg !34
  %126 = zext nneg i32 %125 to i64, !dbg !34
  %127 = getelementptr half, ptr addrspace(3) @global_smem, i64 %126, !dbg !34
  store i16 %100, ptr addrspace(3) %127, align 2, !dbg !34
  %128 = add nuw nsw i32 %120, 34, !dbg !34
  %129 = add nuw nsw i32 %128, %11, !dbg !34
  %130 = zext nneg i32 %129 to i64, !dbg !34
  %131 = getelementptr half, ptr addrspace(3) @global_smem, i64 %130, !dbg !34
  store i16 %101, ptr addrspace(3) %131, align 2, !dbg !34
  %132 = add nuw nsw i32 %120, 51, !dbg !34
  %133 = add nuw nsw i32 %132, %11, !dbg !34
  %134 = zext nneg i32 %133 to i64, !dbg !34
  %135 = getelementptr half, ptr addrspace(3) @global_smem, i64 %134, !dbg !34
  store i16 %102, ptr addrspace(3) %135, align 2, !dbg !34
  %136 = add nuw nsw i32 %120, 68, !dbg !34
  %137 = add nuw nsw i32 %136, %11, !dbg !34
  %138 = zext nneg i32 %137 to i64, !dbg !34
  %139 = getelementptr half, ptr addrspace(3) @global_smem, i64 %138, !dbg !34
  store i16 %103, ptr addrspace(3) %139, align 2, !dbg !34
  %140 = add nuw nsw i32 %120, 85, !dbg !34
  %141 = add nuw nsw i32 %140, %11, !dbg !34
  %142 = zext nneg i32 %141 to i64, !dbg !34
  %143 = getelementptr half, ptr addrspace(3) @global_smem, i64 %142, !dbg !34
  store i16 %104, ptr addrspace(3) %143, align 2, !dbg !34
  %144 = add nuw nsw i32 %120, 102, !dbg !34
  %145 = add nuw nsw i32 %144, %11, !dbg !34
  %146 = zext nneg i32 %145 to i64, !dbg !34
  %147 = getelementptr half, ptr addrspace(3) @global_smem, i64 %146, !dbg !34
  store i16 %105, ptr addrspace(3) %147, align 2, !dbg !34
  %148 = add nuw nsw i32 %120, 119, !dbg !34
  %149 = add nuw nsw i32 %148, %11, !dbg !34
  %150 = zext nneg i32 %149 to i64, !dbg !34
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i64 %150, !dbg !34
  store i16 %106, ptr addrspace(3) %151, align 2, !dbg !34
  %152 = add nuw nsw i32 %21, %120, !dbg !34
  %153 = zext nneg i32 %152 to i64, !dbg !34
  %154 = getelementptr half, ptr addrspace(3) @global_smem, i64 %153, !dbg !34
  store i16 %112, ptr addrspace(3) %154, align 2, !dbg !34
  %155 = add nuw nsw i32 %124, %21, !dbg !34
  %156 = zext nneg i32 %155 to i64, !dbg !34
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i64 %156, !dbg !34
  store i16 %113, ptr addrspace(3) %157, align 2, !dbg !34
  %158 = add nuw nsw i32 %128, %21, !dbg !34
  %159 = zext nneg i32 %158 to i64, !dbg !34
  %160 = getelementptr half, ptr addrspace(3) @global_smem, i64 %159, !dbg !34
  store i16 %114, ptr addrspace(3) %160, align 2, !dbg !34
  %161 = add nuw nsw i32 %132, %21, !dbg !34
  %162 = zext nneg i32 %161 to i64, !dbg !34
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i64 %162, !dbg !34
  store i16 %115, ptr addrspace(3) %163, align 2, !dbg !34
  %164 = add nuw nsw i32 %136, %21, !dbg !34
  %165 = zext nneg i32 %164 to i64, !dbg !34
  %166 = getelementptr half, ptr addrspace(3) @global_smem, i64 %165, !dbg !34
  store i16 %116, ptr addrspace(3) %166, align 2, !dbg !34
  %167 = add nuw nsw i32 %140, %21, !dbg !34
  %168 = zext nneg i32 %167 to i64, !dbg !34
  %169 = getelementptr half, ptr addrspace(3) @global_smem, i64 %168, !dbg !34
  store i16 %117, ptr addrspace(3) %169, align 2, !dbg !34
  %170 = add nuw nsw i32 %144, %21, !dbg !34
  %171 = zext nneg i32 %170 to i64, !dbg !34
  %172 = getelementptr half, ptr addrspace(3) @global_smem, i64 %171, !dbg !34
  store i16 %118, ptr addrspace(3) %172, align 2, !dbg !34
  %173 = add nuw nsw i32 %148, %21, !dbg !34
  %174 = zext nneg i32 %173 to i64, !dbg !34
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !34
  store i16 %119, ptr addrspace(3) %175, align 2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %176 = mul nuw nsw i32 %14, 17, !dbg !34
  %177 = add nuw nsw i32 %176, %20, !dbg !34
  %178 = zext nneg i32 %177 to i64, !dbg !34
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i64 %178, !dbg !34
  %180 = load half, ptr addrspace(3) %179, align 2, !dbg !34
  %181 = or i32 %20, 1, !dbg !34
  %182 = add nuw nsw i32 %176, %181, !dbg !34
  %183 = zext nneg i32 %182 to i64, !dbg !34
  %184 = getelementptr half, ptr addrspace(3) @global_smem, i64 %183, !dbg !34
  %185 = load half, ptr addrspace(3) %184, align 2, !dbg !34
  %186 = or i32 %20, 2, !dbg !34
  %187 = add nuw nsw i32 %176, %186, !dbg !34
  %188 = zext nneg i32 %187 to i64, !dbg !34
  %189 = getelementptr half, ptr addrspace(3) @global_smem, i64 %188, !dbg !34
  %190 = load half, ptr addrspace(3) %189, align 2, !dbg !34
  %191 = or i32 %20, 3, !dbg !34
  %192 = add nuw nsw i32 %176, %191, !dbg !34
  %193 = zext nneg i32 %192 to i64, !dbg !34
  %194 = getelementptr half, ptr addrspace(3) @global_smem, i64 %193, !dbg !34
  %195 = load half, ptr addrspace(3) %194, align 2, !dbg !34
  %196 = mul nuw nsw i32 %15, 17, !dbg !34
  %197 = add nuw nsw i32 %196, %20, !dbg !34
  %198 = zext nneg i32 %197 to i64, !dbg !34
  %199 = getelementptr half, ptr addrspace(3) @global_smem, i64 %198, !dbg !34
  %200 = load half, ptr addrspace(3) %199, align 2, !dbg !34
  %201 = add nuw nsw i32 %196, %181, !dbg !34
  %202 = zext nneg i32 %201 to i64, !dbg !34
  %203 = getelementptr half, ptr addrspace(3) @global_smem, i64 %202, !dbg !34
  %204 = load half, ptr addrspace(3) %203, align 2, !dbg !34
  %205 = add nuw nsw i32 %196, %186, !dbg !34
  %206 = zext nneg i32 %205 to i64, !dbg !34
  %207 = getelementptr half, ptr addrspace(3) @global_smem, i64 %206, !dbg !34
  %208 = load half, ptr addrspace(3) %207, align 2, !dbg !34
  %209 = add nuw nsw i32 %196, %191, !dbg !34
  %210 = zext nneg i32 %209 to i64, !dbg !34
  %211 = getelementptr half, ptr addrspace(3) @global_smem, i64 %210, !dbg !34
  %212 = load half, ptr addrspace(3) %211, align 2, !dbg !34
  %213 = mul nuw nsw i32 %16, 17, !dbg !34
  %214 = add nuw nsw i32 %213, %20, !dbg !34
  %215 = zext nneg i32 %214 to i64, !dbg !34
  %216 = getelementptr half, ptr addrspace(3) @global_smem, i64 %215, !dbg !34
  %217 = load half, ptr addrspace(3) %216, align 2, !dbg !34
  %218 = add nuw nsw i32 %213, %181, !dbg !34
  %219 = zext nneg i32 %218 to i64, !dbg !34
  %220 = getelementptr half, ptr addrspace(3) @global_smem, i64 %219, !dbg !34
  %221 = load half, ptr addrspace(3) %220, align 2, !dbg !34
  %222 = add nuw nsw i32 %213, %186, !dbg !34
  %223 = zext nneg i32 %222 to i64, !dbg !34
  %224 = getelementptr half, ptr addrspace(3) @global_smem, i64 %223, !dbg !34
  %225 = load half, ptr addrspace(3) %224, align 2, !dbg !34
  %226 = add nuw nsw i32 %213, %191, !dbg !34
  %227 = zext nneg i32 %226 to i64, !dbg !34
  %228 = getelementptr half, ptr addrspace(3) @global_smem, i64 %227, !dbg !34
  %229 = load half, ptr addrspace(3) %228, align 2, !dbg !34
  %230 = mul nuw nsw i32 %17, 17, !dbg !34
  %231 = add nuw nsw i32 %230, %20, !dbg !34
  %232 = zext nneg i32 %231 to i64, !dbg !34
  %233 = getelementptr half, ptr addrspace(3) @global_smem, i64 %232, !dbg !34
  %234 = load half, ptr addrspace(3) %233, align 2, !dbg !34
  %235 = add nuw nsw i32 %230, %181, !dbg !34
  %236 = zext nneg i32 %235 to i64, !dbg !34
  %237 = getelementptr half, ptr addrspace(3) @global_smem, i64 %236, !dbg !34
  %238 = load half, ptr addrspace(3) %237, align 2, !dbg !34
  %239 = add nuw nsw i32 %230, %186, !dbg !34
  %240 = zext nneg i32 %239 to i64, !dbg !34
  %241 = getelementptr half, ptr addrspace(3) @global_smem, i64 %240, !dbg !34
  %242 = load half, ptr addrspace(3) %241, align 2, !dbg !34
  %243 = add nuw nsw i32 %230, %191, !dbg !34
  %244 = zext nneg i32 %243 to i64, !dbg !34
  %245 = getelementptr half, ptr addrspace(3) @global_smem, i64 %244, !dbg !34
  %246 = load half, ptr addrspace(3) %245, align 2, !dbg !34
  %247 = sext i32 %49 to i64, !dbg !35
  %248 = getelementptr half, ptr addrspace(1) %2, i64 %247, !dbg !35
  %249 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %248, i1 %38) #2, !dbg !36
  %250 = bitcast i16 %249 to half, !dbg !36
  %251 = fpext half %250 to float, !dbg !37
  %252 = getelementptr half, ptr addrspace(1) %3, i64 %90, !dbg !38
  %253 = getelementptr half, ptr addrspace(1) %3, i64 %92, !dbg !38
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %252, i1 %70) #2, !dbg !39
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !39
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !39
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !39
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !39
  %259 = trunc i32 %255 to i16, !dbg !39
  %extelt.offset16 = lshr i32 %255, 16, !dbg !39
  %260 = trunc i32 %extelt.offset16 to i16, !dbg !39
  %261 = trunc i32 %256 to i16, !dbg !39
  %extelt.offset17 = lshr i32 %256, 16, !dbg !39
  %262 = trunc i32 %extelt.offset17 to i16, !dbg !39
  %263 = trunc i32 %257 to i16, !dbg !39
  %extelt.offset18 = lshr i32 %257, 16, !dbg !39
  %264 = trunc i32 %extelt.offset18 to i16, !dbg !39
  %265 = trunc i32 %258 to i16, !dbg !39
  %extelt.offset19 = lshr i32 %258, 16, !dbg !39
  %266 = trunc i32 %extelt.offset19 to i16, !dbg !39
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %253, i1 %71) #2, !dbg !39
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !39
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !39
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !39
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !39
  %272 = trunc i32 %268 to i16, !dbg !39
  %extelt.offset20 = lshr i32 %268, 16, !dbg !39
  %273 = trunc i32 %extelt.offset20 to i16, !dbg !39
  %274 = trunc i32 %269 to i16, !dbg !39
  %extelt.offset21 = lshr i32 %269, 16, !dbg !39
  %275 = trunc i32 %extelt.offset21 to i16, !dbg !39
  %276 = trunc i32 %270 to i16, !dbg !39
  %extelt.offset22 = lshr i32 %270, 16, !dbg !39
  %277 = trunc i32 %extelt.offset22 to i16, !dbg !39
  %278 = trunc i32 %271 to i16, !dbg !39
  %extelt.offset23 = lshr i32 %271, 16, !dbg !39
  %279 = trunc i32 %extelt.offset23 to i16, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  store i16 %259, ptr addrspace(3) %123, align 2, !dbg !40
  store i16 %260, ptr addrspace(3) %127, align 2, !dbg !40
  store i16 %261, ptr addrspace(3) %131, align 2, !dbg !40
  store i16 %262, ptr addrspace(3) %135, align 2, !dbg !40
  store i16 %263, ptr addrspace(3) %139, align 2, !dbg !40
  store i16 %264, ptr addrspace(3) %143, align 2, !dbg !40
  store i16 %265, ptr addrspace(3) %147, align 2, !dbg !40
  store i16 %266, ptr addrspace(3) %151, align 2, !dbg !40
  store i16 %272, ptr addrspace(3) %154, align 2, !dbg !40
  store i16 %273, ptr addrspace(3) %157, align 2, !dbg !40
  store i16 %274, ptr addrspace(3) %160, align 2, !dbg !40
  store i16 %275, ptr addrspace(3) %163, align 2, !dbg !40
  store i16 %276, ptr addrspace(3) %166, align 2, !dbg !40
  store i16 %277, ptr addrspace(3) %169, align 2, !dbg !40
  store i16 %278, ptr addrspace(3) %172, align 2, !dbg !40
  store i16 %279, ptr addrspace(3) %175, align 2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %280 = load half, ptr addrspace(3) %179, align 2, !dbg !40
  %281 = load half, ptr addrspace(3) %184, align 2, !dbg !40
  %282 = load half, ptr addrspace(3) %189, align 2, !dbg !40
  %283 = load half, ptr addrspace(3) %194, align 2, !dbg !40
  %284 = load half, ptr addrspace(3) %199, align 2, !dbg !40
  %285 = load half, ptr addrspace(3) %203, align 2, !dbg !40
  %286 = load half, ptr addrspace(3) %207, align 2, !dbg !40
  %287 = load half, ptr addrspace(3) %211, align 2, !dbg !40
  %288 = load half, ptr addrspace(3) %216, align 2, !dbg !40
  %289 = load half, ptr addrspace(3) %220, align 2, !dbg !40
  %290 = load half, ptr addrspace(3) %224, align 2, !dbg !40
  %291 = load half, ptr addrspace(3) %228, align 2, !dbg !40
  %292 = load half, ptr addrspace(3) %233, align 2, !dbg !40
  %293 = load half, ptr addrspace(3) %237, align 2, !dbg !40
  %294 = load half, ptr addrspace(3) %241, align 2, !dbg !40
  %295 = load half, ptr addrspace(3) %245, align 2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %296 = shl nuw nsw i32 %urem, 1, !dbg !41
  %297 = zext nneg i32 %296 to i64, !dbg !41
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !41
  %299 = insertelement <1 x float> undef, float %251, i64 0, !dbg !41
  store <1 x float> %299, ptr addrspace(3) %298, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %300 = shl nuw nsw i32 %14, 1, !dbg !41
  %301 = zext nneg i32 %300 to i64, !dbg !41
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i64 %301, !dbg !41
  %303 = load float, ptr addrspace(3) %302, align 4, !dbg !41
  %304 = shl nuw nsw i32 %15, 1, !dbg !41
  %305 = zext nneg i32 %304 to i64, !dbg !41
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !41
  %307 = load float, ptr addrspace(3) %306, align 4, !dbg !41
  %308 = shl nuw nsw i32 %16, 1, !dbg !41
  %309 = zext nneg i32 %308 to i64, !dbg !41
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !41
  %311 = load float, ptr addrspace(3) %310, align 4, !dbg !41
  %312 = shl nuw nsw i32 %17, 1, !dbg !41
  %313 = zext nneg i32 %312 to i64, !dbg !41
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i64 %313, !dbg !41
  %315 = load float, ptr addrspace(3) %314, align 4, !dbg !41
  %316 = getelementptr half, ptr addrspace(1) %4, i64 %58, !dbg !42
  %317 = getelementptr half, ptr addrspace(1) %4, i64 %60, !dbg !42
  %318 = getelementptr half, ptr addrspace(1) %4, i64 %62, !dbg !42
  %319 = getelementptr half, ptr addrspace(1) %4, i64 %64, !dbg !42
  %320 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !27
  %321 = insertelement <2 x i32> %320, i32 %extelt.offset, i64 1, !dbg !27
  %322 = trunc <2 x i32> %321 to <2 x i16>, !dbg !27
  %323 = bitcast <2 x i16> %322 to <2 x half>, !dbg !27
  %324 = fpext <2 x half> %323 to <2 x float>, !dbg !43
  %325 = insertelement <2 x half> poison, half %180, i64 0, !dbg !34
  %326 = insertelement <2 x half> %325, half %185, i64 1, !dbg !34
  %327 = fpext <2 x half> %326 to <2 x float>, !dbg !34
  %328 = insertelement <2 x half> poison, half %280, i64 0, !dbg !44
  %329 = insertelement <2 x half> %328, half %281, i64 1, !dbg !44
  %330 = fpext <2 x half> %329 to <2 x float>, !dbg !44
  %331 = insertelement <2 x float> poison, float %303, i64 0, !dbg !41
  %332 = shufflevector <2 x float> %331, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %333 = fadd <2 x float> %332, %327, !dbg !41
  %334 = fmul <2 x float> %330, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %335 = fadd <2 x float> %334, %333, !dbg !46
  %336 = fadd <2 x float> %335, %324, !dbg !47
  %337 = fptrunc <2 x float> %336 to <2 x half>, !dbg !40
  %338 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !27
  %339 = insertelement <2 x i32> %338, i32 %extelt.offset1, i64 1, !dbg !27
  %340 = trunc <2 x i32> %339 to <2 x i16>, !dbg !27
  %341 = bitcast <2 x i16> %340 to <2 x half>, !dbg !27
  %342 = fpext <2 x half> %341 to <2 x float>, !dbg !43
  %343 = insertelement <2 x half> poison, half %190, i64 0, !dbg !34
  %344 = insertelement <2 x half> %343, half %195, i64 1, !dbg !34
  %345 = fpext <2 x half> %344 to <2 x float>, !dbg !34
  %346 = insertelement <2 x half> poison, half %282, i64 0, !dbg !44
  %347 = insertelement <2 x half> %346, half %283, i64 1, !dbg !44
  %348 = fpext <2 x half> %347 to <2 x float>, !dbg !44
  %349 = fadd <2 x float> %332, %345, !dbg !41
  %350 = fmul <2 x float> %348, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %351 = fadd <2 x float> %350, %349, !dbg !46
  %352 = fadd <2 x float> %351, %342, !dbg !47
  %353 = fptrunc <2 x float> %352 to <2 x half>, !dbg !40
  %354 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !27
  %355 = insertelement <2 x i32> %354, i32 %extelt.offset2, i64 1, !dbg !27
  %356 = trunc <2 x i32> %355 to <2 x i16>, !dbg !27
  %357 = bitcast <2 x i16> %356 to <2 x half>, !dbg !27
  %358 = fpext <2 x half> %357 to <2 x float>, !dbg !43
  %359 = insertelement <2 x half> poison, half %200, i64 0, !dbg !34
  %360 = insertelement <2 x half> %359, half %204, i64 1, !dbg !34
  %361 = fpext <2 x half> %360 to <2 x float>, !dbg !34
  %362 = insertelement <2 x half> poison, half %284, i64 0, !dbg !44
  %363 = insertelement <2 x half> %362, half %285, i64 1, !dbg !44
  %364 = fpext <2 x half> %363 to <2 x float>, !dbg !44
  %365 = insertelement <2 x float> poison, float %307, i64 0, !dbg !41
  %366 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %367 = fadd <2 x float> %366, %361, !dbg !41
  %368 = fmul <2 x float> %364, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %369 = fadd <2 x float> %368, %367, !dbg !46
  %370 = fadd <2 x float> %369, %358, !dbg !47
  %371 = fptrunc <2 x float> %370 to <2 x half>, !dbg !40
  %372 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !27
  %373 = insertelement <2 x i32> %372, i32 %extelt.offset3, i64 1, !dbg !27
  %374 = trunc <2 x i32> %373 to <2 x i16>, !dbg !27
  %375 = bitcast <2 x i16> %374 to <2 x half>, !dbg !27
  %376 = fpext <2 x half> %375 to <2 x float>, !dbg !43
  %377 = insertelement <2 x half> poison, half %208, i64 0, !dbg !34
  %378 = insertelement <2 x half> %377, half %212, i64 1, !dbg !34
  %379 = fpext <2 x half> %378 to <2 x float>, !dbg !34
  %380 = insertelement <2 x half> poison, half %286, i64 0, !dbg !44
  %381 = insertelement <2 x half> %380, half %287, i64 1, !dbg !44
  %382 = fpext <2 x half> %381 to <2 x float>, !dbg !44
  %383 = fadd <2 x float> %366, %379, !dbg !41
  %384 = fmul <2 x float> %382, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %385 = fadd <2 x float> %384, %383, !dbg !46
  %386 = fadd <2 x float> %385, %376, !dbg !47
  %387 = fptrunc <2 x float> %386 to <2 x half>, !dbg !40
  %388 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !27
  %389 = insertelement <2 x i32> %388, i32 %extelt.offset4, i64 1, !dbg !27
  %390 = trunc <2 x i32> %389 to <2 x i16>, !dbg !27
  %391 = bitcast <2 x i16> %390 to <2 x half>, !dbg !27
  %392 = fpext <2 x half> %391 to <2 x float>, !dbg !43
  %393 = insertelement <2 x half> poison, half %217, i64 0, !dbg !34
  %394 = insertelement <2 x half> %393, half %221, i64 1, !dbg !34
  %395 = fpext <2 x half> %394 to <2 x float>, !dbg !34
  %396 = insertelement <2 x half> poison, half %288, i64 0, !dbg !44
  %397 = insertelement <2 x half> %396, half %289, i64 1, !dbg !44
  %398 = fpext <2 x half> %397 to <2 x float>, !dbg !44
  %399 = insertelement <2 x float> poison, float %311, i64 0, !dbg !41
  %400 = shufflevector <2 x float> %399, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %401 = fadd <2 x float> %400, %395, !dbg !41
  %402 = fmul <2 x float> %398, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %403 = fadd <2 x float> %402, %401, !dbg !46
  %404 = fadd <2 x float> %403, %392, !dbg !47
  %405 = fptrunc <2 x float> %404 to <2 x half>, !dbg !40
  %406 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !27
  %407 = insertelement <2 x i32> %406, i32 %extelt.offset5, i64 1, !dbg !27
  %408 = trunc <2 x i32> %407 to <2 x i16>, !dbg !27
  %409 = bitcast <2 x i16> %408 to <2 x half>, !dbg !27
  %410 = fpext <2 x half> %409 to <2 x float>, !dbg !43
  %411 = insertelement <2 x half> poison, half %225, i64 0, !dbg !34
  %412 = insertelement <2 x half> %411, half %229, i64 1, !dbg !34
  %413 = fpext <2 x half> %412 to <2 x float>, !dbg !34
  %414 = insertelement <2 x half> poison, half %290, i64 0, !dbg !44
  %415 = insertelement <2 x half> %414, half %291, i64 1, !dbg !44
  %416 = fpext <2 x half> %415 to <2 x float>, !dbg !44
  %417 = fadd <2 x float> %400, %413, !dbg !41
  %418 = fmul <2 x float> %416, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %419 = fadd <2 x float> %418, %417, !dbg !46
  %420 = fadd <2 x float> %419, %410, !dbg !47
  %421 = fptrunc <2 x float> %420 to <2 x half>, !dbg !40
  %422 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !27
  %423 = insertelement <2 x i32> %422, i32 %extelt.offset6, i64 1, !dbg !27
  %424 = trunc <2 x i32> %423 to <2 x i16>, !dbg !27
  %425 = bitcast <2 x i16> %424 to <2 x half>, !dbg !27
  %426 = fpext <2 x half> %425 to <2 x float>, !dbg !43
  %427 = insertelement <2 x half> poison, half %234, i64 0, !dbg !34
  %428 = insertelement <2 x half> %427, half %238, i64 1, !dbg !34
  %429 = fpext <2 x half> %428 to <2 x float>, !dbg !34
  %430 = insertelement <2 x half> poison, half %292, i64 0, !dbg !44
  %431 = insertelement <2 x half> %430, half %293, i64 1, !dbg !44
  %432 = fpext <2 x half> %431 to <2 x float>, !dbg !44
  %433 = insertelement <2 x float> poison, float %315, i64 0, !dbg !41
  %434 = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %435 = fadd <2 x float> %434, %429, !dbg !41
  %436 = fmul <2 x float> %432, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %437 = fadd <2 x float> %436, %435, !dbg !46
  %438 = fadd <2 x float> %437, %426, !dbg !47
  %439 = fptrunc <2 x float> %438 to <2 x half>, !dbg !40
  %440 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !27
  %441 = insertelement <2 x i32> %440, i32 %extelt.offset7, i64 1, !dbg !27
  %442 = trunc <2 x i32> %441 to <2 x i16>, !dbg !27
  %443 = bitcast <2 x i16> %442 to <2 x half>, !dbg !27
  %444 = fpext <2 x half> %443 to <2 x float>, !dbg !43
  %445 = insertelement <2 x half> poison, half %242, i64 0, !dbg !34
  %446 = insertelement <2 x half> %445, half %246, i64 1, !dbg !34
  %447 = fpext <2 x half> %446 to <2 x float>, !dbg !34
  %448 = insertelement <2 x half> poison, half %294, i64 0, !dbg !44
  %449 = insertelement <2 x half> %448, half %295, i64 1, !dbg !44
  %450 = fpext <2 x half> %449 to <2 x float>, !dbg !44
  %451 = fadd <2 x float> %434, %447, !dbg !41
  %452 = fmul <2 x float> %450, <float 1.250000e-01, float 1.250000e-01>, !dbg !45
  %453 = fadd <2 x float> %452, %451, !dbg !46
  %454 = fadd <2 x float> %453, %444, !dbg !47
  %455 = fptrunc <2 x float> %454 to <2 x half>, !dbg !40
  %456 = bitcast <2 x half> %337 to i32, !dbg !40
  %457 = bitcast <2 x half> %353 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %456, i32 %457, ptr addrspace(1) %316, i1 %66) #2, !dbg !40
  %458 = bitcast <2 x half> %371 to i32, !dbg !40
  %459 = bitcast <2 x half> %387 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %458, i32 %459, ptr addrspace(1) %317, i1 %67) #2, !dbg !40
  %460 = bitcast <2 x half> %405 to i32, !dbg !40
  %461 = bitcast <2 x half> %421 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %460, i32 %461, ptr addrspace(1) %318, i1 %68) #2, !dbg !40
  %462 = bitcast <2 x half> %439 to i32, !dbg !40
  %463 = bitcast <2 x half> %455 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %462, i32 %463, ptr addrspace(1) %319, i1 %69) #2, !dbg !40
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvk77foil2cmgtxf3tky32mtvmynvcpxcyxs7fk4towlrhqtdrni.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/vk")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 31, column: 18, scope: !5)
!23 = !DILocation(line: 33, column: 41, scope: !5)
!24 = !DILocation(line: 33, column: 36, scope: !5)
!25 = !DILocation(line: 33, column: 30, scope: !5)
!26 = !DILocation(line: 33, column: 55, scope: !5)
!27 = !DILocation(line: 33, column: 47, scope: !5)
!28 = !DILocation(line: 34, column: 40, scope: !5)
!29 = !DILocation(line: 34, column: 54, scope: !5)
!30 = !DILocation(line: 34, column: 36, scope: !5)
!31 = !DILocation(line: 34, column: 47, scope: !5)
!32 = !DILocation(line: 34, column: 30, scope: !5)
!33 = !DILocation(line: 34, column: 60, scope: !5)
!34 = !DILocation(line: 34, column: 108, scope: !5)
!35 = !DILocation(line: 35, column: 30, scope: !5)
!36 = !DILocation(line: 35, column: 35, scope: !5)
!37 = !DILocation(line: 35, column: 75, scope: !5)
!38 = !DILocation(line: 36, column: 30, scope: !5)
!39 = !DILocation(line: 36, column: 60, scope: !5)
!40 = !DILocation(line: 44, column: 49, scope: !5)
!41 = !DILocation(line: 37, column: 18, scope: !5)
!42 = !DILocation(line: 44, column: 25, scope: !5)
!43 = !DILocation(line: 33, column: 95, scope: !5)
!44 = !DILocation(line: 36, column: 108, scope: !5)
!45 = !DILocation(line: 39, column: 18, scope: !5)
!46 = !DILocation(line: 40, column: 18, scope: !5)
!47 = !DILocation(line: 41, column: 18, scope: !5)
!48 = !DILocation(line: 44, column: 4, scope: !5)
