; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d56789de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) local_unnamed_addr !dbg !5 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %12 = and i32 %11, 63, !dbg !8
  %13 = lshr i32 %11, 6, !dbg !8
  %14 = and i32 %13, 3, !dbg !8
  %15 = or i32 %14, 4, !dbg !8
  %16 = or i32 %14, 8, !dbg !8
  %17 = or i32 %14, 12, !dbg !8
  %18 = or i32 %14, 16, !dbg !8
  %19 = or i32 %14, 20, !dbg !8
  %20 = or i32 %14, 24, !dbg !8
  %21 = or i32 %14, 28, !dbg !8
  %22 = or i32 %14, 32, !dbg !8
  %23 = or i32 %14, 36, !dbg !8
  %24 = or i32 %14, 40, !dbg !8
  %25 = or i32 %14, 44, !dbg !8
  %26 = or i32 %14, 48, !dbg !8
  %27 = or i32 %14, 52, !dbg !8
  %28 = or i32 %14, 56, !dbg !8
  %29 = or i32 %14, 60, !dbg !8
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %31 = shl i32 %30, 6, !dbg !10
  %32 = or i32 %31, %12, !dbg !11
  %33 = or i32 %31, %14, !dbg !11
  %34 = or i32 %31, %15, !dbg !11
  %35 = or i32 %31, %16, !dbg !11
  %36 = or i32 %31, %17, !dbg !11
  %37 = or i32 %31, %18, !dbg !11
  %38 = or i32 %31, %19, !dbg !11
  %39 = or i32 %31, %20, !dbg !11
  %40 = or i32 %31, %21, !dbg !11
  %41 = or i32 %31, %22, !dbg !11
  %42 = or i32 %31, %23, !dbg !11
  %43 = or i32 %31, %24, !dbg !11
  %44 = or i32 %31, %25, !dbg !11
  %45 = or i32 %31, %26, !dbg !11
  %46 = or i32 %31, %27, !dbg !11
  %47 = or i32 %31, %28, !dbg !11
  %48 = or i32 %31, %29, !dbg !11
  %49 = icmp slt i32 %32, %8, !dbg !12
  %50 = icmp slt i32 %33, %8, !dbg !12
  %51 = icmp slt i32 %34, %8, !dbg !12
  %52 = icmp slt i32 %35, %8, !dbg !12
  %53 = icmp slt i32 %36, %8, !dbg !12
  %54 = icmp slt i32 %37, %8, !dbg !12
  %55 = icmp slt i32 %38, %8, !dbg !12
  %56 = icmp slt i32 %39, %8, !dbg !12
  %57 = icmp slt i32 %40, %8, !dbg !12
  %58 = icmp slt i32 %41, %8, !dbg !12
  %59 = icmp slt i32 %42, %8, !dbg !12
  %60 = icmp slt i32 %43, %8, !dbg !12
  %61 = icmp slt i32 %44, %8, !dbg !12
  %62 = icmp slt i32 %45, %8, !dbg !12
  %63 = icmp slt i32 %46, %8, !dbg !12
  %64 = icmp slt i32 %47, %8, !dbg !12
  %65 = icmp slt i32 %48, %8, !dbg !12
  %.frozen = freeze i32 %32
  %.frozen333 = freeze i32 %5
  %66 = sdiv i32 %.frozen, %.frozen333, !dbg !13
  %67 = mul i32 %66, %.frozen333
  %.decomposed = sub i32 %.frozen, %67
  %68 = mul i32 %7, %6, !dbg !14
  %69 = mul i32 %68, 320, !dbg !15
  %70 = mul i32 %69, %66, !dbg !16
  %71 = add i32 %70, %.decomposed
  %72 = mul nuw nsw i32 %12, 65
  %73 = add nuw nsw i32 %72, %14
  %74 = zext nneg i32 %73 to i64
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74
  %76 = add nuw nsw i32 %15, %72
  %77 = zext nneg i32 %76 to i64
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i64 %77
  %79 = add nuw nsw i32 %16, %72
  %80 = zext nneg i32 %79 to i64
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i64 %80
  %82 = add nuw nsw i32 %17, %72
  %83 = zext nneg i32 %82 to i64
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i64 %83
  %85 = add nuw nsw i32 %18, %72
  %86 = zext nneg i32 %85 to i64
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i64 %86
  %88 = add nuw nsw i32 %19, %72
  %89 = zext nneg i32 %88 to i64
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i64 %89
  %91 = add nuw nsw i32 %20, %72
  %92 = zext nneg i32 %91 to i64
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92
  %94 = add nuw nsw i32 %21, %72
  %95 = zext nneg i32 %94 to i64
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95
  %97 = add nuw nsw i32 %22, %72
  %98 = zext nneg i32 %97 to i64
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i64 %98
  %100 = add nuw nsw i32 %23, %72
  %101 = zext nneg i32 %100 to i64
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i64 %101
  %103 = add nuw nsw i32 %24, %72
  %104 = zext nneg i32 %103 to i64
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104
  %106 = add nuw nsw i32 %25, %72
  %107 = zext nneg i32 %106 to i64
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i64 %107
  %109 = add nuw nsw i32 %26, %72
  %110 = zext nneg i32 %109 to i64
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i64 %110
  %112 = add nuw nsw i32 %27, %72
  %113 = zext nneg i32 %112 to i64
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i64 %113
  %115 = add nuw nsw i32 %28, %72
  %116 = zext nneg i32 %115 to i64
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %116
  %118 = add nuw nsw i32 %29, %72
  %119 = zext nneg i32 %118 to i64
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i64 %119
  %121 = mul nuw nsw i32 %14, 65
  %122 = add nuw nsw i32 %121, %12
  %123 = zext nneg i32 %122 to i64
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i64 %123
  %125 = mul nuw nsw i32 %15, 65
  %126 = add nuw nsw i32 %125, %12
  %127 = zext nneg i32 %126 to i64
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127
  %129 = mul nuw nsw i32 %16, 65
  %130 = add nuw nsw i32 %129, %12
  %131 = zext nneg i32 %130 to i64
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131
  %133 = mul nuw nsw i32 %17, 65
  %134 = add nuw nsw i32 %133, %12
  %135 = zext nneg i32 %134 to i64
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135
  %137 = mul nuw nsw i32 %18, 65
  %138 = add nuw nsw i32 %137, %12
  %139 = zext nneg i32 %138 to i64
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %139
  %141 = mul nuw nsw i32 %19, 65
  %142 = add nuw nsw i32 %141, %12
  %143 = zext nneg i32 %142 to i64
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i64 %143
  %145 = mul nuw nsw i32 %20, 65
  %146 = add nuw nsw i32 %145, %12
  %147 = zext nneg i32 %146 to i64
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i64 %147
  %149 = mul nuw nsw i32 %21, 65
  %150 = add nuw nsw i32 %149, %12
  %151 = zext nneg i32 %150 to i64
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %151
  %153 = mul nuw nsw i32 %22, 65
  %154 = add nuw nsw i32 %153, %12
  %155 = zext nneg i32 %154 to i64
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i64 %155
  %157 = mul nuw nsw i32 %23, 65
  %158 = add nuw nsw i32 %157, %12
  %159 = zext nneg i32 %158 to i64
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159
  %161 = mul nuw nsw i32 %24, 65
  %162 = add nuw nsw i32 %161, %12
  %163 = zext nneg i32 %162 to i64
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i64 %163
  %165 = mul nuw nsw i32 %25, 65
  %166 = add nuw nsw i32 %165, %12
  %167 = zext nneg i32 %166 to i64
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i64 %167
  %169 = mul nuw nsw i32 %26, 65
  %170 = add nuw nsw i32 %169, %12
  %171 = zext nneg i32 %170 to i64
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i64 %171
  %173 = mul nuw nsw i32 %27, 65
  %174 = add nuw nsw i32 %173, %12
  %175 = zext nneg i32 %174 to i64
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i64 %175
  %177 = mul nuw nsw i32 %28, 65
  %178 = add nuw nsw i32 %177, %12
  %179 = zext nneg i32 %178 to i64
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179
  %181 = mul nuw nsw i32 %29, 65
  %182 = add nuw nsw i32 %181, %12
  %183 = zext nneg i32 %182 to i64
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i64 %183
  %185 = insertelement <16 x i1> poison, i1 %49, i64 0, !dbg !17
  %186 = shufflevector <16 x i1> %185, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !17
  br label %187, !dbg !18

187:                                              ; preds = %10, %._crit_edge
  %188 = phi float [ 0.000000e+00, %10 ], [ %684, %._crit_edge ]
  %189 = phi float [ 0.000000e+00, %10 ], [ %685, %._crit_edge ]
  %190 = phi float [ 0.000000e+00, %10 ], [ %686, %._crit_edge ]
  %191 = phi float [ 0.000000e+00, %10 ], [ %687, %._crit_edge ]
  %192 = phi float [ 0.000000e+00, %10 ], [ %688, %._crit_edge ]
  %193 = phi float [ 0.000000e+00, %10 ], [ %689, %._crit_edge ]
  %194 = phi float [ 0.000000e+00, %10 ], [ %690, %._crit_edge ]
  %195 = phi float [ 0.000000e+00, %10 ], [ %691, %._crit_edge ]
  %196 = phi float [ 0.000000e+00, %10 ], [ %692, %._crit_edge ]
  %197 = phi float [ 0.000000e+00, %10 ], [ %693, %._crit_edge ]
  %198 = phi float [ 0.000000e+00, %10 ], [ %694, %._crit_edge ]
  %199 = phi float [ 0.000000e+00, %10 ], [ %695, %._crit_edge ]
  %200 = phi float [ 0.000000e+00, %10 ], [ %696, %._crit_edge ]
  %201 = phi float [ 0.000000e+00, %10 ], [ %697, %._crit_edge ]
  %202 = phi float [ 0.000000e+00, %10 ], [ %698, %._crit_edge ]
  %203 = phi float [ 0.000000e+00, %10 ], [ %699, %._crit_edge ]
  %204 = phi float [ 0.000000e+00, %10 ], [ %668, %._crit_edge ]
  %205 = phi float [ 0.000000e+00, %10 ], [ %669, %._crit_edge ]
  %206 = phi float [ 0.000000e+00, %10 ], [ %670, %._crit_edge ]
  %207 = phi float [ 0.000000e+00, %10 ], [ %671, %._crit_edge ]
  %208 = phi float [ 0.000000e+00, %10 ], [ %672, %._crit_edge ]
  %209 = phi float [ 0.000000e+00, %10 ], [ %673, %._crit_edge ]
  %210 = phi float [ 0.000000e+00, %10 ], [ %674, %._crit_edge ]
  %211 = phi float [ 0.000000e+00, %10 ], [ %675, %._crit_edge ]
  %212 = phi float [ 0.000000e+00, %10 ], [ %676, %._crit_edge ]
  %213 = phi float [ 0.000000e+00, %10 ], [ %677, %._crit_edge ]
  %214 = phi float [ 0.000000e+00, %10 ], [ %678, %._crit_edge ]
  %215 = phi float [ 0.000000e+00, %10 ], [ %679, %._crit_edge ]
  %216 = phi float [ 0.000000e+00, %10 ], [ %680, %._crit_edge ]
  %217 = phi float [ 0.000000e+00, %10 ], [ %681, %._crit_edge ]
  %218 = phi float [ 0.000000e+00, %10 ], [ %682, %._crit_edge ]
  %219 = phi float [ 0.000000e+00, %10 ], [ %683, %._crit_edge ]
  %220 = phi i32 [ 0, %10 ], [ %700, %._crit_edge ]
  %221 = phi <16 x float> [ zeroinitializer, %10 ], [ %667, %._crit_edge ]
  %222 = or i32 %220, %14, !dbg !19
  %223 = or i32 %220, %15, !dbg !19
  %224 = or i32 %220, %16, !dbg !19
  %225 = or i32 %220, %17, !dbg !19
  %226 = or i32 %220, %18, !dbg !19
  %227 = or i32 %220, %19, !dbg !19
  %228 = or i32 %220, %20, !dbg !19
  %229 = or i32 %220, %21, !dbg !19
  %230 = or i32 %220, %22, !dbg !19
  %231 = or i32 %220, %23, !dbg !19
  %232 = or i32 %220, %24, !dbg !19
  %233 = or i32 %220, %25, !dbg !19
  %234 = or i32 %220, %26, !dbg !19
  %235 = or i32 %220, %27, !dbg !19
  %236 = or i32 %220, %28, !dbg !19
  %237 = or i32 %220, %29, !dbg !19
  %238 = mul i32 %222, %68, !dbg !20
  %239 = mul i32 %223, %68, !dbg !20
  %240 = mul i32 %224, %68, !dbg !20
  %241 = mul i32 %225, %68, !dbg !20
  %242 = mul i32 %226, %68, !dbg !20
  %243 = mul i32 %227, %68, !dbg !20
  %244 = mul i32 %228, %68, !dbg !20
  %245 = mul i32 %229, %68, !dbg !20
  %246 = mul i32 %230, %68, !dbg !20
  %247 = mul i32 %231, %68, !dbg !20
  %248 = mul i32 %232, %68, !dbg !20
  %249 = mul i32 %233, %68, !dbg !20
  %250 = mul i32 %234, %68, !dbg !20
  %251 = mul i32 %235, %68, !dbg !20
  %252 = mul i32 %236, %68, !dbg !20
  %253 = mul i32 %237, %68, !dbg !20
  %254 = add i32 %71, %238, !dbg !21
  %255 = add i32 %71, %239, !dbg !21
  %256 = add i32 %71, %240, !dbg !21
  %257 = add i32 %71, %241, !dbg !21
  %258 = add i32 %71, %242, !dbg !21
  %259 = add i32 %71, %243, !dbg !21
  %260 = add i32 %71, %244, !dbg !21
  %261 = add i32 %71, %245, !dbg !21
  %262 = add i32 %71, %246, !dbg !21
  %263 = add i32 %71, %247, !dbg !21
  %264 = add i32 %71, %248, !dbg !21
  %265 = add i32 %71, %249, !dbg !21
  %266 = add i32 %71, %250, !dbg !21
  %267 = add i32 %71, %251, !dbg !21
  %268 = add i32 %71, %252, !dbg !21
  %269 = add i32 %71, %253, !dbg !21
  %270 = sext i32 %254 to i64, !dbg !22
  %271 = getelementptr half, ptr addrspace(1) %0, i64 %270, !dbg !22
  %272 = sext i32 %255 to i64, !dbg !22
  %273 = getelementptr half, ptr addrspace(1) %0, i64 %272, !dbg !22
  %274 = sext i32 %256 to i64, !dbg !22
  %275 = getelementptr half, ptr addrspace(1) %0, i64 %274, !dbg !22
  %276 = sext i32 %257 to i64, !dbg !22
  %277 = getelementptr half, ptr addrspace(1) %0, i64 %276, !dbg !22
  %278 = sext i32 %258 to i64, !dbg !22
  %279 = getelementptr half, ptr addrspace(1) %0, i64 %278, !dbg !22
  %280 = sext i32 %259 to i64, !dbg !22
  %281 = getelementptr half, ptr addrspace(1) %0, i64 %280, !dbg !22
  %282 = sext i32 %260 to i64, !dbg !22
  %283 = getelementptr half, ptr addrspace(1) %0, i64 %282, !dbg !22
  %284 = sext i32 %261 to i64, !dbg !22
  %285 = getelementptr half, ptr addrspace(1) %0, i64 %284, !dbg !22
  %286 = sext i32 %262 to i64, !dbg !22
  %287 = getelementptr half, ptr addrspace(1) %0, i64 %286, !dbg !22
  %288 = sext i32 %263 to i64, !dbg !22
  %289 = getelementptr half, ptr addrspace(1) %0, i64 %288, !dbg !22
  %290 = sext i32 %264 to i64, !dbg !22
  %291 = getelementptr half, ptr addrspace(1) %0, i64 %290, !dbg !22
  %292 = sext i32 %265 to i64, !dbg !22
  %293 = getelementptr half, ptr addrspace(1) %0, i64 %292, !dbg !22
  %294 = sext i32 %266 to i64, !dbg !22
  %295 = getelementptr half, ptr addrspace(1) %0, i64 %294, !dbg !22
  %296 = sext i32 %267 to i64, !dbg !22
  %297 = getelementptr half, ptr addrspace(1) %0, i64 %296, !dbg !22
  %298 = sext i32 %268 to i64, !dbg !22
  %299 = getelementptr half, ptr addrspace(1) %0, i64 %298, !dbg !22
  %300 = sext i32 %269 to i64, !dbg !22
  %301 = getelementptr half, ptr addrspace(1) %0, i64 %300, !dbg !22
  %302 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %271, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %303 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %273, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %304 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %275, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %305 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %277, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %306 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %279, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %307 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %281, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %308 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %283, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %309 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %285, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %310 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %287, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %311 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %289, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %312 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %291, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %313 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %293, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %314 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %295, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %315 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %297, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %316 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %299, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %317 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %301, i1 %49, i16 0, i1 %49) #3, !dbg !23
  %318 = zext nneg i32 %222 to i64, !dbg !24
  %319 = getelementptr half, ptr addrspace(1) %1, i64 %318, !dbg !24
  %320 = zext nneg i32 %223 to i64, !dbg !24
  %321 = getelementptr half, ptr addrspace(1) %1, i64 %320, !dbg !24
  %322 = zext nneg i32 %224 to i64, !dbg !24
  %323 = getelementptr half, ptr addrspace(1) %1, i64 %322, !dbg !24
  %324 = zext nneg i32 %225 to i64, !dbg !24
  %325 = getelementptr half, ptr addrspace(1) %1, i64 %324, !dbg !24
  %326 = zext nneg i32 %226 to i64, !dbg !24
  %327 = getelementptr half, ptr addrspace(1) %1, i64 %326, !dbg !24
  %328 = zext nneg i32 %227 to i64, !dbg !24
  %329 = getelementptr half, ptr addrspace(1) %1, i64 %328, !dbg !24
  %330 = zext nneg i32 %228 to i64, !dbg !24
  %331 = getelementptr half, ptr addrspace(1) %1, i64 %330, !dbg !24
  %332 = zext nneg i32 %229 to i64, !dbg !24
  %333 = getelementptr half, ptr addrspace(1) %1, i64 %332, !dbg !24
  %334 = zext nneg i32 %230 to i64, !dbg !24
  %335 = getelementptr half, ptr addrspace(1) %1, i64 %334, !dbg !24
  %336 = zext nneg i32 %231 to i64, !dbg !24
  %337 = getelementptr half, ptr addrspace(1) %1, i64 %336, !dbg !24
  %338 = zext nneg i32 %232 to i64, !dbg !24
  %339 = getelementptr half, ptr addrspace(1) %1, i64 %338, !dbg !24
  %340 = zext nneg i32 %233 to i64, !dbg !24
  %341 = getelementptr half, ptr addrspace(1) %1, i64 %340, !dbg !24
  %342 = zext nneg i32 %234 to i64, !dbg !24
  %343 = getelementptr half, ptr addrspace(1) %1, i64 %342, !dbg !24
  %344 = zext nneg i32 %235 to i64, !dbg !24
  %345 = getelementptr half, ptr addrspace(1) %1, i64 %344, !dbg !24
  %346 = zext nneg i32 %236 to i64, !dbg !24
  %347 = getelementptr half, ptr addrspace(1) %1, i64 %346, !dbg !24
  %348 = zext nneg i32 %237 to i64, !dbg !24
  %349 = getelementptr half, ptr addrspace(1) %1, i64 %348, !dbg !24
  %350 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %319, i1 true, i16 0, i1 true) #3, !dbg !25
  %351 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %321, i1 true, i16 0, i1 true) #3, !dbg !25
  %352 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %323, i1 true, i16 0, i1 true) #3, !dbg !25
  %353 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %325, i1 true, i16 0, i1 true) #3, !dbg !25
  %354 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %327, i1 true, i16 0, i1 true) #3, !dbg !25
  %355 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %329, i1 true, i16 0, i1 true) #3, !dbg !25
  %356 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %331, i1 true, i16 0, i1 true) #3, !dbg !25
  %357 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %333, i1 true, i16 0, i1 true) #3, !dbg !25
  %358 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %335, i1 true, i16 0, i1 true) #3, !dbg !25
  %359 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %337, i1 true, i16 0, i1 true) #3, !dbg !25
  %360 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %339, i1 true, i16 0, i1 true) #3, !dbg !25
  %361 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %341, i1 true, i16 0, i1 true) #3, !dbg !25
  %362 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %343, i1 true, i16 0, i1 true) #3, !dbg !25
  %363 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %345, i1 true, i16 0, i1 true) #3, !dbg !25
  %364 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %347, i1 true, i16 0, i1 true) #3, !dbg !25
  %365 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %349, i1 true, i16 0, i1 true) #3, !dbg !25
  %366 = getelementptr half, ptr addrspace(1) %2, i64 %270, !dbg !26
  %367 = getelementptr half, ptr addrspace(1) %2, i64 %272, !dbg !26
  %368 = getelementptr half, ptr addrspace(1) %2, i64 %274, !dbg !26
  %369 = getelementptr half, ptr addrspace(1) %2, i64 %276, !dbg !26
  %370 = getelementptr half, ptr addrspace(1) %2, i64 %278, !dbg !26
  %371 = getelementptr half, ptr addrspace(1) %2, i64 %280, !dbg !26
  %372 = getelementptr half, ptr addrspace(1) %2, i64 %282, !dbg !26
  %373 = getelementptr half, ptr addrspace(1) %2, i64 %284, !dbg !26
  %374 = getelementptr half, ptr addrspace(1) %2, i64 %286, !dbg !26
  %375 = getelementptr half, ptr addrspace(1) %2, i64 %288, !dbg !26
  %376 = getelementptr half, ptr addrspace(1) %2, i64 %290, !dbg !26
  %377 = getelementptr half, ptr addrspace(1) %2, i64 %292, !dbg !26
  %378 = getelementptr half, ptr addrspace(1) %2, i64 %294, !dbg !26
  %379 = getelementptr half, ptr addrspace(1) %2, i64 %296, !dbg !26
  %380 = getelementptr half, ptr addrspace(1) %2, i64 %298, !dbg !26
  %381 = getelementptr half, ptr addrspace(1) %2, i64 %300, !dbg !26
  %382 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %366, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %383 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %367, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %384 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %368, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %385 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %369, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %386 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %370, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %387 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %371, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %388 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %372, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %389 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %373, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %390 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %374, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %391 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %375, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %392 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %376, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %393 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %377, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %394 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %378, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %395 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %379, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %396 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %380, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %397 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %381, i1 %49, i16 0, i1 %49) #3, !dbg !27
  %398 = insertelement <16 x i16> poison, i16 %302, i64 0, !dbg !23
  %399 = insertelement <16 x i16> %398, i16 %303, i64 1, !dbg !23
  %400 = insertelement <16 x i16> %399, i16 %304, i64 2, !dbg !23
  %401 = insertelement <16 x i16> %400, i16 %305, i64 3, !dbg !23
  %402 = insertelement <16 x i16> %401, i16 %306, i64 4, !dbg !23
  %403 = insertelement <16 x i16> %402, i16 %307, i64 5, !dbg !23
  %404 = insertelement <16 x i16> %403, i16 %308, i64 6, !dbg !23
  %405 = insertelement <16 x i16> %404, i16 %309, i64 7, !dbg !23
  %406 = insertelement <16 x i16> %405, i16 %310, i64 8, !dbg !23
  %407 = insertelement <16 x i16> %406, i16 %311, i64 9, !dbg !23
  %408 = insertelement <16 x i16> %407, i16 %312, i64 10, !dbg !23
  %409 = insertelement <16 x i16> %408, i16 %313, i64 11, !dbg !23
  %410 = insertelement <16 x i16> %409, i16 %314, i64 12, !dbg !23
  %411 = insertelement <16 x i16> %410, i16 %315, i64 13, !dbg !23
  %412 = insertelement <16 x i16> %411, i16 %316, i64 14, !dbg !23
  %413 = insertelement <16 x i16> %412, i16 %317, i64 15, !dbg !23
  %414 = bitcast <16 x i16> %413 to <16 x half>, !dbg !23
  %415 = fpext <16 x half> %414 to <16 x float>, !dbg !28
  %416 = insertelement <16 x i16> poison, i16 %350, i64 0, !dbg !25
  %417 = insertelement <16 x i16> %416, i16 %351, i64 1, !dbg !25
  %418 = insertelement <16 x i16> %417, i16 %352, i64 2, !dbg !25
  %419 = insertelement <16 x i16> %418, i16 %353, i64 3, !dbg !25
  %420 = insertelement <16 x i16> %419, i16 %354, i64 4, !dbg !25
  %421 = insertelement <16 x i16> %420, i16 %355, i64 5, !dbg !25
  %422 = insertelement <16 x i16> %421, i16 %356, i64 6, !dbg !25
  %423 = insertelement <16 x i16> %422, i16 %357, i64 7, !dbg !25
  %424 = insertelement <16 x i16> %423, i16 %358, i64 8, !dbg !25
  %425 = insertelement <16 x i16> %424, i16 %359, i64 9, !dbg !25
  %426 = insertelement <16 x i16> %425, i16 %360, i64 10, !dbg !25
  %427 = insertelement <16 x i16> %426, i16 %361, i64 11, !dbg !25
  %428 = insertelement <16 x i16> %427, i16 %362, i64 12, !dbg !25
  %429 = insertelement <16 x i16> %428, i16 %363, i64 13, !dbg !25
  %430 = insertelement <16 x i16> %429, i16 %364, i64 14, !dbg !25
  %431 = insertelement <16 x i16> %430, i16 %365, i64 15, !dbg !25
  %432 = bitcast <16 x i16> %431 to <16 x half>, !dbg !25
  %433 = fpext <16 x half> %432 to <16 x float>, !dbg !29
  %434 = insertelement <16 x i16> poison, i16 %382, i64 0, !dbg !27
  %435 = insertelement <16 x i16> %434, i16 %383, i64 1, !dbg !27
  %436 = insertelement <16 x i16> %435, i16 %384, i64 2, !dbg !27
  %437 = insertelement <16 x i16> %436, i16 %385, i64 3, !dbg !27
  %438 = insertelement <16 x i16> %437, i16 %386, i64 4, !dbg !27
  %439 = insertelement <16 x i16> %438, i16 %387, i64 5, !dbg !27
  %440 = insertelement <16 x i16> %439, i16 %388, i64 6, !dbg !27
  %441 = insertelement <16 x i16> %440, i16 %389, i64 7, !dbg !27
  %442 = insertelement <16 x i16> %441, i16 %390, i64 8, !dbg !27
  %443 = insertelement <16 x i16> %442, i16 %391, i64 9, !dbg !27
  %444 = insertelement <16 x i16> %443, i16 %392, i64 10, !dbg !27
  %445 = insertelement <16 x i16> %444, i16 %393, i64 11, !dbg !27
  %446 = insertelement <16 x i16> %445, i16 %394, i64 12, !dbg !27
  %447 = insertelement <16 x i16> %446, i16 %395, i64 13, !dbg !27
  %448 = insertelement <16 x i16> %447, i16 %396, i64 14, !dbg !27
  %449 = insertelement <16 x i16> %448, i16 %397, i64 15, !dbg !27
  %450 = bitcast <16 x i16> %449 to <16 x half>, !dbg !27
  %451 = fpext <16 x half> %450 to <16 x float>, !dbg !30
  %452 = fadd <16 x float> %415, %433, !dbg !31
  %453 = fmul <16 x float> %451, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !32
  %454 = fadd <16 x float> %452, %453, !dbg !33
  %455 = icmp eq i32 %220, 0, !dbg !34
  br i1 %455, label %._crit_edge, label %456, !dbg !35

456:                                              ; preds = %187
  %457 = fsub <16 x float> %454, %221, !dbg !39
  %458 = extractelement <16 x float> %457, i64 0, !dbg !39
  %459 = fsub <16 x float> %454, %221, !dbg !39
  %460 = extractelement <16 x float> %459, i64 1, !dbg !39
  %461 = fsub <16 x float> %454, %221, !dbg !39
  %462 = extractelement <16 x float> %461, i64 2, !dbg !39
  %463 = fsub <16 x float> %454, %221, !dbg !39
  %464 = extractelement <16 x float> %463, i64 3, !dbg !39
  %465 = fsub <16 x float> %454, %221, !dbg !39
  %466 = extractelement <16 x float> %465, i64 4, !dbg !39
  %467 = fsub <16 x float> %454, %221, !dbg !39
  %468 = extractelement <16 x float> %467, i64 5, !dbg !39
  %469 = fsub <16 x float> %454, %221, !dbg !39
  %470 = extractelement <16 x float> %469, i64 6, !dbg !39
  %471 = fsub <16 x float> %454, %221, !dbg !39
  %472 = extractelement <16 x float> %471, i64 7, !dbg !39
  %473 = fsub <16 x float> %454, %221, !dbg !39
  %474 = extractelement <16 x float> %473, i64 8, !dbg !39
  %475 = fsub <16 x float> %454, %221, !dbg !39
  %476 = extractelement <16 x float> %475, i64 9, !dbg !39
  %477 = fsub <16 x float> %454, %221, !dbg !39
  %478 = extractelement <16 x float> %477, i64 10, !dbg !39
  %479 = fsub <16 x float> %454, %221, !dbg !39
  %480 = extractelement <16 x float> %479, i64 11, !dbg !39
  %481 = fsub <16 x float> %454, %221, !dbg !39
  %482 = extractelement <16 x float> %481, i64 12, !dbg !39
  %483 = fsub <16 x float> %454, %221, !dbg !39
  %484 = extractelement <16 x float> %483, i64 13, !dbg !39
  %485 = fsub <16 x float> %454, %221, !dbg !39
  %486 = extractelement <16 x float> %485, i64 14, !dbg !39
  %487 = fsub <16 x float> %454, %221, !dbg !39
  %488 = extractelement <16 x float> %487, i64 15, !dbg !39
  %489 = fadd float %188, 1.000000e+00, !dbg !40
  %490 = fadd float %189, 1.000000e+00, !dbg !40
  %491 = fadd float %190, 1.000000e+00, !dbg !40
  %492 = fadd float %191, 1.000000e+00, !dbg !40
  %493 = fadd float %192, 1.000000e+00, !dbg !40
  %494 = fadd float %193, 1.000000e+00, !dbg !40
  %495 = fadd float %194, 1.000000e+00, !dbg !40
  %496 = fadd float %195, 1.000000e+00, !dbg !40
  %497 = fadd float %196, 1.000000e+00, !dbg !40
  %498 = fadd float %197, 1.000000e+00, !dbg !40
  %499 = fadd float %198, 1.000000e+00, !dbg !40
  %500 = fadd float %199, 1.000000e+00, !dbg !40
  %501 = fadd float %200, 1.000000e+00, !dbg !40
  %502 = fadd float %201, 1.000000e+00, !dbg !40
  %503 = fadd float %202, 1.000000e+00, !dbg !40
  %504 = fadd float %203, 1.000000e+00, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %505 = insertelement <1 x float> undef, float %489, i64 0, !dbg !40
  store <1 x float> %505, ptr addrspace(3) %75, align 4, !dbg !40
  %506 = insertelement <1 x float> undef, float %490, i64 0, !dbg !40
  store <1 x float> %506, ptr addrspace(3) %78, align 4, !dbg !40
  %507 = insertelement <1 x float> undef, float %491, i64 0, !dbg !40
  store <1 x float> %507, ptr addrspace(3) %81, align 4, !dbg !40
  %508 = insertelement <1 x float> undef, float %492, i64 0, !dbg !40
  store <1 x float> %508, ptr addrspace(3) %84, align 4, !dbg !40
  %509 = insertelement <1 x float> undef, float %493, i64 0, !dbg !40
  store <1 x float> %509, ptr addrspace(3) %87, align 4, !dbg !40
  %510 = insertelement <1 x float> undef, float %494, i64 0, !dbg !40
  store <1 x float> %510, ptr addrspace(3) %90, align 4, !dbg !40
  %511 = insertelement <1 x float> undef, float %495, i64 0, !dbg !40
  store <1 x float> %511, ptr addrspace(3) %93, align 4, !dbg !40
  %512 = insertelement <1 x float> undef, float %496, i64 0, !dbg !40
  store <1 x float> %512, ptr addrspace(3) %96, align 4, !dbg !40
  %513 = insertelement <1 x float> undef, float %497, i64 0, !dbg !40
  store <1 x float> %513, ptr addrspace(3) %99, align 4, !dbg !40
  %514 = insertelement <1 x float> undef, float %498, i64 0, !dbg !40
  store <1 x float> %514, ptr addrspace(3) %102, align 4, !dbg !40
  %515 = insertelement <1 x float> undef, float %499, i64 0, !dbg !40
  store <1 x float> %515, ptr addrspace(3) %105, align 4, !dbg !40
  %516 = insertelement <1 x float> undef, float %500, i64 0, !dbg !40
  store <1 x float> %516, ptr addrspace(3) %108, align 4, !dbg !40
  %517 = insertelement <1 x float> undef, float %501, i64 0, !dbg !40
  store <1 x float> %517, ptr addrspace(3) %111, align 4, !dbg !40
  %518 = insertelement <1 x float> undef, float %502, i64 0, !dbg !40
  store <1 x float> %518, ptr addrspace(3) %114, align 4, !dbg !40
  %519 = insertelement <1 x float> undef, float %503, i64 0, !dbg !40
  store <1 x float> %519, ptr addrspace(3) %117, align 4, !dbg !40
  %520 = insertelement <1 x float> undef, float %504, i64 0, !dbg !40
  store <1 x float> %520, ptr addrspace(3) %120, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %521 = load float, ptr addrspace(3) %124, align 4, !dbg !40
  %522 = load float, ptr addrspace(3) %128, align 4, !dbg !40
  %523 = load float, ptr addrspace(3) %132, align 4, !dbg !40
  %524 = load float, ptr addrspace(3) %136, align 4, !dbg !40
  %525 = load float, ptr addrspace(3) %140, align 4, !dbg !40
  %526 = load float, ptr addrspace(3) %144, align 4, !dbg !40
  %527 = load float, ptr addrspace(3) %148, align 4, !dbg !40
  %528 = load float, ptr addrspace(3) %152, align 4, !dbg !40
  %529 = load float, ptr addrspace(3) %156, align 4, !dbg !40
  %530 = load float, ptr addrspace(3) %160, align 4, !dbg !40
  %531 = load float, ptr addrspace(3) %164, align 4, !dbg !40
  %532 = load float, ptr addrspace(3) %168, align 4, !dbg !40
  %533 = load float, ptr addrspace(3) %172, align 4, !dbg !40
  %534 = load float, ptr addrspace(3) %176, align 4, !dbg !40
  %535 = load float, ptr addrspace(3) %180, align 4, !dbg !40
  %536 = load float, ptr addrspace(3) %184, align 4, !dbg !40
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %458, float %521) #3, !dbg !41
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %460, float %522) #3, !dbg !41
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %462, float %523) #3, !dbg !41
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %464, float %524) #3, !dbg !41
  %541 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %466, float %525) #3, !dbg !41
  %542 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %468, float %526) #3, !dbg !41
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %470, float %527) #3, !dbg !41
  %544 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %472, float %528) #3, !dbg !41
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %474, float %529) #3, !dbg !41
  %546 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %530) #3, !dbg !41
  %547 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %478, float %531) #3, !dbg !41
  %548 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %480, float %532) #3, !dbg !41
  %549 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %482, float %533) #3, !dbg !41
  %550 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %484, float %534) #3, !dbg !41
  %551 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %486, float %535) #3, !dbg !41
  %552 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float %536) #3, !dbg !41
  %553 = insertelement <16 x float> poison, float %537, i64 0, !dbg !42
  %554 = insertelement <16 x float> %553, float %538, i64 1, !dbg !42
  %555 = insertelement <16 x float> %554, float %539, i64 2, !dbg !42
  %556 = insertelement <16 x float> %555, float %540, i64 3, !dbg !42
  %557 = insertelement <16 x float> %556, float %541, i64 4, !dbg !42
  %558 = insertelement <16 x float> %557, float %542, i64 5, !dbg !42
  %559 = insertelement <16 x float> %558, float %543, i64 6, !dbg !42
  %560 = insertelement <16 x float> %559, float %544, i64 7, !dbg !42
  %561 = insertelement <16 x float> %560, float %545, i64 8, !dbg !42
  %562 = insertelement <16 x float> %561, float %546, i64 9, !dbg !42
  %563 = insertelement <16 x float> %562, float %547, i64 10, !dbg !42
  %564 = insertelement <16 x float> %563, float %548, i64 11, !dbg !42
  %565 = insertelement <16 x float> %564, float %549, i64 12, !dbg !42
  %566 = insertelement <16 x float> %565, float %550, i64 13, !dbg !42
  %567 = insertelement <16 x float> %566, float %551, i64 14, !dbg !42
  %568 = insertelement <16 x float> %567, float %552, i64 15, !dbg !42
  %569 = fadd <16 x float> %221, %568, !dbg !42
  %570 = fsub <16 x float> %454, %569, !dbg !43
  %571 = fsub <16 x float> %454, %569, !dbg !43
  %572 = fsub <16 x float> %454, %569, !dbg !43
  %573 = fsub <16 x float> %454, %569, !dbg !43
  %574 = fsub <16 x float> %454, %569, !dbg !43
  %575 = fsub <16 x float> %454, %569, !dbg !43
  %576 = fsub <16 x float> %454, %569, !dbg !43
  %577 = fsub <16 x float> %454, %569, !dbg !43
  %578 = fsub <16 x float> %454, %569, !dbg !43
  %579 = fsub <16 x float> %454, %569, !dbg !43
  %580 = fsub <16 x float> %454, %569, !dbg !43
  %581 = fsub <16 x float> %454, %569, !dbg !43
  %582 = fsub <16 x float> %454, %569, !dbg !43
  %583 = fsub <16 x float> %454, %569, !dbg !43
  %584 = fsub <16 x float> %454, %569, !dbg !43
  %585 = fsub <16 x float> %454, %569, !dbg !43
  %586 = fmul <16 x float> %457, %570, !dbg !44
  %587 = extractelement <16 x float> %586, i64 0, !dbg !44
  %588 = fmul <16 x float> %459, %571, !dbg !44
  %589 = extractelement <16 x float> %588, i64 1, !dbg !44
  %590 = fmul <16 x float> %461, %572, !dbg !44
  %591 = extractelement <16 x float> %590, i64 2, !dbg !44
  %592 = fmul <16 x float> %463, %573, !dbg !44
  %593 = extractelement <16 x float> %592, i64 3, !dbg !44
  %594 = fmul <16 x float> %465, %574, !dbg !44
  %595 = extractelement <16 x float> %594, i64 4, !dbg !44
  %596 = fmul <16 x float> %467, %575, !dbg !44
  %597 = extractelement <16 x float> %596, i64 5, !dbg !44
  %598 = fmul <16 x float> %469, %576, !dbg !44
  %599 = extractelement <16 x float> %598, i64 6, !dbg !44
  %600 = fmul <16 x float> %471, %577, !dbg !44
  %601 = extractelement <16 x float> %600, i64 7, !dbg !44
  %602 = fmul <16 x float> %473, %578, !dbg !44
  %603 = extractelement <16 x float> %602, i64 8, !dbg !44
  %604 = fmul <16 x float> %475, %579, !dbg !44
  %605 = extractelement <16 x float> %604, i64 9, !dbg !44
  %606 = fmul <16 x float> %477, %580, !dbg !44
  %607 = extractelement <16 x float> %606, i64 10, !dbg !44
  %608 = fmul <16 x float> %479, %581, !dbg !44
  %609 = extractelement <16 x float> %608, i64 11, !dbg !44
  %610 = fmul <16 x float> %481, %582, !dbg !44
  %611 = extractelement <16 x float> %610, i64 12, !dbg !44
  %612 = fmul <16 x float> %483, %583, !dbg !44
  %613 = extractelement <16 x float> %612, i64 13, !dbg !44
  %614 = fmul <16 x float> %485, %584, !dbg !44
  %615 = extractelement <16 x float> %614, i64 14, !dbg !44
  %616 = fmul <16 x float> %487, %585, !dbg !44
  %617 = extractelement <16 x float> %616, i64 15, !dbg !44
  %618 = fadd float %204, %587, !dbg !45
  %619 = fadd float %205, %589, !dbg !45
  %620 = fadd float %206, %591, !dbg !45
  %621 = fadd float %207, %593, !dbg !45
  %622 = fadd float %208, %595, !dbg !45
  %623 = fadd float %209, %597, !dbg !45
  %624 = fadd float %210, %599, !dbg !45
  %625 = fadd float %211, %601, !dbg !45
  %626 = fadd float %212, %603, !dbg !45
  %627 = fadd float %213, %605, !dbg !45
  %628 = fadd float %214, %607, !dbg !45
  %629 = fadd float %215, %609, !dbg !45
  %630 = fadd float %216, %611, !dbg !45
  %631 = fadd float %217, %613, !dbg !45
  %632 = fadd float %218, %615, !dbg !45
  %633 = fadd float %219, %617, !dbg !45
  br label %._crit_edge, !dbg !35

._crit_edge:                                      ; preds = %187, %456
  %634 = phi float [ %489, %456 ], [ 1.000000e+00, %187 ]
  %635 = phi float [ %490, %456 ], [ 1.000000e+00, %187 ]
  %636 = phi float [ %491, %456 ], [ 1.000000e+00, %187 ]
  %637 = phi float [ %492, %456 ], [ 1.000000e+00, %187 ]
  %638 = phi float [ %493, %456 ], [ 1.000000e+00, %187 ]
  %639 = phi float [ %494, %456 ], [ 1.000000e+00, %187 ]
  %640 = phi float [ %495, %456 ], [ 1.000000e+00, %187 ]
  %641 = phi float [ %496, %456 ], [ 1.000000e+00, %187 ]
  %642 = phi float [ %497, %456 ], [ 1.000000e+00, %187 ]
  %643 = phi float [ %498, %456 ], [ 1.000000e+00, %187 ]
  %644 = phi float [ %499, %456 ], [ 1.000000e+00, %187 ]
  %645 = phi float [ %500, %456 ], [ 1.000000e+00, %187 ]
  %646 = phi float [ %501, %456 ], [ 1.000000e+00, %187 ]
  %647 = phi float [ %502, %456 ], [ 1.000000e+00, %187 ]
  %648 = phi float [ %503, %456 ], [ 1.000000e+00, %187 ]
  %649 = phi float [ %504, %456 ], [ 1.000000e+00, %187 ]
  %650 = phi float [ %618, %456 ], [ 0.000000e+00, %187 ]
  %651 = phi float [ %619, %456 ], [ 0.000000e+00, %187 ]
  %652 = phi float [ %620, %456 ], [ 0.000000e+00, %187 ]
  %653 = phi float [ %621, %456 ], [ 0.000000e+00, %187 ]
  %654 = phi float [ %622, %456 ], [ 0.000000e+00, %187 ]
  %655 = phi float [ %623, %456 ], [ 0.000000e+00, %187 ]
  %656 = phi float [ %624, %456 ], [ 0.000000e+00, %187 ]
  %657 = phi float [ %625, %456 ], [ 0.000000e+00, %187 ]
  %658 = phi float [ %626, %456 ], [ 0.000000e+00, %187 ]
  %659 = phi float [ %627, %456 ], [ 0.000000e+00, %187 ]
  %660 = phi float [ %628, %456 ], [ 0.000000e+00, %187 ]
  %661 = phi float [ %629, %456 ], [ 0.000000e+00, %187 ]
  %662 = phi float [ %630, %456 ], [ 0.000000e+00, %187 ]
  %663 = phi float [ %631, %456 ], [ 0.000000e+00, %187 ]
  %664 = phi float [ %632, %456 ], [ 0.000000e+00, %187 ]
  %665 = phi float [ %633, %456 ], [ 0.000000e+00, %187 ]
  %666 = phi <16 x float> [ %569, %456 ], [ %454, %187 ]
  %667 = select <16 x i1> %186, <16 x float> %666, <16 x float> %221, !dbg !17
  %668 = select i1 %49, float %650, float %204, !dbg !46
  %669 = select i1 %49, float %651, float %205, !dbg !46
  %670 = select i1 %49, float %652, float %206, !dbg !46
  %671 = select i1 %49, float %653, float %207, !dbg !46
  %672 = select i1 %49, float %654, float %208, !dbg !46
  %673 = select i1 %49, float %655, float %209, !dbg !46
  %674 = select i1 %49, float %656, float %210, !dbg !46
  %675 = select i1 %49, float %657, float %211, !dbg !46
  %676 = select i1 %49, float %658, float %212, !dbg !46
  %677 = select i1 %49, float %659, float %213, !dbg !46
  %678 = select i1 %49, float %660, float %214, !dbg !46
  %679 = select i1 %49, float %661, float %215, !dbg !46
  %680 = select i1 %49, float %662, float %216, !dbg !46
  %681 = select i1 %49, float %663, float %217, !dbg !46
  %682 = select i1 %49, float %664, float %218, !dbg !46
  %683 = select i1 %49, float %665, float %219, !dbg !46
  %684 = select i1 %50, float %634, float %188, !dbg !47
  %685 = select i1 %51, float %635, float %189, !dbg !47
  %686 = select i1 %52, float %636, float %190, !dbg !47
  %687 = select i1 %53, float %637, float %191, !dbg !47
  %688 = select i1 %54, float %638, float %192, !dbg !47
  %689 = select i1 %55, float %639, float %193, !dbg !47
  %690 = select i1 %56, float %640, float %194, !dbg !47
  %691 = select i1 %57, float %641, float %195, !dbg !47
  %692 = select i1 %58, float %642, float %196, !dbg !47
  %693 = select i1 %59, float %643, float %197, !dbg !47
  %694 = select i1 %60, float %644, float %198, !dbg !47
  %695 = select i1 %61, float %645, float %199, !dbg !47
  %696 = select i1 %62, float %646, float %200, !dbg !47
  %697 = select i1 %63, float %647, float %201, !dbg !47
  %698 = select i1 %64, float %648, float %202, !dbg !47
  %699 = select i1 %65, float %649, float %203, !dbg !47
  %700 = add nuw nsw i32 %220, 64, !dbg !18
  %701 = icmp ult i32 %220, 256, !dbg !18
  br i1 %701, label %187, label %702, !dbg !18

702:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %703 = insertelement <1 x float> undef, float %684, i64 0, !dbg !18
  store <1 x float> %703, ptr addrspace(3) %75, align 4, !dbg !18
  %704 = insertelement <1 x float> undef, float %685, i64 0, !dbg !18
  store <1 x float> %704, ptr addrspace(3) %78, align 4, !dbg !18
  %705 = insertelement <1 x float> undef, float %686, i64 0, !dbg !18
  store <1 x float> %705, ptr addrspace(3) %81, align 4, !dbg !18
  %706 = insertelement <1 x float> undef, float %687, i64 0, !dbg !18
  store <1 x float> %706, ptr addrspace(3) %84, align 4, !dbg !18
  %707 = insertelement <1 x float> undef, float %688, i64 0, !dbg !18
  store <1 x float> %707, ptr addrspace(3) %87, align 4, !dbg !18
  %708 = insertelement <1 x float> undef, float %689, i64 0, !dbg !18
  store <1 x float> %708, ptr addrspace(3) %90, align 4, !dbg !18
  %709 = insertelement <1 x float> undef, float %690, i64 0, !dbg !18
  store <1 x float> %709, ptr addrspace(3) %93, align 4, !dbg !18
  %710 = insertelement <1 x float> undef, float %691, i64 0, !dbg !18
  store <1 x float> %710, ptr addrspace(3) %96, align 4, !dbg !18
  %711 = insertelement <1 x float> undef, float %692, i64 0, !dbg !18
  store <1 x float> %711, ptr addrspace(3) %99, align 4, !dbg !18
  %712 = insertelement <1 x float> undef, float %693, i64 0, !dbg !18
  store <1 x float> %712, ptr addrspace(3) %102, align 4, !dbg !18
  %713 = insertelement <1 x float> undef, float %694, i64 0, !dbg !18
  store <1 x float> %713, ptr addrspace(3) %105, align 4, !dbg !18
  %714 = insertelement <1 x float> undef, float %695, i64 0, !dbg !18
  store <1 x float> %714, ptr addrspace(3) %108, align 4, !dbg !18
  %715 = insertelement <1 x float> undef, float %696, i64 0, !dbg !18
  store <1 x float> %715, ptr addrspace(3) %111, align 4, !dbg !18
  %716 = insertelement <1 x float> undef, float %697, i64 0, !dbg !18
  store <1 x float> %716, ptr addrspace(3) %114, align 4, !dbg !18
  %717 = insertelement <1 x float> undef, float %698, i64 0, !dbg !18
  store <1 x float> %717, ptr addrspace(3) %117, align 4, !dbg !18
  %718 = insertelement <1 x float> undef, float %699, i64 0, !dbg !18
  store <1 x float> %718, ptr addrspace(3) %120, align 4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %719 = load float, ptr addrspace(3) %124, align 4, !dbg !18
  %720 = load float, ptr addrspace(3) %128, align 4, !dbg !18
  %721 = load float, ptr addrspace(3) %132, align 4, !dbg !18
  %722 = load float, ptr addrspace(3) %136, align 4, !dbg !18
  %723 = load float, ptr addrspace(3) %140, align 4, !dbg !18
  %724 = load float, ptr addrspace(3) %144, align 4, !dbg !18
  %725 = load float, ptr addrspace(3) %148, align 4, !dbg !18
  %726 = load float, ptr addrspace(3) %152, align 4, !dbg !18
  %727 = load float, ptr addrspace(3) %156, align 4, !dbg !18
  %728 = load float, ptr addrspace(3) %160, align 4, !dbg !18
  %729 = load float, ptr addrspace(3) %164, align 4, !dbg !18
  %730 = load float, ptr addrspace(3) %168, align 4, !dbg !18
  %731 = load float, ptr addrspace(3) %172, align 4, !dbg !18
  %732 = load float, ptr addrspace(3) %176, align 4, !dbg !18
  %733 = load float, ptr addrspace(3) %180, align 4, !dbg !18
  %734 = load float, ptr addrspace(3) %184, align 4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %735 = extractelement <16 x float> %667, i64 0, !dbg !50
  %736 = extractelement <16 x float> %667, i64 1, !dbg !50
  %737 = fsub float %736, %735, !dbg !50
  %738 = fadd float %719, %720, !dbg !54
  %739 = fcmp oeq float %738, 0.000000e+00, !dbg !55
  %740 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %720, float %738) #3, !dbg !56
  %741 = select i1 %739, float 0.000000e+00, float %740, !dbg !57
  %742 = fmul float %737, %741, !dbg !58
  %743 = fadd float %735, %742, !dbg !59
  %744 = fadd float %668, %669, !dbg !60
  %745 = fmul float %737, %737, !dbg !61
  %746 = fmul float %745, %719, !dbg !62
  %747 = fmul float %746, %741, !dbg !63
  %748 = fadd float %744, %747, !dbg !64
  %749 = extractelement <16 x float> %667, i64 2, !dbg !50
  %750 = fsub float %749, %743, !dbg !50
  %751 = fadd float %738, %721, !dbg !54
  %752 = fcmp oeq float %751, 0.000000e+00, !dbg !55
  %753 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %721, float %751) #3, !dbg !56
  %754 = select i1 %752, float 0.000000e+00, float %753, !dbg !57
  %755 = fmul float %754, %750, !dbg !58
  %756 = fadd float %743, %755, !dbg !59
  %757 = fadd float %670, %748, !dbg !60
  %758 = fmul float %750, %750, !dbg !61
  %759 = fmul float %738, %758, !dbg !62
  %760 = fmul float %754, %759, !dbg !63
  %761 = fadd float %757, %760, !dbg !64
  %762 = extractelement <16 x float> %667, i64 3, !dbg !50
  %763 = fsub float %762, %756, !dbg !50
  %764 = fadd float %751, %722, !dbg !54
  %765 = fcmp oeq float %764, 0.000000e+00, !dbg !55
  %766 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %722, float %764) #3, !dbg !56
  %767 = select i1 %765, float 0.000000e+00, float %766, !dbg !57
  %768 = fmul float %767, %763, !dbg !58
  %769 = fadd float %756, %768, !dbg !59
  %770 = fadd float %671, %761, !dbg !60
  %771 = fmul float %763, %763, !dbg !61
  %772 = fmul float %751, %771, !dbg !62
  %773 = fmul float %767, %772, !dbg !63
  %774 = fadd float %770, %773, !dbg !64
  %775 = extractelement <16 x float> %667, i64 4, !dbg !50
  %776 = fsub float %775, %769, !dbg !50
  %777 = fadd float %764, %723, !dbg !54
  %778 = fcmp oeq float %777, 0.000000e+00, !dbg !55
  %779 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %723, float %777) #3, !dbg !56
  %780 = select i1 %778, float 0.000000e+00, float %779, !dbg !57
  %781 = fmul float %780, %776, !dbg !58
  %782 = fadd float %769, %781, !dbg !59
  %783 = fadd float %672, %774, !dbg !60
  %784 = fmul float %776, %776, !dbg !61
  %785 = fmul float %764, %784, !dbg !62
  %786 = fmul float %780, %785, !dbg !63
  %787 = fadd float %783, %786, !dbg !64
  %788 = extractelement <16 x float> %667, i64 5, !dbg !50
  %789 = fsub float %788, %782, !dbg !50
  %790 = fadd float %777, %724, !dbg !54
  %791 = fcmp oeq float %790, 0.000000e+00, !dbg !55
  %792 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %724, float %790) #3, !dbg !56
  %793 = select i1 %791, float 0.000000e+00, float %792, !dbg !57
  %794 = fmul float %793, %789, !dbg !58
  %795 = fadd float %782, %794, !dbg !59
  %796 = fadd float %673, %787, !dbg !60
  %797 = fmul float %789, %789, !dbg !61
  %798 = fmul float %777, %797, !dbg !62
  %799 = fmul float %793, %798, !dbg !63
  %800 = fadd float %796, %799, !dbg !64
  %801 = extractelement <16 x float> %667, i64 6, !dbg !50
  %802 = fsub float %801, %795, !dbg !50
  %803 = fadd float %790, %725, !dbg !54
  %804 = fcmp oeq float %803, 0.000000e+00, !dbg !55
  %805 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %725, float %803) #3, !dbg !56
  %806 = select i1 %804, float 0.000000e+00, float %805, !dbg !57
  %807 = fmul float %806, %802, !dbg !58
  %808 = fadd float %795, %807, !dbg !59
  %809 = fadd float %674, %800, !dbg !60
  %810 = fmul float %802, %802, !dbg !61
  %811 = fmul float %790, %810, !dbg !62
  %812 = fmul float %806, %811, !dbg !63
  %813 = fadd float %809, %812, !dbg !64
  %814 = extractelement <16 x float> %667, i64 7, !dbg !50
  %815 = fsub float %814, %808, !dbg !50
  %816 = fadd float %803, %726, !dbg !54
  %817 = fcmp oeq float %816, 0.000000e+00, !dbg !55
  %818 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %726, float %816) #3, !dbg !56
  %819 = select i1 %817, float 0.000000e+00, float %818, !dbg !57
  %820 = fmul float %819, %815, !dbg !58
  %821 = fadd float %808, %820, !dbg !59
  %822 = fadd float %675, %813, !dbg !60
  %823 = fmul float %815, %815, !dbg !61
  %824 = fmul float %803, %823, !dbg !62
  %825 = fmul float %819, %824, !dbg !63
  %826 = fadd float %822, %825, !dbg !64
  %827 = extractelement <16 x float> %667, i64 8, !dbg !50
  %828 = fsub float %827, %821, !dbg !50
  %829 = fadd float %816, %727, !dbg !54
  %830 = fcmp oeq float %829, 0.000000e+00, !dbg !55
  %831 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %727, float %829) #3, !dbg !56
  %832 = select i1 %830, float 0.000000e+00, float %831, !dbg !57
  %833 = fmul float %832, %828, !dbg !58
  %834 = fadd float %821, %833, !dbg !59
  %835 = fadd float %676, %826, !dbg !60
  %836 = fmul float %828, %828, !dbg !61
  %837 = fmul float %816, %836, !dbg !62
  %838 = fmul float %832, %837, !dbg !63
  %839 = fadd float %835, %838, !dbg !64
  %840 = extractelement <16 x float> %667, i64 9, !dbg !50
  %841 = fsub float %840, %834, !dbg !50
  %842 = fadd float %829, %728, !dbg !54
  %843 = fcmp oeq float %842, 0.000000e+00, !dbg !55
  %844 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %728, float %842) #3, !dbg !56
  %845 = select i1 %843, float 0.000000e+00, float %844, !dbg !57
  %846 = fmul float %845, %841, !dbg !58
  %847 = fadd float %834, %846, !dbg !59
  %848 = fadd float %677, %839, !dbg !60
  %849 = fmul float %841, %841, !dbg !61
  %850 = fmul float %829, %849, !dbg !62
  %851 = fmul float %845, %850, !dbg !63
  %852 = fadd float %848, %851, !dbg !64
  %853 = extractelement <16 x float> %667, i64 10, !dbg !50
  %854 = fsub float %853, %847, !dbg !50
  %855 = fadd float %842, %729, !dbg !54
  %856 = fcmp oeq float %855, 0.000000e+00, !dbg !55
  %857 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %729, float %855) #3, !dbg !56
  %858 = select i1 %856, float 0.000000e+00, float %857, !dbg !57
  %859 = fmul float %858, %854, !dbg !58
  %860 = fadd float %847, %859, !dbg !59
  %861 = fadd float %678, %852, !dbg !60
  %862 = fmul float %854, %854, !dbg !61
  %863 = fmul float %842, %862, !dbg !62
  %864 = fmul float %858, %863, !dbg !63
  %865 = fadd float %861, %864, !dbg !64
  %866 = extractelement <16 x float> %667, i64 11, !dbg !50
  %867 = fsub float %866, %860, !dbg !50
  %868 = fadd float %855, %730, !dbg !54
  %869 = fcmp oeq float %868, 0.000000e+00, !dbg !55
  %870 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %730, float %868) #3, !dbg !56
  %871 = select i1 %869, float 0.000000e+00, float %870, !dbg !57
  %872 = fmul float %871, %867, !dbg !58
  %873 = fadd float %860, %872, !dbg !59
  %874 = fadd float %679, %865, !dbg !60
  %875 = fmul float %867, %867, !dbg !61
  %876 = fmul float %855, %875, !dbg !62
  %877 = fmul float %871, %876, !dbg !63
  %878 = fadd float %874, %877, !dbg !64
  %879 = extractelement <16 x float> %667, i64 12, !dbg !50
  %880 = fsub float %879, %873, !dbg !50
  %881 = fadd float %868, %731, !dbg !54
  %882 = fcmp oeq float %881, 0.000000e+00, !dbg !55
  %883 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %731, float %881) #3, !dbg !56
  %884 = select i1 %882, float 0.000000e+00, float %883, !dbg !57
  %885 = fmul float %884, %880, !dbg !58
  %886 = fadd float %873, %885, !dbg !59
  %887 = fadd float %680, %878, !dbg !60
  %888 = fmul float %880, %880, !dbg !61
  %889 = fmul float %868, %888, !dbg !62
  %890 = fmul float %884, %889, !dbg !63
  %891 = fadd float %887, %890, !dbg !64
  %892 = extractelement <16 x float> %667, i64 13, !dbg !50
  %893 = fsub float %892, %886, !dbg !50
  %894 = fadd float %881, %732, !dbg !54
  %895 = fcmp oeq float %894, 0.000000e+00, !dbg !55
  %896 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %732, float %894) #3, !dbg !56
  %897 = select i1 %895, float 0.000000e+00, float %896, !dbg !57
  %898 = fmul float %897, %893, !dbg !58
  %899 = fadd float %886, %898, !dbg !59
  %900 = fadd float %681, %891, !dbg !60
  %901 = fmul float %893, %893, !dbg !61
  %902 = fmul float %881, %901, !dbg !62
  %903 = fmul float %897, %902, !dbg !63
  %904 = fadd float %900, %903, !dbg !64
  %905 = extractelement <16 x float> %667, i64 14, !dbg !50
  %906 = fsub float %905, %899, !dbg !50
  %907 = fadd float %894, %733, !dbg !54
  %908 = fcmp oeq float %907, 0.000000e+00, !dbg !55
  %909 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %733, float %907) #3, !dbg !56
  %910 = select i1 %908, float 0.000000e+00, float %909, !dbg !57
  %911 = fmul float %910, %906, !dbg !58
  %912 = fadd float %899, %911, !dbg !59
  %913 = fadd float %682, %904, !dbg !60
  %914 = fmul float %906, %906, !dbg !61
  %915 = fmul float %894, %914, !dbg !62
  %916 = fmul float %910, %915, !dbg !63
  %917 = fadd float %913, %916, !dbg !64
  %918 = extractelement <16 x float> %667, i64 15, !dbg !50
  %919 = fsub float %918, %912, !dbg !50
  %920 = fadd float %907, %734, !dbg !54
  %921 = fcmp oeq float %920, 0.000000e+00, !dbg !55
  %922 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %734, float %920) #3, !dbg !56
  %923 = select i1 %921, float 0.000000e+00, float %922, !dbg !57
  %924 = fmul float %923, %919, !dbg !58
  %925 = fadd float %912, %924, !dbg !59
  %926 = fadd float %683, %917, !dbg !60
  %927 = fmul float %919, %919, !dbg !61
  %928 = fmul float %907, %927, !dbg !62
  %929 = fmul float %923, %928, !dbg !63
  %930 = fadd float %926, %929, !dbg !64
  %931 = shl nuw nsw i32 %12, 2, !dbg !48
  %932 = or i32 %931, %14, !dbg !48
  %933 = zext nneg i32 %932 to i64, !dbg !48
  %934 = getelementptr float, ptr addrspace(3) @global_smem, i64 %933, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %934, float %925, i1 true) #3, !dbg !48
  %935 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %933, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %935, float %930, i1 true) #3, !dbg !48
  %936 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %933, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, float %920, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %937 = icmp slt i32 %11, 256, !dbg !48
  %938 = sext i32 %11 to i64, !dbg !48
  %939 = getelementptr float, ptr addrspace(3) @global_smem, i64 %938, !dbg !48
  %940 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %939, i1 %937) #3, !dbg !48
  %941 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %938, !dbg !48
  %942 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %941, i1 %937) #3, !dbg !48
  %943 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %938, !dbg !48
  %944 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %943, i1 %937) #3, !dbg !48
  %945 = bitcast float %940 to i32, !dbg !48
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 2, i32 31), !dbg !48
  %947 = bitcast i32 %946 to float, !dbg !48
  %948 = bitcast float %942 to i32, !dbg !48
  %949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 2, i32 31), !dbg !48
  %950 = bitcast i32 %949 to float, !dbg !48
  %951 = bitcast float %944 to i32, !dbg !48
  %952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 2, i32 31), !dbg !48
  %953 = bitcast i32 %952 to float, !dbg !48
  %954 = fsub float %947, %940, !dbg !50
  %955 = fadd float %944, %953, !dbg !54
  %956 = fcmp oeq float %955, 0.000000e+00, !dbg !55
  %957 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %953, float %955) #3, !dbg !56
  %958 = select i1 %956, float 0.000000e+00, float %957, !dbg !57
  %959 = fmul float %954, %958, !dbg !58
  %960 = fadd float %940, %959, !dbg !59
  %961 = fadd float %942, %950, !dbg !60
  %962 = fmul float %954, %954, !dbg !61
  %963 = fmul float %944, %962, !dbg !62
  %964 = fmul float %963, %958, !dbg !63
  %965 = fadd float %961, %964, !dbg !64
  %966 = bitcast float %960 to i32, !dbg !48
  %967 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 1, i32 31), !dbg !48
  %968 = bitcast i32 %967 to float, !dbg !48
  %969 = bitcast float %965 to i32, !dbg !48
  %970 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %969, i32 1, i32 31), !dbg !48
  %971 = bitcast i32 %970 to float, !dbg !48
  %972 = bitcast float %955 to i32, !dbg !48
  %973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %972, i32 1, i32 31), !dbg !48
  %974 = bitcast i32 %973 to float, !dbg !48
  %975 = fsub float %968, %960, !dbg !50
  %976 = fadd float %955, %974, !dbg !54
  %977 = fcmp oeq float %976, 0.000000e+00, !dbg !55
  %978 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %974, float %976) #3, !dbg !56
  %979 = select i1 %977, float 0.000000e+00, float %978, !dbg !57
  %980 = fmul float %975, %979, !dbg !58
  %981 = fadd float %960, %980, !dbg !59
  %982 = fadd float %965, %971, !dbg !60
  %983 = fmul float %975, %975, !dbg !61
  %984 = fmul float %955, %983, !dbg !62
  %985 = fmul float %979, %984, !dbg !63
  %986 = fadd float %982, %985, !dbg !64
  %987 = and i32 %11, 3, !dbg !48
  %988 = icmp eq i32 %987, 0, !dbg !48
  %989 = and i1 %937, %988, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %939, float %981, i1 %989) #3, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %941, float %986, i1 %989) #3, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %943, float %976, i1 %989) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %990 = zext nneg i32 %931 to i64, !dbg !48
  %991 = getelementptr float, ptr addrspace(3) @global_smem, i64 %990, !dbg !48
  %992 = load i32, ptr addrspace(3) %991, align 4, !dbg !48
  %993 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %990, !dbg !48
  %994 = load i32, ptr addrspace(3) %993, align 4, !dbg !48
  %995 = sext i32 %32 to i64, !dbg !65
  %996 = getelementptr float, ptr addrspace(1) %3, i64 %995, !dbg !65
  %997 = icmp eq i32 %14, 0, !dbg !66
  %998 = and i1 %997, %49, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %992, ptr addrspace(1) %996, i1 %998) #3, !dbg !66
  %999 = getelementptr float, ptr addrspace(1) %4, i64 %995, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %994, ptr addrspace(1) %999, i1 %998) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c3ktaxvojbasijh3jdxafl3ojn3hdusjlhbwixjzuuzus4du6imy.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/3k")
!3 = !{ptr @triton__0d1d2d3d4d56789de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d56789de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d56789de", linkageName: "triton__0d1d2d3d4d56789de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 22, column: 33, scope: !5)
!11 = !DILocation(line: 23, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 21, scope: !5)
!13 = !DILocation(line: 27, column: 20, scope: !5)
!14 = !DILocation(line: 36, column: 44, scope: !5)
!15 = !DILocation(line: 36, column: 63, scope: !5)
!16 = !DILocation(line: 36, column: 67, scope: !5)
!17 = !DILocation(line: 48, column: 60, scope: !5)
!18 = !DILocation(line: 32, column: 36, scope: !5)
!19 = !DILocation(line: 33, column: 27, scope: !5)
!20 = !DILocation(line: 36, column: 48, scope: !5)
!21 = !DILocation(line: 36, column: 55, scope: !5)
!22 = !DILocation(line: 36, column: 34, scope: !5)
!23 = !DILocation(line: 36, column: 73, scope: !5)
!24 = !DILocation(line: 37, column: 34, scope: !5)
!25 = !DILocation(line: 37, column: 39, scope: !5)
!26 = !DILocation(line: 38, column: 34, scope: !5)
!27 = !DILocation(line: 38, column: 73, scope: !5)
!28 = !DILocation(line: 36, column: 132, scope: !5)
!29 = !DILocation(line: 37, column: 90, scope: !5)
!30 = !DILocation(line: 38, column: 132, scope: !5)
!31 = !DILocation(line: 39, column: 22, scope: !5)
!32 = !DILocation(line: 41, column: 22, scope: !5)
!33 = !DILocation(line: 42, column: 22, scope: !5)
!34 = !DILocation(line: 46, column: 62, scope: !5)
!35 = !DILocation(line: 105, column: 7, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !5, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!38 = !DILocation(line: 46, column: 51, scope: !36)
!39 = !DILocation(line: 110, column: 24, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 111, column: 30, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 112, column: 34, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 112, column: 26, scope: !36, inlinedAt: !38)
!43 = !DILocation(line: 113, column: 39, scope: !36, inlinedAt: !38)
!44 = !DILocation(line: 113, column: 31, scope: !36, inlinedAt: !38)
!45 = !DILocation(line: 113, column: 22, scope: !36, inlinedAt: !38)
!46 = !DILocation(line: 49, column: 56, scope: !5)
!47 = !DILocation(line: 50, column: 64, scope: !5)
!48 = !DILocation(line: 131, column: 46, scope: !36, inlinedAt: !49)
!49 = !DILocation(line: 52, column: 41, scope: !36)
!50 = !DILocation(line: 119, column: 21, scope: !51, inlinedAt: !52)
!51 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!52 = !DILocation(line: 131, column: 46, scope: !51, inlinedAt: !53)
!53 = !DILocation(line: 52, column: 41, scope: !51)
!54 = !DILocation(line: 120, column: 28, scope: !51, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 39, scope: !51, inlinedAt: !52)
!56 = !DILocation(line: 121, column: 60, scope: !51, inlinedAt: !52)
!57 = !DILocation(line: 121, column: 49, scope: !51, inlinedAt: !52)
!58 = !DILocation(line: 123, column: 25, scope: !51, inlinedAt: !52)
!59 = !DILocation(line: 123, column: 17, scope: !51, inlinedAt: !52)
!60 = !DILocation(line: 124, column: 15, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 124, column: 30, scope: !51, inlinedAt: !52)
!62 = !DILocation(line: 124, column: 38, scope: !51, inlinedAt: !52)
!63 = !DILocation(line: 124, column: 49, scope: !51, inlinedAt: !52)
!64 = !DILocation(line: 124, column: 22, scope: !51, inlinedAt: !52)
!65 = !DILocation(line: 57, column: 25, scope: !5)
!66 = !DILocation(line: 57, column: 36, scope: !5)
!67 = !DILocation(line: 58, column: 25, scope: !5)
!68 = !DILocation(line: 58, column: 37, scope: !5)
!69 = !DILocation(line: 58, column: 4, scope: !5)
