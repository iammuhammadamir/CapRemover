; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 3, !dbg !8
  %11 = lshr i32 %8, 2, !dbg !8
  %12 = shl nuw nsw i32 %10, 3, !dbg !8
  %13 = or i32 %12, %11, !dbg !8
  %14 = or i32 %10, 4, !dbg !8
  %15 = or i32 %10, 8, !dbg !8
  %16 = or i32 %10, 12, !dbg !8
  %17 = or i32 %10, 16, !dbg !8
  %18 = or i32 %10, 20, !dbg !8
  %19 = or i32 %10, 24, !dbg !8
  %20 = or i32 %10, 28, !dbg !8
  %21 = shl i32 %7, 3, !dbg !9
  %22 = and i32 %21, 24, !dbg !9
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %25 = add i32 %24, 1, !dbg !12
  %26 = shl i32 %23, 5, !dbg !13
  %27 = mul i32 %26, %25, !dbg !14
  %28 = or i32 %27, %13, !dbg !15
  %29 = or i32 %27, %10, !dbg !15
  %30 = or i32 %27, %14, !dbg !15
  %31 = or i32 %27, %15, !dbg !15
  %32 = or i32 %27, %16, !dbg !15
  %33 = or i32 %27, %17, !dbg !15
  %34 = or i32 %27, %18, !dbg !15
  %35 = or i32 %27, %19, !dbg !15
  %36 = or i32 %27, %20, !dbg !15
  %37 = icmp slt i32 %28, 14850, !dbg !16
  %38 = icmp slt i32 %29, 14850, !dbg !16
  %39 = icmp slt i32 %30, 14850, !dbg !16
  %40 = icmp slt i32 %31, 14850, !dbg !16
  %41 = icmp slt i32 %32, 14850, !dbg !16
  %42 = icmp slt i32 %33, 14850, !dbg !16
  %43 = icmp slt i32 %34, 14850, !dbg !16
  %44 = icmp slt i32 %35, 14850, !dbg !16
  %45 = icmp slt i32 %36, 14850, !dbg !16
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %47 = shl i32 %46, 5, !dbg !18
  %48 = or i32 %47, %22, !dbg !19
  %49 = or i32 %47, %8, !dbg !19
  %50 = icmp slt i32 %48, 320, !dbg !20
  %51 = icmp slt i32 %49, 320, !dbg !20
  %.frozen = freeze i32 %29
  %52 = sdiv i32 %.frozen, 675, !dbg !21
  %53 = mul i32 %52, 675
  %.decomposed = sub i32 %.frozen, %53
  %.frozen19 = freeze i32 %30
  %54 = sdiv i32 %.frozen19, 675, !dbg !21
  %55 = mul i32 %54, 675
  %.decomposed20 = sub i32 %.frozen19, %55
  %.frozen21 = freeze i32 %31
  %56 = sdiv i32 %.frozen21, 675, !dbg !21
  %57 = mul i32 %56, 675
  %.decomposed22 = sub i32 %.frozen21, %57
  %.frozen23 = freeze i32 %32
  %58 = sdiv i32 %.frozen23, 675, !dbg !21
  %59 = mul i32 %58, 675
  %.decomposed24 = sub i32 %.frozen23, %59
  %.frozen25 = freeze i32 %33
  %60 = sdiv i32 %.frozen25, 675, !dbg !21
  %61 = mul i32 %60, 675
  %.decomposed26 = sub i32 %.frozen25, %61
  %.frozen27 = freeze i32 %34
  %62 = sdiv i32 %.frozen27, 675, !dbg !21
  %63 = mul i32 %62, 675
  %.decomposed28 = sub i32 %.frozen27, %63
  %.frozen29 = freeze i32 %35
  %64 = sdiv i32 %.frozen29, 675, !dbg !21
  %65 = mul i32 %64, 675
  %.decomposed30 = sub i32 %.frozen29, %65
  %.frozen31 = freeze i32 %36
  %66 = sdiv i32 %.frozen31, 675, !dbg !21
  %67 = mul i32 %66, 675
  %.decomposed32 = sub i32 %.frozen31, %67
  %68 = mul i32 %28, 320, !dbg !22
  %69 = add i32 %68, %48, !dbg !23
  %70 = sext i32 %69 to i64, !dbg !24
  %71 = getelementptr half, ptr addrspace(1) %0, i64 %70, !dbg !24
  %72 = and i1 %50, %37, !dbg !25
  %73 = and i1 %51, %38, !dbg !25
  %74 = and i1 %51, %39, !dbg !25
  %75 = and i1 %51, %40, !dbg !25
  %76 = and i1 %51, %41, !dbg !25
  %77 = and i1 %51, %42, !dbg !25
  %78 = and i1 %51, %43, !dbg !25
  %79 = and i1 %51, %44, !dbg !25
  %80 = and i1 %51, %45, !dbg !25
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %72) #2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !26
  %86 = sext i32 %48 to i64, !dbg !27
  %87 = getelementptr half, ptr addrspace(1) %1, i64 %86, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %50) #2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %extelt.offset4 = lshr i32 %89, 16, !dbg !28
  %93 = trunc i32 %extelt.offset4 to i16, !dbg !28
  %94 = bitcast i16 %93 to half, !dbg !28
  %extelt.offset5 = lshr i32 %90, 16, !dbg !28
  %95 = trunc i32 %extelt.offset5 to i16, !dbg !28
  %96 = bitcast i16 %95 to half, !dbg !28
  %extelt.offset6 = lshr i32 %91, 16, !dbg !28
  %97 = trunc i32 %extelt.offset6 to i16, !dbg !28
  %98 = bitcast i16 %97 to half, !dbg !28
  %extelt.offset7 = lshr i32 %92, 16, !dbg !28
  %99 = trunc i32 %extelt.offset7 to i16, !dbg !28
  %100 = bitcast i16 %99 to half, !dbg !28
  %101 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !26
  %102 = insertelement <2 x i32> %101, i32 %89, i64 1, !dbg !26
  %103 = trunc <2 x i32> %102 to <2 x i16>, !dbg !26
  %104 = bitcast <2 x i16> %103 to <2 x half>, !dbg !26
  %105 = fpext <2 x half> %104 to <2 x float>, !dbg !29
  %106 = fpext half %94 to float, !dbg !30
  %107 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !26
  %108 = insertelement <2 x i32> %107, i32 %90, i64 1, !dbg !26
  %109 = trunc <2 x i32> %108 to <2 x i16>, !dbg !26
  %110 = bitcast <2 x i16> %109 to <2 x half>, !dbg !26
  %111 = fpext <2 x half> %110 to <2 x float>, !dbg !29
  %112 = fpext half %96 to float, !dbg !30
  %113 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !26
  %114 = insertelement <2 x i32> %113, i32 %91, i64 1, !dbg !26
  %115 = trunc <2 x i32> %114 to <2 x i16>, !dbg !26
  %116 = bitcast <2 x i16> %115 to <2 x half>, !dbg !26
  %117 = fpext <2 x half> %116 to <2 x float>, !dbg !29
  %118 = fpext half %98 to float, !dbg !30
  %119 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !26
  %120 = insertelement <2 x i32> %119, i32 %92, i64 1, !dbg !26
  %121 = trunc <2 x i32> %120 to <2 x i16>, !dbg !26
  %122 = bitcast <2 x i16> %121 to <2 x half>, !dbg !26
  %123 = fpext <2 x half> %122 to <2 x float>, !dbg !29
  %124 = fpext half %100 to float, !dbg !30
  %125 = getelementptr half, ptr addrspace(1) %2, i64 %70, !dbg !31
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %72) #2, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !32
  %131 = trunc i32 %127 to i16, !dbg !32
  %132 = bitcast i16 %131 to half, !dbg !32
  %133 = trunc i32 %128 to i16, !dbg !32
  %134 = bitcast i16 %133 to half, !dbg !32
  %135 = trunc i32 %129 to i16, !dbg !32
  %136 = bitcast i16 %135 to half, !dbg !32
  %137 = trunc i32 %130 to i16, !dbg !32
  %138 = bitcast i16 %137 to half, !dbg !32
  %139 = fpext half %132 to float, !dbg !33
  %140 = fpext half %134 to float, !dbg !33
  %141 = fpext half %136 to float, !dbg !33
  %142 = fpext half %138 to float, !dbg !33
  %shift = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %143 = fadd <2 x float> %shift, %105, !dbg !34
  %144 = extractelement <2 x float> %143, i64 0, !dbg !34
  %shift12 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %145 = fadd <2 x float> %shift12, %111, !dbg !34
  %146 = extractelement <2 x float> %145, i64 0, !dbg !34
  %shift13 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %147 = fadd <2 x float> %shift13, %117, !dbg !34
  %148 = extractelement <2 x float> %147, i64 0, !dbg !34
  %shift14 = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %149 = fadd <2 x float> %shift14, %123, !dbg !34
  %150 = extractelement <2 x float> %149, i64 0, !dbg !34
  %151 = fmul float %139, 1.250000e-01, !dbg !35
  %152 = insertelement <2 x i32> %101, i32 %127, i64 1, !dbg !26
  %153 = lshr <2 x i32> %152, <i32 16, i32 16>, !dbg !26
  %154 = trunc <2 x i32> %153 to <2 x i16>, !dbg !26
  %155 = bitcast <2 x i16> %154 to <2 x half>, !dbg !26
  %156 = fpext <2 x half> %155 to <2 x float>, !dbg !29
  %157 = fmul float %140, 1.250000e-01, !dbg !35
  %158 = insertelement <2 x i32> %107, i32 %128, i64 1, !dbg !26
  %159 = lshr <2 x i32> %158, <i32 16, i32 16>, !dbg !26
  %160 = trunc <2 x i32> %159 to <2 x i16>, !dbg !26
  %161 = bitcast <2 x i16> %160 to <2 x half>, !dbg !26
  %162 = fpext <2 x half> %161 to <2 x float>, !dbg !29
  %163 = fmul float %141, 1.250000e-01, !dbg !35
  %164 = insertelement <2 x i32> %113, i32 %129, i64 1, !dbg !26
  %165 = lshr <2 x i32> %164, <i32 16, i32 16>, !dbg !26
  %166 = trunc <2 x i32> %165 to <2 x i16>, !dbg !26
  %167 = bitcast <2 x i16> %166 to <2 x half>, !dbg !26
  %168 = fpext <2 x half> %167 to <2 x float>, !dbg !29
  %169 = fmul float %142, 1.250000e-01, !dbg !35
  %170 = insertelement <2 x i32> %119, i32 %130, i64 1, !dbg !26
  %171 = lshr <2 x i32> %170, <i32 16, i32 16>, !dbg !26
  %172 = trunc <2 x i32> %171 to <2 x i16>, !dbg !26
  %173 = bitcast <2 x i16> %172 to <2 x half>, !dbg !26
  %174 = fpext <2 x half> %173 to <2 x float>, !dbg !29
  %175 = fadd float %144, %151, !dbg !36
  %176 = extractelement <2 x float> %156, i64 0, !dbg !36
  %177 = fadd float %176, %106, !dbg !36
  %178 = extractelement <2 x float> %156, i64 1, !dbg !36
  %179 = fmul float %178, 1.250000e-01, !dbg !36
  %180 = fadd float %177, %179, !dbg !36
  %181 = fadd float %146, %157, !dbg !36
  %182 = extractelement <2 x float> %162, i64 0, !dbg !36
  %183 = fadd float %182, %112, !dbg !36
  %184 = extractelement <2 x float> %162, i64 1, !dbg !36
  %185 = fmul float %184, 1.250000e-01, !dbg !36
  %186 = fadd float %183, %185, !dbg !36
  %187 = fadd float %148, %163, !dbg !36
  %188 = extractelement <2 x float> %168, i64 0, !dbg !36
  %189 = fadd float %188, %118, !dbg !36
  %190 = extractelement <2 x float> %168, i64 1, !dbg !36
  %191 = fmul float %190, 1.250000e-01, !dbg !36
  %192 = fadd float %189, %191, !dbg !36
  %193 = fadd float %150, %169, !dbg !36
  %194 = extractelement <2 x float> %174, i64 0, !dbg !36
  %195 = fadd float %194, %124, !dbg !36
  %196 = extractelement <2 x float> %174, i64 1, !dbg !36
  %197 = fmul float %196, 1.250000e-01, !dbg !36
  %198 = fadd float %195, %197, !dbg !36
  %199 = mul i32 %49, 675, !dbg !37
  %200 = add i32 %.decomposed, %199, !dbg !38
  %201 = add i32 %.decomposed20, %199, !dbg !38
  %202 = add i32 %.decomposed22, %199, !dbg !38
  %203 = add i32 %.decomposed24, %199, !dbg !38
  %204 = add i32 %.decomposed26, %199, !dbg !38
  %205 = add i32 %.decomposed28, %199, !dbg !38
  %206 = add i32 %.decomposed30, %199, !dbg !38
  %207 = add i32 %.decomposed32, %199, !dbg !38
  %208 = mul i32 %52, 216000, !dbg !39
  %209 = mul i32 %54, 216000, !dbg !39
  %210 = mul i32 %56, 216000, !dbg !39
  %211 = mul i32 %58, 216000, !dbg !39
  %212 = mul i32 %60, 216000, !dbg !39
  %213 = mul i32 %62, 216000, !dbg !39
  %214 = mul i32 %64, 216000, !dbg !39
  %215 = mul i32 %66, 216000, !dbg !39
  %216 = add i32 %200, %208, !dbg !40
  %217 = add i32 %201, %209, !dbg !40
  %218 = add i32 %202, %210, !dbg !40
  %219 = add i32 %203, %211, !dbg !40
  %220 = add i32 %204, %212, !dbg !40
  %221 = add i32 %205, %213, !dbg !40
  %222 = add i32 %206, %214, !dbg !40
  %223 = add i32 %207, %215, !dbg !40
  %224 = sext i32 %216 to i64, !dbg !41
  %225 = getelementptr half, ptr addrspace(1) %3, i64 %224, !dbg !41
  %226 = sext i32 %217 to i64, !dbg !41
  %227 = getelementptr half, ptr addrspace(1) %3, i64 %226, !dbg !41
  %228 = sext i32 %218 to i64, !dbg !41
  %229 = getelementptr half, ptr addrspace(1) %3, i64 %228, !dbg !41
  %230 = sext i32 %219 to i64, !dbg !41
  %231 = getelementptr half, ptr addrspace(1) %3, i64 %230, !dbg !41
  %232 = sext i32 %220 to i64, !dbg !41
  %233 = getelementptr half, ptr addrspace(1) %3, i64 %232, !dbg !41
  %234 = sext i32 %221 to i64, !dbg !41
  %235 = getelementptr half, ptr addrspace(1) %3, i64 %234, !dbg !41
  %236 = sext i32 %222 to i64, !dbg !41
  %237 = getelementptr half, ptr addrspace(1) %3, i64 %236, !dbg !41
  %238 = sext i32 %223 to i64, !dbg !41
  %239 = getelementptr half, ptr addrspace(1) %3, i64 %238, !dbg !41
  %240 = fptrunc float %175 to half, !dbg !42
  %241 = fptrunc float %180 to half, !dbg !42
  %242 = fptrunc float %181 to half, !dbg !42
  %243 = fptrunc float %186 to half, !dbg !42
  %244 = fptrunc float %187 to half, !dbg !42
  %245 = fptrunc float %192 to half, !dbg !42
  %246 = fptrunc float %193 to half, !dbg !42
  %247 = fptrunc float %198 to half, !dbg !42
  %248 = mul nuw nsw i32 %13, 33, !dbg !42
  %249 = add nuw nsw i32 %248, %22, !dbg !42
  %250 = zext nneg i32 %249 to i64, !dbg !42
  %251 = getelementptr half, ptr addrspace(3) @global_smem, i64 %250, !dbg !42
  %252 = insertelement <1 x half> undef, half %240, i64 0, !dbg !42
  store <1 x half> %252, ptr addrspace(3) %251, align 2, !dbg !42
  %253 = or i32 %22, 1, !dbg !42
  %254 = add nuw nsw i32 %253, %248, !dbg !42
  %255 = zext nneg i32 %254 to i64, !dbg !42
  %256 = getelementptr half, ptr addrspace(3) @global_smem, i64 %255, !dbg !42
  %257 = insertelement <1 x half> undef, half %241, i64 0, !dbg !42
  store <1 x half> %257, ptr addrspace(3) %256, align 2, !dbg !42
  %258 = or i32 %22, 2, !dbg !42
  %259 = add nuw nsw i32 %258, %248, !dbg !42
  %260 = zext nneg i32 %259 to i64, !dbg !42
  %261 = getelementptr half, ptr addrspace(3) @global_smem, i64 %260, !dbg !42
  %262 = insertelement <1 x half> undef, half %242, i64 0, !dbg !42
  store <1 x half> %262, ptr addrspace(3) %261, align 2, !dbg !42
  %263 = or i32 %22, 3, !dbg !42
  %264 = add nuw nsw i32 %263, %248, !dbg !42
  %265 = zext nneg i32 %264 to i64, !dbg !42
  %266 = getelementptr half, ptr addrspace(3) @global_smem, i64 %265, !dbg !42
  %267 = insertelement <1 x half> undef, half %243, i64 0, !dbg !42
  store <1 x half> %267, ptr addrspace(3) %266, align 2, !dbg !42
  %268 = or i32 %22, 4, !dbg !42
  %269 = add nuw nsw i32 %268, %248, !dbg !42
  %270 = zext nneg i32 %269 to i64, !dbg !42
  %271 = getelementptr half, ptr addrspace(3) @global_smem, i64 %270, !dbg !42
  %272 = insertelement <1 x half> undef, half %244, i64 0, !dbg !42
  store <1 x half> %272, ptr addrspace(3) %271, align 2, !dbg !42
  %273 = or i32 %22, 5, !dbg !42
  %274 = add nuw nsw i32 %273, %248, !dbg !42
  %275 = zext nneg i32 %274 to i64, !dbg !42
  %276 = getelementptr half, ptr addrspace(3) @global_smem, i64 %275, !dbg !42
  %277 = insertelement <1 x half> undef, half %245, i64 0, !dbg !42
  store <1 x half> %277, ptr addrspace(3) %276, align 2, !dbg !42
  %278 = or i32 %22, 6, !dbg !42
  %279 = add nuw nsw i32 %278, %248, !dbg !42
  %280 = zext nneg i32 %279 to i64, !dbg !42
  %281 = getelementptr half, ptr addrspace(3) @global_smem, i64 %280, !dbg !42
  %282 = insertelement <1 x half> undef, half %246, i64 0, !dbg !42
  store <1 x half> %282, ptr addrspace(3) %281, align 2, !dbg !42
  %283 = or i32 %22, 7, !dbg !42
  %284 = add nuw nsw i32 %283, %248, !dbg !42
  %285 = zext nneg i32 %284 to i64, !dbg !42
  %286 = getelementptr half, ptr addrspace(3) @global_smem, i64 %285, !dbg !42
  %287 = insertelement <1 x half> undef, half %247, i64 0, !dbg !42
  store <1 x half> %287, ptr addrspace(3) %286, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %288 = mul nuw nsw i32 %10, 33, !dbg !42
  %289 = add nuw nsw i32 %288, %8, !dbg !42
  %290 = zext nneg i32 %289 to i64, !dbg !42
  %291 = getelementptr half, ptr addrspace(3) @global_smem, i64 %290, !dbg !42
  %292 = load i16, ptr addrspace(3) %291, align 2, !dbg !42
  %293 = mul nuw nsw i32 %14, 33, !dbg !42
  %294 = add nuw nsw i32 %293, %8, !dbg !42
  %295 = zext nneg i32 %294 to i64, !dbg !42
  %296 = getelementptr half, ptr addrspace(3) @global_smem, i64 %295, !dbg !42
  %297 = load i16, ptr addrspace(3) %296, align 2, !dbg !42
  %298 = mul nuw nsw i32 %15, 33, !dbg !42
  %299 = add nuw nsw i32 %298, %8, !dbg !42
  %300 = zext nneg i32 %299 to i64, !dbg !42
  %301 = getelementptr half, ptr addrspace(3) @global_smem, i64 %300, !dbg !42
  %302 = load i16, ptr addrspace(3) %301, align 2, !dbg !42
  %303 = mul nuw nsw i32 %16, 33, !dbg !42
  %304 = add nuw nsw i32 %303, %8, !dbg !42
  %305 = zext nneg i32 %304 to i64, !dbg !42
  %306 = getelementptr half, ptr addrspace(3) @global_smem, i64 %305, !dbg !42
  %307 = load i16, ptr addrspace(3) %306, align 2, !dbg !42
  %308 = mul nuw nsw i32 %17, 33, !dbg !42
  %309 = add nuw nsw i32 %308, %8, !dbg !42
  %310 = zext nneg i32 %309 to i64, !dbg !42
  %311 = getelementptr half, ptr addrspace(3) @global_smem, i64 %310, !dbg !42
  %312 = load i16, ptr addrspace(3) %311, align 2, !dbg !42
  %313 = mul nuw nsw i32 %18, 33, !dbg !42
  %314 = add nuw nsw i32 %313, %8, !dbg !42
  %315 = zext nneg i32 %314 to i64, !dbg !42
  %316 = getelementptr half, ptr addrspace(3) @global_smem, i64 %315, !dbg !42
  %317 = load i16, ptr addrspace(3) %316, align 2, !dbg !42
  %318 = mul nuw nsw i32 %19, 33, !dbg !42
  %319 = add nuw nsw i32 %318, %8, !dbg !42
  %320 = zext nneg i32 %319 to i64, !dbg !42
  %321 = getelementptr half, ptr addrspace(3) @global_smem, i64 %320, !dbg !42
  %322 = load i16, ptr addrspace(3) %321, align 2, !dbg !42
  %323 = mul nuw nsw i32 %20, 33, !dbg !42
  %324 = add nuw nsw i32 %323, %8, !dbg !42
  %325 = zext nneg i32 %324 to i64, !dbg !42
  %326 = getelementptr half, ptr addrspace(3) @global_smem, i64 %325, !dbg !42
  %327 = load i16, ptr addrspace(3) %326, align 2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %292, ptr addrspace(1) %225, i1 %73) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %297, ptr addrspace(1) %227, i1 %74) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %302, ptr addrspace(1) %229, i1 %75) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %307, ptr addrspace(1) %231, i1 %76) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %312, ptr addrspace(1) %233, i1 %77) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %317, ptr addrspace(1) %235, i1 %78) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %322, ptr addrspace(1) %237, i1 %79) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %327, ptr addrspace(1) %239, i1 %80) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cflmorxwram7b53hs73bzvriztaxm7ly3y2s7goaejppuevdgnlk.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/fl")
!3 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 40, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 54, scope: !5)
!26 = !DILocation(line: 33, column: 46, scope: !5)
!27 = !DILocation(line: 34, column: 30, scope: !5)
!28 = !DILocation(line: 34, column: 35, scope: !5)
!29 = !DILocation(line: 33, column: 94, scope: !5)
!30 = !DILocation(line: 34, column: 75, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 35, column: 94, scope: !5)
!34 = !DILocation(line: 36, column: 18, scope: !5)
!35 = !DILocation(line: 38, column: 18, scope: !5)
!36 = !DILocation(line: 39, column: 18, scope: !5)
!37 = !DILocation(line: 40, column: 35, scope: !5)
!38 = !DILocation(line: 40, column: 31, scope: !5)
!39 = !DILocation(line: 40, column: 49, scope: !5)
!40 = !DILocation(line: 40, column: 42, scope: !5)
!41 = !DILocation(line: 40, column: 25, scope: !5)
!42 = !DILocation(line: 40, column: 61, scope: !5)
!43 = !DILocation(line: 40, column: 4, scope: !5)
