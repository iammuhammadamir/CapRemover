; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d891011de12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %14, 255, !dbg !8
  %15 = or i32 %urem, 256, !dbg !8
  %16 = or i32 %urem, 512, !dbg !8
  %17 = or i32 %urem, 768, !dbg !8
  %18 = shl nuw nsw i32 %urem, 2, !dbg !8
  %19 = or i32 %18, 1, !dbg !8
  %20 = or i32 %18, 2, !dbg !8
  %21 = or i32 %18, 3, !dbg !8
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %23 = icmp slt i32 %22, 704, !dbg !10
  %24 = srem i32 %22, 32, !dbg !11
  %25 = mul i32 %22, 20, !dbg !12
  %26 = mul i32 %25, %8, !dbg !13
  %27 = mul i32 %26, %9, !dbg !14
  %28 = mul nsw i32 %24, 20, !dbg !15
  %29 = icmp sgt i32 %12, 0, !dbg !16
  br i1 %29, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !16

.._crit_edge_crit_edge:                           ; preds = %13
  %.pre85 = shl nuw nsw i32 %urem, 1, !dbg !16
  %.pre87 = zext nneg i32 %.pre85 to i64, !dbg !16
  br label %._crit_edge, !dbg !16

.lr.ph:                                           ; preds = %13
  %30 = shl nuw nsw i32 %urem, 3
  %31 = zext nneg i32 %30 to i64
  %32 = getelementptr half, ptr addrspace(3) @global_smem, i64 %31
  %33 = shl nuw nsw i32 %19, 1
  %34 = zext nneg i32 %33 to i64
  %35 = getelementptr half, ptr addrspace(3) @global_smem, i64 %34
  %36 = shl nuw nsw i32 %20, 1
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr half, ptr addrspace(3) @global_smem, i64 %37
  %39 = shl nuw nsw i32 %21, 1
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr half, ptr addrspace(3) @global_smem, i64 %40
  %42 = shl nuw nsw i32 %urem, 1
  %43 = zext nneg i32 %42 to i64
  %44 = getelementptr half, ptr addrspace(3) @global_smem, i64 %43
  %45 = shl nuw nsw i32 %15, 1
  %46 = zext nneg i32 %45 to i64
  %47 = getelementptr half, ptr addrspace(3) @global_smem, i64 %46
  %48 = shl nuw nsw i32 %16, 1
  %49 = zext nneg i32 %48 to i64
  %50 = getelementptr half, ptr addrspace(3) @global_smem, i64 %49
  %51 = shl nuw nsw i32 %17, 1
  %52 = zext nneg i32 %51 to i64
  %53 = getelementptr half, ptr addrspace(3) @global_smem, i64 %52
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %43
  %55 = zext nneg i32 %urem to i64
  %56 = getelementptr half, ptr addrspace(3) @global_smem, i64 %55
  %57 = zext nneg i32 %15 to i64
  %58 = getelementptr half, ptr addrspace(3) @global_smem, i64 %57
  %59 = zext nneg i32 %16 to i64
  %60 = getelementptr half, ptr addrspace(3) @global_smem, i64 %59
  %61 = zext nneg i32 %17 to i64
  %62 = getelementptr half, ptr addrspace(3) @global_smem, i64 %61
  %63 = zext nneg i32 %18 to i64
  %64 = getelementptr half, ptr addrspace(3) @global_smem, i64 %63
  %65 = insertelement <8 x i1> poison, i1 %23, i64 0, !dbg !17
  %66 = shufflevector <8 x i1> %65, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  %67 = insertelement <8 x i32> poison, i32 %12, i64 0, !dbg !18
  %68 = shufflevector <8 x i32> %67, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !18
  br label %69, !dbg !16

69:                                               ; preds = %.lr.ph, %._crit_edge38
  %70 = phi float [ 0.000000e+00, %.lr.ph ], [ %431, %._crit_edge38 ]
  %71 = phi float [ 0.000000e+00, %.lr.ph ], [ %432, %._crit_edge38 ]
  %72 = phi float [ 0.000000e+00, %.lr.ph ], [ %433, %._crit_edge38 ]
  %73 = phi float [ 0.000000e+00, %.lr.ph ], [ %434, %._crit_edge38 ]
  %74 = phi float [ 0.000000e+00, %.lr.ph ], [ %435, %._crit_edge38 ]
  %75 = phi float [ 0.000000e+00, %.lr.ph ], [ %436, %._crit_edge38 ]
  %76 = phi float [ 0.000000e+00, %.lr.ph ], [ %437, %._crit_edge38 ]
  %77 = phi float [ 0.000000e+00, %.lr.ph ], [ %438, %._crit_edge38 ]
  %78 = phi i32 [ 0, %.lr.ph ], [ %465, %._crit_edge38 ]
  %79 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %429, %._crit_edge38 ]
  %80 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %430, %._crit_edge38 ]
  %81 = or i32 %78, %urem, !dbg !19
  %82 = or i32 %78, %15, !dbg !19
  %83 = or i32 %78, %16, !dbg !19
  %84 = or i32 %78, %17, !dbg !19
  %85 = or i32 %81, 1024, !dbg !19
  %86 = or i32 %81, 1280, !dbg !19
  %87 = or i32 %81, 1536, !dbg !19
  %88 = or i32 %81, 1792, !dbg !19
  %89 = or i32 %78, %18, !dbg !19
  %90 = or i32 %78, %19, !dbg !19
  %91 = or i32 %78, %20, !dbg !19
  %92 = or i32 %78, %21, !dbg !19
  %93 = or i32 %89, 1024, !dbg !19
  %94 = or i32 %89, 1025, !dbg !19
  %95 = or i32 %89, 1026, !dbg !19
  %96 = or i32 %89, 1027, !dbg !19
  %97 = icmp slt i32 %89, %12, !dbg !18
  %98 = icmp slt i32 %90, %12, !dbg !18
  %99 = icmp slt i32 %91, %12, !dbg !18
  %100 = icmp slt i32 %92, %12, !dbg !18
  %101 = icmp slt i32 %93, %12, !dbg !18
  %102 = icmp slt i32 %94, %12, !dbg !18
  %103 = icmp slt i32 %95, %12, !dbg !18
  %104 = icmp slt i32 %96, %12, !dbg !18
  %105 = sdiv i32 %81, %10, !dbg !20
  %106 = sdiv i32 %82, %10, !dbg !20
  %107 = sdiv i32 %83, %10, !dbg !20
  %108 = sdiv i32 %84, %10, !dbg !20
  %109 = sdiv i32 %85, %10, !dbg !20
  %110 = sdiv i32 %86, %10, !dbg !20
  %111 = sdiv i32 %87, %10, !dbg !20
  %112 = sdiv i32 %88, %10, !dbg !20
  %113 = add i32 %89, %27, !dbg !21
  %114 = add i32 %90, %27, !dbg !21
  %115 = add i32 %91, %27, !dbg !21
  %116 = add i32 %92, %27, !dbg !21
  %117 = add i32 %93, %27, !dbg !21
  %118 = add i32 %94, %27, !dbg !21
  %119 = add i32 %95, %27, !dbg !21
  %120 = add i32 %96, %27, !dbg !21
  %121 = sext i32 %113 to i64, !dbg !22
  %122 = getelementptr half, ptr addrspace(1) %0, i64 %121, !dbg !22
  %123 = sext i32 %114 to i64, !dbg !22
  %124 = getelementptr half, ptr addrspace(1) %0, i64 %123, !dbg !22
  %125 = sext i32 %115 to i64, !dbg !22
  %126 = getelementptr half, ptr addrspace(1) %0, i64 %125, !dbg !22
  %127 = sext i32 %116 to i64, !dbg !22
  %128 = getelementptr half, ptr addrspace(1) %0, i64 %127, !dbg !22
  %129 = sext i32 %117 to i64, !dbg !22
  %130 = getelementptr half, ptr addrspace(1) %0, i64 %129, !dbg !22
  %131 = sext i32 %118 to i64, !dbg !22
  %132 = getelementptr half, ptr addrspace(1) %0, i64 %131, !dbg !22
  %133 = sext i32 %119 to i64, !dbg !22
  %134 = getelementptr half, ptr addrspace(1) %0, i64 %133, !dbg !22
  %135 = sext i32 %120 to i64, !dbg !22
  %136 = getelementptr half, ptr addrspace(1) %0, i64 %135, !dbg !22
  %137 = and i1 %23, %97, !dbg !17
  %138 = and i1 %23, %98, !dbg !17
  %139 = and i1 %23, %99, !dbg !17
  %140 = and i1 %23, %100, !dbg !17
  %141 = and i1 %23, %101, !dbg !17
  %142 = and i1 %23, %102, !dbg !17
  %143 = and i1 %23, %103, !dbg !17
  %144 = and i1 %23, %104, !dbg !17
  %145 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %122, i1 %137, i16 0, i1 %137) #3, !dbg !23
  %146 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %124, i1 %138, i16 0, i1 %138) #3, !dbg !23
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %126, i1 %139, i16 0, i1 %139) #3, !dbg !23
  %148 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %128, i1 %140, i16 0, i1 %140) #3, !dbg !23
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %130, i1 %141, i16 0, i1 %141) #3, !dbg !23
  %150 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %132, i1 %142, i16 0, i1 %142) #3, !dbg !23
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %134, i1 %143, i16 0, i1 %143) #3, !dbg !23
  %152 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %136, i1 %144, i16 0, i1 %144) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %145, ptr addrspace(3) %32, align 2, !dbg !24
  store i16 %146, ptr addrspace(3) %35, align 2, !dbg !24
  store i16 %147, ptr addrspace(3) %38, align 2, !dbg !24
  store i16 %148, ptr addrspace(3) %41, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %153 = load half, ptr addrspace(3) %44, align 2, !dbg !24
  %154 = load half, ptr addrspace(3) %47, align 2, !dbg !24
  %155 = load half, ptr addrspace(3) %50, align 2, !dbg !24
  %156 = load half, ptr addrspace(3) %53, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %149, ptr addrspace(3) %32, align 2, !dbg !24
  store i16 %150, ptr addrspace(3) %35, align 2, !dbg !24
  store i16 %151, ptr addrspace(3) %38, align 2, !dbg !24
  store i16 %152, ptr addrspace(3) %41, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %157 = load half, ptr addrspace(3) %44, align 2, !dbg !24
  %158 = load half, ptr addrspace(3) %47, align 2, !dbg !24
  %159 = load half, ptr addrspace(3) %50, align 2, !dbg !24
  %160 = load half, ptr addrspace(3) %53, align 2, !dbg !24
  %161 = add i32 %105, %28, !dbg !25
  %162 = add i32 %106, %28, !dbg !25
  %163 = add i32 %107, %28, !dbg !25
  %164 = add i32 %108, %28, !dbg !25
  %165 = add i32 %109, %28, !dbg !25
  %166 = add i32 %110, %28, !dbg !25
  %167 = add i32 %111, %28, !dbg !25
  %168 = add i32 %112, %28, !dbg !25
  %169 = sext i32 %161 to i64, !dbg !26
  %170 = getelementptr half, ptr addrspace(1) %1, i64 %169, !dbg !26
  %171 = sext i32 %162 to i64, !dbg !26
  %172 = getelementptr half, ptr addrspace(1) %1, i64 %171, !dbg !26
  %173 = sext i32 %163 to i64, !dbg !26
  %174 = getelementptr half, ptr addrspace(1) %1, i64 %173, !dbg !26
  %175 = sext i32 %164 to i64, !dbg !26
  %176 = getelementptr half, ptr addrspace(1) %1, i64 %175, !dbg !26
  %177 = sext i32 %165 to i64, !dbg !26
  %178 = getelementptr half, ptr addrspace(1) %1, i64 %177, !dbg !26
  %179 = sext i32 %166 to i64, !dbg !26
  %180 = getelementptr half, ptr addrspace(1) %1, i64 %179, !dbg !26
  %181 = sext i32 %167 to i64, !dbg !26
  %182 = getelementptr half, ptr addrspace(1) %1, i64 %181, !dbg !26
  %183 = sext i32 %168 to i64, !dbg !26
  %184 = getelementptr half, ptr addrspace(1) %1, i64 %183, !dbg !26
  %185 = getelementptr half, ptr addrspace(1) %2, i64 %121, !dbg !27
  %186 = getelementptr half, ptr addrspace(1) %2, i64 %123, !dbg !27
  %187 = getelementptr half, ptr addrspace(1) %2, i64 %125, !dbg !27
  %188 = getelementptr half, ptr addrspace(1) %2, i64 %127, !dbg !27
  %189 = getelementptr half, ptr addrspace(1) %2, i64 %129, !dbg !27
  %190 = getelementptr half, ptr addrspace(1) %2, i64 %131, !dbg !27
  %191 = getelementptr half, ptr addrspace(1) %2, i64 %133, !dbg !27
  %192 = getelementptr half, ptr addrspace(1) %2, i64 %135, !dbg !27
  %193 = add i32 %105, %25, !dbg !28
  %194 = add i32 %106, %25, !dbg !28
  %195 = add i32 %107, %25, !dbg !28
  %196 = add i32 %108, %25, !dbg !28
  %197 = add i32 %109, %25, !dbg !28
  %198 = add i32 %110, %25, !dbg !28
  %199 = add i32 %111, %25, !dbg !28
  %200 = add i32 %112, %25, !dbg !28
  %201 = sext i32 %193 to i64, !dbg !29
  %202 = getelementptr half, ptr addrspace(1) %3, i64 %201, !dbg !29
  %203 = sext i32 %194 to i64, !dbg !29
  %204 = getelementptr half, ptr addrspace(1) %3, i64 %203, !dbg !29
  %205 = sext i32 %195 to i64, !dbg !29
  %206 = getelementptr half, ptr addrspace(1) %3, i64 %205, !dbg !29
  %207 = sext i32 %196 to i64, !dbg !29
  %208 = getelementptr half, ptr addrspace(1) %3, i64 %207, !dbg !29
  %209 = sext i32 %197 to i64, !dbg !29
  %210 = getelementptr half, ptr addrspace(1) %3, i64 %209, !dbg !29
  %211 = sext i32 %198 to i64, !dbg !29
  %212 = getelementptr half, ptr addrspace(1) %3, i64 %211, !dbg !29
  %213 = sext i32 %199 to i64, !dbg !29
  %214 = getelementptr half, ptr addrspace(1) %3, i64 %213, !dbg !29
  %215 = sext i32 %200 to i64, !dbg !29
  %216 = getelementptr half, ptr addrspace(1) %3, i64 %215, !dbg !29
  %217 = getelementptr half, ptr addrspace(1) %4, i64 %169, !dbg !30
  %218 = getelementptr half, ptr addrspace(1) %4, i64 %171, !dbg !30
  %219 = getelementptr half, ptr addrspace(1) %4, i64 %173, !dbg !30
  %220 = getelementptr half, ptr addrspace(1) %4, i64 %175, !dbg !30
  %221 = getelementptr half, ptr addrspace(1) %4, i64 %177, !dbg !30
  %222 = getelementptr half, ptr addrspace(1) %4, i64 %179, !dbg !30
  %223 = getelementptr half, ptr addrspace(1) %4, i64 %181, !dbg !30
  %224 = getelementptr half, ptr addrspace(1) %4, i64 %183, !dbg !30
  %225 = getelementptr half, ptr addrspace(1) %5, i64 %201, !dbg !31
  %226 = getelementptr half, ptr addrspace(1) %5, i64 %203, !dbg !31
  %227 = getelementptr half, ptr addrspace(1) %5, i64 %205, !dbg !31
  %228 = getelementptr half, ptr addrspace(1) %5, i64 %207, !dbg !31
  %229 = getelementptr half, ptr addrspace(1) %5, i64 %209, !dbg !31
  %230 = getelementptr half, ptr addrspace(1) %5, i64 %211, !dbg !31
  %231 = getelementptr half, ptr addrspace(1) %5, i64 %213, !dbg !31
  %232 = getelementptr half, ptr addrspace(1) %5, i64 %215, !dbg !31
  %233 = insertelement <8 x i32> poison, i32 %81, i64 0, !dbg !18
  %234 = insertelement <8 x i32> %233, i32 %82, i64 1, !dbg !18
  %235 = insertelement <8 x i32> %234, i32 %83, i64 2, !dbg !18
  %236 = insertelement <8 x i32> %235, i32 %84, i64 3, !dbg !18
  %237 = insertelement <8 x i32> %236, i32 %85, i64 4, !dbg !18
  %238 = insertelement <8 x i32> %237, i32 %86, i64 5, !dbg !18
  %239 = insertelement <8 x i32> %238, i32 %87, i64 6, !dbg !18
  %240 = insertelement <8 x i32> %239, i32 %88, i64 7, !dbg !18
  %241 = icmp slt <8 x i32> %240, %68, !dbg !18
  %242 = and <8 x i1> %66, %241, !dbg !17
  %243 = insertelement <8 x half> poison, half %153, i64 0, !dbg !24
  %244 = insertelement <8 x half> %243, half %154, i64 1, !dbg !24
  %245 = insertelement <8 x half> %244, half %155, i64 2, !dbg !24
  %246 = insertelement <8 x half> %245, half %156, i64 3, !dbg !24
  %247 = insertelement <8 x half> %246, half %157, i64 4, !dbg !24
  %248 = insertelement <8 x half> %247, half %158, i64 5, !dbg !24
  %249 = insertelement <8 x half> %248, half %159, i64 6, !dbg !24
  %250 = insertelement <8 x half> %249, half %160, i64 7, !dbg !24
  %251 = fpext <8 x half> %250 to <8 x float>, !dbg !24
  %252 = extractelement <8 x i1> %242, i64 0, !dbg !32
  %253 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %170, i1 %252, i16 0, i1 %252) #3, !dbg !33
  %254 = extractelement <8 x i1> %242, i64 1, !dbg !32
  %255 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %172, i1 %254, i16 0, i1 %254) #3, !dbg !33
  %256 = extractelement <8 x i1> %242, i64 2, !dbg !32
  %257 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %174, i1 %256, i16 0, i1 %256) #3, !dbg !33
  %258 = extractelement <8 x i1> %242, i64 3, !dbg !32
  %259 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %176, i1 %258, i16 0, i1 %258) #3, !dbg !33
  %260 = extractelement <8 x i1> %242, i64 4, !dbg !32
  %261 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %178, i1 %260, i16 0, i1 %260) #3, !dbg !33
  %262 = extractelement <8 x i1> %242, i64 5, !dbg !32
  %263 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %180, i1 %262, i16 0, i1 %262) #3, !dbg !33
  %264 = extractelement <8 x i1> %242, i64 6, !dbg !32
  %265 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %182, i1 %264, i16 0, i1 %264) #3, !dbg !33
  %266 = extractelement <8 x i1> %242, i64 7, !dbg !32
  %267 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %184, i1 %266, i16 0, i1 %266) #3, !dbg !33
  %268 = insertelement <8 x i16> poison, i16 %253, i64 0, !dbg !33
  %269 = insertelement <8 x i16> %268, i16 %255, i64 1, !dbg !33
  %270 = insertelement <8 x i16> %269, i16 %257, i64 2, !dbg !33
  %271 = insertelement <8 x i16> %270, i16 %259, i64 3, !dbg !33
  %272 = insertelement <8 x i16> %271, i16 %261, i64 4, !dbg !33
  %273 = insertelement <8 x i16> %272, i16 %263, i64 5, !dbg !33
  %274 = insertelement <8 x i16> %273, i16 %265, i64 6, !dbg !33
  %275 = insertelement <8 x i16> %274, i16 %267, i64 7, !dbg !33
  %276 = bitcast <8 x i16> %275 to <8 x half>, !dbg !33
  %277 = fpext <8 x half> %276 to <8 x float>, !dbg !34
  %278 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %185, i1 %137, i16 0, i1 %137) #3, !dbg !35
  %279 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %186, i1 %138, i16 0, i1 %138) #3, !dbg !35
  %280 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %187, i1 %139, i16 0, i1 %139) #3, !dbg !35
  %281 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %188, i1 %140, i16 0, i1 %140) #3, !dbg !35
  %282 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %189, i1 %141, i16 0, i1 %141) #3, !dbg !35
  %283 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %190, i1 %142, i16 0, i1 %142) #3, !dbg !35
  %284 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %191, i1 %143, i16 0, i1 %143) #3, !dbg !35
  %285 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %192, i1 %144, i16 0, i1 %144) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %278, ptr addrspace(3) %32, align 2, !dbg !36
  store i16 %279, ptr addrspace(3) %35, align 2, !dbg !36
  store i16 %280, ptr addrspace(3) %38, align 2, !dbg !36
  store i16 %281, ptr addrspace(3) %41, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %286 = load half, ptr addrspace(3) %44, align 2, !dbg !36
  %287 = load half, ptr addrspace(3) %47, align 2, !dbg !36
  %288 = load half, ptr addrspace(3) %50, align 2, !dbg !36
  %289 = load half, ptr addrspace(3) %53, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %282, ptr addrspace(3) %32, align 2, !dbg !36
  store i16 %283, ptr addrspace(3) %35, align 2, !dbg !36
  store i16 %284, ptr addrspace(3) %38, align 2, !dbg !36
  store i16 %285, ptr addrspace(3) %41, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %290 = load half, ptr addrspace(3) %44, align 2, !dbg !36
  %291 = load half, ptr addrspace(3) %47, align 2, !dbg !36
  %292 = load half, ptr addrspace(3) %50, align 2, !dbg !36
  %293 = load half, ptr addrspace(3) %53, align 2, !dbg !36
  %294 = insertelement <8 x half> poison, half %286, i64 0, !dbg !37
  %295 = insertelement <8 x half> %294, half %287, i64 1, !dbg !37
  %296 = insertelement <8 x half> %295, half %288, i64 2, !dbg !37
  %297 = insertelement <8 x half> %296, half %289, i64 3, !dbg !37
  %298 = insertelement <8 x half> %297, half %290, i64 4, !dbg !37
  %299 = insertelement <8 x half> %298, half %291, i64 5, !dbg !37
  %300 = insertelement <8 x half> %299, half %292, i64 6, !dbg !37
  %301 = insertelement <8 x half> %300, half %293, i64 7, !dbg !37
  %302 = fpext <8 x half> %301 to <8 x float>, !dbg !37
  %303 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %202, i1 %252, i16 0, i1 %252) #3, !dbg !38
  %304 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %204, i1 %254, i16 0, i1 %254) #3, !dbg !38
  %305 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %206, i1 %256, i16 0, i1 %256) #3, !dbg !38
  %306 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %208, i1 %258, i16 0, i1 %258) #3, !dbg !38
  %307 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %210, i1 %260, i16 0, i1 %260) #3, !dbg !38
  %308 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %212, i1 %262, i16 0, i1 %262) #3, !dbg !38
  %309 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %214, i1 %264, i16 0, i1 %264) #3, !dbg !38
  %310 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %216, i1 %266, i16 0, i1 %266) #3, !dbg !38
  %311 = insertelement <8 x i16> poison, i16 %303, i64 0, !dbg !38
  %312 = insertelement <8 x i16> %311, i16 %304, i64 1, !dbg !38
  %313 = insertelement <8 x i16> %312, i16 %305, i64 2, !dbg !38
  %314 = insertelement <8 x i16> %313, i16 %306, i64 3, !dbg !38
  %315 = insertelement <8 x i16> %314, i16 %307, i64 4, !dbg !38
  %316 = insertelement <8 x i16> %315, i16 %308, i64 5, !dbg !38
  %317 = insertelement <8 x i16> %316, i16 %309, i64 6, !dbg !38
  %318 = insertelement <8 x i16> %317, i16 %310, i64 7, !dbg !38
  %319 = bitcast <8 x i16> %318 to <8 x half>, !dbg !38
  %320 = fpext <8 x half> %319 to <8 x float>, !dbg !39
  %321 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %217, i1 %252, i16 0, i1 %252) #3, !dbg !40
  %322 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %218, i1 %254, i16 0, i1 %254) #3, !dbg !40
  %323 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %219, i1 %256, i16 0, i1 %256) #3, !dbg !40
  %324 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %220, i1 %258, i16 0, i1 %258) #3, !dbg !40
  %325 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %221, i1 %260, i16 0, i1 %260) #3, !dbg !40
  %326 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %222, i1 %262, i16 0, i1 %262) #3, !dbg !40
  %327 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %223, i1 %264, i16 0, i1 %264) #3, !dbg !40
  %328 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %224, i1 %266, i16 0, i1 %266) #3, !dbg !40
  %329 = insertelement <8 x i16> poison, i16 %321, i64 0, !dbg !40
  %330 = insertelement <8 x i16> %329, i16 %322, i64 1, !dbg !40
  %331 = insertelement <8 x i16> %330, i16 %323, i64 2, !dbg !40
  %332 = insertelement <8 x i16> %331, i16 %324, i64 3, !dbg !40
  %333 = insertelement <8 x i16> %332, i16 %325, i64 4, !dbg !40
  %334 = insertelement <8 x i16> %333, i16 %326, i64 5, !dbg !40
  %335 = insertelement <8 x i16> %334, i16 %327, i64 6, !dbg !40
  %336 = insertelement <8 x i16> %335, i16 %328, i64 7, !dbg !40
  %337 = bitcast <8 x i16> %336 to <8 x half>, !dbg !40
  %338 = fpext <8 x half> %337 to <8 x float>, !dbg !41
  %339 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %225, i1 %252, i16 0, i1 %252) #3, !dbg !32
  %340 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %226, i1 %254, i16 0, i1 %254) #3, !dbg !32
  %341 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %227, i1 %256, i16 0, i1 %256) #3, !dbg !32
  %342 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %228, i1 %258, i16 0, i1 %258) #3, !dbg !32
  %343 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %229, i1 %260, i16 0, i1 %260) #3, !dbg !32
  %344 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %230, i1 %262, i16 0, i1 %262) #3, !dbg !32
  %345 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %231, i1 %264, i16 0, i1 %264) #3, !dbg !32
  %346 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %232, i1 %266, i16 0, i1 %266) #3, !dbg !32
  %347 = insertelement <8 x i16> poison, i16 %339, i64 0, !dbg !32
  %348 = insertelement <8 x i16> %347, i16 %340, i64 1, !dbg !32
  %349 = insertelement <8 x i16> %348, i16 %341, i64 2, !dbg !32
  %350 = insertelement <8 x i16> %349, i16 %342, i64 3, !dbg !32
  %351 = insertelement <8 x i16> %350, i16 %343, i64 4, !dbg !32
  %352 = insertelement <8 x i16> %351, i16 %344, i64 5, !dbg !32
  %353 = insertelement <8 x i16> %352, i16 %345, i64 6, !dbg !32
  %354 = insertelement <8 x i16> %353, i16 %346, i64 7, !dbg !32
  %355 = bitcast <8 x i16> %354 to <8 x half>, !dbg !32
  %356 = fpext <8 x half> %355 to <8 x float>, !dbg !42
  %357 = fadd <8 x float> %251, %277, !dbg !43
  %358 = fmul <8 x float> %302, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %359 = fadd <8 x float> %357, %358, !dbg !36
  %360 = fadd <8 x float> %320, %338, !dbg !45
  %361 = fmul <8 x float> %356, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %362 = fadd <8 x float> %360, %361, !dbg !47
  %363 = fadd <8 x float> %359, %362, !dbg !48
  %364 = icmp eq i32 %78, 0, !dbg !49
  br i1 %364, label %._crit_edge38, label %365, !dbg !50

365:                                              ; preds = %69
  %366 = fadd float %70, 1.000000e+00, !dbg !54
  %367 = fadd float %71, 1.000000e+00, !dbg !54
  %368 = fadd float %72, 1.000000e+00, !dbg !54
  %369 = fadd float %73, 1.000000e+00, !dbg !54
  %370 = fadd float %74, 1.000000e+00, !dbg !54
  %371 = fadd float %75, 1.000000e+00, !dbg !54
  %372 = fadd float %76, 1.000000e+00, !dbg !54
  %373 = fadd float %77, 1.000000e+00, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %374 = insertelement <1 x float> undef, float %366, i64 0, !dbg !54
  store <1 x float> %374, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %375 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %376 = insertelement <1 x float> undef, float %367, i64 0, !dbg !54
  store <1 x float> %376, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %377 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %378 = insertelement <1 x float> undef, float %368, i64 0, !dbg !54
  store <1 x float> %378, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %379 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %380 = insertelement <1 x float> undef, float %369, i64 0, !dbg !54
  store <1 x float> %380, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %381 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %382 = insertelement <1 x float> undef, float %370, i64 0, !dbg !54
  store <1 x float> %382, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %383 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %384 = insertelement <1 x float> undef, float %371, i64 0, !dbg !54
  store <1 x float> %384, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %385 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %386 = insertelement <1 x float> undef, float %372, i64 0, !dbg !54
  store <1 x float> %386, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %387 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %388 = insertelement <1 x float> undef, float %373, i64 0, !dbg !54
  store <1 x float> %388, ptr addrspace(3) %54, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %389 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  %390 = fsub <8 x float> %363, %79, !dbg !55
  %391 = extractelement <8 x float> %390, i64 0, !dbg !56
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float %375) #3, !dbg !56
  %393 = extractelement <8 x float> %390, i64 1, !dbg !56
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %377) #3, !dbg !56
  %395 = extractelement <8 x float> %390, i64 2, !dbg !56
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %379) #3, !dbg !56
  %397 = extractelement <8 x float> %390, i64 3, !dbg !56
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %397, float %381) #3, !dbg !56
  %399 = extractelement <8 x float> %390, i64 4, !dbg !56
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %399, float %383) #3, !dbg !56
  %401 = extractelement <8 x float> %390, i64 5, !dbg !56
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float %385) #3, !dbg !56
  %403 = extractelement <8 x float> %390, i64 6, !dbg !56
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %387) #3, !dbg !56
  %405 = extractelement <8 x float> %390, i64 7, !dbg !56
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %405, float %389) #3, !dbg !56
  %407 = insertelement <8 x float> poison, float %392, i64 0, !dbg !57
  %408 = insertelement <8 x float> %407, float %394, i64 1, !dbg !57
  %409 = insertelement <8 x float> %408, float %396, i64 2, !dbg !57
  %410 = insertelement <8 x float> %409, float %398, i64 3, !dbg !57
  %411 = insertelement <8 x float> %410, float %400, i64 4, !dbg !57
  %412 = insertelement <8 x float> %411, float %402, i64 5, !dbg !57
  %413 = insertelement <8 x float> %412, float %404, i64 6, !dbg !57
  %414 = insertelement <8 x float> %413, float %406, i64 7, !dbg !57
  %415 = fadd <8 x float> %79, %414, !dbg !57
  %416 = fsub <8 x float> %363, %415, !dbg !58
  %417 = fmul <8 x float> %390, %416, !dbg !59
  %418 = fadd <8 x float> %80, %417, !dbg !60
  br label %._crit_edge38, !dbg !50

._crit_edge38:                                    ; preds = %69, %365
  %419 = phi float [ %366, %365 ], [ 1.000000e+00, %69 ]
  %420 = phi float [ %367, %365 ], [ 1.000000e+00, %69 ]
  %421 = phi float [ %368, %365 ], [ 1.000000e+00, %69 ]
  %422 = phi float [ %369, %365 ], [ 1.000000e+00, %69 ]
  %423 = phi float [ %370, %365 ], [ 1.000000e+00, %69 ]
  %424 = phi float [ %371, %365 ], [ 1.000000e+00, %69 ]
  %425 = phi float [ %372, %365 ], [ 1.000000e+00, %69 ]
  %426 = phi float [ %373, %365 ], [ 1.000000e+00, %69 ]
  %427 = phi <8 x float> [ %415, %365 ], [ %363, %69 ]
  %428 = phi <8 x float> [ %418, %365 ], [ zeroinitializer, %69 ]
  %429 = select <8 x i1> %242, <8 x float> %427, <8 x float> %79, !dbg !61
  %430 = select <8 x i1> %242, <8 x float> %428, <8 x float> %80, !dbg !62
  %431 = select i1 %252, float %419, float %70, !dbg !63
  %432 = select i1 %254, float %420, float %71, !dbg !63
  %433 = select i1 %256, float %421, float %72, !dbg !63
  %434 = select i1 %258, float %422, float %73, !dbg !63
  %435 = select i1 %260, float %423, float %74, !dbg !63
  %436 = select i1 %262, float %424, float %75, !dbg !63
  %437 = select i1 %264, float %425, float %76, !dbg !63
  %438 = select i1 %266, float %426, float %77, !dbg !63
  %439 = extractelement <8 x float> %363, i64 0, !dbg !64
  %440 = fptrunc float %439 to half, !dbg !64
  %441 = extractelement <8 x float> %363, i64 1, !dbg !64
  %442 = fptrunc float %441 to half, !dbg !64
  %443 = extractelement <8 x float> %363, i64 2, !dbg !64
  %444 = fptrunc float %443 to half, !dbg !64
  %445 = extractelement <8 x float> %363, i64 3, !dbg !64
  %446 = fptrunc float %445 to half, !dbg !64
  %447 = extractelement <8 x float> %363, i64 4, !dbg !64
  %448 = fptrunc float %447 to half, !dbg !64
  %449 = extractelement <8 x float> %363, i64 5, !dbg !64
  %450 = fptrunc float %449 to half, !dbg !64
  %451 = extractelement <8 x float> %363, i64 6, !dbg !64
  %452 = fptrunc float %451 to half, !dbg !64
  %453 = extractelement <8 x float> %363, i64 7, !dbg !64
  %454 = fptrunc float %453 to half, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %455 = insertelement <1 x half> undef, half %440, i64 0, !dbg !64
  store <1 x half> %455, ptr addrspace(3) %56, align 2, !dbg !64
  %456 = insertelement <1 x half> undef, half %442, i64 0, !dbg !64
  store <1 x half> %456, ptr addrspace(3) %58, align 2, !dbg !64
  %457 = insertelement <1 x half> undef, half %444, i64 0, !dbg !64
  store <1 x half> %457, ptr addrspace(3) %60, align 2, !dbg !64
  %458 = insertelement <1 x half> undef, half %446, i64 0, !dbg !64
  store <1 x half> %458, ptr addrspace(3) %62, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %459 = load <4 x i16>, ptr addrspace(3) %64, align 8, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %460 = insertelement <1 x half> undef, half %448, i64 0, !dbg !64
  store <1 x half> %460, ptr addrspace(3) %56, align 2, !dbg !64
  %461 = insertelement <1 x half> undef, half %450, i64 0, !dbg !64
  store <1 x half> %461, ptr addrspace(3) %58, align 2, !dbg !64
  %462 = insertelement <1 x half> undef, half %452, i64 0, !dbg !64
  store <1 x half> %462, ptr addrspace(3) %60, align 2, !dbg !64
  %463 = insertelement <1 x half> undef, half %454, i64 0, !dbg !64
  store <1 x half> %463, ptr addrspace(3) %62, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %464 = load <4 x i16>, ptr addrspace(3) %64, align 8, !dbg !64
  %.extract = extractelement <4 x i16> %459, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract, ptr addrspace(1) %122, i1 %137) #3, !dbg !64
  %.extract18 = extractelement <4 x i16> %459, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract18, ptr addrspace(1) %124, i1 %138) #3, !dbg !64
  %.extract20 = extractelement <4 x i16> %459, i64 2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract20, ptr addrspace(1) %126, i1 %139) #3, !dbg !64
  %.extract22 = extractelement <4 x i16> %459, i64 3, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract22, ptr addrspace(1) %128, i1 %140) #3, !dbg !64
  %.extract24 = extractelement <4 x i16> %464, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract24, ptr addrspace(1) %130, i1 %141) #3, !dbg !64
  %.extract26 = extractelement <4 x i16> %464, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract26, ptr addrspace(1) %132, i1 %142) #3, !dbg !64
  %.extract28 = extractelement <4 x i16> %464, i64 2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract28, ptr addrspace(1) %134, i1 %143) #3, !dbg !64
  %.extract30 = extractelement <4 x i16> %464, i64 3, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract30, ptr addrspace(1) %136, i1 %144) #3, !dbg !64
  %465 = add i32 %78, 2048, !dbg !16
  %466 = icmp slt i32 %465, %12, !dbg !16
  br i1 %466, label %69, label %._crit_edge.loopexit, !dbg !16

._crit_edge.loopexit:                             ; preds = %._crit_edge38
  %467 = extractelement <8 x float> %430, i64 7, !dbg !16
  %468 = extractelement <8 x float> %430, i64 6, !dbg !16
  %469 = extractelement <8 x float> %430, i64 5, !dbg !16
  %470 = extractelement <8 x float> %430, i64 4, !dbg !16
  %471 = extractelement <8 x float> %430, i64 3, !dbg !16
  %472 = extractelement <8 x float> %430, i64 2, !dbg !16
  %473 = extractelement <8 x float> %430, i64 1, !dbg !16
  %474 = extractelement <8 x float> %430, i64 0, !dbg !16
  %475 = extractelement <8 x float> %429, i64 7, !dbg !16
  %476 = extractelement <8 x float> %429, i64 6, !dbg !16
  %477 = extractelement <8 x float> %429, i64 5, !dbg !16
  %478 = extractelement <8 x float> %429, i64 4, !dbg !16
  %479 = extractelement <8 x float> %429, i64 3, !dbg !16
  %480 = extractelement <8 x float> %429, i64 2, !dbg !16
  %481 = extractelement <8 x float> %429, i64 1, !dbg !16
  %482 = extractelement <8 x float> %429, i64 0, !dbg !16
  br label %._crit_edge, !dbg !8

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi88 = phi i64 [ %.pre87, %.._crit_edge_crit_edge ], [ %43, %._crit_edge.loopexit ], !dbg !16
  %483 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %482, %._crit_edge.loopexit ]
  %484 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %481, %._crit_edge.loopexit ]
  %485 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %480, %._crit_edge.loopexit ]
  %486 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %479, %._crit_edge.loopexit ]
  %487 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %478, %._crit_edge.loopexit ]
  %488 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %477, %._crit_edge.loopexit ]
  %489 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %476, %._crit_edge.loopexit ]
  %490 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %475, %._crit_edge.loopexit ]
  %491 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %474, %._crit_edge.loopexit ]
  %492 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %473, %._crit_edge.loopexit ]
  %493 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %472, %._crit_edge.loopexit ]
  %494 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %471, %._crit_edge.loopexit ]
  %495 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %470, %._crit_edge.loopexit ]
  %496 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %469, %._crit_edge.loopexit ]
  %497 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %468, %._crit_edge.loopexit ]
  %498 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %467, %._crit_edge.loopexit ]
  %499 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %431, %._crit_edge.loopexit ]
  %500 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %432, %._crit_edge.loopexit ]
  %501 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %433, %._crit_edge.loopexit ]
  %502 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %434, %._crit_edge.loopexit ]
  %503 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %435, %._crit_edge.loopexit ]
  %504 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %436, %._crit_edge.loopexit ]
  %505 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %437, %._crit_edge.loopexit ]
  %506 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %438, %._crit_edge.loopexit ]
  %507 = lshr i32 %14, 5, !dbg !8
  %508 = and i32 %507, 7, !dbg !8
  %509 = and i32 %14, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %510 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi88, !dbg !16
  %511 = insertelement <1 x float> undef, float %499, i64 0, !dbg !16
  store <1 x float> %511, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %512 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %513 = insertelement <1 x float> undef, float %500, i64 0, !dbg !16
  store <1 x float> %513, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %514 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %515 = insertelement <1 x float> undef, float %501, i64 0, !dbg !16
  store <1 x float> %515, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %516 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %517 = insertelement <1 x float> undef, float %502, i64 0, !dbg !16
  store <1 x float> %517, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %518 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %519 = insertelement <1 x float> undef, float %503, i64 0, !dbg !16
  store <1 x float> %519, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %520 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %521 = insertelement <1 x float> undef, float %504, i64 0, !dbg !16
  store <1 x float> %521, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %522 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %523 = insertelement <1 x float> undef, float %505, i64 0, !dbg !16
  store <1 x float> %523, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %524 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %525 = insertelement <1 x float> undef, float %506, i64 0, !dbg !16
  store <1 x float> %525, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %526 = load float, ptr addrspace(3) %510, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %527 = fsub float %484, %483, !dbg !67
  %528 = fadd float %512, %514, !dbg !71
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !72
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %514, float %528) #3, !dbg !73
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !74
  %532 = fmul float %527, %531, !dbg !75
  %533 = fadd float %483, %532, !dbg !76
  %534 = fadd float %491, %492, !dbg !77
  %535 = fmul float %527, %527, !dbg !78
  %536 = fmul float %535, %512, !dbg !79
  %537 = fmul float %536, %531, !dbg !80
  %538 = fadd float %534, %537, !dbg !81
  %539 = fsub float %485, %533, !dbg !67
  %540 = fadd float %528, %516, !dbg !71
  %541 = fcmp oeq float %540, 0.000000e+00, !dbg !72
  %542 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %516, float %540) #3, !dbg !73
  %543 = select i1 %541, float 0.000000e+00, float %542, !dbg !74
  %544 = fmul float %543, %539, !dbg !75
  %545 = fadd float %533, %544, !dbg !76
  %546 = fadd float %493, %538, !dbg !77
  %547 = fmul float %539, %539, !dbg !78
  %548 = fmul float %528, %547, !dbg !79
  %549 = fmul float %543, %548, !dbg !80
  %550 = fadd float %546, %549, !dbg !81
  %551 = fsub float %486, %545, !dbg !67
  %552 = fadd float %540, %518, !dbg !71
  %553 = fcmp oeq float %552, 0.000000e+00, !dbg !72
  %554 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %518, float %552) #3, !dbg !73
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !74
  %556 = fmul float %555, %551, !dbg !75
  %557 = fadd float %545, %556, !dbg !76
  %558 = fadd float %494, %550, !dbg !77
  %559 = fmul float %551, %551, !dbg !78
  %560 = fmul float %540, %559, !dbg !79
  %561 = fmul float %555, %560, !dbg !80
  %562 = fadd float %558, %561, !dbg !81
  %563 = fsub float %487, %557, !dbg !67
  %564 = fadd float %552, %520, !dbg !71
  %565 = fcmp oeq float %564, 0.000000e+00, !dbg !72
  %566 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %520, float %564) #3, !dbg !73
  %567 = select i1 %565, float 0.000000e+00, float %566, !dbg !74
  %568 = fmul float %567, %563, !dbg !75
  %569 = fadd float %557, %568, !dbg !76
  %570 = fadd float %495, %562, !dbg !77
  %571 = fmul float %563, %563, !dbg !78
  %572 = fmul float %552, %571, !dbg !79
  %573 = fmul float %567, %572, !dbg !80
  %574 = fadd float %570, %573, !dbg !81
  %575 = fsub float %488, %569, !dbg !67
  %576 = fadd float %564, %522, !dbg !71
  %577 = fcmp oeq float %576, 0.000000e+00, !dbg !72
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %522, float %576) #3, !dbg !73
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !74
  %580 = fmul float %579, %575, !dbg !75
  %581 = fadd float %569, %580, !dbg !76
  %582 = fadd float %496, %574, !dbg !77
  %583 = fmul float %575, %575, !dbg !78
  %584 = fmul float %564, %583, !dbg !79
  %585 = fmul float %579, %584, !dbg !80
  %586 = fadd float %582, %585, !dbg !81
  %587 = fsub float %489, %581, !dbg !67
  %588 = fadd float %576, %524, !dbg !71
  %589 = fcmp oeq float %588, 0.000000e+00, !dbg !72
  %590 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %524, float %588) #3, !dbg !73
  %591 = select i1 %589, float 0.000000e+00, float %590, !dbg !74
  %592 = fmul float %591, %587, !dbg !75
  %593 = fadd float %581, %592, !dbg !76
  %594 = fadd float %497, %586, !dbg !77
  %595 = fmul float %587, %587, !dbg !78
  %596 = fmul float %576, %595, !dbg !79
  %597 = fmul float %591, %596, !dbg !80
  %598 = fadd float %594, %597, !dbg !81
  %599 = fsub float %490, %593, !dbg !67
  %600 = fadd float %588, %526, !dbg !71
  %601 = fcmp oeq float %600, 0.000000e+00, !dbg !72
  %602 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %600) #3, !dbg !73
  %603 = select i1 %601, float 0.000000e+00, float %602, !dbg !74
  %604 = fmul float %603, %599, !dbg !75
  %605 = fadd float %593, %604, !dbg !76
  %606 = fadd float %498, %598, !dbg !77
  %607 = fmul float %599, %599, !dbg !78
  %608 = fmul float %588, %607, !dbg !79
  %609 = fmul float %603, %608, !dbg !80
  %610 = fadd float %606, %609, !dbg !81
  %611 = bitcast float %605 to i32, !dbg !65
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 16, i32 31), !dbg !65
  %613 = bitcast i32 %612 to float, !dbg !65
  %614 = bitcast float %610 to i32, !dbg !65
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 16, i32 31), !dbg !65
  %616 = bitcast i32 %615 to float, !dbg !65
  %617 = bitcast float %600 to i32, !dbg !65
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 16, i32 31), !dbg !65
  %619 = bitcast i32 %618 to float, !dbg !65
  %620 = fsub float %613, %605, !dbg !67
  %621 = fadd float %600, %619, !dbg !71
  %622 = fcmp oeq float %621, 0.000000e+00, !dbg !72
  %623 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %619, float %621) #3, !dbg !73
  %624 = select i1 %622, float 0.000000e+00, float %623, !dbg !74
  %625 = fmul float %624, %620, !dbg !75
  %626 = fadd float %605, %625, !dbg !76
  %627 = fadd float %610, %616, !dbg !77
  %628 = fmul float %620, %620, !dbg !78
  %629 = fmul float %600, %628, !dbg !79
  %630 = fmul float %624, %629, !dbg !80
  %631 = fadd float %627, %630, !dbg !81
  %632 = bitcast float %626 to i32, !dbg !65
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 8, i32 31), !dbg !65
  %634 = bitcast i32 %633 to float, !dbg !65
  %635 = bitcast float %631 to i32, !dbg !65
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 8, i32 31), !dbg !65
  %637 = bitcast i32 %636 to float, !dbg !65
  %638 = bitcast float %621 to i32, !dbg !65
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 8, i32 31), !dbg !65
  %640 = bitcast i32 %639 to float, !dbg !65
  %641 = fsub float %634, %626, !dbg !67
  %642 = fadd float %621, %640, !dbg !71
  %643 = fcmp oeq float %642, 0.000000e+00, !dbg !72
  %644 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %640, float %642) #3, !dbg !73
  %645 = select i1 %643, float 0.000000e+00, float %644, !dbg !74
  %646 = fmul float %645, %641, !dbg !75
  %647 = fadd float %626, %646, !dbg !76
  %648 = fadd float %631, %637, !dbg !77
  %649 = fmul float %641, %641, !dbg !78
  %650 = fmul float %621, %649, !dbg !79
  %651 = fmul float %645, %650, !dbg !80
  %652 = fadd float %648, %651, !dbg !81
  %653 = bitcast float %647 to i32, !dbg !65
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 4, i32 31), !dbg !65
  %655 = bitcast i32 %654 to float, !dbg !65
  %656 = bitcast float %652 to i32, !dbg !65
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 4, i32 31), !dbg !65
  %658 = bitcast i32 %657 to float, !dbg !65
  %659 = bitcast float %642 to i32, !dbg !65
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 4, i32 31), !dbg !65
  %661 = bitcast i32 %660 to float, !dbg !65
  %662 = fsub float %655, %647, !dbg !67
  %663 = fadd float %642, %661, !dbg !71
  %664 = fcmp oeq float %663, 0.000000e+00, !dbg !72
  %665 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %661, float %663) #3, !dbg !73
  %666 = select i1 %664, float 0.000000e+00, float %665, !dbg !74
  %667 = fmul float %666, %662, !dbg !75
  %668 = fadd float %647, %667, !dbg !76
  %669 = fadd float %652, %658, !dbg !77
  %670 = fmul float %662, %662, !dbg !78
  %671 = fmul float %642, %670, !dbg !79
  %672 = fmul float %666, %671, !dbg !80
  %673 = fadd float %669, %672, !dbg !81
  %674 = bitcast float %668 to i32, !dbg !65
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 2, i32 31), !dbg !65
  %676 = bitcast i32 %675 to float, !dbg !65
  %677 = bitcast float %673 to i32, !dbg !65
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 2, i32 31), !dbg !65
  %679 = bitcast i32 %678 to float, !dbg !65
  %680 = bitcast float %663 to i32, !dbg !65
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 2, i32 31), !dbg !65
  %682 = bitcast i32 %681 to float, !dbg !65
  %683 = fsub float %676, %668, !dbg !67
  %684 = fadd float %663, %682, !dbg !71
  %685 = fcmp oeq float %684, 0.000000e+00, !dbg !72
  %686 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %682, float %684) #3, !dbg !73
  %687 = select i1 %685, float 0.000000e+00, float %686, !dbg !74
  %688 = fmul float %687, %683, !dbg !75
  %689 = fadd float %668, %688, !dbg !76
  %690 = fadd float %673, %679, !dbg !77
  %691 = fmul float %683, %683, !dbg !78
  %692 = fmul float %663, %691, !dbg !79
  %693 = fmul float %687, %692, !dbg !80
  %694 = fadd float %690, %693, !dbg !81
  %695 = bitcast float %689 to i32, !dbg !65
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 1, i32 31), !dbg !65
  %697 = bitcast i32 %696 to float, !dbg !65
  %698 = bitcast float %694 to i32, !dbg !65
  %699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %698, i32 1, i32 31), !dbg !65
  %700 = bitcast i32 %699 to float, !dbg !65
  %701 = bitcast float %684 to i32, !dbg !65
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 1, i32 31), !dbg !65
  %703 = bitcast i32 %702 to float, !dbg !65
  %704 = fsub float %697, %689, !dbg !67
  %705 = fadd float %684, %703, !dbg !71
  %706 = fcmp oeq float %705, 0.000000e+00, !dbg !72
  %707 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %703, float %705) #3, !dbg !73
  %708 = select i1 %706, float 0.000000e+00, float %707, !dbg !74
  %709 = fmul float %708, %704, !dbg !75
  %710 = fadd float %689, %709, !dbg !76
  %711 = fadd float %694, %700, !dbg !77
  %712 = fmul float %704, %704, !dbg !78
  %713 = fmul float %684, %712, !dbg !79
  %714 = fmul float %708, %713, !dbg !80
  %715 = fadd float %711, %714, !dbg !81
  %716 = icmp eq i32 %509, 0, !dbg !65
  %717 = zext nneg i32 %508 to i64, !dbg !65
  %718 = getelementptr float, ptr addrspace(3) @global_smem, i64 %717, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %718, float %710, i1 %716) #3, !dbg !65
  %719 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %717, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %719, float %715, i1 %716) #3, !dbg !65
  %720 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %717, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %720, float %705, i1 %716) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %721 = icmp slt i32 %14, 8, !dbg !65
  %722 = sext i32 %14 to i64, !dbg !65
  %723 = getelementptr float, ptr addrspace(3) @global_smem, i64 %722, !dbg !65
  %724 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %723, i1 %721) #3, !dbg !65
  %725 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %722, !dbg !65
  %726 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %725, i1 %721) #3, !dbg !65
  %727 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %722, !dbg !65
  %728 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %727, i1 %721) #3, !dbg !65
  %729 = bitcast float %724 to i32, !dbg !65
  %730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %729, i32 4, i32 31), !dbg !65
  %731 = bitcast i32 %730 to float, !dbg !65
  %732 = bitcast float %726 to i32, !dbg !65
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 4, i32 31), !dbg !65
  %734 = bitcast i32 %733 to float, !dbg !65
  %735 = bitcast float %728 to i32, !dbg !65
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 4, i32 31), !dbg !65
  %737 = bitcast i32 %736 to float, !dbg !65
  %738 = fsub float %731, %724, !dbg !67
  %739 = fadd float %728, %737, !dbg !71
  %740 = fcmp oeq float %739, 0.000000e+00, !dbg !72
  %741 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %737, float %739) #3, !dbg !73
  %742 = select i1 %740, float 0.000000e+00, float %741, !dbg !74
  %743 = fmul float %738, %742, !dbg !75
  %744 = fadd float %724, %743, !dbg !76
  %745 = fadd float %726, %734, !dbg !77
  %746 = fmul float %738, %738, !dbg !78
  %747 = fmul float %728, %746, !dbg !79
  %748 = fmul float %747, %742, !dbg !80
  %749 = fadd float %745, %748, !dbg !81
  %750 = bitcast float %744 to i32, !dbg !65
  %751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %750, i32 2, i32 31), !dbg !65
  %752 = bitcast i32 %751 to float, !dbg !65
  %753 = bitcast float %749 to i32, !dbg !65
  %754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %753, i32 2, i32 31), !dbg !65
  %755 = bitcast i32 %754 to float, !dbg !65
  %756 = bitcast float %739 to i32, !dbg !65
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 2, i32 31), !dbg !65
  %758 = bitcast i32 %757 to float, !dbg !65
  %759 = fsub float %752, %744, !dbg !67
  %760 = fadd float %739, %758, !dbg !71
  %761 = fcmp oeq float %760, 0.000000e+00, !dbg !72
  %762 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %758, float %760) #3, !dbg !73
  %763 = select i1 %761, float 0.000000e+00, float %762, !dbg !74
  %764 = fmul float %759, %763, !dbg !75
  %765 = fadd float %744, %764, !dbg !76
  %766 = fadd float %749, %755, !dbg !77
  %767 = fmul float %759, %759, !dbg !78
  %768 = fmul float %739, %767, !dbg !79
  %769 = fmul float %763, %768, !dbg !80
  %770 = fadd float %766, %769, !dbg !81
  %771 = bitcast float %765 to i32, !dbg !65
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 1, i32 31), !dbg !65
  %773 = bitcast i32 %772 to float, !dbg !65
  %774 = bitcast float %770 to i32, !dbg !65
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 1, i32 31), !dbg !65
  %776 = bitcast i32 %775 to float, !dbg !65
  %777 = bitcast float %760 to i32, !dbg !65
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 1, i32 31), !dbg !65
  %779 = bitcast i32 %778 to float, !dbg !65
  %780 = fsub float %773, %765, !dbg !67
  %781 = fadd float %760, %779, !dbg !71
  %782 = fcmp oeq float %781, 0.000000e+00, !dbg !72
  %783 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %779, float %781) #3, !dbg !73
  %784 = select i1 %782, float 0.000000e+00, float %783, !dbg !74
  %785 = fmul float %780, %784, !dbg !75
  %786 = fadd float %765, %785, !dbg !76
  %787 = fadd float %770, %776, !dbg !77
  %788 = fmul float %780, %780, !dbg !78
  %789 = fmul float %760, %788, !dbg !79
  %790 = fmul float %784, %789, !dbg !80
  %791 = fadd float %787, %790, !dbg !81
  %792 = and i32 %14, 7, !dbg !65
  %793 = icmp eq i32 %792, 0, !dbg !65
  %794 = and i1 %721, %793, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %723, float %786, i1 %794) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %725, float %791, i1 %794) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %727, float %781, i1 %794) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %795 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !65
  %796 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !65
  %797 = sext i32 %22 to i64, !dbg !82
  %798 = getelementptr float, ptr addrspace(1) %6, i64 %797, !dbg !82
  %799 = icmp eq i32 %urem, 0, !dbg !83
  %800 = and i1 %799, %23, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %795, ptr addrspace(1) %798, i1 %800) #3, !dbg !83
  %801 = getelementptr float, ptr addrspace(1) %7, i64 %797, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %796, ptr addrspace(1) %801, i1 %800) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "creenxd3vera3yxjvss6ub5qwnozj4rsebdwo7z2d6vmjvdiim5m.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/re")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d891011de12", linkageName: "triton__0d1d2d3d4d5d6d7d891011de12", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 27, column: 18, scope: !5)
!12 = !DILocation(line: 36, column: 47, scope: !5)
!13 = !DILocation(line: 36, column: 51, scope: !5)
!14 = !DILocation(line: 36, column: 55, scope: !5)
!15 = !DILocation(line: 37, column: 43, scope: !5)
!16 = !DILocation(line: 31, column: 36, scope: !5)
!17 = !DILocation(line: 36, column: 69, scope: !5)
!18 = !DILocation(line: 33, column: 25, scope: !5)
!19 = !DILocation(line: 32, column: 27, scope: !5)
!20 = !DILocation(line: 35, column: 24, scope: !5)
!21 = !DILocation(line: 36, column: 44, scope: !5)
!22 = !DILocation(line: 36, column: 38, scope: !5)
!23 = !DILocation(line: 36, column: 61, scope: !5)
!24 = !DILocation(line: 36, column: 120, scope: !5)
!25 = !DILocation(line: 37, column: 40, scope: !5)
!26 = !DILocation(line: 37, column: 34, scope: !5)
!27 = !DILocation(line: 38, column: 34, scope: !5)
!28 = !DILocation(line: 39, column: 40, scope: !5)
!29 = !DILocation(line: 39, column: 34, scope: !5)
!30 = !DILocation(line: 40, column: 34, scope: !5)
!31 = !DILocation(line: 41, column: 35, scope: !5)
!32 = !DILocation(line: 41, column: 50, scope: !5)
!33 = !DILocation(line: 37, column: 49, scope: !5)
!34 = !DILocation(line: 37, column: 108, scope: !5)
!35 = !DILocation(line: 38, column: 57, scope: !5)
!36 = !DILocation(line: 45, column: 22, scope: !5)
!37 = !DILocation(line: 38, column: 116, scope: !5)
!38 = !DILocation(line: 39, column: 49, scope: !5)
!39 = !DILocation(line: 39, column: 108, scope: !5)
!40 = !DILocation(line: 40, column: 49, scope: !5)
!41 = !DILocation(line: 40, column: 108, scope: !5)
!42 = !DILocation(line: 41, column: 109, scope: !5)
!43 = !DILocation(line: 42, column: 22, scope: !5)
!44 = !DILocation(line: 44, column: 22, scope: !5)
!45 = !DILocation(line: 46, column: 22, scope: !5)
!46 = !DILocation(line: 47, column: 24, scope: !5)
!47 = !DILocation(line: 48, column: 23, scope: !5)
!48 = !DILocation(line: 49, column: 23, scope: !5)
!49 = !DILocation(line: 53, column: 66, scope: !5)
!50 = !DILocation(line: 105, column: 7, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !5, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!53 = !DILocation(line: 53, column: 55, scope: !51)
!54 = !DILocation(line: 111, column: 30, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 110, column: 24, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 112, column: 34, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 112, column: 26, scope: !51, inlinedAt: !53)
!58 = !DILocation(line: 113, column: 39, scope: !51, inlinedAt: !53)
!59 = !DILocation(line: 113, column: 31, scope: !51, inlinedAt: !53)
!60 = !DILocation(line: 113, column: 22, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 55, column: 62, scope: !5)
!62 = !DILocation(line: 56, column: 58, scope: !5)
!63 = !DILocation(line: 57, column: 66, scope: !5)
!64 = !DILocation(line: 58, column: 62, scope: !5)
!65 = !DILocation(line: 131, column: 46, scope: !51, inlinedAt: !66)
!66 = !DILocation(line: 60, column: 44, scope: !51)
!67 = !DILocation(line: 119, column: 21, scope: !68, inlinedAt: !69)
!68 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!69 = !DILocation(line: 131, column: 46, scope: !68, inlinedAt: !70)
!70 = !DILocation(line: 60, column: 44, scope: !68)
!71 = !DILocation(line: 120, column: 28, scope: !68, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 39, scope: !68, inlinedAt: !69)
!73 = !DILocation(line: 121, column: 60, scope: !68, inlinedAt: !69)
!74 = !DILocation(line: 121, column: 49, scope: !68, inlinedAt: !69)
!75 = !DILocation(line: 123, column: 25, scope: !68, inlinedAt: !69)
!76 = !DILocation(line: 123, column: 17, scope: !68, inlinedAt: !69)
!77 = !DILocation(line: 124, column: 15, scope: !68, inlinedAt: !69)
!78 = !DILocation(line: 124, column: 30, scope: !68, inlinedAt: !69)
!79 = !DILocation(line: 124, column: 38, scope: !68, inlinedAt: !69)
!80 = !DILocation(line: 124, column: 49, scope: !68, inlinedAt: !69)
!81 = !DILocation(line: 124, column: 22, scope: !68, inlinedAt: !69)
!82 = !DILocation(line: 65, column: 25, scope: !5)
!83 = !DILocation(line: 65, column: 37, scope: !5)
!84 = !DILocation(line: 66, column: 25, scope: !5)
!85 = !DILocation(line: 66, column: 37, scope: !5)
!86 = !DILocation(line: 66, column: 4, scope: !5)
