; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d89101112de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %15 = and i32 %14, 31, !dbg !8
  %16 = lshr i32 %14, 5, !dbg !8
  %17 = and i32 %16, 7, !dbg !8
  %18 = lshr i32 %15, 1, !dbg !8
  %19 = shl nuw nsw i32 %17, 4, !dbg !8
  %20 = or i32 %19, %18, !dbg !8
  %21 = lshr i32 %15, 4, !dbg !8
  %22 = shl nuw nsw i32 %17, 1, !dbg !8
  %23 = or i32 %22, %21, !dbg !8
  %24 = or i32 %23, 16, !dbg !8
  %25 = or i32 %23, 32, !dbg !8
  %26 = or i32 %23, 48, !dbg !8
  %27 = or i32 %23, 64, !dbg !8
  %28 = or i32 %23, 80, !dbg !8
  %29 = or i32 %23, 96, !dbg !8
  %30 = or i32 %23, 112, !dbg !8
  %31 = shl i32 %14, 3, !dbg !9
  %32 = and i32 %31, 8, !dbg !9
  %33 = and i32 %14, 15, !dbg !9
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %36 = add i32 %35, 1, !dbg !12
  %37 = shl i32 %34, 8, !dbg !13
  %38 = mul i32 %37, %36, !dbg !14
  %39 = or i32 %38, %20, !dbg !15
  %40 = or i32 %39, 128, !dbg !15
  %41 = or i32 %38, %23, !dbg !15
  %42 = or i32 %38, %24, !dbg !15
  %43 = or i32 %38, %25, !dbg !15
  %44 = or i32 %38, %26, !dbg !15
  %45 = or i32 %38, %27, !dbg !15
  %46 = or i32 %38, %28, !dbg !15
  %47 = or i32 %38, %29, !dbg !15
  %48 = or i32 %38, %30, !dbg !15
  %49 = or i32 %41, 128, !dbg !15
  %50 = or i32 %41, 144, !dbg !15
  %51 = or i32 %41, 160, !dbg !15
  %52 = or i32 %41, 176, !dbg !15
  %53 = or i32 %41, 192, !dbg !15
  %54 = or i32 %41, 208, !dbg !15
  %55 = or i32 %41, 224, !dbg !15
  %56 = or i32 %41, 240, !dbg !15
  %57 = icmp slt i32 %39, %11, !dbg !16
  %58 = icmp slt i32 %40, %11, !dbg !16
  %59 = icmp slt i32 %41, %11, !dbg !16
  %60 = icmp slt i32 %42, %11, !dbg !16
  %61 = icmp slt i32 %43, %11, !dbg !16
  %62 = icmp slt i32 %44, %11, !dbg !16
  %63 = icmp slt i32 %45, %11, !dbg !16
  %64 = icmp slt i32 %46, %11, !dbg !16
  %65 = icmp slt i32 %47, %11, !dbg !16
  %66 = icmp slt i32 %48, %11, !dbg !16
  %67 = icmp slt i32 %49, %11, !dbg !16
  %68 = icmp slt i32 %50, %11, !dbg !16
  %69 = icmp slt i32 %51, %11, !dbg !16
  %70 = icmp slt i32 %52, %11, !dbg !16
  %71 = icmp slt i32 %53, %11, !dbg !16
  %72 = icmp slt i32 %54, %11, !dbg !16
  %73 = icmp slt i32 %55, %11, !dbg !16
  %74 = icmp slt i32 %56, %11, !dbg !16
  %75 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %76 = shl i32 %75, 4, !dbg !18
  %77 = or i32 %76, %32, !dbg !19
  %78 = or i32 %76, %33, !dbg !19
  %79 = icmp slt i32 %77, 640, !dbg !20
  %80 = icmp slt i32 %78, 640, !dbg !20
  %.frozen = freeze i32 %41
  %.frozen48 = freeze i32 %8
  %81 = sdiv i32 %.frozen, %.frozen48, !dbg !21
  %82 = mul i32 %81, %.frozen48
  %.decomposed = sub i32 %.frozen, %82
  %.frozen49 = freeze i32 %42
  %.frozen50 = freeze i32 %8
  %83 = sdiv i32 %.frozen49, %.frozen50, !dbg !21
  %84 = mul i32 %83, %.frozen50
  %.decomposed51 = sub i32 %.frozen49, %84
  %.frozen52 = freeze i32 %43
  %.frozen53 = freeze i32 %8
  %85 = sdiv i32 %.frozen52, %.frozen53, !dbg !21
  %86 = mul i32 %85, %.frozen53
  %.decomposed54 = sub i32 %.frozen52, %86
  %.frozen55 = freeze i32 %44
  %.frozen56 = freeze i32 %8
  %87 = sdiv i32 %.frozen55, %.frozen56, !dbg !21
  %88 = mul i32 %87, %.frozen56
  %.decomposed57 = sub i32 %.frozen55, %88
  %.frozen58 = freeze i32 %45
  %.frozen59 = freeze i32 %8
  %89 = sdiv i32 %.frozen58, %.frozen59, !dbg !21
  %90 = mul i32 %89, %.frozen59
  %.decomposed60 = sub i32 %.frozen58, %90
  %.frozen61 = freeze i32 %46
  %.frozen62 = freeze i32 %8
  %91 = sdiv i32 %.frozen61, %.frozen62, !dbg !21
  %92 = mul i32 %91, %.frozen62
  %.decomposed63 = sub i32 %.frozen61, %92
  %.frozen64 = freeze i32 %47
  %.frozen65 = freeze i32 %8
  %93 = sdiv i32 %.frozen64, %.frozen65, !dbg !21
  %94 = mul i32 %93, %.frozen65
  %.decomposed66 = sub i32 %.frozen64, %94
  %.frozen67 = freeze i32 %48
  %.frozen68 = freeze i32 %8
  %95 = sdiv i32 %.frozen67, %.frozen68, !dbg !21
  %96 = mul i32 %95, %.frozen68
  %.decomposed69 = sub i32 %.frozen67, %96
  %.frozen70 = freeze i32 %49
  %.frozen71 = freeze i32 %8
  %97 = sdiv i32 %.frozen70, %.frozen71, !dbg !21
  %98 = mul i32 %97, %.frozen71
  %.decomposed72 = sub i32 %.frozen70, %98
  %.frozen73 = freeze i32 %50
  %.frozen74 = freeze i32 %8
  %99 = sdiv i32 %.frozen73, %.frozen74, !dbg !21
  %100 = mul i32 %99, %.frozen74
  %.decomposed75 = sub i32 %.frozen73, %100
  %.frozen76 = freeze i32 %51
  %.frozen77 = freeze i32 %8
  %101 = sdiv i32 %.frozen76, %.frozen77, !dbg !21
  %102 = mul i32 %101, %.frozen77
  %.decomposed78 = sub i32 %.frozen76, %102
  %.frozen79 = freeze i32 %52
  %.frozen80 = freeze i32 %8
  %103 = sdiv i32 %.frozen79, %.frozen80, !dbg !21
  %104 = mul i32 %103, %.frozen80
  %.decomposed81 = sub i32 %.frozen79, %104
  %.frozen82 = freeze i32 %53
  %.frozen83 = freeze i32 %8
  %105 = sdiv i32 %.frozen82, %.frozen83, !dbg !21
  %106 = mul i32 %105, %.frozen83
  %.decomposed84 = sub i32 %.frozen82, %106
  %.frozen85 = freeze i32 %54
  %.frozen86 = freeze i32 %8
  %107 = sdiv i32 %.frozen85, %.frozen86, !dbg !21
  %108 = mul i32 %107, %.frozen86
  %.decomposed87 = sub i32 %.frozen85, %108
  %.frozen88 = freeze i32 %55
  %.frozen89 = freeze i32 %8
  %109 = sdiv i32 %.frozen88, %.frozen89, !dbg !21
  %110 = mul i32 %109, %.frozen89
  %.decomposed90 = sub i32 %.frozen88, %110
  %.frozen91 = freeze i32 %56
  %.frozen92 = freeze i32 %8
  %111 = sdiv i32 %.frozen91, %.frozen92, !dbg !21
  %112 = mul i32 %111, %.frozen92
  %.decomposed93 = sub i32 %.frozen91, %112
  %113 = mul i32 %39, 640, !dbg !22
  %114 = mul i32 %40, 640, !dbg !22
  %115 = add i32 %113, %77, !dbg !23
  %116 = add i32 %114, %77, !dbg !23
  %117 = sext i32 %115 to i64, !dbg !24
  %118 = getelementptr half, ptr addrspace(1) %0, i64 %117, !dbg !24
  %119 = sext i32 %116 to i64, !dbg !24
  %120 = getelementptr half, ptr addrspace(1) %0, i64 %119, !dbg !24
  %121 = and i1 %79, %57, !dbg !25
  %122 = and i1 %79, %58, !dbg !25
  %123 = and i1 %80, %59, !dbg !25
  %124 = and i1 %80, %60, !dbg !25
  %125 = and i1 %80, %61, !dbg !25
  %126 = and i1 %80, %62, !dbg !25
  %127 = and i1 %80, %63, !dbg !25
  %128 = and i1 %80, %64, !dbg !25
  %129 = and i1 %80, %65, !dbg !25
  %130 = and i1 %80, %66, !dbg !25
  %131 = and i1 %80, %67, !dbg !25
  %132 = and i1 %80, %68, !dbg !25
  %133 = and i1 %80, %69, !dbg !25
  %134 = and i1 %80, %70, !dbg !25
  %135 = and i1 %80, %71, !dbg !25
  %136 = and i1 %80, %72, !dbg !25
  %137 = and i1 %80, %73, !dbg !25
  %138 = and i1 %80, %74, !dbg !25
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %121) #2, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !26
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !26
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !26
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %122) #2, !dbg !26
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !26
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !26
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !26
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !26
  %149 = sext i32 %77 to i64, !dbg !27
  %150 = getelementptr half, ptr addrspace(1) %1, i64 %149, !dbg !27
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %79) #2, !dbg !28
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !28
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !28
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !28
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !28
  %156 = getelementptr half, ptr addrspace(1) %2, i64 %117, !dbg !29
  %157 = getelementptr half, ptr addrspace(1) %2, i64 %119, !dbg !29
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %121) #2, !dbg !30
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !30
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !30
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !30
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !30
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %122) #2, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !30
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !30
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !30
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !30
  %168 = getelementptr half, ptr addrspace(1) %3, i64 %117, !dbg !31
  %169 = getelementptr half, ptr addrspace(1) %3, i64 %119, !dbg !31
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %121) #2, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !32
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !32
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !32
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %122) #2, !dbg !32
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !32
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !32
  %180 = getelementptr half, ptr addrspace(1) %4, i64 %149, !dbg !33
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %79) #2, !dbg !34
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !34
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !34
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !34
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !34
  %186 = getelementptr half, ptr addrspace(1) %5, i64 %117, !dbg !35
  %187 = getelementptr half, ptr addrspace(1) %5, i64 %119, !dbg !35
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %121) #2, !dbg !36
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !36
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !36
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !36
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !36
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %122) #2, !dbg !36
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !36
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !36
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !36
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !36
  %198 = getelementptr half, ptr addrspace(1) %6, i64 %117, !dbg !37
  %199 = getelementptr half, ptr addrspace(1) %6, i64 %119, !dbg !37
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 %121) #2, !dbg !38
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !38
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !38
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !38
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !38
  %205 = trunc i32 %201 to i16, !dbg !38
  %206 = bitcast i16 %205 to half, !dbg !38
  %extelt.offset40 = lshr i32 %201, 16, !dbg !38
  %207 = trunc i32 %extelt.offset40 to i16, !dbg !38
  %208 = bitcast i16 %207 to half, !dbg !38
  %209 = trunc i32 %202 to i16, !dbg !38
  %210 = bitcast i16 %209 to half, !dbg !38
  %extelt.offset41 = lshr i32 %202, 16, !dbg !38
  %211 = trunc i32 %extelt.offset41 to i16, !dbg !38
  %212 = bitcast i16 %211 to half, !dbg !38
  %213 = trunc i32 %203 to i16, !dbg !38
  %214 = bitcast i16 %213 to half, !dbg !38
  %extelt.offset42 = lshr i32 %203, 16, !dbg !38
  %215 = trunc i32 %extelt.offset42 to i16, !dbg !38
  %216 = bitcast i16 %215 to half, !dbg !38
  %217 = trunc i32 %204 to i16, !dbg !38
  %218 = bitcast i16 %217 to half, !dbg !38
  %extelt.offset43 = lshr i32 %204, 16, !dbg !38
  %219 = trunc i32 %extelt.offset43 to i16, !dbg !38
  %220 = bitcast i16 %219 to half, !dbg !38
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %122) #2, !dbg !38
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !38
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !38
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !38
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !38
  %226 = trunc i32 %222 to i16, !dbg !38
  %227 = bitcast i16 %226 to half, !dbg !38
  %extelt.offset44 = lshr i32 %222, 16, !dbg !38
  %228 = trunc i32 %extelt.offset44 to i16, !dbg !38
  %229 = bitcast i16 %228 to half, !dbg !38
  %230 = trunc i32 %223 to i16, !dbg !38
  %231 = bitcast i16 %230 to half, !dbg !38
  %extelt.offset45 = lshr i32 %223, 16, !dbg !38
  %232 = trunc i32 %extelt.offset45 to i16, !dbg !38
  %233 = bitcast i16 %232 to half, !dbg !38
  %234 = trunc i32 %224 to i16, !dbg !38
  %235 = bitcast i16 %234 to half, !dbg !38
  %extelt.offset46 = lshr i32 %224, 16, !dbg !38
  %236 = trunc i32 %extelt.offset46 to i16, !dbg !38
  %237 = bitcast i16 %236 to half, !dbg !38
  %238 = trunc i32 %225 to i16, !dbg !38
  %239 = bitcast i16 %238 to half, !dbg !38
  %extelt.offset47 = lshr i32 %225, 16, !dbg !38
  %240 = trunc i32 %extelt.offset47 to i16, !dbg !38
  %241 = bitcast i16 %240 to half, !dbg !38
  %242 = fpext half %206 to float, !dbg !39
  %243 = fpext half %208 to float, !dbg !39
  %244 = fpext half %210 to float, !dbg !39
  %245 = fpext half %212 to float, !dbg !39
  %246 = fpext half %214 to float, !dbg !39
  %247 = fpext half %216 to float, !dbg !39
  %248 = fpext half %218 to float, !dbg !39
  %249 = fpext half %220 to float, !dbg !39
  %250 = fpext half %227 to float, !dbg !39
  %251 = fpext half %229 to float, !dbg !39
  %252 = fpext half %231 to float, !dbg !39
  %253 = fpext half %233 to float, !dbg !39
  %254 = fpext half %235 to float, !dbg !39
  %255 = fpext half %237 to float, !dbg !39
  %256 = fpext half %239 to float, !dbg !39
  %257 = fpext half %241 to float, !dbg !39
  %258 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !26
  %259 = insertelement <2 x i32> %258, i32 %171, i64 1, !dbg !26
  %260 = trunc <2 x i32> %259 to <2 x i16>, !dbg !26
  %261 = bitcast <2 x i16> %260 to <2 x half>, !dbg !26
  %262 = fpext <2 x half> %261 to <2 x float>, !dbg !40
  %263 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !28
  %264 = insertelement <2 x i32> %263, i32 %182, i64 1, !dbg !28
  %265 = trunc <2 x i32> %264 to <2 x i16>, !dbg !28
  %266 = bitcast <2 x i16> %265 to <2 x half>, !dbg !28
  %267 = fpext <2 x half> %266 to <2 x float>, !dbg !41
  %268 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !30
  %269 = insertelement <2 x i32> %268, i32 %189, i64 1, !dbg !30
  %270 = trunc <2 x i32> %269 to <2 x i16>, !dbg !30
  %271 = bitcast <2 x i16> %270 to <2 x half>, !dbg !30
  %272 = fpext <2 x half> %271 to <2 x float>, !dbg !42
  %273 = fadd <2 x float> %262, %267, !dbg !43
  %274 = fmul <2 x float> %272, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %275 = fadd <2 x float> %273, %274, !dbg !45
  %276 = lshr <2 x i32> %259, <i32 16, i32 16>, !dbg !26
  %277 = trunc <2 x i32> %276 to <2 x i16>, !dbg !26
  %278 = bitcast <2 x i16> %277 to <2 x half>, !dbg !26
  %279 = fpext <2 x half> %278 to <2 x float>, !dbg !40
  %280 = lshr <2 x i32> %264, <i32 16, i32 16>, !dbg !28
  %281 = trunc <2 x i32> %280 to <2 x i16>, !dbg !28
  %282 = bitcast <2 x i16> %281 to <2 x half>, !dbg !28
  %283 = fpext <2 x half> %282 to <2 x float>, !dbg !41
  %284 = lshr <2 x i32> %269, <i32 16, i32 16>, !dbg !30
  %285 = trunc <2 x i32> %284 to <2 x i16>, !dbg !30
  %286 = bitcast <2 x i16> %285 to <2 x half>, !dbg !30
  %287 = fpext <2 x half> %286 to <2 x float>, !dbg !42
  %288 = fadd <2 x float> %279, %283, !dbg !43
  %289 = fmul <2 x float> %287, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %290 = fadd <2 x float> %288, %289, !dbg !45
  %291 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !26
  %292 = insertelement <2 x i32> %291, i32 %172, i64 1, !dbg !26
  %293 = trunc <2 x i32> %292 to <2 x i16>, !dbg !26
  %294 = bitcast <2 x i16> %293 to <2 x half>, !dbg !26
  %295 = fpext <2 x half> %294 to <2 x float>, !dbg !40
  %296 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !28
  %297 = insertelement <2 x i32> %296, i32 %183, i64 1, !dbg !28
  %298 = trunc <2 x i32> %297 to <2 x i16>, !dbg !28
  %299 = bitcast <2 x i16> %298 to <2 x half>, !dbg !28
  %300 = fpext <2 x half> %299 to <2 x float>, !dbg !41
  %301 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !30
  %302 = insertelement <2 x i32> %301, i32 %190, i64 1, !dbg !30
  %303 = trunc <2 x i32> %302 to <2 x i16>, !dbg !30
  %304 = bitcast <2 x i16> %303 to <2 x half>, !dbg !30
  %305 = fpext <2 x half> %304 to <2 x float>, !dbg !42
  %306 = fadd <2 x float> %295, %300, !dbg !43
  %307 = fmul <2 x float> %305, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %308 = fadd <2 x float> %306, %307, !dbg !45
  %309 = lshr <2 x i32> %292, <i32 16, i32 16>, !dbg !26
  %310 = trunc <2 x i32> %309 to <2 x i16>, !dbg !26
  %311 = bitcast <2 x i16> %310 to <2 x half>, !dbg !26
  %312 = fpext <2 x half> %311 to <2 x float>, !dbg !40
  %313 = lshr <2 x i32> %297, <i32 16, i32 16>, !dbg !28
  %314 = trunc <2 x i32> %313 to <2 x i16>, !dbg !28
  %315 = bitcast <2 x i16> %314 to <2 x half>, !dbg !28
  %316 = fpext <2 x half> %315 to <2 x float>, !dbg !41
  %317 = lshr <2 x i32> %302, <i32 16, i32 16>, !dbg !30
  %318 = trunc <2 x i32> %317 to <2 x i16>, !dbg !30
  %319 = bitcast <2 x i16> %318 to <2 x half>, !dbg !30
  %320 = fpext <2 x half> %319 to <2 x float>, !dbg !42
  %321 = fadd <2 x float> %312, %316, !dbg !43
  %322 = fmul <2 x float> %320, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %323 = fadd <2 x float> %321, %322, !dbg !45
  %324 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !26
  %325 = insertelement <2 x i32> %324, i32 %173, i64 1, !dbg !26
  %326 = trunc <2 x i32> %325 to <2 x i16>, !dbg !26
  %327 = bitcast <2 x i16> %326 to <2 x half>, !dbg !26
  %328 = fpext <2 x half> %327 to <2 x float>, !dbg !40
  %329 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !28
  %330 = insertelement <2 x i32> %329, i32 %184, i64 1, !dbg !28
  %331 = trunc <2 x i32> %330 to <2 x i16>, !dbg !28
  %332 = bitcast <2 x i16> %331 to <2 x half>, !dbg !28
  %333 = fpext <2 x half> %332 to <2 x float>, !dbg !41
  %334 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !30
  %335 = insertelement <2 x i32> %334, i32 %191, i64 1, !dbg !30
  %336 = trunc <2 x i32> %335 to <2 x i16>, !dbg !30
  %337 = bitcast <2 x i16> %336 to <2 x half>, !dbg !30
  %338 = fpext <2 x half> %337 to <2 x float>, !dbg !42
  %339 = fadd <2 x float> %328, %333, !dbg !43
  %340 = fmul <2 x float> %338, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %341 = fadd <2 x float> %339, %340, !dbg !45
  %342 = lshr <2 x i32> %325, <i32 16, i32 16>, !dbg !26
  %343 = trunc <2 x i32> %342 to <2 x i16>, !dbg !26
  %344 = bitcast <2 x i16> %343 to <2 x half>, !dbg !26
  %345 = fpext <2 x half> %344 to <2 x float>, !dbg !40
  %346 = lshr <2 x i32> %330, <i32 16, i32 16>, !dbg !28
  %347 = trunc <2 x i32> %346 to <2 x i16>, !dbg !28
  %348 = bitcast <2 x i16> %347 to <2 x half>, !dbg !28
  %349 = fpext <2 x half> %348 to <2 x float>, !dbg !41
  %350 = lshr <2 x i32> %335, <i32 16, i32 16>, !dbg !30
  %351 = trunc <2 x i32> %350 to <2 x i16>, !dbg !30
  %352 = bitcast <2 x i16> %351 to <2 x half>, !dbg !30
  %353 = fpext <2 x half> %352 to <2 x float>, !dbg !42
  %354 = fadd <2 x float> %345, %349, !dbg !43
  %355 = fmul <2 x float> %353, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %356 = fadd <2 x float> %354, %355, !dbg !45
  %357 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !26
  %358 = insertelement <2 x i32> %357, i32 %174, i64 1, !dbg !26
  %359 = trunc <2 x i32> %358 to <2 x i16>, !dbg !26
  %360 = bitcast <2 x i16> %359 to <2 x half>, !dbg !26
  %361 = fpext <2 x half> %360 to <2 x float>, !dbg !40
  %362 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !28
  %363 = insertelement <2 x i32> %362, i32 %185, i64 1, !dbg !28
  %364 = trunc <2 x i32> %363 to <2 x i16>, !dbg !28
  %365 = bitcast <2 x i16> %364 to <2 x half>, !dbg !28
  %366 = fpext <2 x half> %365 to <2 x float>, !dbg !41
  %367 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !30
  %368 = insertelement <2 x i32> %367, i32 %192, i64 1, !dbg !30
  %369 = trunc <2 x i32> %368 to <2 x i16>, !dbg !30
  %370 = bitcast <2 x i16> %369 to <2 x half>, !dbg !30
  %371 = fpext <2 x half> %370 to <2 x float>, !dbg !42
  %372 = fadd <2 x float> %361, %366, !dbg !43
  %373 = fmul <2 x float> %371, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %374 = fadd <2 x float> %372, %373, !dbg !45
  %375 = lshr <2 x i32> %358, <i32 16, i32 16>, !dbg !26
  %376 = trunc <2 x i32> %375 to <2 x i16>, !dbg !26
  %377 = bitcast <2 x i16> %376 to <2 x half>, !dbg !26
  %378 = fpext <2 x half> %377 to <2 x float>, !dbg !40
  %379 = lshr <2 x i32> %363, <i32 16, i32 16>, !dbg !28
  %380 = trunc <2 x i32> %379 to <2 x i16>, !dbg !28
  %381 = bitcast <2 x i16> %380 to <2 x half>, !dbg !28
  %382 = fpext <2 x half> %381 to <2 x float>, !dbg !41
  %383 = lshr <2 x i32> %368, <i32 16, i32 16>, !dbg !30
  %384 = trunc <2 x i32> %383 to <2 x i16>, !dbg !30
  %385 = bitcast <2 x i16> %384 to <2 x half>, !dbg !30
  %386 = fpext <2 x half> %385 to <2 x float>, !dbg !42
  %387 = fadd <2 x float> %378, %382, !dbg !43
  %388 = fmul <2 x float> %386, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %389 = fadd <2 x float> %387, %388, !dbg !45
  %390 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !26
  %391 = insertelement <2 x i32> %390, i32 %176, i64 1, !dbg !26
  %392 = trunc <2 x i32> %391 to <2 x i16>, !dbg !26
  %393 = bitcast <2 x i16> %392 to <2 x half>, !dbg !26
  %394 = fpext <2 x half> %393 to <2 x float>, !dbg !40
  %395 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !30
  %396 = insertelement <2 x i32> %395, i32 %194, i64 1, !dbg !30
  %397 = trunc <2 x i32> %396 to <2 x i16>, !dbg !30
  %398 = bitcast <2 x i16> %397 to <2 x half>, !dbg !30
  %399 = fpext <2 x half> %398 to <2 x float>, !dbg !42
  %400 = fmul <2 x float> %399, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %401 = fadd <2 x float> %394, %267, !dbg !43
  %402 = fadd <2 x float> %401, %400, !dbg !45
  %403 = lshr <2 x i32> %391, <i32 16, i32 16>, !dbg !26
  %404 = trunc <2 x i32> %403 to <2 x i16>, !dbg !26
  %405 = bitcast <2 x i16> %404 to <2 x half>, !dbg !26
  %406 = fpext <2 x half> %405 to <2 x float>, !dbg !40
  %407 = lshr <2 x i32> %396, <i32 16, i32 16>, !dbg !30
  %408 = trunc <2 x i32> %407 to <2 x i16>, !dbg !30
  %409 = bitcast <2 x i16> %408 to <2 x half>, !dbg !30
  %410 = fpext <2 x half> %409 to <2 x float>, !dbg !42
  %411 = fmul <2 x float> %410, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %412 = fadd <2 x float> %406, %283, !dbg !43
  %413 = fadd <2 x float> %412, %411, !dbg !45
  %414 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !26
  %415 = insertelement <2 x i32> %414, i32 %177, i64 1, !dbg !26
  %416 = trunc <2 x i32> %415 to <2 x i16>, !dbg !26
  %417 = bitcast <2 x i16> %416 to <2 x half>, !dbg !26
  %418 = fpext <2 x half> %417 to <2 x float>, !dbg !40
  %419 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !30
  %420 = insertelement <2 x i32> %419, i32 %195, i64 1, !dbg !30
  %421 = trunc <2 x i32> %420 to <2 x i16>, !dbg !30
  %422 = bitcast <2 x i16> %421 to <2 x half>, !dbg !30
  %423 = fpext <2 x half> %422 to <2 x float>, !dbg !42
  %424 = fmul <2 x float> %423, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %425 = fadd <2 x float> %418, %300, !dbg !43
  %426 = fadd <2 x float> %425, %424, !dbg !45
  %427 = lshr <2 x i32> %415, <i32 16, i32 16>, !dbg !26
  %428 = trunc <2 x i32> %427 to <2 x i16>, !dbg !26
  %429 = bitcast <2 x i16> %428 to <2 x half>, !dbg !26
  %430 = fpext <2 x half> %429 to <2 x float>, !dbg !40
  %431 = lshr <2 x i32> %420, <i32 16, i32 16>, !dbg !30
  %432 = trunc <2 x i32> %431 to <2 x i16>, !dbg !30
  %433 = bitcast <2 x i16> %432 to <2 x half>, !dbg !30
  %434 = fpext <2 x half> %433 to <2 x float>, !dbg !42
  %435 = fmul <2 x float> %434, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %436 = fadd <2 x float> %430, %316, !dbg !43
  %437 = fadd <2 x float> %436, %435, !dbg !45
  %438 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !26
  %439 = insertelement <2 x i32> %438, i32 %178, i64 1, !dbg !26
  %440 = trunc <2 x i32> %439 to <2 x i16>, !dbg !26
  %441 = bitcast <2 x i16> %440 to <2 x half>, !dbg !26
  %442 = fpext <2 x half> %441 to <2 x float>, !dbg !40
  %443 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !30
  %444 = insertelement <2 x i32> %443, i32 %196, i64 1, !dbg !30
  %445 = trunc <2 x i32> %444 to <2 x i16>, !dbg !30
  %446 = bitcast <2 x i16> %445 to <2 x half>, !dbg !30
  %447 = fpext <2 x half> %446 to <2 x float>, !dbg !42
  %448 = fmul <2 x float> %447, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %449 = fadd <2 x float> %442, %333, !dbg !43
  %450 = fadd <2 x float> %449, %448, !dbg !45
  %451 = lshr <2 x i32> %439, <i32 16, i32 16>, !dbg !26
  %452 = trunc <2 x i32> %451 to <2 x i16>, !dbg !26
  %453 = bitcast <2 x i16> %452 to <2 x half>, !dbg !26
  %454 = fpext <2 x half> %453 to <2 x float>, !dbg !40
  %455 = lshr <2 x i32> %444, <i32 16, i32 16>, !dbg !30
  %456 = trunc <2 x i32> %455 to <2 x i16>, !dbg !30
  %457 = bitcast <2 x i16> %456 to <2 x half>, !dbg !30
  %458 = fpext <2 x half> %457 to <2 x float>, !dbg !42
  %459 = fmul <2 x float> %458, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %460 = fadd <2 x float> %454, %349, !dbg !43
  %461 = fadd <2 x float> %460, %459, !dbg !45
  %462 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !26
  %463 = insertelement <2 x i32> %462, i32 %179, i64 1, !dbg !26
  %464 = trunc <2 x i32> %463 to <2 x i16>, !dbg !26
  %465 = bitcast <2 x i16> %464 to <2 x half>, !dbg !26
  %466 = fpext <2 x half> %465 to <2 x float>, !dbg !40
  %467 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !30
  %468 = insertelement <2 x i32> %467, i32 %197, i64 1, !dbg !30
  %469 = trunc <2 x i32> %468 to <2 x i16>, !dbg !30
  %470 = bitcast <2 x i16> %469 to <2 x half>, !dbg !30
  %471 = fpext <2 x half> %470 to <2 x float>, !dbg !42
  %472 = fmul <2 x float> %471, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %473 = fadd <2 x float> %466, %366, !dbg !43
  %474 = fadd <2 x float> %473, %472, !dbg !45
  %475 = lshr <2 x i32> %463, <i32 16, i32 16>, !dbg !26
  %476 = trunc <2 x i32> %475 to <2 x i16>, !dbg !26
  %477 = bitcast <2 x i16> %476 to <2 x half>, !dbg !26
  %478 = fpext <2 x half> %477 to <2 x float>, !dbg !40
  %479 = lshr <2 x i32> %468, <i32 16, i32 16>, !dbg !30
  %480 = trunc <2 x i32> %479 to <2 x i16>, !dbg !30
  %481 = bitcast <2 x i16> %480 to <2 x half>, !dbg !30
  %482 = fpext <2 x half> %481 to <2 x float>, !dbg !42
  %483 = fmul <2 x float> %482, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %484 = fadd <2 x float> %478, %382, !dbg !43
  %485 = fadd <2 x float> %484, %483, !dbg !45
  %486 = extractelement <2 x float> %275, i64 1, !dbg !46
  %487 = fadd float %486, %242, !dbg !46
  %488 = extractelement <2 x float> %290, i64 1, !dbg !46
  %489 = fadd float %488, %243, !dbg !46
  %490 = extractelement <2 x float> %308, i64 1, !dbg !46
  %491 = fadd float %490, %244, !dbg !46
  %492 = extractelement <2 x float> %323, i64 1, !dbg !46
  %493 = fadd float %492, %245, !dbg !46
  %494 = extractelement <2 x float> %341, i64 1, !dbg !46
  %495 = fadd float %494, %246, !dbg !46
  %496 = extractelement <2 x float> %356, i64 1, !dbg !46
  %497 = fadd float %496, %247, !dbg !46
  %498 = extractelement <2 x float> %374, i64 1, !dbg !46
  %499 = fadd float %498, %248, !dbg !46
  %500 = extractelement <2 x float> %389, i64 1, !dbg !46
  %501 = fadd float %500, %249, !dbg !46
  %502 = extractelement <2 x float> %402, i64 1, !dbg !46
  %503 = fadd float %502, %250, !dbg !46
  %504 = extractelement <2 x float> %413, i64 1, !dbg !46
  %505 = fadd float %504, %251, !dbg !46
  %506 = extractelement <2 x float> %426, i64 1, !dbg !46
  %507 = fadd float %506, %252, !dbg !46
  %508 = extractelement <2 x float> %437, i64 1, !dbg !46
  %509 = fadd float %508, %253, !dbg !46
  %510 = extractelement <2 x float> %450, i64 1, !dbg !46
  %511 = fadd float %510, %254, !dbg !46
  %512 = extractelement <2 x float> %461, i64 1, !dbg !46
  %513 = fadd float %512, %255, !dbg !46
  %514 = extractelement <2 x float> %474, i64 1, !dbg !46
  %515 = fadd float %514, %256, !dbg !46
  %516 = extractelement <2 x float> %485, i64 1, !dbg !46
  %517 = fadd float %516, %257, !dbg !46
  %518 = extractelement <2 x float> %275, i64 0, !dbg !47
  %519 = fadd float %518, %487, !dbg !47
  %520 = extractelement <2 x float> %290, i64 0, !dbg !47
  %521 = fadd float %520, %489, !dbg !47
  %522 = extractelement <2 x float> %308, i64 0, !dbg !47
  %523 = fadd float %522, %491, !dbg !47
  %524 = extractelement <2 x float> %323, i64 0, !dbg !47
  %525 = fadd float %524, %493, !dbg !47
  %526 = extractelement <2 x float> %341, i64 0, !dbg !47
  %527 = fadd float %526, %495, !dbg !47
  %528 = extractelement <2 x float> %356, i64 0, !dbg !47
  %529 = fadd float %528, %497, !dbg !47
  %530 = extractelement <2 x float> %374, i64 0, !dbg !47
  %531 = fadd float %530, %499, !dbg !47
  %532 = extractelement <2 x float> %389, i64 0, !dbg !47
  %533 = fadd float %532, %501, !dbg !47
  %534 = extractelement <2 x float> %402, i64 0, !dbg !47
  %535 = fadd float %534, %503, !dbg !47
  %536 = extractelement <2 x float> %413, i64 0, !dbg !47
  %537 = fadd float %536, %505, !dbg !47
  %538 = extractelement <2 x float> %426, i64 0, !dbg !47
  %539 = fadd float %538, %507, !dbg !47
  %540 = extractelement <2 x float> %437, i64 0, !dbg !47
  %541 = fadd float %540, %509, !dbg !47
  %542 = extractelement <2 x float> %450, i64 0, !dbg !47
  %543 = fadd float %542, %511, !dbg !47
  %544 = extractelement <2 x float> %461, i64 0, !dbg !47
  %545 = fadd float %544, %513, !dbg !47
  %546 = extractelement <2 x float> %474, i64 0, !dbg !47
  %547 = fadd float %546, %515, !dbg !47
  %548 = extractelement <2 x float> %485, i64 0, !dbg !47
  %549 = fadd float %548, %517, !dbg !47
  %550 = mul i32 %10, %9, !dbg !48
  %551 = mul i32 %550, %78, !dbg !49
  %552 = add i32 %551, %.decomposed, !dbg !50
  %553 = add i32 %551, %.decomposed51, !dbg !50
  %554 = add i32 %.decomposed54, %551, !dbg !50
  %555 = add i32 %.decomposed57, %551, !dbg !50
  %556 = add i32 %.decomposed60, %551, !dbg !50
  %557 = add i32 %.decomposed63, %551, !dbg !50
  %558 = add i32 %.decomposed66, %551, !dbg !50
  %559 = add i32 %.decomposed69, %551, !dbg !50
  %560 = add i32 %.decomposed72, %551, !dbg !50
  %561 = add i32 %.decomposed75, %551, !dbg !50
  %562 = add i32 %.decomposed78, %551, !dbg !50
  %563 = add i32 %.decomposed81, %551, !dbg !50
  %564 = add i32 %.decomposed84, %551, !dbg !50
  %565 = add i32 %.decomposed87, %551, !dbg !50
  %566 = add i32 %.decomposed90, %551, !dbg !50
  %567 = add i32 %.decomposed93, %551, !dbg !50
  %568 = mul i32 %550, 640, !dbg !51
  %569 = mul i32 %81, %568, !dbg !52
  %570 = mul i32 %83, %568, !dbg !52
  %571 = mul i32 %85, %568, !dbg !52
  %572 = mul i32 %87, %568, !dbg !52
  %573 = mul i32 %89, %568, !dbg !52
  %574 = mul i32 %91, %568, !dbg !52
  %575 = mul i32 %93, %568, !dbg !52
  %576 = mul i32 %95, %568, !dbg !52
  %577 = mul i32 %97, %568, !dbg !52
  %578 = mul i32 %99, %568, !dbg !52
  %579 = mul i32 %101, %568, !dbg !52
  %580 = mul i32 %103, %568, !dbg !52
  %581 = mul i32 %105, %568, !dbg !52
  %582 = mul i32 %107, %568, !dbg !52
  %583 = mul i32 %109, %568, !dbg !52
  %584 = mul i32 %111, %568, !dbg !52
  %585 = add i32 %552, %569, !dbg !53
  %586 = add i32 %553, %570, !dbg !53
  %587 = add i32 %554, %571, !dbg !53
  %588 = add i32 %555, %572, !dbg !53
  %589 = add i32 %556, %573, !dbg !53
  %590 = add i32 %557, %574, !dbg !53
  %591 = add i32 %558, %575, !dbg !53
  %592 = add i32 %559, %576, !dbg !53
  %593 = add i32 %560, %577, !dbg !53
  %594 = add i32 %561, %578, !dbg !53
  %595 = add i32 %562, %579, !dbg !53
  %596 = add i32 %563, %580, !dbg !53
  %597 = add i32 %564, %581, !dbg !53
  %598 = add i32 %565, %582, !dbg !53
  %599 = add i32 %566, %583, !dbg !53
  %600 = add i32 %567, %584, !dbg !53
  %601 = sext i32 %585 to i64, !dbg !54
  %602 = getelementptr half, ptr addrspace(1) %7, i64 %601, !dbg !54
  %603 = sext i32 %586 to i64, !dbg !54
  %604 = getelementptr half, ptr addrspace(1) %7, i64 %603, !dbg !54
  %605 = sext i32 %587 to i64, !dbg !54
  %606 = getelementptr half, ptr addrspace(1) %7, i64 %605, !dbg !54
  %607 = sext i32 %588 to i64, !dbg !54
  %608 = getelementptr half, ptr addrspace(1) %7, i64 %607, !dbg !54
  %609 = sext i32 %589 to i64, !dbg !54
  %610 = getelementptr half, ptr addrspace(1) %7, i64 %609, !dbg !54
  %611 = sext i32 %590 to i64, !dbg !54
  %612 = getelementptr half, ptr addrspace(1) %7, i64 %611, !dbg !54
  %613 = sext i32 %591 to i64, !dbg !54
  %614 = getelementptr half, ptr addrspace(1) %7, i64 %613, !dbg !54
  %615 = sext i32 %592 to i64, !dbg !54
  %616 = getelementptr half, ptr addrspace(1) %7, i64 %615, !dbg !54
  %617 = sext i32 %593 to i64, !dbg !54
  %618 = getelementptr half, ptr addrspace(1) %7, i64 %617, !dbg !54
  %619 = sext i32 %594 to i64, !dbg !54
  %620 = getelementptr half, ptr addrspace(1) %7, i64 %619, !dbg !54
  %621 = sext i32 %595 to i64, !dbg !54
  %622 = getelementptr half, ptr addrspace(1) %7, i64 %621, !dbg !54
  %623 = sext i32 %596 to i64, !dbg !54
  %624 = getelementptr half, ptr addrspace(1) %7, i64 %623, !dbg !54
  %625 = sext i32 %597 to i64, !dbg !54
  %626 = getelementptr half, ptr addrspace(1) %7, i64 %625, !dbg !54
  %627 = sext i32 %598 to i64, !dbg !54
  %628 = getelementptr half, ptr addrspace(1) %7, i64 %627, !dbg !54
  %629 = sext i32 %599 to i64, !dbg !54
  %630 = getelementptr half, ptr addrspace(1) %7, i64 %629, !dbg !54
  %631 = sext i32 %600 to i64, !dbg !54
  %632 = getelementptr half, ptr addrspace(1) %7, i64 %631, !dbg !54
  %633 = fptrunc float %519 to half, !dbg !55
  %634 = fptrunc float %521 to half, !dbg !55
  %635 = fptrunc float %523 to half, !dbg !55
  %636 = fptrunc float %525 to half, !dbg !55
  %637 = fptrunc float %527 to half, !dbg !55
  %638 = fptrunc float %529 to half, !dbg !55
  %639 = fptrunc float %531 to half, !dbg !55
  %640 = fptrunc float %533 to half, !dbg !55
  %641 = fptrunc float %535 to half, !dbg !55
  %642 = fptrunc float %537 to half, !dbg !55
  %643 = fptrunc float %539 to half, !dbg !55
  %644 = fptrunc float %541 to half, !dbg !55
  %645 = fptrunc float %543 to half, !dbg !55
  %646 = fptrunc float %545 to half, !dbg !55
  %647 = fptrunc float %547 to half, !dbg !55
  %648 = fptrunc float %549 to half, !dbg !55
  %649 = mul nuw nsw i32 %20, 17, !dbg !55
  %650 = add nuw nsw i32 %649, %32, !dbg !55
  %651 = zext nneg i32 %650 to i64, !dbg !55
  %652 = getelementptr half, ptr addrspace(3) @global_smem, i64 %651, !dbg !55
  %653 = insertelement <1 x half> undef, half %633, i64 0, !dbg !55
  store <1 x half> %653, ptr addrspace(3) %652, align 2, !dbg !55
  %654 = or i32 %32, 1, !dbg !55
  %655 = add nuw nsw i32 %654, %649, !dbg !55
  %656 = zext nneg i32 %655 to i64, !dbg !55
  %657 = getelementptr half, ptr addrspace(3) @global_smem, i64 %656, !dbg !55
  %658 = insertelement <1 x half> undef, half %634, i64 0, !dbg !55
  store <1 x half> %658, ptr addrspace(3) %657, align 2, !dbg !55
  %659 = or i32 %32, 2, !dbg !55
  %660 = add nuw nsw i32 %659, %649, !dbg !55
  %661 = zext nneg i32 %660 to i64, !dbg !55
  %662 = getelementptr half, ptr addrspace(3) @global_smem, i64 %661, !dbg !55
  %663 = insertelement <1 x half> undef, half %635, i64 0, !dbg !55
  store <1 x half> %663, ptr addrspace(3) %662, align 2, !dbg !55
  %664 = or i32 %32, 3, !dbg !55
  %665 = add nuw nsw i32 %664, %649, !dbg !55
  %666 = zext nneg i32 %665 to i64, !dbg !55
  %667 = getelementptr half, ptr addrspace(3) @global_smem, i64 %666, !dbg !55
  %668 = insertelement <1 x half> undef, half %636, i64 0, !dbg !55
  store <1 x half> %668, ptr addrspace(3) %667, align 2, !dbg !55
  %669 = or i32 %32, 4, !dbg !55
  %670 = add nuw nsw i32 %669, %649, !dbg !55
  %671 = zext nneg i32 %670 to i64, !dbg !55
  %672 = getelementptr half, ptr addrspace(3) @global_smem, i64 %671, !dbg !55
  %673 = insertelement <1 x half> undef, half %637, i64 0, !dbg !55
  store <1 x half> %673, ptr addrspace(3) %672, align 2, !dbg !55
  %674 = or i32 %32, 5, !dbg !55
  %675 = add nuw nsw i32 %674, %649, !dbg !55
  %676 = zext nneg i32 %675 to i64, !dbg !55
  %677 = getelementptr half, ptr addrspace(3) @global_smem, i64 %676, !dbg !55
  %678 = insertelement <1 x half> undef, half %638, i64 0, !dbg !55
  store <1 x half> %678, ptr addrspace(3) %677, align 2, !dbg !55
  %679 = or i32 %32, 6, !dbg !55
  %680 = add nuw nsw i32 %679, %649, !dbg !55
  %681 = zext nneg i32 %680 to i64, !dbg !55
  %682 = getelementptr half, ptr addrspace(3) @global_smem, i64 %681, !dbg !55
  %683 = insertelement <1 x half> undef, half %639, i64 0, !dbg !55
  store <1 x half> %683, ptr addrspace(3) %682, align 2, !dbg !55
  %684 = or i32 %32, 7, !dbg !55
  %685 = add nuw nsw i32 %684, %649, !dbg !55
  %686 = zext nneg i32 %685 to i64, !dbg !55
  %687 = getelementptr half, ptr addrspace(3) @global_smem, i64 %686, !dbg !55
  %688 = insertelement <1 x half> undef, half %640, i64 0, !dbg !55
  store <1 x half> %688, ptr addrspace(3) %687, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %689 = mul nuw nsw i32 %23, 17, !dbg !55
  %690 = add nuw nsw i32 %689, %33, !dbg !55
  %691 = zext nneg i32 %690 to i64, !dbg !55
  %692 = getelementptr half, ptr addrspace(3) @global_smem, i64 %691, !dbg !55
  %693 = load i16, ptr addrspace(3) %692, align 2, !dbg !55
  %694 = mul nuw nsw i32 %24, 17, !dbg !55
  %695 = add nuw nsw i32 %694, %33, !dbg !55
  %696 = zext nneg i32 %695 to i64, !dbg !55
  %697 = getelementptr half, ptr addrspace(3) @global_smem, i64 %696, !dbg !55
  %698 = load i16, ptr addrspace(3) %697, align 2, !dbg !55
  %699 = mul nuw nsw i32 %25, 17, !dbg !55
  %700 = add nuw nsw i32 %699, %33, !dbg !55
  %701 = zext nneg i32 %700 to i64, !dbg !55
  %702 = getelementptr half, ptr addrspace(3) @global_smem, i64 %701, !dbg !55
  %703 = load i16, ptr addrspace(3) %702, align 2, !dbg !55
  %704 = mul nuw nsw i32 %26, 17, !dbg !55
  %705 = add nuw nsw i32 %704, %33, !dbg !55
  %706 = zext nneg i32 %705 to i64, !dbg !55
  %707 = getelementptr half, ptr addrspace(3) @global_smem, i64 %706, !dbg !55
  %708 = load i16, ptr addrspace(3) %707, align 2, !dbg !55
  %709 = mul nuw nsw i32 %27, 17, !dbg !55
  %710 = add nuw nsw i32 %709, %33, !dbg !55
  %711 = zext nneg i32 %710 to i64, !dbg !55
  %712 = getelementptr half, ptr addrspace(3) @global_smem, i64 %711, !dbg !55
  %713 = load i16, ptr addrspace(3) %712, align 2, !dbg !55
  %714 = mul nuw nsw i32 %28, 17, !dbg !55
  %715 = add nuw nsw i32 %714, %33, !dbg !55
  %716 = zext nneg i32 %715 to i64, !dbg !55
  %717 = getelementptr half, ptr addrspace(3) @global_smem, i64 %716, !dbg !55
  %718 = load i16, ptr addrspace(3) %717, align 2, !dbg !55
  %719 = mul nuw nsw i32 %29, 17, !dbg !55
  %720 = add nuw nsw i32 %719, %33, !dbg !55
  %721 = zext nneg i32 %720 to i64, !dbg !55
  %722 = getelementptr half, ptr addrspace(3) @global_smem, i64 %721, !dbg !55
  %723 = load i16, ptr addrspace(3) %722, align 2, !dbg !55
  %724 = mul nuw nsw i32 %30, 17, !dbg !55
  %725 = add nuw nsw i32 %724, %33, !dbg !55
  %726 = zext nneg i32 %725 to i64, !dbg !55
  %727 = getelementptr half, ptr addrspace(3) @global_smem, i64 %726, !dbg !55
  %728 = load i16, ptr addrspace(3) %727, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %729 = insertelement <1 x half> undef, half %641, i64 0, !dbg !55
  store <1 x half> %729, ptr addrspace(3) %652, align 2, !dbg !55
  %730 = insertelement <1 x half> undef, half %642, i64 0, !dbg !55
  store <1 x half> %730, ptr addrspace(3) %657, align 2, !dbg !55
  %731 = insertelement <1 x half> undef, half %643, i64 0, !dbg !55
  store <1 x half> %731, ptr addrspace(3) %662, align 2, !dbg !55
  %732 = insertelement <1 x half> undef, half %644, i64 0, !dbg !55
  store <1 x half> %732, ptr addrspace(3) %667, align 2, !dbg !55
  %733 = insertelement <1 x half> undef, half %645, i64 0, !dbg !55
  store <1 x half> %733, ptr addrspace(3) %672, align 2, !dbg !55
  %734 = insertelement <1 x half> undef, half %646, i64 0, !dbg !55
  store <1 x half> %734, ptr addrspace(3) %677, align 2, !dbg !55
  %735 = insertelement <1 x half> undef, half %647, i64 0, !dbg !55
  store <1 x half> %735, ptr addrspace(3) %682, align 2, !dbg !55
  %736 = insertelement <1 x half> undef, half %648, i64 0, !dbg !55
  store <1 x half> %736, ptr addrspace(3) %687, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %737 = load i16, ptr addrspace(3) %692, align 2, !dbg !55
  %738 = load i16, ptr addrspace(3) %697, align 2, !dbg !55
  %739 = load i16, ptr addrspace(3) %702, align 2, !dbg !55
  %740 = load i16, ptr addrspace(3) %707, align 2, !dbg !55
  %741 = load i16, ptr addrspace(3) %712, align 2, !dbg !55
  %742 = load i16, ptr addrspace(3) %717, align 2, !dbg !55
  %743 = load i16, ptr addrspace(3) %722, align 2, !dbg !55
  %744 = load i16, ptr addrspace(3) %727, align 2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %693, ptr addrspace(1) %602, i1 %123) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %698, ptr addrspace(1) %604, i1 %124) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %703, ptr addrspace(1) %606, i1 %125) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %708, ptr addrspace(1) %608, i1 %126) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %713, ptr addrspace(1) %610, i1 %127) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %718, ptr addrspace(1) %612, i1 %128) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %723, ptr addrspace(1) %614, i1 %129) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %728, ptr addrspace(1) %616, i1 %130) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %737, ptr addrspace(1) %618, i1 %131) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %738, ptr addrspace(1) %620, i1 %132) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %739, ptr addrspace(1) %622, i1 %133) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %740, ptr addrspace(1) %624, i1 %134) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %741, ptr addrspace(1) %626, i1 %135) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %742, ptr addrspace(1) %628, i1 %136) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %743, ptr addrspace(1) %630, i1 %137) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %744, ptr addrspace(1) %632, i1 %138) #2, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ciiimgrpse6goyrxpvjgbxdwjv37xysdkiyckcv2mfzxeaxfvokc.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/ii")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89101112de", linkageName: "triton__0d1d2d3d4d5d6d7d89101112de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 32, column: 40, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 54, scope: !5)
!26 = !DILocation(line: 32, column: 46, scope: !5)
!27 = !DILocation(line: 33, column: 30, scope: !5)
!28 = !DILocation(line: 33, column: 35, scope: !5)
!29 = !DILocation(line: 34, column: 30, scope: !5)
!30 = !DILocation(line: 34, column: 46, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 36, column: 30, scope: !5)
!34 = !DILocation(line: 36, column: 35, scope: !5)
!35 = !DILocation(line: 37, column: 31, scope: !5)
!36 = !DILocation(line: 37, column: 47, scope: !5)
!37 = !DILocation(line: 38, column: 31, scope: !5)
!38 = !DILocation(line: 38, column: 47, scope: !5)
!39 = !DILocation(line: 38, column: 95, scope: !5)
!40 = !DILocation(line: 32, column: 94, scope: !5)
!41 = !DILocation(line: 33, column: 75, scope: !5)
!42 = !DILocation(line: 34, column: 94, scope: !5)
!43 = !DILocation(line: 39, column: 18, scope: !5)
!44 = !DILocation(line: 41, column: 18, scope: !5)
!45 = !DILocation(line: 42, column: 18, scope: !5)
!46 = !DILocation(line: 48, column: 20, scope: !5)
!47 = !DILocation(line: 49, column: 19, scope: !5)
!48 = !DILocation(line: 50, column: 35, scope: !5)
!49 = !DILocation(line: 50, column: 39, scope: !5)
!50 = !DILocation(line: 50, column: 31, scope: !5)
!51 = !DILocation(line: 50, column: 54, scope: !5)
!52 = !DILocation(line: 50, column: 58, scope: !5)
!53 = !DILocation(line: 50, column: 46, scope: !5)
!54 = !DILocation(line: 50, column: 25, scope: !5)
!55 = !DILocation(line: 50, column: 71, scope: !5)
!56 = !DILocation(line: 50, column: 4, scope: !5)
