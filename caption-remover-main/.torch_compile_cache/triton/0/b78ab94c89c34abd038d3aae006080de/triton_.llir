; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = and i32 %8, 7, !dbg !8
  %12 = and i32 %10, 1, !dbg !9
  %13 = lshr i32 %9, 3, !dbg !9
  %14 = shl nuw nsw i32 %12, 2, !dbg !9
  %15 = or i32 %14, %13, !dbg !9
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 3, !dbg !11
  %18 = or i32 %17, %11, !dbg !12
  %19 = icmp slt i32 %18, 32, !dbg !13
  %20 = icmp ult i32 %15, 6, !dbg !14
  %21 = shl nuw nsw i32 %15, 5, !dbg !15
  %22 = add i32 %18, %21, !dbg !16
  %23 = sext i32 %22 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = and i1 %20, %19, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25) #3, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %25, i32 0, i1 %25) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %25, i32 0, i1 %25) #3, !dbg !23
  %33 = bitcast i32 %32 to float, !dbg !23
  %34 = select i1 %25, float %27, float 0.000000e+00, !dbg !24
  %35 = select i1 %25, float %30, float 0.000000e+00, !dbg !25
  %36 = select i1 %25, float %33, float 0.000000e+00, !dbg !26
  %37 = bitcast float %34 to i32, !dbg !27
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = bitcast float %35 to i32, !dbg !27
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 16, i32 31), !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = bitcast float %36 to i32, !dbg !27
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = fsub float %39, %34, !dbg !31
  %47 = fadd float %36, %45, !dbg !35
  %48 = fcmp oeq float %47, 0.000000e+00, !dbg !36
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %47) #3, !dbg !37
  %50 = select i1 %48, float 0.000000e+00, float %49, !dbg !38
  %51 = fmul float %46, %50, !dbg !39
  %52 = fadd float %34, %51, !dbg !40
  %53 = fadd float %35, %42, !dbg !41
  %54 = fmul float %46, %46, !dbg !42
  %55 = fmul float %36, %54, !dbg !43
  %56 = fmul float %55, %50, !dbg !44
  %57 = fadd float %53, %56, !dbg !45
  %58 = bitcast float %52 to i32, !dbg !27
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !27
  %60 = bitcast i32 %59 to float, !dbg !27
  %61 = bitcast float %57 to i32, !dbg !27
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = bitcast float %47 to i32, !dbg !27
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !27
  %66 = bitcast i32 %65 to float, !dbg !27
  %67 = fsub float %60, %52, !dbg !31
  %68 = fadd float %47, %66, !dbg !35
  %69 = fcmp oeq float %68, 0.000000e+00, !dbg !36
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %68) #3, !dbg !37
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !38
  %72 = fmul float %67, %71, !dbg !39
  %73 = fadd float %52, %72, !dbg !40
  %74 = fadd float %57, %63, !dbg !41
  %75 = fmul float %67, %67, !dbg !42
  %76 = fmul float %47, %75, !dbg !43
  %77 = fmul float %71, %76, !dbg !44
  %78 = fadd float %74, %77, !dbg !45
  %79 = icmp ult i32 %9, 8, !dbg !27
  %80 = shl nuw nsw i32 %11, 1, !dbg !27
  %81 = or i32 %80, %12, !dbg !27
  %82 = zext nneg i32 %81 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i64 %82, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, float %73, i1 %79) #3, !dbg !27
  %84 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %82, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, float %78, i1 %79) #3, !dbg !27
  %85 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 128), i64 %82, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, float %68, i1 %79) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %86 = icmp slt i32 %8, 16, !dbg !27
  %87 = sext i32 %8 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i64 %87, !dbg !27
  %89 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %86) #3, !dbg !27
  %90 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %87, !dbg !27
  %91 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %86) #3, !dbg !27
  %92 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 128), i64 %87, !dbg !27
  %93 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %92, i1 %86) #3, !dbg !27
  %94 = bitcast float %89 to i32, !dbg !27
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !27
  %96 = bitcast i32 %95 to float, !dbg !27
  %97 = bitcast float %91 to i32, !dbg !27
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !27
  %99 = bitcast i32 %98 to float, !dbg !27
  %100 = bitcast float %93 to i32, !dbg !27
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = fsub float %96, %89, !dbg !31
  %104 = fadd float %93, %102, !dbg !35
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !36
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %104) #3, !dbg !37
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !38
  %108 = fmul float %103, %107, !dbg !39
  %109 = fadd float %89, %108, !dbg !40
  %110 = fadd float %91, %99, !dbg !41
  %111 = fmul float %103, %103, !dbg !42
  %112 = fmul float %93, %111, !dbg !43
  %113 = fmul float %112, %107, !dbg !44
  %114 = fadd float %110, %113, !dbg !45
  %115 = and i32 %8, 1, !dbg !27
  %116 = icmp eq i32 %115, 0, !dbg !27
  %117 = and i1 %86, %116, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, float %109, i1 %117) #3, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, float %114, i1 %117) #3, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, float %104, i1 %117) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %118 = zext nneg i32 %80 to i64, !dbg !27
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i64 %118, !dbg !27
  %120 = load i32, ptr addrspace(3) %119, align 4, !dbg !27
  %121 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %118, !dbg !27
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !27
  %123 = sext i32 %18 to i64, !dbg !46
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !46
  %125 = icmp eq i32 %15, 0, !dbg !47
  %126 = and i1 %125, %19, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %124, i1 %126) #3, !dbg !47
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %123, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %127, i1 %126) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cfto42vzyohcimbhppqcaan4slqxdhsqegaxmgl2rm2rsrd37os3.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/ft")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 64}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 34, scope: !5)
!10 = !DILocation(line: 24, column: 28, scope: !5)
!11 = !DILocation(line: 24, column: 33, scope: !5)
!12 = !DILocation(line: 25, column: 23, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 29, column: 21, scope: !5)
!15 = !DILocation(line: 32, column: 39, scope: !5)
!16 = !DILocation(line: 32, column: 36, scope: !5)
!17 = !DILocation(line: 32, column: 30, scope: !5)
!18 = !DILocation(line: 32, column: 53, scope: !5)
!19 = !DILocation(line: 32, column: 45, scope: !5)
!20 = !DILocation(line: 33, column: 30, scope: !5)
!21 = !DILocation(line: 33, column: 45, scope: !5)
!22 = !DILocation(line: 34, column: 30, scope: !5)
!23 = !DILocation(line: 34, column: 45, scope: !5)
!24 = !DILocation(line: 38, column: 41, scope: !5)
!25 = !DILocation(line: 39, column: 41, scope: !5)
!26 = !DILocation(line: 40, column: 41, scope: !5)
!27 = !DILocation(line: 131, column: 46, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !5, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!30 = !DILocation(line: 41, column: 67, scope: !28)
!31 = !DILocation(line: 119, column: 21, scope: !32, inlinedAt: !33)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 131, column: 46, scope: !32, inlinedAt: !34)
!34 = !DILocation(line: 41, column: 67, scope: !32)
!35 = !DILocation(line: 120, column: 28, scope: !32, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 39, scope: !32, inlinedAt: !33)
!37 = !DILocation(line: 121, column: 60, scope: !32, inlinedAt: !33)
!38 = !DILocation(line: 121, column: 49, scope: !32, inlinedAt: !33)
!39 = !DILocation(line: 123, column: 25, scope: !32, inlinedAt: !33)
!40 = !DILocation(line: 123, column: 17, scope: !32, inlinedAt: !33)
!41 = !DILocation(line: 124, column: 15, scope: !32, inlinedAt: !33)
!42 = !DILocation(line: 124, column: 30, scope: !32, inlinedAt: !33)
!43 = !DILocation(line: 124, column: 38, scope: !32, inlinedAt: !33)
!44 = !DILocation(line: 124, column: 49, scope: !32, inlinedAt: !33)
!45 = !DILocation(line: 124, column: 22, scope: !32, inlinedAt: !33)
!46 = !DILocation(line: 45, column: 25, scope: !5)
!47 = !DILocation(line: 45, column: 37, scope: !5)
!48 = !DILocation(line: 46, column: 25, scope: !5)
!49 = !DILocation(line: 46, column: 37, scope: !5)
!50 = !DILocation(line: 46, column: 4, scope: !5)
