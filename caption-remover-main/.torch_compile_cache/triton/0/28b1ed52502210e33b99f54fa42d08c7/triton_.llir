; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %9, 255, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %11 = icmp slt i32 %10, 640, !dbg !10
  %12 = mul i32 %5, %4, !dbg !11
  %13 = mul i32 %12, 22, !dbg !12
  %14 = shl i32 %12, 1, !dbg !13
  %15 = mul i32 %14, %10, !dbg !14
  %16 = icmp sgt i32 %7, 0, !dbg !15
  %17 = shl nuw nsw i32 %urem, 1
  %18 = zext nneg i32 %17 to i64
  br i1 %16, label %.lr.ph, label %._crit_edge, !dbg !15

.lr.ph:                                           ; preds = %8
  %19 = mul i32 %12, 1280, !dbg !16
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %18
  %21 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !17
  %22 = insertelement <2 x i32> %21, i32 %12, i64 1, !dbg !17
  %23 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %24 = insertelement <2 x i32> %23, i32 %19, i64 1, !dbg !18
  br label %25, !dbg !15

25:                                               ; preds = %.lr.ph, %._crit_edge24
  %26 = phi float [ 0.000000e+00, %.lr.ph ], [ %309, %._crit_edge24 ]
  %27 = phi float [ 0.000000e+00, %.lr.ph ], [ %310, %._crit_edge24 ]
  %28 = phi float [ 0.000000e+00, %.lr.ph ], [ %311, %._crit_edge24 ]
  %29 = phi float [ 0.000000e+00, %.lr.ph ], [ %312, %._crit_edge24 ]
  %30 = phi float [ 0.000000e+00, %.lr.ph ], [ %313, %._crit_edge24 ]
  %31 = phi float [ 0.000000e+00, %.lr.ph ], [ %314, %._crit_edge24 ]
  %32 = phi float [ 0.000000e+00, %.lr.ph ], [ %315, %._crit_edge24 ]
  %33 = phi float [ 0.000000e+00, %.lr.ph ], [ %316, %._crit_edge24 ]
  %34 = phi float [ 0.000000e+00, %.lr.ph ], [ %301, %._crit_edge24 ]
  %35 = phi float [ 0.000000e+00, %.lr.ph ], [ %302, %._crit_edge24 ]
  %36 = phi float [ 0.000000e+00, %.lr.ph ], [ %303, %._crit_edge24 ]
  %37 = phi float [ 0.000000e+00, %.lr.ph ], [ %304, %._crit_edge24 ]
  %38 = phi float [ 0.000000e+00, %.lr.ph ], [ %305, %._crit_edge24 ]
  %39 = phi float [ 0.000000e+00, %.lr.ph ], [ %306, %._crit_edge24 ]
  %40 = phi float [ 0.000000e+00, %.lr.ph ], [ %307, %._crit_edge24 ]
  %41 = phi float [ 0.000000e+00, %.lr.ph ], [ %308, %._crit_edge24 ]
  %42 = phi float [ 0.000000e+00, %.lr.ph ], [ %293, %._crit_edge24 ]
  %43 = phi float [ 0.000000e+00, %.lr.ph ], [ %294, %._crit_edge24 ]
  %44 = phi float [ 0.000000e+00, %.lr.ph ], [ %295, %._crit_edge24 ]
  %45 = phi float [ 0.000000e+00, %.lr.ph ], [ %296, %._crit_edge24 ]
  %46 = phi float [ 0.000000e+00, %.lr.ph ], [ %297, %._crit_edge24 ]
  %47 = phi float [ 0.000000e+00, %.lr.ph ], [ %298, %._crit_edge24 ]
  %48 = phi float [ 0.000000e+00, %.lr.ph ], [ %299, %._crit_edge24 ]
  %49 = phi float [ 0.000000e+00, %.lr.ph ], [ %300, %._crit_edge24 ]
  %50 = phi i32 [ 0, %.lr.ph ], [ %317, %._crit_edge24 ]
  %51 = or i32 %50, %urem, !dbg !19
  %52 = or i32 %51, 256, !dbg !19
  %53 = or i32 %51, 512, !dbg !19
  %54 = or i32 %51, 768, !dbg !19
  %55 = or i32 %51, 1024, !dbg !19
  %56 = or i32 %51, 1280, !dbg !19
  %57 = or i32 %51, 1536, !dbg !19
  %58 = or i32 %51, 1792, !dbg !19
  %59 = icmp slt i32 %51, %7, !dbg !20
  %60 = icmp slt i32 %52, %7, !dbg !20
  %61 = icmp slt i32 %53, %7, !dbg !20
  %62 = icmp slt i32 %54, %7, !dbg !20
  %63 = icmp slt i32 %55, %7, !dbg !20
  %64 = icmp slt i32 %56, %7, !dbg !20
  %65 = icmp slt i32 %57, %7, !dbg !20
  %66 = icmp slt i32 %58, %7, !dbg !20
  %67 = srem i32 %51, %13, !dbg !21
  %68 = srem i32 %52, %13, !dbg !21
  %69 = srem i32 %53, %13, !dbg !21
  %70 = srem i32 %54, %13, !dbg !21
  %71 = srem i32 %55, %13, !dbg !21
  %72 = srem i32 %56, %13, !dbg !21
  %73 = srem i32 %57, %13, !dbg !21
  %74 = srem i32 %58, %13, !dbg !21
  %75 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !17
  %76 = insertelement <2 x i32> %75, i32 %67, i64 1, !dbg !17
  %77 = sdiv <2 x i32> %76, %22, !dbg !17
  %78 = mul <2 x i32> %77, %24, !dbg !18
  %79 = extractelement <2 x i32> %78, i64 0, !dbg !22
  %80 = add i32 %79, %15, !dbg !22
  %81 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !17
  %82 = insertelement <2 x i32> %81, i32 %68, i64 1, !dbg !17
  %83 = sdiv <2 x i32> %82, %22, !dbg !17
  %84 = mul <2 x i32> %83, %24, !dbg !18
  %85 = extractelement <2 x i32> %84, i64 0, !dbg !22
  %86 = add i32 %85, %15, !dbg !22
  %87 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !17
  %88 = insertelement <2 x i32> %87, i32 %69, i64 1, !dbg !17
  %89 = sdiv <2 x i32> %88, %22, !dbg !17
  %90 = mul <2 x i32> %89, %24, !dbg !18
  %91 = extractelement <2 x i32> %90, i64 0, !dbg !22
  %92 = add i32 %91, %15, !dbg !22
  %93 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !17
  %94 = insertelement <2 x i32> %93, i32 %70, i64 1, !dbg !17
  %95 = sdiv <2 x i32> %94, %22, !dbg !17
  %96 = mul <2 x i32> %95, %24, !dbg !18
  %97 = extractelement <2 x i32> %96, i64 0, !dbg !22
  %98 = add i32 %97, %15, !dbg !22
  %99 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !17
  %100 = insertelement <2 x i32> %99, i32 %71, i64 1, !dbg !17
  %101 = sdiv <2 x i32> %100, %22, !dbg !17
  %102 = mul <2 x i32> %101, %24, !dbg !18
  %103 = extractelement <2 x i32> %102, i64 0, !dbg !22
  %104 = add i32 %103, %15, !dbg !22
  %105 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !17
  %106 = insertelement <2 x i32> %105, i32 %72, i64 1, !dbg !17
  %107 = sdiv <2 x i32> %106, %22, !dbg !17
  %108 = mul <2 x i32> %107, %24, !dbg !18
  %109 = extractelement <2 x i32> %108, i64 0, !dbg !22
  %110 = add i32 %109, %15, !dbg !22
  %111 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !17
  %112 = insertelement <2 x i32> %111, i32 %73, i64 1, !dbg !17
  %113 = sdiv <2 x i32> %112, %22, !dbg !17
  %114 = mul <2 x i32> %113, %24, !dbg !18
  %115 = extractelement <2 x i32> %114, i64 0, !dbg !22
  %116 = add i32 %115, %15, !dbg !22
  %117 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !17
  %118 = insertelement <2 x i32> %117, i32 %74, i64 1, !dbg !17
  %119 = sdiv <2 x i32> %118, %22, !dbg !17
  %120 = mul <2 x i32> %119, %24, !dbg !18
  %121 = extractelement <2 x i32> %120, i64 0, !dbg !22
  %122 = add i32 %121, %15, !dbg !22
  %123 = extractelement <2 x i32> %78, i64 1, !dbg !23
  %124 = add i32 %80, %123, !dbg !23
  %125 = extractelement <2 x i32> %84, i64 1, !dbg !23
  %126 = add i32 %86, %125, !dbg !23
  %127 = extractelement <2 x i32> %90, i64 1, !dbg !23
  %128 = add i32 %92, %127, !dbg !23
  %129 = extractelement <2 x i32> %96, i64 1, !dbg !23
  %130 = add i32 %98, %129, !dbg !23
  %131 = extractelement <2 x i32> %102, i64 1, !dbg !23
  %132 = add i32 %104, %131, !dbg !23
  %133 = extractelement <2 x i32> %108, i64 1, !dbg !23
  %134 = add i32 %110, %133, !dbg !23
  %135 = extractelement <2 x i32> %114, i64 1, !dbg !23
  %136 = add i32 %116, %135, !dbg !23
  %137 = extractelement <2 x i32> %120, i64 1, !dbg !23
  %138 = add i32 %122, %137, !dbg !23
  %139 = srem i32 %67, %12, !dbg !24
  %140 = srem i32 %68, %12, !dbg !24
  %141 = srem i32 %69, %12, !dbg !24
  %142 = srem i32 %70, %12, !dbg !24
  %143 = srem i32 %71, %12, !dbg !24
  %144 = srem i32 %72, %12, !dbg !24
  %145 = srem i32 %73, %12, !dbg !24
  %146 = srem i32 %74, %12, !dbg !24
  %147 = add i32 %124, %139, !dbg !25
  %148 = add i32 %126, %140, !dbg !25
  %149 = add i32 %128, %141, !dbg !25
  %150 = add i32 %130, %142, !dbg !25
  %151 = add i32 %132, %143, !dbg !25
  %152 = add i32 %134, %144, !dbg !25
  %153 = add i32 %136, %145, !dbg !25
  %154 = add i32 %138, %146, !dbg !25
  %155 = sext i32 %147 to i64, !dbg !26
  %156 = getelementptr half, ptr addrspace(1) %0, i64 %155, !dbg !26
  %157 = sext i32 %148 to i64, !dbg !26
  %158 = getelementptr half, ptr addrspace(1) %0, i64 %157, !dbg !26
  %159 = sext i32 %149 to i64, !dbg !26
  %160 = getelementptr half, ptr addrspace(1) %0, i64 %159, !dbg !26
  %161 = sext i32 %150 to i64, !dbg !26
  %162 = getelementptr half, ptr addrspace(1) %0, i64 %161, !dbg !26
  %163 = sext i32 %151 to i64, !dbg !26
  %164 = getelementptr half, ptr addrspace(1) %0, i64 %163, !dbg !26
  %165 = sext i32 %152 to i64, !dbg !26
  %166 = getelementptr half, ptr addrspace(1) %0, i64 %165, !dbg !26
  %167 = sext i32 %153 to i64, !dbg !26
  %168 = getelementptr half, ptr addrspace(1) %0, i64 %167, !dbg !26
  %169 = sext i32 %154 to i64, !dbg !26
  %170 = getelementptr half, ptr addrspace(1) %0, i64 %169, !dbg !26
  %171 = and i1 %11, %59, !dbg !27
  %172 = and i1 %11, %60, !dbg !27
  %173 = and i1 %11, %61, !dbg !27
  %174 = and i1 %11, %62, !dbg !27
  %175 = and i1 %11, %63, !dbg !27
  %176 = and i1 %11, %64, !dbg !27
  %177 = and i1 %11, %65, !dbg !27
  %178 = and i1 %11, %66, !dbg !27
  %179 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %156, i1 %171, i16 0, i1 %171) #3, !dbg !28
  %180 = bitcast i16 %179 to half, !dbg !28
  %181 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %158, i1 %172, i16 0, i1 %172) #3, !dbg !28
  %182 = bitcast i16 %181 to half, !dbg !28
  %183 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %160, i1 %173, i16 0, i1 %173) #3, !dbg !28
  %184 = bitcast i16 %183 to half, !dbg !28
  %185 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 %174, i16 0, i1 %174) #3, !dbg !28
  %186 = bitcast i16 %185 to half, !dbg !28
  %187 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %164, i1 %175, i16 0, i1 %175) #3, !dbg !28
  %188 = bitcast i16 %187 to half, !dbg !28
  %189 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %166, i1 %176, i16 0, i1 %176) #3, !dbg !28
  %190 = bitcast i16 %189 to half, !dbg !28
  %191 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %168, i1 %177, i16 0, i1 %177) #3, !dbg !28
  %192 = bitcast i16 %191 to half, !dbg !28
  %193 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %170, i1 %178, i16 0, i1 %178) #3, !dbg !28
  %194 = bitcast i16 %193 to half, !dbg !28
  %195 = fpext half %180 to float, !dbg !29
  %196 = fpext half %182 to float, !dbg !29
  %197 = fpext half %184 to float, !dbg !29
  %198 = fpext half %186 to float, !dbg !29
  %199 = fpext half %188 to float, !dbg !29
  %200 = fpext half %190 to float, !dbg !29
  %201 = fpext half %192 to float, !dbg !29
  %202 = fpext half %194 to float, !dbg !29
  %203 = icmp eq i32 %50, 0, !dbg !30
  br i1 %203, label %._crit_edge24, label %204, !dbg !31

204:                                              ; preds = %25
  %205 = fsub float %195, %42, !dbg !35
  %206 = fsub float %196, %43, !dbg !35
  %207 = fsub float %197, %44, !dbg !35
  %208 = fsub float %198, %45, !dbg !35
  %209 = fsub float %199, %46, !dbg !35
  %210 = fsub float %200, %47, !dbg !35
  %211 = fsub float %201, %48, !dbg !35
  %212 = fsub float %202, %49, !dbg !35
  %213 = fadd float %26, 1.000000e+00, !dbg !36
  %214 = fadd float %27, 1.000000e+00, !dbg !36
  %215 = fadd float %28, 1.000000e+00, !dbg !36
  %216 = fadd float %29, 1.000000e+00, !dbg !36
  %217 = fadd float %30, 1.000000e+00, !dbg !36
  %218 = fadd float %31, 1.000000e+00, !dbg !36
  %219 = fadd float %32, 1.000000e+00, !dbg !36
  %220 = fadd float %33, 1.000000e+00, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %221 = insertelement <1 x float> undef, float %213, i64 0, !dbg !36
  store <1 x float> %221, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %222 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %223 = insertelement <1 x float> undef, float %214, i64 0, !dbg !36
  store <1 x float> %223, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %224 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %225 = insertelement <1 x float> undef, float %215, i64 0, !dbg !36
  store <1 x float> %225, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %226 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %227 = insertelement <1 x float> undef, float %216, i64 0, !dbg !36
  store <1 x float> %227, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %228 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %229 = insertelement <1 x float> undef, float %217, i64 0, !dbg !36
  store <1 x float> %229, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %230 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %231 = insertelement <1 x float> undef, float %218, i64 0, !dbg !36
  store <1 x float> %231, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %232 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %233 = insertelement <1 x float> undef, float %219, i64 0, !dbg !36
  store <1 x float> %233, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %234 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %235 = insertelement <1 x float> undef, float %220, i64 0, !dbg !36
  store <1 x float> %235, ptr addrspace(3) %20, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %236 = load float, ptr addrspace(3) %20, align 4, !dbg !36
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %222) #3, !dbg !37
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %224) #3, !dbg !37
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %226) #3, !dbg !37
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %228) #3, !dbg !37
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %230) #3, !dbg !37
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %232) #3, !dbg !37
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %234) #3, !dbg !37
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %236) #3, !dbg !37
  %245 = fadd float %42, %237, !dbg !38
  %246 = fadd float %43, %238, !dbg !38
  %247 = fadd float %44, %239, !dbg !38
  %248 = fadd float %45, %240, !dbg !38
  %249 = fadd float %46, %241, !dbg !38
  %250 = fadd float %47, %242, !dbg !38
  %251 = fadd float %48, %243, !dbg !38
  %252 = fadd float %49, %244, !dbg !38
  %253 = fsub float %195, %245, !dbg !39
  %254 = fsub float %196, %246, !dbg !39
  %255 = fsub float %197, %247, !dbg !39
  %256 = fsub float %198, %248, !dbg !39
  %257 = fsub float %199, %249, !dbg !39
  %258 = fsub float %200, %250, !dbg !39
  %259 = fsub float %201, %251, !dbg !39
  %260 = fsub float %202, %252, !dbg !39
  %261 = fmul float %205, %253, !dbg !40
  %262 = fmul float %206, %254, !dbg !40
  %263 = fmul float %207, %255, !dbg !40
  %264 = fmul float %208, %256, !dbg !40
  %265 = fmul float %209, %257, !dbg !40
  %266 = fmul float %210, %258, !dbg !40
  %267 = fmul float %211, %259, !dbg !40
  %268 = fmul float %212, %260, !dbg !40
  %269 = fadd float %34, %261, !dbg !41
  %270 = fadd float %35, %262, !dbg !41
  %271 = fadd float %36, %263, !dbg !41
  %272 = fadd float %37, %264, !dbg !41
  %273 = fadd float %38, %265, !dbg !41
  %274 = fadd float %39, %266, !dbg !41
  %275 = fadd float %40, %267, !dbg !41
  %276 = fadd float %41, %268, !dbg !41
  br label %._crit_edge24, !dbg !31

._crit_edge24:                                    ; preds = %25, %204
  %277 = phi float [ %213, %204 ], [ 1.000000e+00, %25 ]
  %278 = phi float [ %214, %204 ], [ 1.000000e+00, %25 ]
  %279 = phi float [ %215, %204 ], [ 1.000000e+00, %25 ]
  %280 = phi float [ %216, %204 ], [ 1.000000e+00, %25 ]
  %281 = phi float [ %217, %204 ], [ 1.000000e+00, %25 ]
  %282 = phi float [ %218, %204 ], [ 1.000000e+00, %25 ]
  %283 = phi float [ %219, %204 ], [ 1.000000e+00, %25 ]
  %284 = phi float [ %220, %204 ], [ 1.000000e+00, %25 ]
  %285 = phi float [ %269, %204 ], [ 0.000000e+00, %25 ]
  %286 = phi float [ %270, %204 ], [ 0.000000e+00, %25 ]
  %287 = phi float [ %271, %204 ], [ 0.000000e+00, %25 ]
  %288 = phi float [ %272, %204 ], [ 0.000000e+00, %25 ]
  %289 = phi float [ %273, %204 ], [ 0.000000e+00, %25 ]
  %290 = phi float [ %274, %204 ], [ 0.000000e+00, %25 ]
  %291 = phi float [ %275, %204 ], [ 0.000000e+00, %25 ]
  %292 = phi float [ %276, %204 ], [ 0.000000e+00, %25 ]
  %.pn16 = phi float [ %245, %204 ], [ %195, %25 ]
  %.pn14 = phi float [ %246, %204 ], [ %196, %25 ]
  %.pn12 = phi float [ %247, %204 ], [ %197, %25 ]
  %.pn10 = phi float [ %248, %204 ], [ %198, %25 ]
  %.pn8 = phi float [ %249, %204 ], [ %199, %25 ]
  %.pn6 = phi float [ %250, %204 ], [ %200, %25 ]
  %.pn4 = phi float [ %251, %204 ], [ %201, %25 ]
  %.pn2 = phi float [ %252, %204 ], [ %202, %25 ]
  %293 = select i1 %171, float %.pn16, float %42, !dbg !42
  %294 = select i1 %172, float %.pn14, float %43, !dbg !42
  %295 = select i1 %173, float %.pn12, float %44, !dbg !42
  %296 = select i1 %174, float %.pn10, float %45, !dbg !42
  %297 = select i1 %175, float %.pn8, float %46, !dbg !42
  %298 = select i1 %176, float %.pn6, float %47, !dbg !42
  %299 = select i1 %177, float %.pn4, float %48, !dbg !42
  %300 = select i1 %178, float %.pn2, float %49, !dbg !42
  %301 = select i1 %171, float %285, float %34, !dbg !43
  %302 = select i1 %172, float %286, float %35, !dbg !43
  %303 = select i1 %173, float %287, float %36, !dbg !43
  %304 = select i1 %174, float %288, float %37, !dbg !43
  %305 = select i1 %175, float %289, float %38, !dbg !43
  %306 = select i1 %176, float %290, float %39, !dbg !43
  %307 = select i1 %177, float %291, float %40, !dbg !43
  %308 = select i1 %178, float %292, float %41, !dbg !43
  %309 = select i1 %171, float %277, float %26, !dbg !44
  %310 = select i1 %172, float %278, float %27, !dbg !44
  %311 = select i1 %173, float %279, float %28, !dbg !44
  %312 = select i1 %174, float %280, float %29, !dbg !44
  %313 = select i1 %175, float %281, float %30, !dbg !44
  %314 = select i1 %176, float %282, float %31, !dbg !44
  %315 = select i1 %177, float %283, float %32, !dbg !44
  %316 = select i1 %178, float %284, float %33, !dbg !44
  %317 = add i32 %50, 2048, !dbg !15
  %318 = icmp slt i32 %317, %7, !dbg !15
  br i1 %318, label %25, label %._crit_edge, !dbg !15

._crit_edge:                                      ; preds = %._crit_edge24, %8
  %319 = phi float [ 0.000000e+00, %8 ], [ %293, %._crit_edge24 ]
  %320 = phi float [ 0.000000e+00, %8 ], [ %294, %._crit_edge24 ]
  %321 = phi float [ 0.000000e+00, %8 ], [ %295, %._crit_edge24 ]
  %322 = phi float [ 0.000000e+00, %8 ], [ %296, %._crit_edge24 ]
  %323 = phi float [ 0.000000e+00, %8 ], [ %297, %._crit_edge24 ]
  %324 = phi float [ 0.000000e+00, %8 ], [ %298, %._crit_edge24 ]
  %325 = phi float [ 0.000000e+00, %8 ], [ %299, %._crit_edge24 ]
  %326 = phi float [ 0.000000e+00, %8 ], [ %300, %._crit_edge24 ]
  %327 = phi float [ 0.000000e+00, %8 ], [ %301, %._crit_edge24 ]
  %328 = phi float [ 0.000000e+00, %8 ], [ %302, %._crit_edge24 ]
  %329 = phi float [ 0.000000e+00, %8 ], [ %303, %._crit_edge24 ]
  %330 = phi float [ 0.000000e+00, %8 ], [ %304, %._crit_edge24 ]
  %331 = phi float [ 0.000000e+00, %8 ], [ %305, %._crit_edge24 ]
  %332 = phi float [ 0.000000e+00, %8 ], [ %306, %._crit_edge24 ]
  %333 = phi float [ 0.000000e+00, %8 ], [ %307, %._crit_edge24 ]
  %334 = phi float [ 0.000000e+00, %8 ], [ %308, %._crit_edge24 ]
  %335 = phi float [ 0.000000e+00, %8 ], [ %309, %._crit_edge24 ]
  %336 = phi float [ 0.000000e+00, %8 ], [ %310, %._crit_edge24 ]
  %337 = phi float [ 0.000000e+00, %8 ], [ %311, %._crit_edge24 ]
  %338 = phi float [ 0.000000e+00, %8 ], [ %312, %._crit_edge24 ]
  %339 = phi float [ 0.000000e+00, %8 ], [ %313, %._crit_edge24 ]
  %340 = phi float [ 0.000000e+00, %8 ], [ %314, %._crit_edge24 ]
  %341 = phi float [ 0.000000e+00, %8 ], [ %315, %._crit_edge24 ]
  %342 = phi float [ 0.000000e+00, %8 ], [ %316, %._crit_edge24 ]
  %343 = lshr i32 %9, 5, !dbg !8
  %344 = and i32 %343, 7, !dbg !8
  %345 = and i32 %9, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i64 %18, !dbg !15
  %347 = insertelement <1 x float> undef, float %335, i64 0, !dbg !15
  store <1 x float> %347, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %348 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %349 = insertelement <1 x float> undef, float %336, i64 0, !dbg !15
  store <1 x float> %349, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %350 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %351 = insertelement <1 x float> undef, float %337, i64 0, !dbg !15
  store <1 x float> %351, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %352 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %353 = insertelement <1 x float> undef, float %338, i64 0, !dbg !15
  store <1 x float> %353, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %354 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %355 = insertelement <1 x float> undef, float %339, i64 0, !dbg !15
  store <1 x float> %355, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %356 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %357 = insertelement <1 x float> undef, float %340, i64 0, !dbg !15
  store <1 x float> %357, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %358 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %359 = insertelement <1 x float> undef, float %341, i64 0, !dbg !15
  store <1 x float> %359, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %360 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %361 = insertelement <1 x float> undef, float %342, i64 0, !dbg !15
  store <1 x float> %361, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %362 = load float, ptr addrspace(3) %346, align 4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %363 = fsub float %320, %319, !dbg !47
  %364 = fadd float %348, %350, !dbg !51
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !52
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %364) #3, !dbg !53
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !54
  %368 = fmul float %363, %367, !dbg !55
  %369 = fadd float %319, %368, !dbg !56
  %370 = fadd float %327, %328, !dbg !57
  %371 = fmul float %363, %363, !dbg !58
  %372 = fmul float %371, %348, !dbg !59
  %373 = fmul float %372, %367, !dbg !60
  %374 = fadd float %370, %373, !dbg !61
  %375 = fsub float %321, %369, !dbg !47
  %376 = fadd float %364, %352, !dbg !51
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !52
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %376) #3, !dbg !53
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !54
  %380 = fmul float %379, %375, !dbg !55
  %381 = fadd float %369, %380, !dbg !56
  %382 = fadd float %329, %374, !dbg !57
  %383 = fmul float %375, %375, !dbg !58
  %384 = fmul float %364, %383, !dbg !59
  %385 = fmul float %379, %384, !dbg !60
  %386 = fadd float %382, %385, !dbg !61
  %387 = fsub float %322, %381, !dbg !47
  %388 = fadd float %376, %354, !dbg !51
  %389 = fcmp oeq float %388, 0.000000e+00, !dbg !52
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %388) #3, !dbg !53
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !54
  %392 = fmul float %391, %387, !dbg !55
  %393 = fadd float %381, %392, !dbg !56
  %394 = fadd float %330, %386, !dbg !57
  %395 = fmul float %387, %387, !dbg !58
  %396 = fmul float %376, %395, !dbg !59
  %397 = fmul float %391, %396, !dbg !60
  %398 = fadd float %394, %397, !dbg !61
  %399 = fsub float %323, %393, !dbg !47
  %400 = fadd float %388, %356, !dbg !51
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !52
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %400) #3, !dbg !53
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !54
  %404 = fmul float %403, %399, !dbg !55
  %405 = fadd float %393, %404, !dbg !56
  %406 = fadd float %331, %398, !dbg !57
  %407 = fmul float %399, %399, !dbg !58
  %408 = fmul float %388, %407, !dbg !59
  %409 = fmul float %403, %408, !dbg !60
  %410 = fadd float %406, %409, !dbg !61
  %411 = fsub float %324, %405, !dbg !47
  %412 = fadd float %400, %358, !dbg !51
  %413 = fcmp oeq float %412, 0.000000e+00, !dbg !52
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %358, float %412) #3, !dbg !53
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !54
  %416 = fmul float %415, %411, !dbg !55
  %417 = fadd float %405, %416, !dbg !56
  %418 = fadd float %332, %410, !dbg !57
  %419 = fmul float %411, %411, !dbg !58
  %420 = fmul float %400, %419, !dbg !59
  %421 = fmul float %415, %420, !dbg !60
  %422 = fadd float %418, %421, !dbg !61
  %423 = fsub float %325, %417, !dbg !47
  %424 = fadd float %412, %360, !dbg !51
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !52
  %426 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %424) #3, !dbg !53
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !54
  %428 = fmul float %427, %423, !dbg !55
  %429 = fadd float %417, %428, !dbg !56
  %430 = fadd float %333, %422, !dbg !57
  %431 = fmul float %423, %423, !dbg !58
  %432 = fmul float %412, %431, !dbg !59
  %433 = fmul float %427, %432, !dbg !60
  %434 = fadd float %430, %433, !dbg !61
  %435 = fsub float %326, %429, !dbg !47
  %436 = fadd float %424, %362, !dbg !51
  %437 = fcmp oeq float %436, 0.000000e+00, !dbg !52
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %436) #3, !dbg !53
  %439 = select i1 %437, float 0.000000e+00, float %438, !dbg !54
  %440 = fmul float %439, %435, !dbg !55
  %441 = fadd float %429, %440, !dbg !56
  %442 = fadd float %334, %434, !dbg !57
  %443 = fmul float %435, %435, !dbg !58
  %444 = fmul float %424, %443, !dbg !59
  %445 = fmul float %439, %444, !dbg !60
  %446 = fadd float %442, %445, !dbg !61
  %447 = bitcast float %441 to i32, !dbg !45
  %448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 16, i32 31), !dbg !45
  %449 = bitcast i32 %448 to float, !dbg !45
  %450 = bitcast float %446 to i32, !dbg !45
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 16, i32 31), !dbg !45
  %452 = bitcast i32 %451 to float, !dbg !45
  %453 = bitcast float %436 to i32, !dbg !45
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 16, i32 31), !dbg !45
  %455 = bitcast i32 %454 to float, !dbg !45
  %456 = fsub float %449, %441, !dbg !47
  %457 = fadd float %436, %455, !dbg !51
  %458 = fcmp oeq float %457, 0.000000e+00, !dbg !52
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %455, float %457) #3, !dbg !53
  %460 = select i1 %458, float 0.000000e+00, float %459, !dbg !54
  %461 = fmul float %460, %456, !dbg !55
  %462 = fadd float %441, %461, !dbg !56
  %463 = fadd float %446, %452, !dbg !57
  %464 = fmul float %456, %456, !dbg !58
  %465 = fmul float %436, %464, !dbg !59
  %466 = fmul float %460, %465, !dbg !60
  %467 = fadd float %463, %466, !dbg !61
  %468 = bitcast float %462 to i32, !dbg !45
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 8, i32 31), !dbg !45
  %470 = bitcast i32 %469 to float, !dbg !45
  %471 = bitcast float %467 to i32, !dbg !45
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 8, i32 31), !dbg !45
  %473 = bitcast i32 %472 to float, !dbg !45
  %474 = bitcast float %457 to i32, !dbg !45
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 8, i32 31), !dbg !45
  %476 = bitcast i32 %475 to float, !dbg !45
  %477 = fsub float %470, %462, !dbg !47
  %478 = fadd float %457, %476, !dbg !51
  %479 = fcmp oeq float %478, 0.000000e+00, !dbg !52
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %478) #3, !dbg !53
  %481 = select i1 %479, float 0.000000e+00, float %480, !dbg !54
  %482 = fmul float %481, %477, !dbg !55
  %483 = fadd float %462, %482, !dbg !56
  %484 = fadd float %467, %473, !dbg !57
  %485 = fmul float %477, %477, !dbg !58
  %486 = fmul float %457, %485, !dbg !59
  %487 = fmul float %481, %486, !dbg !60
  %488 = fadd float %484, %487, !dbg !61
  %489 = bitcast float %483 to i32, !dbg !45
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 4, i32 31), !dbg !45
  %491 = bitcast i32 %490 to float, !dbg !45
  %492 = bitcast float %488 to i32, !dbg !45
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 4, i32 31), !dbg !45
  %494 = bitcast i32 %493 to float, !dbg !45
  %495 = bitcast float %478 to i32, !dbg !45
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 4, i32 31), !dbg !45
  %497 = bitcast i32 %496 to float, !dbg !45
  %498 = fsub float %491, %483, !dbg !47
  %499 = fadd float %478, %497, !dbg !51
  %500 = fcmp oeq float %499, 0.000000e+00, !dbg !52
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %497, float %499) #3, !dbg !53
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !54
  %503 = fmul float %502, %498, !dbg !55
  %504 = fadd float %483, %503, !dbg !56
  %505 = fadd float %488, %494, !dbg !57
  %506 = fmul float %498, %498, !dbg !58
  %507 = fmul float %478, %506, !dbg !59
  %508 = fmul float %502, %507, !dbg !60
  %509 = fadd float %505, %508, !dbg !61
  %510 = bitcast float %504 to i32, !dbg !45
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 2, i32 31), !dbg !45
  %512 = bitcast i32 %511 to float, !dbg !45
  %513 = bitcast float %509 to i32, !dbg !45
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 2, i32 31), !dbg !45
  %515 = bitcast i32 %514 to float, !dbg !45
  %516 = bitcast float %499 to i32, !dbg !45
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 2, i32 31), !dbg !45
  %518 = bitcast i32 %517 to float, !dbg !45
  %519 = fsub float %512, %504, !dbg !47
  %520 = fadd float %499, %518, !dbg !51
  %521 = fcmp oeq float %520, 0.000000e+00, !dbg !52
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %518, float %520) #3, !dbg !53
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !54
  %524 = fmul float %523, %519, !dbg !55
  %525 = fadd float %504, %524, !dbg !56
  %526 = fadd float %509, %515, !dbg !57
  %527 = fmul float %519, %519, !dbg !58
  %528 = fmul float %499, %527, !dbg !59
  %529 = fmul float %523, %528, !dbg !60
  %530 = fadd float %526, %529, !dbg !61
  %531 = bitcast float %525 to i32, !dbg !45
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 1, i32 31), !dbg !45
  %533 = bitcast i32 %532 to float, !dbg !45
  %534 = bitcast float %530 to i32, !dbg !45
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 1, i32 31), !dbg !45
  %536 = bitcast i32 %535 to float, !dbg !45
  %537 = bitcast float %520 to i32, !dbg !45
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 1, i32 31), !dbg !45
  %539 = bitcast i32 %538 to float, !dbg !45
  %540 = fsub float %533, %525, !dbg !47
  %541 = fadd float %520, %539, !dbg !51
  %542 = fcmp oeq float %541, 0.000000e+00, !dbg !52
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %539, float %541) #3, !dbg !53
  %544 = select i1 %542, float 0.000000e+00, float %543, !dbg !54
  %545 = fmul float %544, %540, !dbg !55
  %546 = fadd float %525, %545, !dbg !56
  %547 = fadd float %530, %536, !dbg !57
  %548 = fmul float %540, %540, !dbg !58
  %549 = fmul float %520, %548, !dbg !59
  %550 = fmul float %544, %549, !dbg !60
  %551 = fadd float %547, %550, !dbg !61
  %552 = icmp eq i32 %345, 0, !dbg !45
  %553 = zext nneg i32 %344 to i64, !dbg !45
  %554 = getelementptr float, ptr addrspace(3) @global_smem, i64 %553, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %554, float %546, i1 %552) #3, !dbg !45
  %555 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %553, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, float %551, i1 %552) #3, !dbg !45
  %556 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %553, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, float %541, i1 %552) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %557 = icmp slt i32 %9, 8, !dbg !45
  %558 = sext i32 %9 to i64, !dbg !45
  %559 = getelementptr float, ptr addrspace(3) @global_smem, i64 %558, !dbg !45
  %560 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %559, i1 %557) #3, !dbg !45
  %561 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %558, !dbg !45
  %562 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %561, i1 %557) #3, !dbg !45
  %563 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %558, !dbg !45
  %564 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %563, i1 %557) #3, !dbg !45
  %565 = bitcast float %560 to i32, !dbg !45
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 4, i32 31), !dbg !45
  %567 = bitcast i32 %566 to float, !dbg !45
  %568 = bitcast float %562 to i32, !dbg !45
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 4, i32 31), !dbg !45
  %570 = bitcast i32 %569 to float, !dbg !45
  %571 = bitcast float %564 to i32, !dbg !45
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !45
  %573 = bitcast i32 %572 to float, !dbg !45
  %574 = fsub float %567, %560, !dbg !47
  %575 = fadd float %564, %573, !dbg !51
  %576 = fcmp oeq float %575, 0.000000e+00, !dbg !52
  %577 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %573, float %575) #3, !dbg !53
  %578 = select i1 %576, float 0.000000e+00, float %577, !dbg !54
  %579 = fmul float %574, %578, !dbg !55
  %580 = fadd float %560, %579, !dbg !56
  %581 = fadd float %562, %570, !dbg !57
  %582 = fmul float %574, %574, !dbg !58
  %583 = fmul float %564, %582, !dbg !59
  %584 = fmul float %583, %578, !dbg !60
  %585 = fadd float %581, %584, !dbg !61
  %586 = bitcast float %580 to i32, !dbg !45
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 2, i32 31), !dbg !45
  %588 = bitcast i32 %587 to float, !dbg !45
  %589 = bitcast float %585 to i32, !dbg !45
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 2, i32 31), !dbg !45
  %591 = bitcast i32 %590 to float, !dbg !45
  %592 = bitcast float %575 to i32, !dbg !45
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 2, i32 31), !dbg !45
  %594 = bitcast i32 %593 to float, !dbg !45
  %595 = fsub float %588, %580, !dbg !47
  %596 = fadd float %575, %594, !dbg !51
  %597 = fcmp oeq float %596, 0.000000e+00, !dbg !52
  %598 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %594, float %596) #3, !dbg !53
  %599 = select i1 %597, float 0.000000e+00, float %598, !dbg !54
  %600 = fmul float %595, %599, !dbg !55
  %601 = fadd float %580, %600, !dbg !56
  %602 = fadd float %585, %591, !dbg !57
  %603 = fmul float %595, %595, !dbg !58
  %604 = fmul float %575, %603, !dbg !59
  %605 = fmul float %599, %604, !dbg !60
  %606 = fadd float %602, %605, !dbg !61
  %607 = bitcast float %601 to i32, !dbg !45
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 1, i32 31), !dbg !45
  %609 = bitcast i32 %608 to float, !dbg !45
  %610 = bitcast float %606 to i32, !dbg !45
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 1, i32 31), !dbg !45
  %612 = bitcast i32 %611 to float, !dbg !45
  %613 = bitcast float %596 to i32, !dbg !45
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 1, i32 31), !dbg !45
  %615 = bitcast i32 %614 to float, !dbg !45
  %616 = fsub float %609, %601, !dbg !47
  %617 = fadd float %596, %615, !dbg !51
  %618 = fcmp oeq float %617, 0.000000e+00, !dbg !52
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %615, float %617) #3, !dbg !53
  %620 = select i1 %618, float 0.000000e+00, float %619, !dbg !54
  %621 = fmul float %616, %620, !dbg !55
  %622 = fadd float %601, %621, !dbg !56
  %623 = fadd float %606, %612, !dbg !57
  %624 = fmul float %616, %616, !dbg !58
  %625 = fmul float %596, %624, !dbg !59
  %626 = fmul float %620, %625, !dbg !60
  %627 = fadd float %623, %626, !dbg !61
  %628 = and i32 %9, 7, !dbg !45
  %629 = icmp eq i32 %628, 0, !dbg !45
  %630 = and i1 %557, %629, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, float %622, i1 %630) #3, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, float %627, i1 %630) #3, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %563, float %617, i1 %630) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %631 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !45
  %632 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !45
  %633 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), align 4, !dbg !45
  %634 = sext i32 %10 to i64, !dbg !62
  %635 = getelementptr float, ptr addrspace(1) %1, i64 %634, !dbg !62
  %636 = icmp eq i32 %urem, 0, !dbg !63
  %637 = and i1 %636, %11, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %631, ptr addrspace(1) %635, i1 %637) #3, !dbg !63
  %638 = getelementptr float, ptr addrspace(1) %2, i64 %634, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %632, ptr addrspace(1) %638, i1 %637) #3, !dbg !65
  %639 = getelementptr float, ptr addrspace(1) %3, i64 %634, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %633, ptr addrspace(1) %639, i1 %637) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c7v6ktwlcjpcy6fnaslba2h7gisf6burdtbdrgkftl7zbwpjxxre.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/7v")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 34, column: 39, scope: !5)
!12 = !DILocation(line: 34, column: 58, scope: !5)
!13 = !DILocation(line: 34, column: 74, scope: !5)
!14 = !DILocation(line: 34, column: 78, scope: !5)
!15 = !DILocation(line: 30, column: 36, scope: !5)
!16 = !DILocation(line: 34, column: 94, scope: !5)
!17 = !DILocation(line: 34, column: 51, scope: !5)
!18 = !DILocation(line: 34, column: 44, scope: !5)
!19 = !DILocation(line: 31, column: 27, scope: !5)
!20 = !DILocation(line: 32, column: 25, scope: !5)
!21 = !DILocation(line: 34, column: 106, scope: !5)
!22 = !DILocation(line: 34, column: 68, scope: !5)
!23 = !DILocation(line: 34, column: 85, scope: !5)
!24 = !DILocation(line: 34, column: 160, scope: !5)
!25 = !DILocation(line: 34, column: 137, scope: !5)
!26 = !DILocation(line: 34, column: 34, scope: !5)
!27 = !DILocation(line: 34, column: 180, scope: !5)
!28 = !DILocation(line: 34, column: 172, scope: !5)
!29 = !DILocation(line: 34, column: 231, scope: !5)
!30 = !DILocation(line: 38, column: 62, scope: !5)
!31 = !DILocation(line: 105, column: 7, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !5, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!34 = !DILocation(line: 38, column: 51, scope: !32)
!35 = !DILocation(line: 110, column: 24, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 111, column: 30, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 112, column: 34, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 112, column: 26, scope: !32, inlinedAt: !34)
!39 = !DILocation(line: 113, column: 39, scope: !32, inlinedAt: !34)
!40 = !DILocation(line: 113, column: 31, scope: !32, inlinedAt: !34)
!41 = !DILocation(line: 113, column: 22, scope: !32, inlinedAt: !34)
!42 = !DILocation(line: 40, column: 60, scope: !5)
!43 = !DILocation(line: 41, column: 56, scope: !5)
!44 = !DILocation(line: 42, column: 64, scope: !5)
!45 = !DILocation(line: 131, column: 46, scope: !32, inlinedAt: !46)
!46 = !DILocation(line: 44, column: 41, scope: !32)
!47 = !DILocation(line: 119, column: 21, scope: !48, inlinedAt: !49)
!48 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!49 = !DILocation(line: 131, column: 46, scope: !48, inlinedAt: !50)
!50 = !DILocation(line: 44, column: 41, scope: !48)
!51 = !DILocation(line: 120, column: 28, scope: !48, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 39, scope: !48, inlinedAt: !49)
!53 = !DILocation(line: 121, column: 60, scope: !48, inlinedAt: !49)
!54 = !DILocation(line: 121, column: 49, scope: !48, inlinedAt: !49)
!55 = !DILocation(line: 123, column: 25, scope: !48, inlinedAt: !49)
!56 = !DILocation(line: 123, column: 17, scope: !48, inlinedAt: !49)
!57 = !DILocation(line: 124, column: 15, scope: !48, inlinedAt: !49)
!58 = !DILocation(line: 124, column: 30, scope: !48, inlinedAt: !49)
!59 = !DILocation(line: 124, column: 38, scope: !48, inlinedAt: !49)
!60 = !DILocation(line: 124, column: 49, scope: !48, inlinedAt: !49)
!61 = !DILocation(line: 124, column: 22, scope: !48, inlinedAt: !49)
!62 = !DILocation(line: 49, column: 25, scope: !5)
!63 = !DILocation(line: 49, column: 36, scope: !5)
!64 = !DILocation(line: 50, column: 25, scope: !5)
!65 = !DILocation(line: 50, column: 36, scope: !5)
!66 = !DILocation(line: 51, column: 25, scope: !5)
!67 = !DILocation(line: 51, column: 36, scope: !5)
!68 = !DILocation(line: 51, column: 4, scope: !5)
