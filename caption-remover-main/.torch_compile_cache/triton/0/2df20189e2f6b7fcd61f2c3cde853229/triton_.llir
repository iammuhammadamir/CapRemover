; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5e(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %7, 255, !dbg !8
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %9 = icmp slt i32 %8, 576, !dbg !10
  %.frozen = freeze i32 %8
  %10 = sdiv i32 %.frozen, 32, !dbg !11
  %11 = mul i32 %10, 32
  %.decomposed = sub i32 %.frozen, %11
  %12 = mul i32 %10, 33000, !dbg !12
  %13 = mul nsw i32 %.decomposed, 27000, !dbg !13
  %14 = shl nuw nsw i32 %urem, 1
  %15 = zext nneg i32 %14 to i64
  %16 = getelementptr float, ptr addrspace(3) @global_smem, i64 %15
  br label %17, !dbg !14

17:                                               ; preds = %6, %._crit_edge
  %18 = phi float [ 0.000000e+00, %6 ], [ %157, %._crit_edge ]
  %19 = phi float [ 0.000000e+00, %6 ], [ %158, %._crit_edge ]
  %20 = phi float [ 0.000000e+00, %6 ], [ %159, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %6 ], [ %160, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %6 ], [ %153, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %6 ], [ %154, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %6 ], [ %155, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %6 ], [ %156, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %6 ], [ %149, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %6 ], [ %150, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %6 ], [ %151, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %6 ], [ %152, %._crit_edge ]
  %30 = phi i32 [ 0, %6 ], [ %161, %._crit_edge ]
  %31 = or i32 %30, %urem, !dbg !15
  %32 = or i32 %31, 256, !dbg !15
  %33 = or i32 %31, 512, !dbg !15
  %34 = or i32 %31, 768, !dbg !15
  %35 = icmp ult i32 %31, 33000, !dbg !16
  %36 = icmp ult i32 %32, 33000, !dbg !16
  %37 = icmp ult i32 %33, 33000, !dbg !16
  %38 = icmp ult i32 %34, 33000, !dbg !16
  %39 = add i32 %31, %12, !dbg !17
  %40 = add i32 %32, %12, !dbg !17
  %41 = add i32 %33, %12, !dbg !17
  %42 = add i32 %34, %12, !dbg !17
  %.frozen87 = freeze i32 %39
  %43 = sdiv i32 %.frozen87, 59400, !dbg !18
  %.frozen89 = freeze i32 %40
  %44 = sdiv i32 %.frozen89, 59400, !dbg !18
  %.frozen91 = freeze i32 %41
  %45 = sdiv i32 %.frozen91, 59400, !dbg !18
  %.frozen93 = freeze i32 %42
  %46 = sdiv i32 %.frozen93, 59400, !dbg !18
  %47 = mul nsw i32 %43, 2700, !dbg !19
  %48 = mul nsw i32 %44, 2700, !dbg !19
  %49 = mul nsw i32 %45, 2700, !dbg !19
  %50 = mul nsw i32 %46, 2700, !dbg !19
  %51 = add nsw i32 %47, %13, !dbg !20
  %52 = add nsw i32 %48, %13, !dbg !20
  %53 = add nsw i32 %49, %13, !dbg !20
  %54 = add nsw i32 %50, %13, !dbg !20
  %55 = mul i32 %43, 59400
  %.decomposed88 = sub i32 %.frozen87, %55
  %56 = mul i32 %44, 59400
  %.decomposed90 = sub i32 %.frozen89, %56
  %57 = mul i32 %45, 59400
  %.decomposed92 = sub i32 %.frozen91, %57
  %58 = mul i32 %46, 59400
  %.decomposed94 = sub i32 %.frozen93, %58
  %59 = sdiv i32 %.decomposed88, 2700, !dbg !21
  %60 = sdiv i32 %.decomposed90, 2700, !dbg !21
  %61 = sdiv i32 %.decomposed92, 2700, !dbg !21
  %62 = sdiv i32 %.decomposed94, 2700, !dbg !21
  %63 = mul nsw i32 %59, 864000, !dbg !22
  %64 = mul nsw i32 %60, 864000, !dbg !22
  %65 = mul nsw i32 %61, 864000, !dbg !22
  %66 = mul nsw i32 %62, 864000, !dbg !22
  %67 = mul i32 %59, 2700
  %.decomposed95 = sub i32 %.decomposed88, %67
  %68 = mul i32 %60, 2700
  %.decomposed96 = sub i32 %.decomposed90, %68
  %69 = mul i32 %61, 2700
  %.decomposed97 = sub i32 %.decomposed92, %69
  %70 = mul i32 %62, 2700
  %.decomposed98 = sub i32 %.decomposed94, %70
  %71 = add nsw i32 %51, %.decomposed95, !dbg !23
  %72 = add nsw i32 %71, %63, !dbg !24
  %73 = add nsw i32 %52, %.decomposed96, !dbg !23
  %74 = add nsw i32 %73, %64, !dbg !24
  %75 = add nsw i32 %53, %.decomposed97, !dbg !23
  %76 = add nsw i32 %75, %65, !dbg !24
  %77 = add nsw i32 %54, %.decomposed98, !dbg !23
  %78 = add nsw i32 %77, %66, !dbg !24
  %79 = sext i32 %72 to i64, !dbg !25
  %80 = getelementptr half, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %74 to i64, !dbg !25
  %82 = getelementptr half, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = sext i32 %76 to i64, !dbg !25
  %84 = getelementptr half, ptr addrspace(1) %0, i64 %83, !dbg !25
  %85 = sext i32 %78 to i64, !dbg !25
  %86 = getelementptr half, ptr addrspace(1) %0, i64 %85, !dbg !25
  %87 = and i1 %9, %35, !dbg !26
  %88 = and i1 %9, %36, !dbg !26
  %89 = and i1 %9, %37, !dbg !26
  %90 = and i1 %9, %38, !dbg !26
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %80, i1 %87, i16 0, i1 %87) #3, !dbg !27
  %92 = bitcast i16 %91 to half, !dbg !27
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %82, i1 %88, i16 0, i1 %88) #3, !dbg !27
  %94 = bitcast i16 %93 to half, !dbg !27
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %84, i1 %89, i16 0, i1 %89) #3, !dbg !27
  %96 = bitcast i16 %95 to half, !dbg !27
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %86, i1 %90, i16 0, i1 %90) #3, !dbg !27
  %98 = bitcast i16 %97 to half, !dbg !27
  %99 = fpext half %92 to float, !dbg !28
  %100 = fpext half %94 to float, !dbg !28
  %101 = fpext half %96 to float, !dbg !28
  %102 = fpext half %98 to float, !dbg !28
  %103 = icmp eq i32 %30, 0, !dbg !29
  br i1 %103, label %._crit_edge, label %104, !dbg !30

104:                                              ; preds = %17
  %105 = fsub float %99, %26, !dbg !34
  %106 = fsub float %100, %27, !dbg !34
  %107 = fsub float %101, %28, !dbg !34
  %108 = fsub float %102, %29, !dbg !34
  %109 = fadd float %18, 1.000000e+00, !dbg !35
  %110 = fadd float %19, 1.000000e+00, !dbg !35
  %111 = fadd float %20, 1.000000e+00, !dbg !35
  %112 = fadd float %21, 1.000000e+00, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %113 = insertelement <1 x float> undef, float %109, i64 0, !dbg !35
  store <1 x float> %113, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %114 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %115 = insertelement <1 x float> undef, float %110, i64 0, !dbg !35
  store <1 x float> %115, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %116 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %117 = insertelement <1 x float> undef, float %111, i64 0, !dbg !35
  store <1 x float> %117, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %118 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %119 = insertelement <1 x float> undef, float %112, i64 0, !dbg !35
  store <1 x float> %119, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %120 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %114) #3, !dbg !36
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %116) #3, !dbg !36
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %118) #3, !dbg !36
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %120) #3, !dbg !36
  %125 = fadd float %26, %121, !dbg !37
  %126 = fadd float %27, %122, !dbg !37
  %127 = fadd float %28, %123, !dbg !37
  %128 = fadd float %29, %124, !dbg !37
  %129 = fsub float %99, %125, !dbg !38
  %130 = fsub float %100, %126, !dbg !38
  %131 = fsub float %101, %127, !dbg !38
  %132 = fsub float %102, %128, !dbg !38
  %133 = fmul float %105, %129, !dbg !39
  %134 = fmul float %106, %130, !dbg !39
  %135 = fmul float %107, %131, !dbg !39
  %136 = fmul float %108, %132, !dbg !39
  %137 = fadd float %22, %133, !dbg !40
  %138 = fadd float %23, %134, !dbg !40
  %139 = fadd float %24, %135, !dbg !40
  %140 = fadd float %25, %136, !dbg !40
  br label %._crit_edge, !dbg !30

._crit_edge:                                      ; preds = %17, %104
  %141 = phi float [ %109, %104 ], [ 1.000000e+00, %17 ]
  %142 = phi float [ %110, %104 ], [ 1.000000e+00, %17 ]
  %143 = phi float [ %111, %104 ], [ 1.000000e+00, %17 ]
  %144 = phi float [ %112, %104 ], [ 1.000000e+00, %17 ]
  %145 = phi float [ %137, %104 ], [ 0.000000e+00, %17 ]
  %146 = phi float [ %138, %104 ], [ 0.000000e+00, %17 ]
  %147 = phi float [ %139, %104 ], [ 0.000000e+00, %17 ]
  %148 = phi float [ %140, %104 ], [ 0.000000e+00, %17 ]
  %.pn7 = phi float [ %125, %104 ], [ %99, %17 ]
  %.pn5 = phi float [ %126, %104 ], [ %100, %17 ]
  %.pn3 = phi float [ %127, %104 ], [ %101, %17 ]
  %.pn1 = phi float [ %128, %104 ], [ %102, %17 ]
  %149 = select i1 %87, float %.pn7, float %26, !dbg !41
  %150 = select i1 %88, float %.pn5, float %27, !dbg !41
  %151 = select i1 %89, float %.pn3, float %28, !dbg !41
  %152 = select i1 %90, float %.pn1, float %29, !dbg !41
  %153 = select i1 %87, float %145, float %22, !dbg !42
  %154 = select i1 %88, float %146, float %23, !dbg !42
  %155 = select i1 %89, float %147, float %24, !dbg !42
  %156 = select i1 %90, float %148, float %25, !dbg !42
  %157 = select i1 %87, float %141, float %18, !dbg !43
  %158 = select i1 %88, float %142, float %19, !dbg !43
  %159 = select i1 %89, float %143, float %20, !dbg !43
  %160 = select i1 %90, float %144, float %21, !dbg !43
  %161 = add nuw nsw i32 %30, 1024, !dbg !14
  %162 = icmp ult i32 %30, 31976, !dbg !14
  br i1 %162, label %17, label %163, !dbg !14

163:                                              ; preds = %._crit_edge
  %164 = lshr i32 %7, 5, !dbg !8
  %165 = and i32 %164, 7, !dbg !8
  %166 = and i32 %7, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %167 = insertelement <1 x float> undef, float %157, i64 0, !dbg !14
  store <1 x float> %167, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %168 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %169 = insertelement <1 x float> undef, float %158, i64 0, !dbg !14
  store <1 x float> %169, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %170 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %171 = insertelement <1 x float> undef, float %159, i64 0, !dbg !14
  store <1 x float> %171, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %172 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %173 = insertelement <1 x float> undef, float %160, i64 0, !dbg !14
  store <1 x float> %173, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %174 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %175 = fsub float %150, %149, !dbg !46
  %176 = fadd float %168, %170, !dbg !50
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !51
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %176) #3, !dbg !52
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !53
  %180 = fmul float %175, %179, !dbg !54
  %181 = fadd float %149, %180, !dbg !55
  %182 = fadd float %153, %154, !dbg !56
  %183 = fmul float %175, %175, !dbg !57
  %184 = fmul float %183, %168, !dbg !58
  %185 = fmul float %184, %179, !dbg !59
  %186 = fadd float %182, %185, !dbg !60
  %187 = fsub float %151, %181, !dbg !46
  %188 = fadd float %176, %172, !dbg !50
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !51
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %188) #3, !dbg !52
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !53
  %192 = fmul float %191, %187, !dbg !54
  %193 = fadd float %181, %192, !dbg !55
  %194 = fadd float %155, %186, !dbg !56
  %195 = fmul float %187, %187, !dbg !57
  %196 = fmul float %176, %195, !dbg !58
  %197 = fmul float %191, %196, !dbg !59
  %198 = fadd float %194, %197, !dbg !60
  %199 = fsub float %152, %193, !dbg !46
  %200 = fadd float %188, %174, !dbg !50
  %201 = fcmp oeq float %200, 0.000000e+00, !dbg !51
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %200) #3, !dbg !52
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !53
  %204 = fmul float %203, %199, !dbg !54
  %205 = fadd float %193, %204, !dbg !55
  %206 = fadd float %156, %198, !dbg !56
  %207 = fmul float %199, %199, !dbg !57
  %208 = fmul float %188, %207, !dbg !58
  %209 = fmul float %203, %208, !dbg !59
  %210 = fadd float %206, %209, !dbg !60
  %211 = bitcast float %205 to i32, !dbg !44
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 16, i32 31), !dbg !44
  %213 = bitcast i32 %212 to float, !dbg !44
  %214 = bitcast float %210 to i32, !dbg !44
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !44
  %216 = bitcast i32 %215 to float, !dbg !44
  %217 = bitcast float %200 to i32, !dbg !44
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !44
  %219 = bitcast i32 %218 to float, !dbg !44
  %220 = fsub float %213, %205, !dbg !46
  %221 = fadd float %200, %219, !dbg !50
  %222 = fcmp oeq float %221, 0.000000e+00, !dbg !51
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %221) #3, !dbg !52
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !53
  %225 = fmul float %224, %220, !dbg !54
  %226 = fadd float %205, %225, !dbg !55
  %227 = fadd float %210, %216, !dbg !56
  %228 = fmul float %220, %220, !dbg !57
  %229 = fmul float %200, %228, !dbg !58
  %230 = fmul float %224, %229, !dbg !59
  %231 = fadd float %227, %230, !dbg !60
  %232 = bitcast float %226 to i32, !dbg !44
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !44
  %234 = bitcast i32 %233 to float, !dbg !44
  %235 = bitcast float %231 to i32, !dbg !44
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !44
  %237 = bitcast i32 %236 to float, !dbg !44
  %238 = bitcast float %221 to i32, !dbg !44
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !44
  %240 = bitcast i32 %239 to float, !dbg !44
  %241 = fsub float %234, %226, !dbg !46
  %242 = fadd float %221, %240, !dbg !50
  %243 = fcmp oeq float %242, 0.000000e+00, !dbg !51
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %242) #3, !dbg !52
  %245 = select i1 %243, float 0.000000e+00, float %244, !dbg !53
  %246 = fmul float %241, %245, !dbg !54
  %247 = fadd float %226, %246, !dbg !55
  %248 = fadd float %231, %237, !dbg !56
  %249 = fmul float %241, %241, !dbg !57
  %250 = fmul float %221, %249, !dbg !58
  %251 = fmul float %245, %250, !dbg !59
  %252 = fadd float %248, %251, !dbg !60
  %253 = bitcast float %247 to i32, !dbg !44
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !44
  %255 = bitcast i32 %254 to float, !dbg !44
  %256 = bitcast float %252 to i32, !dbg !44
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !44
  %258 = bitcast i32 %257 to float, !dbg !44
  %259 = bitcast float %242 to i32, !dbg !44
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !44
  %261 = bitcast i32 %260 to float, !dbg !44
  %262 = fsub float %255, %247, !dbg !46
  %263 = fadd float %242, %261, !dbg !50
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !51
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %263) #3, !dbg !52
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !53
  %267 = fmul float %262, %266, !dbg !54
  %268 = fadd float %247, %267, !dbg !55
  %269 = fadd float %252, %258, !dbg !56
  %270 = fmul float %262, %262, !dbg !57
  %271 = fmul float %242, %270, !dbg !58
  %272 = fmul float %266, %271, !dbg !59
  %273 = fadd float %269, %272, !dbg !60
  %274 = bitcast float %268 to i32, !dbg !44
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !44
  %276 = bitcast i32 %275 to float, !dbg !44
  %277 = bitcast float %273 to i32, !dbg !44
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !44
  %279 = bitcast i32 %278 to float, !dbg !44
  %280 = bitcast float %263 to i32, !dbg !44
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !44
  %282 = bitcast i32 %281 to float, !dbg !44
  %283 = fsub float %276, %268, !dbg !46
  %284 = fadd float %263, %282, !dbg !50
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !51
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %284) #3, !dbg !52
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !53
  %288 = fmul float %283, %287, !dbg !54
  %289 = fadd float %268, %288, !dbg !55
  %290 = fadd float %273, %279, !dbg !56
  %291 = fmul float %283, %283, !dbg !57
  %292 = fmul float %263, %291, !dbg !58
  %293 = fmul float %287, %292, !dbg !59
  %294 = fadd float %290, %293, !dbg !60
  %295 = bitcast float %289 to i32, !dbg !44
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !44
  %297 = bitcast i32 %296 to float, !dbg !44
  %298 = bitcast float %294 to i32, !dbg !44
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !44
  %300 = bitcast i32 %299 to float, !dbg !44
  %301 = bitcast float %284 to i32, !dbg !44
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !44
  %303 = bitcast i32 %302 to float, !dbg !44
  %304 = fsub float %297, %289, !dbg !46
  %305 = fadd float %284, %303, !dbg !50
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !51
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %305) #3, !dbg !52
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !53
  %309 = fmul float %304, %308, !dbg !54
  %310 = fadd float %289, %309, !dbg !55
  %311 = fadd float %294, %300, !dbg !56
  %312 = fmul float %304, %304, !dbg !57
  %313 = fmul float %284, %312, !dbg !58
  %314 = fmul float %308, %313, !dbg !59
  %315 = fadd float %311, %314, !dbg !60
  %316 = icmp eq i32 %166, 0, !dbg !44
  %317 = zext nneg i32 %165 to i64, !dbg !44
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, float %310, i1 %316) #3, !dbg !44
  %319 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %317, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, float %315, i1 %316) #3, !dbg !44
  %320 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %317, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, float %305, i1 %316) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %321 = icmp slt i32 %7, 8, !dbg !44
  %322 = sext i32 %7 to i64, !dbg !44
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322, !dbg !44
  %324 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %323, i1 %321) #3, !dbg !44
  %325 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %322, !dbg !44
  %326 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %325, i1 %321) #3, !dbg !44
  %327 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %322, !dbg !44
  %328 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %327, i1 %321) #3, !dbg !44
  %329 = bitcast float %324 to i32, !dbg !44
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 4, i32 31), !dbg !44
  %331 = bitcast i32 %330 to float, !dbg !44
  %332 = bitcast float %326 to i32, !dbg !44
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 4, i32 31), !dbg !44
  %334 = bitcast i32 %333 to float, !dbg !44
  %335 = bitcast float %328 to i32, !dbg !44
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 4, i32 31), !dbg !44
  %337 = bitcast i32 %336 to float, !dbg !44
  %338 = fsub float %331, %324, !dbg !46
  %339 = fadd float %328, %337, !dbg !50
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !51
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float %339) #3, !dbg !52
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !53
  %343 = fmul float %338, %342, !dbg !54
  %344 = fadd float %324, %343, !dbg !55
  %345 = fadd float %326, %334, !dbg !56
  %346 = fmul float %338, %338, !dbg !57
  %347 = fmul float %328, %346, !dbg !58
  %348 = fmul float %347, %342, !dbg !59
  %349 = fadd float %345, %348, !dbg !60
  %350 = bitcast float %344 to i32, !dbg !44
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 2, i32 31), !dbg !44
  %352 = bitcast i32 %351 to float, !dbg !44
  %353 = bitcast float %349 to i32, !dbg !44
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 2, i32 31), !dbg !44
  %355 = bitcast i32 %354 to float, !dbg !44
  %356 = bitcast float %339 to i32, !dbg !44
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 2, i32 31), !dbg !44
  %358 = bitcast i32 %357 to float, !dbg !44
  %359 = fsub float %352, %344, !dbg !46
  %360 = fadd float %339, %358, !dbg !50
  %361 = fcmp oeq float %360, 0.000000e+00, !dbg !51
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %358, float %360) #3, !dbg !52
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !53
  %364 = fmul float %359, %363, !dbg !54
  %365 = fadd float %344, %364, !dbg !55
  %366 = fadd float %349, %355, !dbg !56
  %367 = fmul float %359, %359, !dbg !57
  %368 = fmul float %339, %367, !dbg !58
  %369 = fmul float %363, %368, !dbg !59
  %370 = fadd float %366, %369, !dbg !60
  %371 = bitcast float %365 to i32, !dbg !44
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !44
  %373 = bitcast i32 %372 to float, !dbg !44
  %374 = bitcast float %370 to i32, !dbg !44
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !44
  %376 = bitcast i32 %375 to float, !dbg !44
  %377 = bitcast float %360 to i32, !dbg !44
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !44
  %379 = bitcast i32 %378 to float, !dbg !44
  %380 = fsub float %373, %365, !dbg !46
  %381 = fadd float %360, %379, !dbg !50
  %382 = fcmp oeq float %381, 0.000000e+00, !dbg !51
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float %381) #3, !dbg !52
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !53
  %385 = fmul float %380, %384, !dbg !54
  %386 = fadd float %365, %385, !dbg !55
  %387 = fadd float %370, %376, !dbg !56
  %388 = fmul float %380, %380, !dbg !57
  %389 = fmul float %360, %388, !dbg !58
  %390 = fmul float %384, %389, !dbg !59
  %391 = fadd float %387, %390, !dbg !60
  %392 = and i32 %7, 7, !dbg !44
  %393 = icmp eq i32 %392, 0, !dbg !44
  %394 = and i1 %321, %393, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, float %386, i1 %394) #3, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, float %391, i1 %394) #3, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, float %381, i1 %394) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %395 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !44
  %396 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !44
  %397 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), align 4, !dbg !44
  %398 = sext i32 %8 to i64, !dbg !61
  %399 = getelementptr float, ptr addrspace(1) %1, i64 %398, !dbg !61
  %400 = icmp eq i32 %urem, 0, !dbg !62
  %401 = and i1 %400, %9, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %395, ptr addrspace(1) %399, i1 %401) #3, !dbg !62
  %402 = getelementptr float, ptr addrspace(1) %2, i64 %398, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %402, i1 %401) #3, !dbg !64
  %403 = getelementptr float, ptr addrspace(1) %3, i64 %398, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %397, ptr addrspace(1) %403, i1 %401) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cu7hbprzja2rzrxl4cwxyo2ruuq4h5jyr5uw26dme5ciscydevqy.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/u7")
!3 = !{ptr @triton__0d1d2d3d4de5e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5e, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5e", linkageName: "triton__0d1d2d3d4de5e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 33, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 28, column: 20, scope: !5)
!12 = !DILocation(line: 37, column: 54, scope: !5)
!13 = !DILocation(line: 37, column: 79, scope: !5)
!14 = !DILocation(line: 33, column: 36, scope: !5)
!15 = !DILocation(line: 34, column: 27, scope: !5)
!16 = !DILocation(line: 35, column: 25, scope: !5)
!17 = !DILocation(line: 37, column: 48, scope: !5)
!18 = !DILocation(line: 37, column: 62, scope: !5)
!19 = !DILocation(line: 37, column: 41, scope: !5)
!20 = !DILocation(line: 37, column: 73, scope: !5)
!21 = !DILocation(line: 37, column: 125, scope: !5)
!22 = !DILocation(line: 37, column: 94, scope: !5)
!23 = !DILocation(line: 37, column: 86, scope: !5)
!24 = !DILocation(line: 37, column: 135, scope: !5)
!25 = !DILocation(line: 37, column: 34, scope: !5)
!26 = !DILocation(line: 37, column: 181, scope: !5)
!27 = !DILocation(line: 37, column: 173, scope: !5)
!28 = !DILocation(line: 37, column: 232, scope: !5)
!29 = !DILocation(line: 41, column: 62, scope: !5)
!30 = !DILocation(line: 105, column: 7, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!33 = !DILocation(line: 41, column: 51, scope: !31)
!34 = !DILocation(line: 110, column: 24, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 111, column: 30, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 112, column: 34, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 112, column: 26, scope: !31, inlinedAt: !33)
!38 = !DILocation(line: 113, column: 39, scope: !31, inlinedAt: !33)
!39 = !DILocation(line: 113, column: 31, scope: !31, inlinedAt: !33)
!40 = !DILocation(line: 113, column: 22, scope: !31, inlinedAt: !33)
!41 = !DILocation(line: 43, column: 60, scope: !5)
!42 = !DILocation(line: 44, column: 56, scope: !5)
!43 = !DILocation(line: 45, column: 64, scope: !5)
!44 = !DILocation(line: 131, column: 46, scope: !31, inlinedAt: !45)
!45 = !DILocation(line: 47, column: 41, scope: !31)
!46 = !DILocation(line: 119, column: 21, scope: !47, inlinedAt: !48)
!47 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!48 = !DILocation(line: 131, column: 46, scope: !47, inlinedAt: !49)
!49 = !DILocation(line: 47, column: 41, scope: !47)
!50 = !DILocation(line: 120, column: 28, scope: !47, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 39, scope: !47, inlinedAt: !48)
!52 = !DILocation(line: 121, column: 60, scope: !47, inlinedAt: !48)
!53 = !DILocation(line: 121, column: 49, scope: !47, inlinedAt: !48)
!54 = !DILocation(line: 123, column: 25, scope: !47, inlinedAt: !48)
!55 = !DILocation(line: 123, column: 17, scope: !47, inlinedAt: !48)
!56 = !DILocation(line: 124, column: 15, scope: !47, inlinedAt: !48)
!57 = !DILocation(line: 124, column: 30, scope: !47, inlinedAt: !48)
!58 = !DILocation(line: 124, column: 38, scope: !47, inlinedAt: !48)
!59 = !DILocation(line: 124, column: 49, scope: !47, inlinedAt: !48)
!60 = !DILocation(line: 124, column: 22, scope: !47, inlinedAt: !48)
!61 = !DILocation(line: 52, column: 25, scope: !5)
!62 = !DILocation(line: 52, column: 36, scope: !5)
!63 = !DILocation(line: 53, column: 25, scope: !5)
!64 = !DILocation(line: 53, column: 36, scope: !5)
!65 = !DILocation(line: 54, column: 25, scope: !5)
!66 = !DILocation(line: 54, column: 36, scope: !5)
!67 = !DILocation(line: 54, column: 4, scope: !5)
