; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = shl i32 %8, 1, !dbg !10
  %10 = and i32 %9, 510, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %12 = shl i32 %11, 9, !dbg !12
  %13 = or i32 %12, %10, !dbg !13
  %14 = or i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 19008000, !dbg !14
  %16 = srem i32 %13, 320, !dbg !15
  %17 = srem i32 %14, 320, !dbg !15
  %18 = sdiv i32 %13, 864000, !dbg !16
  %19 = sext i32 %13 to i64, !dbg !17
  %20 = getelementptr half, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %15) #4, !dbg !18
  %22 = shl nsw i32 %18, 5, !dbg !19
  %.lhs.trunc = trunc i32 %16 to i16, !dbg !20
  %23 = sdiv i16 %.lhs.trunc, 10, !dbg !20
  %.sext = sext i16 %23 to i32, !dbg !20
  %.lhs.trunc6 = trunc i32 %17 to i16, !dbg !20
  %24 = sdiv i16 %.lhs.trunc6, 10, !dbg !20
  %.sext7 = sext i16 %24 to i32, !dbg !20
  %25 = add nsw i32 %22, %.sext, !dbg !21
  %26 = add nsw i32 %22, %.sext7, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %15) #4, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #4, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #4, !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #4, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = sext i32 %16 to i64, !dbg !26
  %40 = getelementptr half, ptr addrspace(1) %3, i64 %39, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %15) #4, !dbg !27
  %42 = getelementptr half, ptr addrspace(1) %4, i64 %39, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #4, !dbg !29
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 2.700000e+04) #4, !dbg !30
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 2.700000e+04) #4, !dbg !30
  %46 = fadd float %44, 0x3EE4F8B580000000, !dbg !31
  %47 = fadd float %45, 0x3EE4F8B580000000, !dbg !31
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %48, 0, !dbg !32
  br i1 %.not.i, label %51, label %49, !dbg !32

49:                                               ; preds = %7
  %50 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %46), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

51:                                               ; preds = %7
  %52 = tail call float @llvm.nvvm.rsqrt.approx.f(float %46), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %49, %51
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], !dbg !32
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i3 = icmp eq i32 %53, 0, !dbg !32
  br i1 %.not.i3, label %56, label %54, !dbg !32

54:                                               ; preds = %__nv_rsqrtf.exit
  %55 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %47), !dbg !32
  br label %__nv_rsqrtf.exit5, !dbg !32

56:                                               ; preds = %__nv_rsqrtf.exit
  %57 = tail call float @llvm.nvvm.rsqrt.approx.f(float %47), !dbg !32
  br label %__nv_rsqrtf.exit5, !dbg !32

__nv_rsqrtf.exit5:                                ; preds = %54, %56
  %.0.i4 = phi float [ %55, %54 ], [ %57, %56 ], !dbg !32
  %extelt.offset = lshr i32 %21, 16, !dbg !18
  %58 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !23
  %59 = insertelement <2 x i32> %58, i32 %32, i64 1, !dbg !23
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !23
  %extelt.offset2 = lshr i32 %43, 16, !dbg !29
  %extelt.offset1 = lshr i32 %41, 16, !dbg !27
  %61 = getelementptr half, ptr addrspace(1) %5, i64 %19, !dbg !33
  %62 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %63 = insertelement <2 x i32> %62, i32 %extelt.offset, i64 1, !dbg !18
  %64 = trunc <2 x i32> %63 to <2 x i16>, !dbg !18
  %65 = bitcast <2 x i16> %64 to <2 x half>, !dbg !18
  %66 = fpext <2 x half> %65 to <2 x float>, !dbg !34
  %67 = fsub <2 x float> %66, %60, !dbg !35
  %68 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !29
  %69 = insertelement <2 x i32> %68, i32 %extelt.offset2, i64 1, !dbg !29
  %70 = trunc <2 x i32> %69 to <2 x i16>, !dbg !29
  %71 = bitcast <2 x i16> %70 to <2 x half>, !dbg !29
  %72 = fpext <2 x half> %71 to <2 x float>, !dbg !36
  %73 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !27
  %74 = insertelement <2 x i32> %73, i32 %extelt.offset1, i64 1, !dbg !27
  %75 = trunc <2 x i32> %74 to <2 x i16>, !dbg !27
  %76 = bitcast <2 x i16> %75 to <2 x half>, !dbg !27
  %77 = fpext <2 x half> %76 to <2 x float>, !dbg !37
  %78 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !38
  %79 = insertelement <2 x float> %78, float %.0.i4, i64 1, !dbg !38
  %80 = fmul <2 x float> %67, %79, !dbg !38
  %81 = fmul <2 x float> %80, %77, !dbg !39
  %82 = fadd <2 x float> %81, %72, !dbg !40
  %83 = extractelement <2 x float> %82, i64 0, !dbg !41
  %84 = fsub float 0.000000e+00, %83, !dbg !41
  %85 = extractelement <2 x float> %82, i64 1, !dbg !41
  %86 = fsub float 0.000000e+00, %85, !dbg !41
  %87 = fmul float %84, 0x3FF7154760000000, !dbg !45
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #4, !dbg !45
  %89 = fmul float %86, 0x3FF7154760000000, !dbg !45
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #4, !dbg !45
  %91 = fadd float %88, 1.000000e+00, !dbg !46
  %92 = fadd float %90, 1.000000e+00, !dbg !46
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #4, !dbg !47
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #4, !dbg !47
  %95 = insertelement <2 x float> poison, float %93, i64 0, !dbg !48
  %96 = insertelement <2 x float> %95, float %94, i64 1, !dbg !48
  %97 = fmul <2 x float> %82, %96, !dbg !48
  %98 = fptrunc <2 x float> %97 to <2 x half>, !dbg !49
  %99 = bitcast <2 x half> %98 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %61, i1 %15) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #1 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "chd4sseflmha3lnf53u2npw5gmvrxwe7bsxfkxczvjc7bfltsgyd.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hd")
!4 = !{ptr @triton__0d1d2d3d4d5d6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de", linkageName: "triton__0d1d2d3d4d5d6de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 36, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 22, column: 33, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 18, scope: !7)
!16 = !DILocation(line: 27, column: 20, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 47, scope: !7)
!21 = !DILocation(line: 29, column: 41, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 53, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 53, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 48, column: 25, scope: !7)
!34 = !DILocation(line: 28, column: 45, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 32, column: 76, scope: !7)
!37 = !DILocation(line: 31, column: 76, scope: !7)
!38 = !DILocation(line: 40, column: 19, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 27, column: 30, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!44 = !DILocation(line: 45, column: 23, scope: !42)
!45 = !DILocation(line: 27, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 27, column: 20, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 27, column: 16, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 37, scope: !7)
!50 = !DILocation(line: 48, column: 4, scope: !7)
