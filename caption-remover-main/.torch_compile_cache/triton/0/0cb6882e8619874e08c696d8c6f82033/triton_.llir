; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = shl i32 %9, 3, !dbg !8
  %11 = and i32 %10, 8, !dbg !8
  %12 = lshr i32 %9, 6, !dbg !8
  %13 = and i32 %12, 1, !dbg !8
  %14 = or i32 %13, 2, !dbg !8
  %15 = or i32 %13, 4, !dbg !8
  %16 = or i32 %13, 6, !dbg !8
  %17 = or i32 %13, 8, !dbg !8
  %18 = or i32 %13, 10, !dbg !8
  %19 = or i32 %13, 12, !dbg !8
  %20 = or i32 %13, 14, !dbg !8
  %21 = lshr i32 %9, 1, !dbg !9
  %22 = and i32 %21, 63, !dbg !9
  %23 = and i32 %9, 63, !dbg !9
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %26 = add i32 %25, 1, !dbg !12
  %27 = shl i32 %24, 4, !dbg !13
  %28 = mul i32 %27, %26, !dbg !14
  %29 = or i32 %28, %11, !dbg !15
  %30 = or i32 %28, %13, !dbg !15
  %31 = or i32 %28, %14, !dbg !15
  %32 = or i32 %28, %15, !dbg !15
  %33 = or i32 %28, %16, !dbg !15
  %34 = or i32 %28, %17, !dbg !15
  %35 = or i32 %28, %18, !dbg !15
  %36 = or i32 %28, %19, !dbg !15
  %37 = or i32 %28, %20, !dbg !15
  %38 = icmp slt i32 %29, 28160, !dbg !16
  %39 = icmp slt i32 %30, 28160, !dbg !16
  %40 = icmp slt i32 %31, 28160, !dbg !16
  %41 = icmp slt i32 %32, 28160, !dbg !16
  %42 = icmp slt i32 %33, 28160, !dbg !16
  %43 = icmp slt i32 %34, 28160, !dbg !16
  %44 = icmp slt i32 %35, 28160, !dbg !16
  %45 = icmp slt i32 %36, 28160, !dbg !16
  %46 = icmp slt i32 %37, 28160, !dbg !16
  %47 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %48 = shl i32 %47, 6, !dbg !18
  %49 = or i32 %48, %22, !dbg !19
  %50 = or i32 %48, %23, !dbg !19
  %51 = icmp slt i32 %49, %7, !dbg !20
  %52 = icmp slt i32 %50, %7, !dbg !20
  %53 = srem i32 %30, 1280, !dbg !21
  %54 = srem i32 %31, 1280, !dbg !21
  %55 = srem i32 %32, 1280, !dbg !21
  %56 = srem i32 %33, 1280, !dbg !21
  %57 = srem i32 %34, 1280, !dbg !21
  %58 = srem i32 %35, 1280, !dbg !21
  %59 = srem i32 %36, 1280, !dbg !21
  %60 = srem i32 %37, 1280, !dbg !21
  %61 = mul i32 %49, 28160, !dbg !22
  %62 = add i32 %61, %29, !dbg !23
  %63 = sext i32 %62 to i64, !dbg !24
  %64 = getelementptr half, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = and i1 %51, %38, !dbg !25
  %66 = and i1 %52, %39, !dbg !25
  %67 = and i1 %52, %40, !dbg !25
  %68 = and i1 %52, %41, !dbg !25
  %69 = and i1 %52, %42, !dbg !25
  %70 = and i1 %52, %43, !dbg !25
  %71 = and i1 %52, %44, !dbg !25
  %72 = and i1 %52, %45, !dbg !25
  %73 = and i1 %52, %46, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %65) #2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = trunc i32 %75 to i16, !dbg !26
  %extelt.offset = lshr i32 %75, 16, !dbg !26
  %80 = trunc i32 %extelt.offset to i16, !dbg !26
  %81 = trunc i32 %76 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %76, 16, !dbg !26
  %82 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %83 = trunc i32 %77 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %77, 16, !dbg !26
  %84 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %85 = trunc i32 %78 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %78, 16, !dbg !26
  %86 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %87 = mul nuw nsw i32 %11, 65, !dbg !27
  %88 = add nuw nsw i32 %87, %22, !dbg !27
  %89 = zext nneg i32 %88 to i64, !dbg !27
  %90 = getelementptr half, ptr addrspace(3) @global_smem, i64 %89, !dbg !27
  store i16 %79, ptr addrspace(3) %90, align 2, !dbg !27
  %91 = add nuw nsw i32 %88, 65, !dbg !27
  %92 = zext nneg i32 %91 to i64, !dbg !27
  %93 = getelementptr half, ptr addrspace(3) @global_smem, i64 %92, !dbg !27
  store i16 %80, ptr addrspace(3) %93, align 2, !dbg !27
  %94 = add nuw nsw i32 %88, 130, !dbg !27
  %95 = zext nneg i32 %94 to i64, !dbg !27
  %96 = getelementptr half, ptr addrspace(3) @global_smem, i64 %95, !dbg !27
  store i16 %81, ptr addrspace(3) %96, align 2, !dbg !27
  %97 = add nuw nsw i32 %88, 195, !dbg !27
  %98 = zext nneg i32 %97 to i64, !dbg !27
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !27
  store i16 %82, ptr addrspace(3) %99, align 2, !dbg !27
  %100 = add nuw nsw i32 %88, 260, !dbg !27
  %101 = zext nneg i32 %100 to i64, !dbg !27
  %102 = getelementptr half, ptr addrspace(3) @global_smem, i64 %101, !dbg !27
  store i16 %83, ptr addrspace(3) %102, align 2, !dbg !27
  %103 = add nuw nsw i32 %88, 325, !dbg !27
  %104 = zext nneg i32 %103 to i64, !dbg !27
  %105 = getelementptr half, ptr addrspace(3) @global_smem, i64 %104, !dbg !27
  store i16 %84, ptr addrspace(3) %105, align 2, !dbg !27
  %106 = add nuw nsw i32 %88, 390, !dbg !27
  %107 = zext nneg i32 %106 to i64, !dbg !27
  %108 = getelementptr half, ptr addrspace(3) @global_smem, i64 %107, !dbg !27
  store i16 %85, ptr addrspace(3) %108, align 2, !dbg !27
  %109 = add nuw nsw i32 %88, 455, !dbg !27
  %110 = zext nneg i32 %109 to i64, !dbg !27
  %111 = getelementptr half, ptr addrspace(3) @global_smem, i64 %110, !dbg !27
  store i16 %86, ptr addrspace(3) %111, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %112 = mul nuw nsw i32 %13, 65, !dbg !27
  %113 = add nuw nsw i32 %112, %23, !dbg !27
  %114 = zext nneg i32 %113 to i64, !dbg !27
  %115 = getelementptr half, ptr addrspace(3) @global_smem, i64 %114, !dbg !27
  %116 = load half, ptr addrspace(3) %115, align 2, !dbg !27
  %117 = mul nuw nsw i32 %14, 65, !dbg !27
  %118 = add nuw nsw i32 %117, %23, !dbg !27
  %119 = zext nneg i32 %118 to i64, !dbg !27
  %120 = getelementptr half, ptr addrspace(3) @global_smem, i64 %119, !dbg !27
  %121 = load half, ptr addrspace(3) %120, align 2, !dbg !27
  %122 = mul nuw nsw i32 %15, 65, !dbg !27
  %123 = add nuw nsw i32 %122, %23, !dbg !27
  %124 = zext nneg i32 %123 to i64, !dbg !27
  %125 = getelementptr half, ptr addrspace(3) @global_smem, i64 %124, !dbg !27
  %126 = load half, ptr addrspace(3) %125, align 2, !dbg !27
  %127 = mul nuw nsw i32 %16, 65, !dbg !27
  %128 = add nuw nsw i32 %127, %23, !dbg !27
  %129 = zext nneg i32 %128 to i64, !dbg !27
  %130 = getelementptr half, ptr addrspace(3) @global_smem, i64 %129, !dbg !27
  %131 = load half, ptr addrspace(3) %130, align 2, !dbg !27
  %132 = mul nuw nsw i32 %17, 65, !dbg !27
  %133 = add nuw nsw i32 %132, %23, !dbg !27
  %134 = zext nneg i32 %133 to i64, !dbg !27
  %135 = getelementptr half, ptr addrspace(3) @global_smem, i64 %134, !dbg !27
  %136 = load half, ptr addrspace(3) %135, align 2, !dbg !27
  %137 = mul nuw nsw i32 %18, 65, !dbg !27
  %138 = add nuw nsw i32 %137, %23, !dbg !27
  %139 = zext nneg i32 %138 to i64, !dbg !27
  %140 = getelementptr half, ptr addrspace(3) @global_smem, i64 %139, !dbg !27
  %141 = load half, ptr addrspace(3) %140, align 2, !dbg !27
  %142 = mul nuw nsw i32 %19, 65, !dbg !27
  %143 = add nuw nsw i32 %142, %23, !dbg !27
  %144 = zext nneg i32 %143 to i64, !dbg !27
  %145 = getelementptr half, ptr addrspace(3) @global_smem, i64 %144, !dbg !27
  %146 = load half, ptr addrspace(3) %145, align 2, !dbg !27
  %147 = mul nuw nsw i32 %20, 65, !dbg !27
  %148 = add nuw nsw i32 %147, %23, !dbg !27
  %149 = zext nneg i32 %148 to i64, !dbg !27
  %150 = getelementptr half, ptr addrspace(3) @global_smem, i64 %149, !dbg !27
  %151 = load half, ptr addrspace(3) %150, align 2, !dbg !27
  %152 = fpext half %116 to float, !dbg !28
  %153 = fpext half %121 to float, !dbg !28
  %154 = fpext half %126 to float, !dbg !28
  %155 = fpext half %131 to float, !dbg !28
  %156 = fpext half %136 to float, !dbg !28
  %157 = fpext half %141 to float, !dbg !28
  %158 = fpext half %146 to float, !dbg !28
  %159 = fpext half %151 to float, !dbg !28
  %160 = sext i32 %53 to i64, !dbg !29
  %161 = getelementptr half, ptr addrspace(1) %1, i64 %160, !dbg !29
  %162 = sext i32 %54 to i64, !dbg !29
  %163 = getelementptr half, ptr addrspace(1) %1, i64 %162, !dbg !29
  %164 = sext i32 %55 to i64, !dbg !29
  %165 = getelementptr half, ptr addrspace(1) %1, i64 %164, !dbg !29
  %166 = sext i32 %56 to i64, !dbg !29
  %167 = getelementptr half, ptr addrspace(1) %1, i64 %166, !dbg !29
  %168 = sext i32 %57 to i64, !dbg !29
  %169 = getelementptr half, ptr addrspace(1) %1, i64 %168, !dbg !29
  %170 = sext i32 %58 to i64, !dbg !29
  %171 = getelementptr half, ptr addrspace(1) %1, i64 %170, !dbg !29
  %172 = sext i32 %59 to i64, !dbg !29
  %173 = getelementptr half, ptr addrspace(1) %1, i64 %172, !dbg !29
  %174 = sext i32 %60 to i64, !dbg !29
  %175 = getelementptr half, ptr addrspace(1) %1, i64 %174, !dbg !29
  %176 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %161, i1 %39) #2, !dbg !30
  %177 = bitcast i16 %176 to half, !dbg !30
  %178 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %163, i1 %40) #2, !dbg !30
  %179 = bitcast i16 %178 to half, !dbg !30
  %180 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %165, i1 %41) #2, !dbg !30
  %181 = bitcast i16 %180 to half, !dbg !30
  %182 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %167, i1 %42) #2, !dbg !30
  %183 = bitcast i16 %182 to half, !dbg !30
  %184 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %169, i1 %43) #2, !dbg !30
  %185 = bitcast i16 %184 to half, !dbg !30
  %186 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %171, i1 %44) #2, !dbg !30
  %187 = bitcast i16 %186 to half, !dbg !30
  %188 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %173, i1 %45) #2, !dbg !30
  %189 = bitcast i16 %188 to half, !dbg !30
  %190 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %175, i1 %46) #2, !dbg !30
  %191 = bitcast i16 %190 to half, !dbg !30
  %192 = fpext half %177 to float, !dbg !31
  %193 = fpext half %179 to float, !dbg !31
  %194 = fpext half %181 to float, !dbg !31
  %195 = fpext half %183 to float, !dbg !31
  %196 = fpext half %185 to float, !dbg !31
  %197 = fpext half %187 to float, !dbg !31
  %198 = fpext half %189 to float, !dbg !31
  %199 = fpext half %191 to float, !dbg !31
  %200 = mul i32 %5, %4, !dbg !32
  %201 = mul i32 %30, %200, !dbg !33
  %202 = mul i32 %31, %200, !dbg !33
  %203 = mul i32 %32, %200, !dbg !33
  %204 = mul i32 %33, %200, !dbg !33
  %205 = mul i32 %34, %200, !dbg !33
  %206 = mul i32 %35, %200, !dbg !33
  %207 = mul i32 %36, %200, !dbg !33
  %208 = mul i32 %37, %200, !dbg !33
  %209 = add i32 %201, %50, !dbg !34
  %210 = add i32 %202, %50, !dbg !34
  %211 = add i32 %203, %50, !dbg !34
  %212 = add i32 %204, %50, !dbg !34
  %213 = add i32 %205, %50, !dbg !34
  %214 = add i32 %206, %50, !dbg !34
  %215 = add i32 %207, %50, !dbg !34
  %216 = add i32 %208, %50, !dbg !34
  %217 = sext i32 %209 to i64, !dbg !35
  %218 = getelementptr half, ptr addrspace(1) %2, i64 %217, !dbg !35
  %219 = sext i32 %210 to i64, !dbg !35
  %220 = getelementptr half, ptr addrspace(1) %2, i64 %219, !dbg !35
  %221 = sext i32 %211 to i64, !dbg !35
  %222 = getelementptr half, ptr addrspace(1) %2, i64 %221, !dbg !35
  %223 = sext i32 %212 to i64, !dbg !35
  %224 = getelementptr half, ptr addrspace(1) %2, i64 %223, !dbg !35
  %225 = sext i32 %213 to i64, !dbg !35
  %226 = getelementptr half, ptr addrspace(1) %2, i64 %225, !dbg !35
  %227 = sext i32 %214 to i64, !dbg !35
  %228 = getelementptr half, ptr addrspace(1) %2, i64 %227, !dbg !35
  %229 = sext i32 %215 to i64, !dbg !35
  %230 = getelementptr half, ptr addrspace(1) %2, i64 %229, !dbg !35
  %231 = sext i32 %216 to i64, !dbg !35
  %232 = getelementptr half, ptr addrspace(1) %2, i64 %231, !dbg !35
  %233 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %218, i1 %66) #2, !dbg !36
  %234 = bitcast i16 %233 to half, !dbg !36
  %235 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %220, i1 %67) #2, !dbg !36
  %236 = bitcast i16 %235 to half, !dbg !36
  %237 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %222, i1 %68) #2, !dbg !36
  %238 = bitcast i16 %237 to half, !dbg !36
  %239 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %224, i1 %69) #2, !dbg !36
  %240 = bitcast i16 %239 to half, !dbg !36
  %241 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %226, i1 %70) #2, !dbg !36
  %242 = bitcast i16 %241 to half, !dbg !36
  %243 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %228, i1 %71) #2, !dbg !36
  %244 = bitcast i16 %243 to half, !dbg !36
  %245 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %230, i1 %72) #2, !dbg !36
  %246 = bitcast i16 %245 to half, !dbg !36
  %247 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %232, i1 %73) #2, !dbg !36
  %248 = bitcast i16 %247 to half, !dbg !36
  %249 = fpext half %234 to float, !dbg !37
  %250 = fpext half %236 to float, !dbg !37
  %251 = fpext half %238 to float, !dbg !37
  %252 = fpext half %240 to float, !dbg !37
  %253 = fpext half %242 to float, !dbg !37
  %254 = fpext half %244 to float, !dbg !37
  %255 = fpext half %246 to float, !dbg !37
  %256 = fpext half %248 to float, !dbg !37
  %257 = fadd float %152, %192, !dbg !27
  %258 = fadd float %153, %193, !dbg !27
  %259 = fadd float %154, %194, !dbg !27
  %260 = fadd float %155, %195, !dbg !27
  %261 = fadd float %156, %196, !dbg !27
  %262 = fadd float %157, %197, !dbg !27
  %263 = fadd float %158, %198, !dbg !27
  %264 = fadd float %159, %199, !dbg !27
  %265 = fadd float %257, %249, !dbg !38
  %266 = fadd float %258, %250, !dbg !38
  %267 = fadd float %259, %251, !dbg !38
  %268 = fadd float %260, %252, !dbg !38
  %269 = fadd float %261, %253, !dbg !38
  %270 = fadd float %262, %254, !dbg !38
  %271 = fadd float %263, %255, !dbg !38
  %272 = fadd float %264, %256, !dbg !38
  %273 = getelementptr half, ptr addrspace(1) %3, i64 %217, !dbg !39
  %274 = getelementptr half, ptr addrspace(1) %3, i64 %219, !dbg !39
  %275 = getelementptr half, ptr addrspace(1) %3, i64 %221, !dbg !39
  %276 = getelementptr half, ptr addrspace(1) %3, i64 %223, !dbg !39
  %277 = getelementptr half, ptr addrspace(1) %3, i64 %225, !dbg !39
  %278 = getelementptr half, ptr addrspace(1) %3, i64 %227, !dbg !39
  %279 = getelementptr half, ptr addrspace(1) %3, i64 %229, !dbg !39
  %280 = getelementptr half, ptr addrspace(1) %3, i64 %231, !dbg !39
  %281 = fptrunc float %265 to half, !dbg !40
  %282 = fptrunc float %266 to half, !dbg !40
  %283 = fptrunc float %267 to half, !dbg !40
  %284 = fptrunc float %268 to half, !dbg !40
  %285 = fptrunc float %269 to half, !dbg !40
  %286 = fptrunc float %270 to half, !dbg !40
  %287 = fptrunc float %271 to half, !dbg !40
  %288 = fptrunc float %272 to half, !dbg !40
  %289 = bitcast half %281 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %289, ptr addrspace(1) %273, i1 %66) #2, !dbg !40
  %290 = bitcast half %282 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %290, ptr addrspace(1) %274, i1 %67) #2, !dbg !40
  %291 = bitcast half %283 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %291, ptr addrspace(1) %275, i1 %68) #2, !dbg !40
  %292 = bitcast half %284 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %292, ptr addrspace(1) %276, i1 %69) #2, !dbg !40
  %293 = bitcast half %285 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %293, ptr addrspace(1) %277, i1 %70) #2, !dbg !40
  %294 = bitcast half %286 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %294, ptr addrspace(1) %278, i1 %71) #2, !dbg !40
  %295 = bitcast half %287 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %295, ptr addrspace(1) %279, i1 %72) #2, !dbg !40
  %296 = bitcast half %288 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %296, ptr addrspace(1) %280, i1 %73) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chv5uvq5o5vqaqqrmgtuths55j3x7aop7grknjufvslt2pxqlljp.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hv")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 30, column: 18, scope: !5)
!22 = !DILocation(line: 31, column: 42, scope: !5)
!23 = !DILocation(line: 31, column: 36, scope: !5)
!24 = !DILocation(line: 31, column: 30, scope: !5)
!25 = !DILocation(line: 31, column: 56, scope: !5)
!26 = !DILocation(line: 31, column: 48, scope: !5)
!27 = !DILocation(line: 34, column: 18, scope: !5)
!28 = !DILocation(line: 31, column: 96, scope: !5)
!29 = !DILocation(line: 32, column: 30, scope: !5)
!30 = !DILocation(line: 32, column: 35, scope: !5)
!31 = !DILocation(line: 32, column: 75, scope: !5)
!32 = !DILocation(line: 33, column: 40, scope: !5)
!33 = !DILocation(line: 33, column: 44, scope: !5)
!34 = !DILocation(line: 33, column: 36, scope: !5)
!35 = !DILocation(line: 33, column: 30, scope: !5)
!36 = !DILocation(line: 33, column: 50, scope: !5)
!37 = !DILocation(line: 33, column: 98, scope: !5)
!38 = !DILocation(line: 35, column: 18, scope: !5)
!39 = !DILocation(line: 36, column: 25, scope: !5)
!40 = !DILocation(line: 36, column: 51, scope: !5)
!41 = !DILocation(line: 36, column: 4, scope: !5)
