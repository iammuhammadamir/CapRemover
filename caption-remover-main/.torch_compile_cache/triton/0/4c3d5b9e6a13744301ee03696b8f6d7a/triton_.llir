; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3de4e(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !5 {
.peel.next:
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %5, 255, !dbg !8
  %6 = shl nuw nsw i32 %urem, 2, !dbg !8
  %7 = or i32 %urem, 256, !dbg !8
  %8 = or i32 %urem, 512, !dbg !8
  %9 = or i32 %urem, 768, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %11 = icmp slt i32 %10, 704, !dbg !10
  %12 = mul i32 %10, 27000, !dbg !11
  %13 = zext nneg i32 %urem to i64
  %14 = getelementptr float, ptr addrspace(3) @global_smem, i64 %13
  %15 = zext nneg i32 %7 to i64
  %16 = getelementptr float, ptr addrspace(3) @global_smem, i64 %15
  %17 = zext nneg i32 %8 to i64
  %18 = getelementptr float, ptr addrspace(3) @global_smem, i64 %17
  %19 = zext nneg i32 %9 to i64
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19
  %21 = zext nneg i32 %6 to i64
  %22 = getelementptr float, ptr addrspace(3) @global_smem, i64 %21
  %23 = add i32 %6, %12, !dbg !12
  %24 = sext i32 %23 to i64, !dbg !13
  %25 = getelementptr half, ptr addrspace(1) %0, i64 %24, !dbg !13
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #3, !dbg !14
  %27 = select i1 %11, float 1.000000e+00, float 0.000000e+00, !dbg !15
  %28 = select i1 %11, float 1.000000e+00, float 0.000000e+00, !dbg !15
  %29 = select i1 %11, float 1.000000e+00, float 0.000000e+00, !dbg !15
  %30 = select i1 %11, float 1.000000e+00, float 0.000000e+00, !dbg !15
  %31 = extractvalue { i32, i32 } %26, 0, !dbg !14
  %extelt.offset.peel = lshr i32 %31, 16, !dbg !14
  %32 = extractvalue { i32, i32 } %26, 1, !dbg !14
  %extelt.offset1.peel = lshr i32 %32, 16, !dbg !14
  %33 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !14
  %34 = insertelement <4 x i32> %33, i32 %extelt.offset.peel, i64 1, !dbg !14
  %35 = insertelement <4 x i32> %34, i32 %32, i64 2, !dbg !14
  %36 = insertelement <4 x i32> %35, i32 %extelt.offset1.peel, i64 3, !dbg !14
  %37 = trunc <4 x i32> %36 to <4 x i16>, !dbg !14
  %38 = bitcast <4 x i16> %37 to <4 x half>, !dbg !14
  %39 = fpext <4 x half> %38 to <4 x float>, !dbg !16
  %40 = insertelement <4 x i1> poison, i1 %11, i64 0, !dbg !17
  %41 = shufflevector <4 x i1> %40, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  %42 = select <4 x i1> %41, <4 x float> %39, <4 x float> zeroinitializer, !dbg !17
  %43 = getelementptr inbounds <4 x float>, ptr addrspace(3) %22, i64 0, i64 1
  %44 = getelementptr inbounds <4 x float>, ptr addrspace(3) %22, i64 0, i64 2
  %45 = getelementptr inbounds <4 x float>, ptr addrspace(3) %22, i64 0, i64 3
  br label %46, !dbg !18

46:                                               ; preds = %.peel.next, %46
  %.pn52 = phi float [ %27, %.peel.next ], [ %108, %46 ]
  %.pn50 = phi float [ %28, %.peel.next ], [ %109, %46 ]
  %.pn48 = phi float [ %29, %.peel.next ], [ %110, %46 ]
  %.pn46 = phi float [ %30, %.peel.next ], [ %111, %46 ]
  %47 = phi i32 [ 1024, %.peel.next ], [ %112, %46 ]
  %48 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %107, %46 ]
  %49 = phi <4 x float> [ %42, %.peel.next ], [ %105, %46 ]
  %50 = or i32 %47, %6, !dbg !19
  %51 = or i32 %47, %7, !dbg !19
  %52 = or i32 %47, %8, !dbg !19
  %53 = or i32 %47, %9, !dbg !19
  %54 = icmp ult i32 %50, 27000, !dbg !20
  %55 = icmp ult i32 %51, 27000, !dbg !20
  %56 = icmp ult i32 %52, 27000, !dbg !20
  %57 = icmp ult i32 %53, 27000, !dbg !20
  %58 = add i32 %50, %12, !dbg !12
  %59 = sext i32 %58 to i64, !dbg !13
  %60 = getelementptr half, ptr addrspace(1) %0, i64 %59, !dbg !13
  %61 = and i1 %11, %54, !dbg !21
  %62 = and i1 %11, %55, !dbg !21
  %63 = and i1 %11, %56, !dbg !21
  %64 = and i1 %11, %57, !dbg !21
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #3, !dbg !14
  %66 = extractvalue { i32, i32 } %65, 1, !dbg !14
  %extelt.offset1 = lshr i32 %66, 16, !dbg !14
  %67 = extractvalue { i32, i32 } %65, 0, !dbg !14
  %extelt.offset = lshr i32 %67, 16, !dbg !14
  %68 = fadd float %.pn52, 1.000000e+00, !dbg !22
  %69 = fadd float %.pn50, 1.000000e+00, !dbg !22
  %70 = fadd float %.pn48, 1.000000e+00, !dbg !22
  %71 = fadd float %.pn46, 1.000000e+00, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %72 = insertelement <1 x float> undef, float %68, i64 0, !dbg !22
  store <1 x float> %72, ptr addrspace(3) %14, align 4, !dbg !22
  %73 = insertelement <1 x float> undef, float %69, i64 0, !dbg !22
  store <1 x float> %73, ptr addrspace(3) %16, align 4, !dbg !22
  %74 = insertelement <1 x float> undef, float %70, i64 0, !dbg !22
  store <1 x float> %74, ptr addrspace(3) %18, align 4, !dbg !22
  %75 = insertelement <1 x float> undef, float %71, i64 0, !dbg !22
  store <1 x float> %75, ptr addrspace(3) %20, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %76 = load float, ptr addrspace(3) %22, align 16, !dbg !22
  %77 = load float, ptr addrspace(3) %43, align 4, !dbg !22
  %78 = load float, ptr addrspace(3) %44, align 8, !dbg !22
  %79 = load float, ptr addrspace(3) %45, align 4, !dbg !22
  %80 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !14
  %81 = insertelement <4 x i32> %80, i32 %extelt.offset, i64 1, !dbg !14
  %82 = insertelement <4 x i32> %81, i32 %66, i64 2, !dbg !14
  %83 = insertelement <4 x i32> %82, i32 %extelt.offset1, i64 3, !dbg !14
  %84 = trunc <4 x i32> %83 to <4 x i16>, !dbg !14
  %85 = bitcast <4 x i16> %84 to <4 x half>, !dbg !14
  %86 = fpext <4 x half> %85 to <4 x float>, !dbg !16
  %87 = fsub <4 x float> %86, %49, !dbg !26
  %88 = extractelement <4 x float> %87, i64 0, !dbg !27
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %76) #3, !dbg !27
  %90 = extractelement <4 x float> %87, i64 1, !dbg !27
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %77) #3, !dbg !27
  %92 = extractelement <4 x float> %87, i64 2, !dbg !27
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %78) #3, !dbg !27
  %94 = extractelement <4 x float> %87, i64 3, !dbg !27
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %79) #3, !dbg !27
  %96 = insertelement <4 x float> poison, float %89, i64 0, !dbg !28
  %97 = insertelement <4 x float> %96, float %91, i64 1, !dbg !28
  %98 = insertelement <4 x float> %97, float %93, i64 2, !dbg !28
  %99 = insertelement <4 x float> %98, float %95, i64 3, !dbg !28
  %100 = fadd <4 x float> %49, %99, !dbg !28
  %101 = fsub <4 x float> %86, %100, !dbg !29
  %102 = fmul <4 x float> %87, %101, !dbg !30
  %103 = insertelement <4 x i1> poison, i1 %61, i64 0, !dbg !17
  %104 = shufflevector <4 x i1> %103, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  %105 = select <4 x i1> %104, <4 x float> %100, <4 x float> %49, !dbg !17
  %106 = select <4 x i1> %104, <4 x float> %102, <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !31
  %107 = fadd <4 x float> %48, %106, !dbg !31
  %108 = select i1 %11, float %68, float %.pn52, !dbg !15
  %109 = select i1 %62, float %69, float %.pn50, !dbg !15
  %110 = select i1 %63, float %70, float %.pn48, !dbg !15
  %111 = select i1 %64, float %71, float %.pn46, !dbg !15
  %112 = add nuw nsw i32 %47, 1024, !dbg !18
  %113 = icmp ult i32 %47, 25976, !dbg !18
  br i1 %113, label %46, label %.loopexit, !dbg !18, !llvm.loop !32

.loopexit:                                        ; preds = %46
  %114 = lshr i32 %5, 5, !dbg !8
  %115 = and i32 %114, 7, !dbg !8
  %116 = and i32 %5, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %117 = insertelement <1 x float> undef, float %108, i64 0, !dbg !18
  store <1 x float> %117, ptr addrspace(3) %14, align 4, !dbg !18
  %118 = insertelement <1 x float> undef, float %109, i64 0, !dbg !18
  store <1 x float> %118, ptr addrspace(3) %16, align 4, !dbg !18
  %119 = insertelement <1 x float> undef, float %110, i64 0, !dbg !18
  store <1 x float> %119, ptr addrspace(3) %18, align 4, !dbg !18
  %120 = insertelement <1 x float> undef, float %111, i64 0, !dbg !18
  store <1 x float> %120, ptr addrspace(3) %20, align 4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %121 = load float, ptr addrspace(3) %22, align 16, !dbg !18
  %122 = getelementptr inbounds <4 x float>, ptr addrspace(3) %22, i64 0, i64 1, !dbg !18
  %123 = load float, ptr addrspace(3) %122, align 4, !dbg !18
  %124 = getelementptr inbounds <4 x float>, ptr addrspace(3) %22, i64 0, i64 2, !dbg !18
  %125 = load float, ptr addrspace(3) %124, align 8, !dbg !18
  %126 = getelementptr inbounds <4 x float>, ptr addrspace(3) %22, i64 0, i64 3, !dbg !18
  %127 = load float, ptr addrspace(3) %126, align 4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %128 = extractelement <4 x float> %105, i64 0, !dbg !36
  %129 = extractelement <4 x float> %105, i64 1, !dbg !36
  %130 = fsub float %129, %128, !dbg !36
  %131 = fadd float %121, %123, !dbg !40
  %132 = fcmp oeq float %131, 0.000000e+00, !dbg !41
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %131) #3, !dbg !42
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !43
  %135 = fmul float %130, %134, !dbg !44
  %136 = fadd float %128, %135, !dbg !45
  %shift = shufflevector <4 x float> %107, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !46
  %137 = fadd <4 x float> %107, %shift, !dbg !46
  %138 = extractelement <4 x float> %137, i64 0, !dbg !46
  %139 = fmul float %130, %130, !dbg !47
  %140 = fmul float %139, %121, !dbg !48
  %141 = fmul float %140, %134, !dbg !49
  %142 = fadd float %138, %141, !dbg !50
  %143 = extractelement <4 x float> %105, i64 2, !dbg !36
  %144 = fsub float %143, %136, !dbg !36
  %145 = fadd float %125, %131, !dbg !40
  %146 = fcmp oeq float %145, 0.000000e+00, !dbg !41
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %145) #3, !dbg !42
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !43
  %149 = fmul float %148, %144, !dbg !44
  %150 = fadd float %136, %149, !dbg !45
  %151 = extractelement <4 x float> %107, i64 2, !dbg !46
  %152 = fadd float %151, %142, !dbg !46
  %153 = fmul float %144, %144, !dbg !47
  %154 = fmul float %131, %153, !dbg !48
  %155 = fmul float %148, %154, !dbg !49
  %156 = fadd float %152, %155, !dbg !50
  %157 = extractelement <4 x float> %105, i64 3, !dbg !36
  %158 = fsub float %157, %150, !dbg !36
  %159 = fadd float %127, %145, !dbg !40
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !41
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %159) #3, !dbg !42
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !43
  %163 = fmul float %162, %158, !dbg !44
  %164 = fadd float %150, %163, !dbg !45
  %165 = extractelement <4 x float> %107, i64 3, !dbg !46
  %166 = fadd float %165, %156, !dbg !46
  %167 = fmul float %158, %158, !dbg !47
  %168 = fmul float %145, %167, !dbg !48
  %169 = fmul float %162, %168, !dbg !49
  %170 = fadd float %166, %169, !dbg !50
  %171 = bitcast float %164 to i32, !dbg !34
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 16, i32 31), !dbg !34
  %173 = bitcast i32 %172 to float, !dbg !34
  %174 = bitcast float %170 to i32, !dbg !34
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 16, i32 31), !dbg !34
  %176 = bitcast i32 %175 to float, !dbg !34
  %177 = bitcast float %159 to i32, !dbg !34
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !34
  %179 = bitcast i32 %178 to float, !dbg !34
  %180 = fsub float %173, %164, !dbg !36
  %181 = fadd float %159, %179, !dbg !40
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !41
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %181) #3, !dbg !42
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !43
  %185 = fmul float %184, %180, !dbg !44
  %186 = fadd float %164, %185, !dbg !45
  %187 = fadd float %170, %176, !dbg !46
  %188 = fmul float %180, %180, !dbg !47
  %189 = fmul float %159, %188, !dbg !48
  %190 = fmul float %184, %189, !dbg !49
  %191 = fadd float %187, %190, !dbg !50
  %192 = bitcast float %186 to i32, !dbg !34
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !34
  %194 = bitcast i32 %193 to float, !dbg !34
  %195 = bitcast float %191 to i32, !dbg !34
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !34
  %197 = bitcast i32 %196 to float, !dbg !34
  %198 = bitcast float %181 to i32, !dbg !34
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !34
  %200 = bitcast i32 %199 to float, !dbg !34
  %201 = fsub float %194, %186, !dbg !36
  %202 = fadd float %181, %200, !dbg !40
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !41
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %202) #3, !dbg !42
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !43
  %206 = fmul float %205, %201, !dbg !44
  %207 = fadd float %186, %206, !dbg !45
  %208 = fadd float %191, %197, !dbg !46
  %209 = fmul float %201, %201, !dbg !47
  %210 = fmul float %181, %209, !dbg !48
  %211 = fmul float %205, %210, !dbg !49
  %212 = fadd float %208, %211, !dbg !50
  %213 = bitcast float %207 to i32, !dbg !34
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !34
  %215 = bitcast i32 %214 to float, !dbg !34
  %216 = bitcast float %212 to i32, !dbg !34
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !34
  %218 = bitcast i32 %217 to float, !dbg !34
  %219 = bitcast float %202 to i32, !dbg !34
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !34
  %221 = bitcast i32 %220 to float, !dbg !34
  %222 = fsub float %215, %207, !dbg !36
  %223 = fadd float %202, %221, !dbg !40
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !41
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %223) #3, !dbg !42
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !43
  %227 = fmul float %222, %226, !dbg !44
  %228 = fadd float %207, %227, !dbg !45
  %229 = fadd float %212, %218, !dbg !46
  %230 = fmul float %222, %222, !dbg !47
  %231 = fmul float %202, %230, !dbg !48
  %232 = fmul float %226, %231, !dbg !49
  %233 = fadd float %229, %232, !dbg !50
  %234 = bitcast float %228 to i32, !dbg !34
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !34
  %236 = bitcast i32 %235 to float, !dbg !34
  %237 = bitcast float %233 to i32, !dbg !34
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !34
  %239 = bitcast i32 %238 to float, !dbg !34
  %240 = bitcast float %223 to i32, !dbg !34
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !34
  %242 = bitcast i32 %241 to float, !dbg !34
  %243 = fsub float %236, %228, !dbg !36
  %244 = fadd float %223, %242, !dbg !40
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !41
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #3, !dbg !42
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !43
  %248 = fmul float %243, %247, !dbg !44
  %249 = fadd float %228, %248, !dbg !45
  %250 = fadd float %233, %239, !dbg !46
  %251 = fmul float %243, %243, !dbg !47
  %252 = fmul float %223, %251, !dbg !48
  %253 = fmul float %247, %252, !dbg !49
  %254 = fadd float %250, %253, !dbg !50
  %255 = bitcast float %249 to i32, !dbg !34
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !34
  %257 = bitcast i32 %256 to float, !dbg !34
  %258 = bitcast float %254 to i32, !dbg !34
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !34
  %260 = bitcast i32 %259 to float, !dbg !34
  %261 = bitcast float %244 to i32, !dbg !34
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !34
  %263 = bitcast i32 %262 to float, !dbg !34
  %264 = fsub float %257, %249, !dbg !36
  %265 = fadd float %244, %263, !dbg !40
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !41
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %265) #3, !dbg !42
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !43
  %269 = fmul float %264, %268, !dbg !44
  %270 = fadd float %249, %269, !dbg !45
  %271 = fadd float %254, %260, !dbg !46
  %272 = fmul float %264, %264, !dbg !47
  %273 = fmul float %244, %272, !dbg !48
  %274 = fmul float %268, %273, !dbg !49
  %275 = fadd float %271, %274, !dbg !50
  %276 = icmp eq i32 %116, 0, !dbg !34
  %277 = zext nneg i32 %115 to i64, !dbg !34
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i64 %277, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, float %270, i1 %276) #3, !dbg !34
  %279 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %277, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, float %275, i1 %276) #3, !dbg !34
  %280 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %277, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, float %265, i1 %276) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %281 = icmp slt i32 %5, 8, !dbg !34
  %282 = sext i32 %5 to i64, !dbg !34
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i64 %282, !dbg !34
  %284 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %283, i1 %281) #3, !dbg !34
  %285 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %282, !dbg !34
  %286 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %285, i1 %281) #3, !dbg !34
  %287 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %282, !dbg !34
  %288 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %281) #3, !dbg !34
  %289 = bitcast float %284 to i32, !dbg !34
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 4, i32 31), !dbg !34
  %291 = bitcast i32 %290 to float, !dbg !34
  %292 = bitcast float %286 to i32, !dbg !34
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 4, i32 31), !dbg !34
  %294 = bitcast i32 %293 to float, !dbg !34
  %295 = bitcast float %288 to i32, !dbg !34
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !34
  %297 = bitcast i32 %296 to float, !dbg !34
  %298 = fsub float %291, %284, !dbg !36
  %299 = fadd float %288, %297, !dbg !40
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !41
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %299) #3, !dbg !42
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !43
  %303 = fmul float %298, %302, !dbg !44
  %304 = fadd float %284, %303, !dbg !45
  %305 = fadd float %286, %294, !dbg !46
  %306 = fmul float %298, %298, !dbg !47
  %307 = fmul float %288, %306, !dbg !48
  %308 = fmul float %307, %302, !dbg !49
  %309 = fadd float %305, %308, !dbg !50
  %310 = bitcast float %304 to i32, !dbg !34
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !34
  %312 = bitcast i32 %311 to float, !dbg !34
  %313 = bitcast float %309 to i32, !dbg !34
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 2, i32 31), !dbg !34
  %315 = bitcast i32 %314 to float, !dbg !34
  %316 = bitcast float %299 to i32, !dbg !34
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 2, i32 31), !dbg !34
  %318 = bitcast i32 %317 to float, !dbg !34
  %319 = fsub float %312, %304, !dbg !36
  %320 = fadd float %299, %318, !dbg !40
  %321 = fcmp oeq float %320, 0.000000e+00, !dbg !41
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %320) #3, !dbg !42
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !43
  %324 = fmul float %319, %323, !dbg !44
  %325 = fadd float %304, %324, !dbg !45
  %326 = fadd float %309, %315, !dbg !46
  %327 = fmul float %319, %319, !dbg !47
  %328 = fmul float %299, %327, !dbg !48
  %329 = fmul float %323, %328, !dbg !49
  %330 = fadd float %326, %329, !dbg !50
  %331 = bitcast float %325 to i32, !dbg !34
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 1, i32 31), !dbg !34
  %333 = bitcast i32 %332 to float, !dbg !34
  %334 = bitcast float %330 to i32, !dbg !34
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 1, i32 31), !dbg !34
  %336 = bitcast i32 %335 to float, !dbg !34
  %337 = bitcast float %320 to i32, !dbg !34
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !34
  %339 = bitcast i32 %338 to float, !dbg !34
  %340 = fsub float %333, %325, !dbg !36
  %341 = fadd float %320, %339, !dbg !40
  %342 = fcmp oeq float %341, 0.000000e+00, !dbg !41
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float %341) #3, !dbg !42
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !43
  %345 = fmul float %340, %344, !dbg !44
  %346 = fadd float %325, %345, !dbg !45
  %347 = fadd float %330, %336, !dbg !46
  %348 = fmul float %340, %340, !dbg !47
  %349 = fmul float %320, %348, !dbg !48
  %350 = fmul float %344, %349, !dbg !49
  %351 = fadd float %347, %350, !dbg !50
  %352 = and i32 %5, 7, !dbg !34
  %353 = icmp eq i32 %352, 0, !dbg !34
  %354 = and i1 %281, %353, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, float %346, i1 %354) #3, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, float %351, i1 %354) #3, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, float %341, i1 %354) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %355 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !34
  %356 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %357 = insertelement <1 x float> undef, float %355, i64 0, !dbg !51
  store <1 x float> %357, ptr addrspace(3) @global_smem, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %358 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %359 = insertelement <1 x float> undef, float %356, i64 0, !dbg !52
  store <1 x float> %359, ptr addrspace(3) @global_smem, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %360 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !52
  %361 = sext i32 %10 to i64, !dbg !53
  %362 = getelementptr float, ptr addrspace(1) %1, i64 %361, !dbg !53
  %363 = icmp eq i32 %urem, 0, !dbg !54
  %364 = and i1 %363, %11, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %362, i1 %364) #3, !dbg !54
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %361, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %365, i1 %364) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cblpdadv7pbfw2grld5ck2igdgqqlqqswsnfc7g2hk6mobgptk7x.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/bl")
!3 = !{ptr @triton__0d1d2d3de4e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3de4e, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3de4e", linkageName: "triton__0d1d2d3de4e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 33, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 35, column: 46, scope: !5)
!12 = !DILocation(line: 35, column: 40, scope: !5)
!13 = !DILocation(line: 35, column: 34, scope: !5)
!14 = !DILocation(line: 35, column: 52, scope: !5)
!15 = !DILocation(line: 43, column: 64, scope: !5)
!16 = !DILocation(line: 35, column: 112, scope: !5)
!17 = !DILocation(line: 41, column: 60, scope: !5)
!18 = !DILocation(line: 31, column: 36, scope: !5)
!19 = !DILocation(line: 32, column: 27, scope: !5)
!20 = !DILocation(line: 33, column: 25, scope: !5)
!21 = !DILocation(line: 35, column: 60, scope: !5)
!22 = !DILocation(line: 111, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !5, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!25 = !DILocation(line: 39, column: 51, scope: !23)
!26 = !DILocation(line: 110, column: 24, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 112, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 112, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 113, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 113, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 42, column: 56, scope: !5)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.peeled.count", i32 1}
!34 = !DILocation(line: 131, column: 46, scope: !23, inlinedAt: !35)
!35 = !DILocation(line: 45, column: 41, scope: !23)
!36 = !DILocation(line: 119, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!38 = !DILocation(line: 131, column: 46, scope: !37, inlinedAt: !39)
!39 = !DILocation(line: 45, column: 41, scope: !37)
!40 = !DILocation(line: 120, column: 28, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 121, column: 39, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 121, column: 60, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 121, column: 49, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 123, column: 25, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 123, column: 17, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 124, column: 15, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 124, column: 30, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 124, column: 38, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 124, column: 49, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 124, column: 22, scope: !37, inlinedAt: !38)
!51 = !DILocation(line: 47, column: 20, scope: !5)
!52 = !DILocation(line: 48, column: 20, scope: !5)
!53 = !DILocation(line: 50, column: 25, scope: !5)
!54 = !DILocation(line: 50, column: 36, scope: !5)
!55 = !DILocation(line: 51, column: 25, scope: !5)
!56 = !DILocation(line: 51, column: 36, scope: !5)
!57 = !DILocation(line: 51, column: 4, scope: !5)
