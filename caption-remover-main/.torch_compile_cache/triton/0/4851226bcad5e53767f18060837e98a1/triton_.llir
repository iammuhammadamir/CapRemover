; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d345de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %8, 255, !dbg !8
  %9 = shl nuw nsw i32 %urem, 2, !dbg !8
  %10 = or i32 %urem, 256, !dbg !8
  %11 = or i32 %urem, 512, !dbg !8
  %12 = or i32 %urem, 768, !dbg !8
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %14 = icmp slt i32 %13, 704, !dbg !10
  %15 = mul i32 %3, 60, !dbg !11
  %16 = mul i32 %15, %4, !dbg !12
  %17 = mul i32 %16, %13, !dbg !13
  %18 = icmp sgt i32 %6, 0, !dbg !14
  %19 = zext nneg i32 %urem to i64
  br i1 %18, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !14

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre73 = zext nneg i32 %10 to i64, !dbg !14
  %.pre75 = zext nneg i32 %11 to i64, !dbg !14
  %.pre77 = zext nneg i32 %12 to i64, !dbg !14
  %.pre79 = zext nneg i32 %9 to i64, !dbg !14
  br label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19
  %21 = zext nneg i32 %10 to i64
  %22 = getelementptr float, ptr addrspace(3) @global_smem, i64 %21
  %23 = zext nneg i32 %11 to i64
  %24 = getelementptr float, ptr addrspace(3) @global_smem, i64 %23
  %25 = zext nneg i32 %12 to i64
  %26 = getelementptr float, ptr addrspace(3) @global_smem, i64 %25
  %27 = zext nneg i32 %9 to i64
  %28 = getelementptr float, ptr addrspace(3) @global_smem, i64 %27
  %29 = getelementptr inbounds <4 x float>, ptr addrspace(3) %28, i64 0, i64 1
  %30 = getelementptr inbounds <4 x float>, ptr addrspace(3) %28, i64 0, i64 2
  %31 = getelementptr inbounds <4 x float>, ptr addrspace(3) %28, i64 0, i64 3
  %32 = insertelement <16 x i1> poison, i1 %14, i64 0, !dbg !15
  %33 = shufflevector <16 x i1> %32, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !15
  %34 = insertelement <16 x i32> poison, i32 %6, i64 0, !dbg !16
  %35 = shufflevector <16 x i32> %34, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !16
  %36 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1024>, i32 %10, i64 0, !dbg !17
  %37 = insertelement <4 x i32> %36, i32 %11, i64 1, !dbg !17
  %38 = insertelement <4 x i32> %37, i32 %12, i64 2, !dbg !17
  br label %39, !dbg !14

39:                                               ; preds = %.lr.ph, %._crit_edge24
  %40 = phi i32 [ 0, %.lr.ph ], [ %181, %._crit_edge24 ]
  %41 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %180, %._crit_edge24 ]
  %42 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %179, %._crit_edge24 ]
  %43 = or i32 %40, %9, !dbg !17
  %44 = or i32 %43, 1, !dbg !17
  %45 = or i32 %43, 2, !dbg !17
  %46 = or i32 %43, 3, !dbg !17
  %47 = or i32 %43, 1024, !dbg !17
  %48 = or i32 %43, 1025, !dbg !17
  %49 = or i32 %43, 1026, !dbg !17
  %50 = or i32 %43, 1027, !dbg !17
  %51 = or i32 %40, %urem, !dbg !17
  %52 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !17
  %53 = insertelement <4 x i32> %52, i32 %51, i64 1, !dbg !17
  %54 = shufflevector <4 x i32> %53, <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>, !dbg !17
  %55 = or <4 x i32> %54, %38, !dbg !17
  %56 = or i32 %51, 1280, !dbg !17
  %57 = or i32 %51, 1536, !dbg !17
  %58 = or i32 %51, 1792, !dbg !17
  %59 = insertelement <16 x i32> poison, i32 %43, i64 0, !dbg !16
  %60 = insertelement <16 x i32> %59, i32 %44, i64 1, !dbg !16
  %61 = insertelement <16 x i32> %60, i32 %45, i64 2, !dbg !16
  %62 = insertelement <16 x i32> %61, i32 %46, i64 3, !dbg !16
  %63 = insertelement <16 x i32> %62, i32 %47, i64 4, !dbg !16
  %64 = insertelement <16 x i32> %63, i32 %48, i64 5, !dbg !16
  %65 = insertelement <16 x i32> %64, i32 %49, i64 6, !dbg !16
  %66 = insertelement <16 x i32> %65, i32 %50, i64 7, !dbg !16
  %67 = insertelement <16 x i32> %66, i32 %51, i64 8, !dbg !16
  %68 = shufflevector <4 x i32> %55, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !16
  %69 = shufflevector <16 x i32> %67, <16 x i32> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison>, !dbg !16
  %70 = insertelement <16 x i32> %69, i32 %56, i64 13, !dbg !16
  %71 = insertelement <16 x i32> %70, i32 %57, i64 14, !dbg !16
  %72 = insertelement <16 x i32> %71, i32 %58, i64 15, !dbg !16
  %73 = icmp slt <16 x i32> %72, %35, !dbg !16
  %74 = add i32 %43, %17, !dbg !18
  %75 = add i32 %44, %17, !dbg !18
  %76 = add i32 %45, %17, !dbg !18
  %77 = add i32 %46, %17, !dbg !18
  %78 = add i32 %47, %17, !dbg !18
  %79 = add i32 %48, %17, !dbg !18
  %80 = add i32 %49, %17, !dbg !18
  %81 = add i32 %50, %17, !dbg !18
  %82 = sext i32 %74 to i64, !dbg !19
  %83 = getelementptr half, ptr addrspace(1) %0, i64 %82, !dbg !19
  %84 = sext i32 %75 to i64, !dbg !19
  %85 = getelementptr half, ptr addrspace(1) %0, i64 %84, !dbg !19
  %86 = sext i32 %76 to i64, !dbg !19
  %87 = getelementptr half, ptr addrspace(1) %0, i64 %86, !dbg !19
  %88 = sext i32 %77 to i64, !dbg !19
  %89 = getelementptr half, ptr addrspace(1) %0, i64 %88, !dbg !19
  %90 = sext i32 %78 to i64, !dbg !19
  %91 = getelementptr half, ptr addrspace(1) %0, i64 %90, !dbg !19
  %92 = sext i32 %79 to i64, !dbg !19
  %93 = getelementptr half, ptr addrspace(1) %0, i64 %92, !dbg !19
  %94 = sext i32 %80 to i64, !dbg !19
  %95 = getelementptr half, ptr addrspace(1) %0, i64 %94, !dbg !19
  %96 = sext i32 %81 to i64, !dbg !19
  %97 = getelementptr half, ptr addrspace(1) %0, i64 %96, !dbg !19
  %98 = and <16 x i1> %33, %73, !dbg !15
  %99 = extractelement <16 x i1> %98, i64 0, !dbg !20
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %83, i1 %99, i16 0, i1 %99) #3, !dbg !20
  %101 = extractelement <16 x i1> %98, i64 1, !dbg !20
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 %101, i16 0, i1 %101) #3, !dbg !20
  %103 = extractelement <16 x i1> %98, i64 2, !dbg !20
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %87, i1 %103, i16 0, i1 %103) #3, !dbg !20
  %105 = extractelement <16 x i1> %98, i64 3, !dbg !20
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %89, i1 %105, i16 0, i1 %105) #3, !dbg !20
  %107 = extractelement <16 x i1> %98, i64 4, !dbg !20
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %91, i1 %107, i16 0, i1 %107) #3, !dbg !20
  %109 = extractelement <16 x i1> %98, i64 5, !dbg !20
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %93, i1 %109, i16 0, i1 %109) #3, !dbg !20
  %111 = extractelement <16 x i1> %98, i64 6, !dbg !20
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %95, i1 %111, i16 0, i1 %111) #3, !dbg !20
  %113 = extractelement <16 x i1> %98, i64 7, !dbg !20
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %97, i1 %113, i16 0, i1 %113) #3, !dbg !20
  %115 = insertelement <8 x i16> poison, i16 %100, i64 0, !dbg !20
  %116 = insertelement <8 x i16> %115, i16 %102, i64 1, !dbg !20
  %117 = insertelement <8 x i16> %116, i16 %104, i64 2, !dbg !20
  %118 = insertelement <8 x i16> %117, i16 %106, i64 3, !dbg !20
  %119 = insertelement <8 x i16> %118, i16 %108, i64 4, !dbg !20
  %120 = insertelement <8 x i16> %119, i16 %110, i64 5, !dbg !20
  %121 = insertelement <8 x i16> %120, i16 %112, i64 6, !dbg !20
  %122 = insertelement <8 x i16> %121, i16 %114, i64 7, !dbg !20
  %123 = bitcast <8 x i16> %122 to <8 x half>, !dbg !20
  %124 = fpext <8 x half> %123 to <8 x float>, !dbg !21
  %125 = icmp eq i32 %40, 0, !dbg !22
  br i1 %125, label %._crit_edge24, label %126, !dbg !23

126:                                              ; preds = %39
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %127 = shufflevector <16 x float> %41, <16 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !27
  %128 = fadd <8 x float> %127, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !27
  %129 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> zeroinitializer, !dbg !27
  store <1 x float> %129, ptr addrspace(3) %20, align 4, !dbg !27
  %130 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> <i32 1>, !dbg !27
  store <1 x float> %130, ptr addrspace(3) %22, align 4, !dbg !27
  %131 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> <i32 2>, !dbg !27
  store <1 x float> %131, ptr addrspace(3) %24, align 4, !dbg !27
  %132 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> <i32 3>, !dbg !27
  store <1 x float> %132, ptr addrspace(3) %26, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %133 = load float, ptr addrspace(3) %28, align 16, !dbg !27
  %134 = load float, ptr addrspace(3) %29, align 4, !dbg !27
  %135 = load float, ptr addrspace(3) %30, align 8, !dbg !27
  %136 = load float, ptr addrspace(3) %31, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %137 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> <i32 4>, !dbg !27
  store <1 x float> %137, ptr addrspace(3) %20, align 4, !dbg !27
  %138 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> <i32 5>, !dbg !27
  store <1 x float> %138, ptr addrspace(3) %22, align 4, !dbg !27
  %139 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> <i32 6>, !dbg !27
  store <1 x float> %139, ptr addrspace(3) %24, align 4, !dbg !27
  %140 = shufflevector <8 x float> %128, <8 x float> poison, <1 x i32> <i32 7>, !dbg !27
  store <1 x float> %140, ptr addrspace(3) %26, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %141 = load float, ptr addrspace(3) %28, align 16, !dbg !27
  %142 = load float, ptr addrspace(3) %29, align 4, !dbg !27
  %143 = load float, ptr addrspace(3) %30, align 8, !dbg !27
  %144 = load float, ptr addrspace(3) %31, align 4, !dbg !27
  %145 = fsub <8 x float> %124, %42, !dbg !28
  %146 = extractelement <8 x float> %145, i64 0, !dbg !29
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %133) #3, !dbg !29
  %148 = extractelement <8 x float> %145, i64 1, !dbg !29
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %134) #3, !dbg !29
  %150 = extractelement <8 x float> %145, i64 2, !dbg !29
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %135) #3, !dbg !29
  %152 = extractelement <8 x float> %145, i64 3, !dbg !29
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %136) #3, !dbg !29
  %154 = extractelement <8 x float> %145, i64 4, !dbg !29
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %141) #3, !dbg !29
  %156 = extractelement <8 x float> %145, i64 5, !dbg !29
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %142) #3, !dbg !29
  %158 = extractelement <8 x float> %145, i64 6, !dbg !29
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float %143) #3, !dbg !29
  %160 = extractelement <8 x float> %145, i64 7, !dbg !29
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %144) #3, !dbg !29
  %162 = insertelement <8 x float> poison, float %147, i64 0, !dbg !30
  %163 = insertelement <8 x float> %162, float %149, i64 1, !dbg !30
  %164 = insertelement <8 x float> %163, float %151, i64 2, !dbg !30
  %165 = insertelement <8 x float> %164, float %153, i64 3, !dbg !30
  %166 = insertelement <8 x float> %165, float %155, i64 4, !dbg !30
  %167 = insertelement <8 x float> %166, float %157, i64 5, !dbg !30
  %168 = insertelement <8 x float> %167, float %159, i64 6, !dbg !30
  %169 = insertelement <8 x float> %168, float %161, i64 7, !dbg !30
  %170 = fadd <8 x float> %42, %169, !dbg !30
  %171 = fsub <8 x float> %124, %170, !dbg !31
  %172 = fmul <8 x float> %145, %171, !dbg !32
  %173 = shufflevector <16 x float> %41, <16 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !33
  %174 = fadd <8 x float> %173, %172, !dbg !33
  %175 = shufflevector <8 x float> %174, <8 x float> %128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %._crit_edge24, !dbg !23

._crit_edge24:                                    ; preds = %39, %126
  %176 = phi <16 x float> [ %175, %126 ], [ <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39 ]
  %177 = phi <8 x float> [ %170, %126 ], [ %124, %39 ]
  %178 = shufflevector <16 x i1> %98, <16 x i1> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !34
  %179 = select <8 x i1> %178, <8 x float> %177, <8 x float> %42, !dbg !34
  %180 = select <16 x i1> %98, <16 x float> %176, <16 x float> %41, !dbg !35
  %181 = add i32 %40, 2048, !dbg !14
  %182 = icmp slt i32 %181, %6, !dbg !14
  br i1 %182, label %39, label %._crit_edge.loopexit, !dbg !14

._crit_edge.loopexit:                             ; preds = %._crit_edge24
  %183 = extractelement <8 x float> %179, i64 7, !dbg !14
  %184 = extractelement <8 x float> %179, i64 6, !dbg !14
  %185 = extractelement <8 x float> %179, i64 5, !dbg !14
  %186 = extractelement <8 x float> %179, i64 4, !dbg !14
  %187 = extractelement <8 x float> %179, i64 3, !dbg !14
  %188 = extractelement <8 x float> %179, i64 2, !dbg !14
  %189 = extractelement <8 x float> %179, i64 1, !dbg !14
  %190 = extractelement <8 x float> %179, i64 0, !dbg !14
  br label %._crit_edge, !dbg !8

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi80 = phi i64 [ %.pre79, %.._crit_edge_crit_edge ], [ %27, %._crit_edge.loopexit ], !dbg !14
  %.pre-phi78 = phi i64 [ %.pre77, %.._crit_edge_crit_edge ], [ %25, %._crit_edge.loopexit ], !dbg !14
  %.pre-phi76 = phi i64 [ %.pre75, %.._crit_edge_crit_edge ], [ %23, %._crit_edge.loopexit ], !dbg !14
  %.pre-phi74 = phi i64 [ %.pre73, %.._crit_edge_crit_edge ], [ %21, %._crit_edge.loopexit ], !dbg !14
  %191 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %190, %._crit_edge.loopexit ]
  %192 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %189, %._crit_edge.loopexit ]
  %193 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %188, %._crit_edge.loopexit ]
  %194 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %187, %._crit_edge.loopexit ]
  %195 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %186, %._crit_edge.loopexit ]
  %196 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %185, %._crit_edge.loopexit ]
  %197 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %184, %._crit_edge.loopexit ]
  %198 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %183, %._crit_edge.loopexit ]
  %199 = phi <16 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %180, %._crit_edge.loopexit ]
  %200 = lshr i32 %8, 5, !dbg !8
  %201 = and i32 %200, 7, !dbg !8
  %202 = and i32 %8, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19, !dbg !14
  %204 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 8>, !dbg !14
  store <1 x float> %204, ptr addrspace(3) %203, align 4, !dbg !14
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi74, !dbg !14
  %206 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 9>, !dbg !14
  store <1 x float> %206, ptr addrspace(3) %205, align 4, !dbg !14
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi76, !dbg !14
  %208 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 10>, !dbg !14
  store <1 x float> %208, ptr addrspace(3) %207, align 4, !dbg !14
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi78, !dbg !14
  %210 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 11>, !dbg !14
  store <1 x float> %210, ptr addrspace(3) %209, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi80, !dbg !14
  %212 = load float, ptr addrspace(3) %211, align 16, !dbg !14
  %213 = getelementptr inbounds <4 x float>, ptr addrspace(3) %211, i64 0, i64 1, !dbg !14
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !14
  %215 = getelementptr inbounds <4 x float>, ptr addrspace(3) %211, i64 0, i64 2, !dbg !14
  %216 = load float, ptr addrspace(3) %215, align 8, !dbg !14
  %217 = getelementptr inbounds <4 x float>, ptr addrspace(3) %211, i64 0, i64 3, !dbg !14
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %219 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 12>, !dbg !14
  store <1 x float> %219, ptr addrspace(3) %203, align 4, !dbg !14
  %220 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 13>, !dbg !14
  store <1 x float> %220, ptr addrspace(3) %205, align 4, !dbg !14
  %221 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 14>, !dbg !14
  store <1 x float> %221, ptr addrspace(3) %207, align 4, !dbg !14
  %222 = shufflevector <16 x float> %199, <16 x float> poison, <1 x i32> <i32 15>, !dbg !14
  store <1 x float> %222, ptr addrspace(3) %209, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %223 = load float, ptr addrspace(3) %211, align 16, !dbg !14
  %224 = load float, ptr addrspace(3) %213, align 4, !dbg !14
  %225 = load float, ptr addrspace(3) %215, align 8, !dbg !14
  %226 = load float, ptr addrspace(3) %217, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %227 = fsub float %192, %191, !dbg !38
  %228 = fadd float %212, %214, !dbg !42
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !43
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %228) #3, !dbg !44
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !45
  %232 = fmul float %227, %231, !dbg !46
  %233 = fadd float %191, %232, !dbg !47
  %shift = shufflevector <16 x float> %199, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %234 = fadd <16 x float> %199, %shift, !dbg !48
  %235 = extractelement <16 x float> %234, i64 0, !dbg !48
  %236 = fmul float %227, %227, !dbg !49
  %237 = fmul float %236, %212, !dbg !50
  %238 = fmul float %237, %231, !dbg !51
  %239 = fadd float %235, %238, !dbg !52
  %240 = fsub float %193, %233, !dbg !38
  %241 = fadd float %216, %228, !dbg !42
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !43
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %241) #3, !dbg !44
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !45
  %245 = fmul float %244, %240, !dbg !46
  %246 = fadd float %233, %245, !dbg !47
  %247 = extractelement <16 x float> %199, i64 2, !dbg !48
  %248 = fadd float %247, %239, !dbg !48
  %249 = fmul float %240, %240, !dbg !49
  %250 = fmul float %228, %249, !dbg !50
  %251 = fmul float %244, %250, !dbg !51
  %252 = fadd float %248, %251, !dbg !52
  %253 = fsub float %194, %246, !dbg !38
  %254 = fadd float %218, %241, !dbg !42
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !43
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %254) #3, !dbg !44
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !45
  %258 = fmul float %257, %253, !dbg !46
  %259 = fadd float %246, %258, !dbg !47
  %260 = extractelement <16 x float> %199, i64 3, !dbg !48
  %261 = fadd float %260, %252, !dbg !48
  %262 = fmul float %253, %253, !dbg !49
  %263 = fmul float %241, %262, !dbg !50
  %264 = fmul float %257, %263, !dbg !51
  %265 = fadd float %261, %264, !dbg !52
  %266 = fsub float %195, %259, !dbg !38
  %267 = fadd float %254, %223, !dbg !42
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !43
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %267) #3, !dbg !44
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !45
  %271 = fmul float %270, %266, !dbg !46
  %272 = fadd float %259, %271, !dbg !47
  %273 = extractelement <16 x float> %199, i64 4, !dbg !48
  %274 = fadd float %273, %265, !dbg !48
  %275 = fmul float %266, %266, !dbg !49
  %276 = fmul float %254, %275, !dbg !50
  %277 = fmul float %270, %276, !dbg !51
  %278 = fadd float %274, %277, !dbg !52
  %279 = fsub float %196, %272, !dbg !38
  %280 = fadd float %224, %267, !dbg !42
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !43
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %280) #3, !dbg !44
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !45
  %284 = fmul float %283, %279, !dbg !46
  %285 = fadd float %272, %284, !dbg !47
  %286 = extractelement <16 x float> %199, i64 5, !dbg !48
  %287 = fadd float %286, %278, !dbg !48
  %288 = fmul float %279, %279, !dbg !49
  %289 = fmul float %267, %288, !dbg !50
  %290 = fmul float %283, %289, !dbg !51
  %291 = fadd float %287, %290, !dbg !52
  %292 = fsub float %197, %285, !dbg !38
  %293 = fadd float %225, %280, !dbg !42
  %294 = fcmp oeq float %293, 0.000000e+00, !dbg !43
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %293) #3, !dbg !44
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !45
  %297 = fmul float %296, %292, !dbg !46
  %298 = fadd float %285, %297, !dbg !47
  %299 = extractelement <16 x float> %199, i64 6, !dbg !48
  %300 = fadd float %299, %291, !dbg !48
  %301 = fmul float %292, %292, !dbg !49
  %302 = fmul float %280, %301, !dbg !50
  %303 = fmul float %296, %302, !dbg !51
  %304 = fadd float %300, %303, !dbg !52
  %305 = fsub float %198, %298, !dbg !38
  %306 = fadd float %226, %293, !dbg !42
  %307 = fcmp oeq float %306, 0.000000e+00, !dbg !43
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %306) #3, !dbg !44
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !45
  %310 = fmul float %309, %305, !dbg !46
  %311 = fadd float %298, %310, !dbg !47
  %312 = extractelement <16 x float> %199, i64 7, !dbg !48
  %313 = fadd float %312, %304, !dbg !48
  %314 = fmul float %305, %305, !dbg !49
  %315 = fmul float %293, %314, !dbg !50
  %316 = fmul float %309, %315, !dbg !51
  %317 = fadd float %313, %316, !dbg !52
  %318 = bitcast float %311 to i32, !dbg !36
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 16, i32 31), !dbg !36
  %320 = bitcast i32 %319 to float, !dbg !36
  %321 = bitcast float %317 to i32, !dbg !36
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 16, i32 31), !dbg !36
  %323 = bitcast i32 %322 to float, !dbg !36
  %324 = bitcast float %306 to i32, !dbg !36
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 16, i32 31), !dbg !36
  %326 = bitcast i32 %325 to float, !dbg !36
  %327 = fsub float %320, %311, !dbg !38
  %328 = fadd float %306, %326, !dbg !42
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !43
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float %328) #3, !dbg !44
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !45
  %332 = fmul float %331, %327, !dbg !46
  %333 = fadd float %311, %332, !dbg !47
  %334 = fadd float %317, %323, !dbg !48
  %335 = fmul float %327, %327, !dbg !49
  %336 = fmul float %306, %335, !dbg !50
  %337 = fmul float %331, %336, !dbg !51
  %338 = fadd float %334, %337, !dbg !52
  %339 = bitcast float %333 to i32, !dbg !36
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 8, i32 31), !dbg !36
  %341 = bitcast i32 %340 to float, !dbg !36
  %342 = bitcast float %338 to i32, !dbg !36
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 8, i32 31), !dbg !36
  %344 = bitcast i32 %343 to float, !dbg !36
  %345 = bitcast float %328 to i32, !dbg !36
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 8, i32 31), !dbg !36
  %347 = bitcast i32 %346 to float, !dbg !36
  %348 = fsub float %341, %333, !dbg !38
  %349 = fadd float %328, %347, !dbg !42
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !43
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #3, !dbg !44
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !45
  %353 = fmul float %352, %348, !dbg !46
  %354 = fadd float %333, %353, !dbg !47
  %355 = fadd float %338, %344, !dbg !48
  %356 = fmul float %348, %348, !dbg !49
  %357 = fmul float %328, %356, !dbg !50
  %358 = fmul float %352, %357, !dbg !51
  %359 = fadd float %355, %358, !dbg !52
  %360 = bitcast float %354 to i32, !dbg !36
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !36
  %362 = bitcast i32 %361 to float, !dbg !36
  %363 = bitcast float %359 to i32, !dbg !36
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !36
  %365 = bitcast i32 %364 to float, !dbg !36
  %366 = bitcast float %349 to i32, !dbg !36
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !36
  %368 = bitcast i32 %367 to float, !dbg !36
  %369 = fsub float %362, %354, !dbg !38
  %370 = fadd float %349, %368, !dbg !42
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !43
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #3, !dbg !44
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !45
  %374 = fmul float %373, %369, !dbg !46
  %375 = fadd float %354, %374, !dbg !47
  %376 = fadd float %359, %365, !dbg !48
  %377 = fmul float %369, %369, !dbg !49
  %378 = fmul float %349, %377, !dbg !50
  %379 = fmul float %373, %378, !dbg !51
  %380 = fadd float %376, %379, !dbg !52
  %381 = bitcast float %375 to i32, !dbg !36
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !36
  %383 = bitcast i32 %382 to float, !dbg !36
  %384 = bitcast float %380 to i32, !dbg !36
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !36
  %386 = bitcast i32 %385 to float, !dbg !36
  %387 = bitcast float %370 to i32, !dbg !36
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 2, i32 31), !dbg !36
  %389 = bitcast i32 %388 to float, !dbg !36
  %390 = fsub float %383, %375, !dbg !38
  %391 = fadd float %370, %389, !dbg !42
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !43
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %391) #3, !dbg !44
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !45
  %395 = fmul float %394, %390, !dbg !46
  %396 = fadd float %375, %395, !dbg !47
  %397 = fadd float %380, %386, !dbg !48
  %398 = fmul float %390, %390, !dbg !49
  %399 = fmul float %370, %398, !dbg !50
  %400 = fmul float %394, %399, !dbg !51
  %401 = fadd float %397, %400, !dbg !52
  %402 = bitcast float %396 to i32, !dbg !36
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !36
  %404 = bitcast i32 %403 to float, !dbg !36
  %405 = bitcast float %401 to i32, !dbg !36
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 1, i32 31), !dbg !36
  %407 = bitcast i32 %406 to float, !dbg !36
  %408 = bitcast float %391 to i32, !dbg !36
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 1, i32 31), !dbg !36
  %410 = bitcast i32 %409 to float, !dbg !36
  %411 = fsub float %404, %396, !dbg !38
  %412 = fadd float %391, %410, !dbg !42
  %413 = fcmp oeq float %412, 0.000000e+00, !dbg !43
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %410, float %412) #3, !dbg !44
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !45
  %416 = fmul float %415, %411, !dbg !46
  %417 = fadd float %396, %416, !dbg !47
  %418 = fadd float %401, %407, !dbg !48
  %419 = fmul float %411, %411, !dbg !49
  %420 = fmul float %391, %419, !dbg !50
  %421 = fmul float %415, %420, !dbg !51
  %422 = fadd float %418, %421, !dbg !52
  %423 = icmp eq i32 %202, 0, !dbg !36
  %424 = zext nneg i32 %201 to i64, !dbg !36
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i64 %424, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, float %417, i1 %423) #3, !dbg !36
  %426 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %424, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, float %422, i1 %423) #3, !dbg !36
  %427 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %424, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, float %412, i1 %423) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %428 = icmp slt i32 %8, 8, !dbg !36
  %429 = sext i32 %8 to i64, !dbg !36
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i64 %429, !dbg !36
  %431 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %430, i1 %428) #3, !dbg !36
  %432 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %429, !dbg !36
  %433 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %432, i1 %428) #3, !dbg !36
  %434 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %429, !dbg !36
  %435 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %434, i1 %428) #3, !dbg !36
  %436 = bitcast float %431 to i32, !dbg !36
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 4, i32 31), !dbg !36
  %438 = bitcast i32 %437 to float, !dbg !36
  %439 = bitcast float %433 to i32, !dbg !36
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 4, i32 31), !dbg !36
  %441 = bitcast i32 %440 to float, !dbg !36
  %442 = bitcast float %435 to i32, !dbg !36
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 4, i32 31), !dbg !36
  %444 = bitcast i32 %443 to float, !dbg !36
  %445 = fsub float %438, %431, !dbg !38
  %446 = fadd float %435, %444, !dbg !42
  %447 = fcmp oeq float %446, 0.000000e+00, !dbg !43
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %444, float %446) #3, !dbg !44
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !45
  %450 = fmul float %445, %449, !dbg !46
  %451 = fadd float %431, %450, !dbg !47
  %452 = fadd float %433, %441, !dbg !48
  %453 = fmul float %445, %445, !dbg !49
  %454 = fmul float %435, %453, !dbg !50
  %455 = fmul float %454, %449, !dbg !51
  %456 = fadd float %452, %455, !dbg !52
  %457 = bitcast float %451 to i32, !dbg !36
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 2, i32 31), !dbg !36
  %459 = bitcast i32 %458 to float, !dbg !36
  %460 = bitcast float %456 to i32, !dbg !36
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 2, i32 31), !dbg !36
  %462 = bitcast i32 %461 to float, !dbg !36
  %463 = bitcast float %446 to i32, !dbg !36
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 2, i32 31), !dbg !36
  %465 = bitcast i32 %464 to float, !dbg !36
  %466 = fsub float %459, %451, !dbg !38
  %467 = fadd float %446, %465, !dbg !42
  %468 = fcmp oeq float %467, 0.000000e+00, !dbg !43
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %465, float %467) #3, !dbg !44
  %470 = select i1 %468, float 0.000000e+00, float %469, !dbg !45
  %471 = fmul float %466, %470, !dbg !46
  %472 = fadd float %451, %471, !dbg !47
  %473 = fadd float %456, %462, !dbg !48
  %474 = fmul float %466, %466, !dbg !49
  %475 = fmul float %446, %474, !dbg !50
  %476 = fmul float %470, %475, !dbg !51
  %477 = fadd float %473, %476, !dbg !52
  %478 = bitcast float %472 to i32, !dbg !36
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 1, i32 31), !dbg !36
  %480 = bitcast i32 %479 to float, !dbg !36
  %481 = bitcast float %477 to i32, !dbg !36
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 1, i32 31), !dbg !36
  %483 = bitcast i32 %482 to float, !dbg !36
  %484 = bitcast float %467 to i32, !dbg !36
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 1, i32 31), !dbg !36
  %486 = bitcast i32 %485 to float, !dbg !36
  %487 = fsub float %480, %472, !dbg !38
  %488 = fadd float %467, %486, !dbg !42
  %489 = fcmp oeq float %488, 0.000000e+00, !dbg !43
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %486, float %488) #3, !dbg !44
  %491 = select i1 %489, float 0.000000e+00, float %490, !dbg !45
  %492 = fmul float %487, %491, !dbg !46
  %493 = fadd float %472, %492, !dbg !47
  %494 = fadd float %477, %483, !dbg !48
  %495 = fmul float %487, %487, !dbg !49
  %496 = fmul float %467, %495, !dbg !50
  %497 = fmul float %491, %496, !dbg !51
  %498 = fadd float %494, %497, !dbg !52
  %499 = and i32 %8, 7, !dbg !36
  %500 = icmp eq i32 %499, 0, !dbg !36
  %501 = and i1 %428, %500, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, float %493, i1 %501) #3, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, float %498, i1 %501) #3, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, float %488, i1 %501) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %502 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !36
  %503 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %504 = insertelement <1 x float> undef, float %502, i64 0, !dbg !53
  store <1 x float> %504, ptr addrspace(3) @global_smem, align 4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %505 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %506 = insertelement <1 x float> undef, float %503, i64 0, !dbg !54
  store <1 x float> %506, ptr addrspace(3) @global_smem, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %507 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !54
  %508 = sext i32 %13 to i64, !dbg !55
  %509 = getelementptr float, ptr addrspace(1) %1, i64 %508, !dbg !55
  %510 = icmp eq i32 %urem, 0, !dbg !56
  %511 = and i1 %510, %14, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %505, ptr addrspace(1) %509, i1 %511) #3, !dbg !56
  %512 = getelementptr float, ptr addrspace(1) %2, i64 %508, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %507, ptr addrspace(1) %512, i1 %511) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cdiwu62gkovms3dph4kv6kpsie4pyaajodbz52jyxa5lkky7qu66.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/di")
!3 = !{ptr @triton__0d1d2d345de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d345de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d345de6", linkageName: "triton__0d1d2d345de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 34, column: 43, scope: !5)
!12 = !DILocation(line: 34, column: 47, scope: !5)
!13 = !DILocation(line: 34, column: 51, scope: !5)
!14 = !DILocation(line: 30, column: 36, scope: !5)
!15 = !DILocation(line: 34, column: 65, scope: !5)
!16 = !DILocation(line: 32, column: 25, scope: !5)
!17 = !DILocation(line: 31, column: 27, scope: !5)
!18 = !DILocation(line: 34, column: 40, scope: !5)
!19 = !DILocation(line: 34, column: 34, scope: !5)
!20 = !DILocation(line: 34, column: 57, scope: !5)
!21 = !DILocation(line: 34, column: 117, scope: !5)
!22 = !DILocation(line: 38, column: 62, scope: !5)
!23 = !DILocation(line: 105, column: 7, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!26 = !DILocation(line: 38, column: 51, scope: !24)
!27 = !DILocation(line: 111, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 110, column: 24, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 112, column: 34, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 112, column: 26, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 113, column: 39, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 113, column: 31, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 113, column: 22, scope: !24, inlinedAt: !26)
!34 = !DILocation(line: 40, column: 60, scope: !5)
!35 = !DILocation(line: 41, column: 56, scope: !5)
!36 = !DILocation(line: 131, column: 46, scope: !24, inlinedAt: !37)
!37 = !DILocation(line: 44, column: 41, scope: !24)
!38 = !DILocation(line: 119, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!40 = !DILocation(line: 131, column: 46, scope: !39, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 41, scope: !39)
!42 = !DILocation(line: 120, column: 28, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 39, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 121, column: 60, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 121, column: 49, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 123, column: 25, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 123, column: 17, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 124, column: 15, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 124, column: 30, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 124, column: 38, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 124, column: 49, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 124, column: 22, scope: !39, inlinedAt: !40)
!53 = !DILocation(line: 46, column: 20, scope: !5)
!54 = !DILocation(line: 47, column: 20, scope: !5)
!55 = !DILocation(line: 49, column: 25, scope: !5)
!56 = !DILocation(line: 49, column: 36, scope: !5)
!57 = !DILocation(line: 50, column: 25, scope: !5)
!58 = !DILocation(line: 50, column: 36, scope: !5)
!59 = !DILocation(line: 50, column: 4, scope: !5)
