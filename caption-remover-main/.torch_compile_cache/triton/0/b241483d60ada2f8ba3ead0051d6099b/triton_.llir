; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 127, !dbg !8
  %11 = shl nuw nsw i32 %10, 3, !dbg !8
  %12 = or i32 %10, 128, !dbg !8
  %13 = or i32 %10, 256, !dbg !8
  %14 = or i32 %10, 384, !dbg !8
  %15 = or i32 %10, 512, !dbg !8
  %16 = or i32 %10, 640, !dbg !8
  %17 = or i32 %10, 768, !dbg !8
  %18 = or i32 %10, 896, !dbg !8
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %21 = add i32 %20, 1, !dbg !11
  %22 = shl i32 %19, 10, !dbg !12
  %23 = mul i32 %22, %21, !dbg !13
  %24 = or i32 %23, %11, !dbg !14
  %25 = or i32 %23, %10, !dbg !14
  %26 = or i32 %23, %12, !dbg !14
  %27 = or i32 %23, %13, !dbg !14
  %28 = or i32 %23, %14, !dbg !14
  %29 = or i32 %23, %15, !dbg !14
  %30 = or i32 %23, %16, !dbg !14
  %31 = or i32 %23, %17, !dbg !14
  %32 = or i32 %23, %18, !dbg !14
  %33 = icmp slt i32 %24, 7040, !dbg !15
  %34 = icmp slt i32 %25, 7040, !dbg !15
  %35 = icmp slt i32 %26, 7040, !dbg !15
  %36 = icmp slt i32 %27, 7040, !dbg !15
  %37 = icmp slt i32 %28, 7040, !dbg !15
  %38 = icmp slt i32 %29, 7040, !dbg !15
  %39 = icmp slt i32 %30, 7040, !dbg !15
  %40 = icmp slt i32 %31, 7040, !dbg !15
  %41 = icmp slt i32 %32, 7040, !dbg !15
  %42 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !16
  %43 = icmp slt i32 %42, %7, !dbg !17
  %44 = srem i32 %24, 320, !dbg !18
  %45 = mul i32 %42, 7040, !dbg !19
  %46 = add i32 %24, %45, !dbg !20
  %47 = sext i32 %46 to i64, !dbg !21
  %48 = getelementptr half, ptr addrspace(1) %0, i64 %47, !dbg !21
  %49 = and i1 %43, %33, !dbg !22
  %50 = and i1 %43, %34, !dbg !22
  %51 = and i1 %43, %35, !dbg !22
  %52 = and i1 %43, %36, !dbg !22
  %53 = and i1 %43, %37, !dbg !22
  %54 = and i1 %43, %38, !dbg !22
  %55 = and i1 %43, %39, !dbg !22
  %56 = and i1 %43, %40, !dbg !22
  %57 = and i1 %43, %41, !dbg !22
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %49) #2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !23
  %63 = sext i32 %44 to i64, !dbg !24
  %64 = getelementptr half, ptr addrspace(1) %1, i64 %63, !dbg !24
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %33) #2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !25
  %70 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !23
  %71 = insertelement <2 x i32> %70, i32 %66, i64 1, !dbg !23
  %72 = trunc <2 x i32> %71 to <2 x i16>, !dbg !23
  %73 = bitcast <2 x i16> %72 to <2 x half>, !dbg !23
  %74 = fpext <2 x half> %73 to <2 x float>, !dbg !26
  %75 = lshr <2 x i32> %71, <i32 16, i32 16>, !dbg !23
  %76 = trunc <2 x i32> %75 to <2 x i16>, !dbg !23
  %77 = bitcast <2 x i16> %76 to <2 x half>, !dbg !23
  %78 = fpext <2 x half> %77 to <2 x float>, !dbg !26
  %79 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !23
  %80 = insertelement <2 x i32> %79, i32 %67, i64 1, !dbg !23
  %81 = trunc <2 x i32> %80 to <2 x i16>, !dbg !23
  %82 = bitcast <2 x i16> %81 to <2 x half>, !dbg !23
  %83 = fpext <2 x half> %82 to <2 x float>, !dbg !26
  %84 = lshr <2 x i32> %80, <i32 16, i32 16>, !dbg !23
  %85 = trunc <2 x i32> %84 to <2 x i16>, !dbg !23
  %86 = bitcast <2 x i16> %85 to <2 x half>, !dbg !23
  %87 = fpext <2 x half> %86 to <2 x float>, !dbg !26
  %88 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !23
  %89 = insertelement <2 x i32> %88, i32 %68, i64 1, !dbg !23
  %90 = trunc <2 x i32> %89 to <2 x i16>, !dbg !23
  %91 = bitcast <2 x i16> %90 to <2 x half>, !dbg !23
  %92 = fpext <2 x half> %91 to <2 x float>, !dbg !26
  %93 = lshr <2 x i32> %89, <i32 16, i32 16>, !dbg !23
  %94 = trunc <2 x i32> %93 to <2 x i16>, !dbg !23
  %95 = bitcast <2 x i16> %94 to <2 x half>, !dbg !23
  %96 = fpext <2 x half> %95 to <2 x float>, !dbg !26
  %97 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !23
  %98 = insertelement <2 x i32> %97, i32 %69, i64 1, !dbg !23
  %99 = trunc <2 x i32> %98 to <2 x i16>, !dbg !23
  %100 = bitcast <2 x i16> %99 to <2 x half>, !dbg !23
  %101 = fpext <2 x half> %100 to <2 x float>, !dbg !26
  %102 = lshr <2 x i32> %98, <i32 16, i32 16>, !dbg !23
  %103 = trunc <2 x i32> %102 to <2 x i16>, !dbg !23
  %104 = bitcast <2 x i16> %103 to <2 x half>, !dbg !23
  %105 = fpext <2 x half> %104 to <2 x float>, !dbg !26
  %106 = mul i32 %5, %4, !dbg !27
  %107 = mul i32 %25, %106, !dbg !28
  %108 = mul i32 %26, %106, !dbg !28
  %109 = mul i32 %27, %106, !dbg !28
  %110 = mul i32 %28, %106, !dbg !28
  %111 = mul i32 %29, %106, !dbg !28
  %112 = mul i32 %30, %106, !dbg !28
  %113 = mul i32 %31, %106, !dbg !28
  %114 = mul i32 %32, %106, !dbg !28
  %115 = add i32 %107, %42, !dbg !29
  %116 = add i32 %108, %42, !dbg !29
  %117 = add i32 %109, %42, !dbg !29
  %118 = add i32 %110, %42, !dbg !29
  %119 = add i32 %111, %42, !dbg !29
  %120 = add i32 %112, %42, !dbg !29
  %121 = add i32 %113, %42, !dbg !29
  %122 = add i32 %114, %42, !dbg !29
  %123 = sext i32 %115 to i64, !dbg !30
  %124 = getelementptr half, ptr addrspace(1) %2, i64 %123, !dbg !30
  %125 = sext i32 %116 to i64, !dbg !30
  %126 = getelementptr half, ptr addrspace(1) %2, i64 %125, !dbg !30
  %127 = sext i32 %117 to i64, !dbg !30
  %128 = getelementptr half, ptr addrspace(1) %2, i64 %127, !dbg !30
  %129 = sext i32 %118 to i64, !dbg !30
  %130 = getelementptr half, ptr addrspace(1) %2, i64 %129, !dbg !30
  %131 = sext i32 %119 to i64, !dbg !30
  %132 = getelementptr half, ptr addrspace(1) %2, i64 %131, !dbg !30
  %133 = sext i32 %120 to i64, !dbg !30
  %134 = getelementptr half, ptr addrspace(1) %2, i64 %133, !dbg !30
  %135 = sext i32 %121 to i64, !dbg !30
  %136 = getelementptr half, ptr addrspace(1) %2, i64 %135, !dbg !30
  %137 = sext i32 %122 to i64, !dbg !30
  %138 = getelementptr half, ptr addrspace(1) %2, i64 %137, !dbg !30
  %139 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %124, i1 %50) #2, !dbg !31
  %140 = bitcast i16 %139 to half, !dbg !31
  %141 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %126, i1 %51) #2, !dbg !31
  %142 = bitcast i16 %141 to half, !dbg !31
  %143 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %128, i1 %52) #2, !dbg !31
  %144 = bitcast i16 %143 to half, !dbg !31
  %145 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %130, i1 %53) #2, !dbg !31
  %146 = bitcast i16 %145 to half, !dbg !31
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %132, i1 %54) #2, !dbg !31
  %148 = bitcast i16 %147 to half, !dbg !31
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %134, i1 %55) #2, !dbg !31
  %150 = bitcast i16 %149 to half, !dbg !31
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %136, i1 %56) #2, !dbg !31
  %152 = bitcast i16 %151 to half, !dbg !31
  %153 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %138, i1 %57) #2, !dbg !31
  %154 = bitcast i16 %153 to half, !dbg !31
  %155 = fpext half %140 to float, !dbg !32
  %156 = fpext half %142 to float, !dbg !32
  %157 = fpext half %144 to float, !dbg !32
  %158 = fpext half %146 to float, !dbg !32
  %159 = fpext half %148 to float, !dbg !32
  %160 = fpext half %150 to float, !dbg !32
  %161 = fpext half %152 to float, !dbg !32
  %162 = fpext half %154 to float, !dbg !32
  %shift = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %163 = fadd <2 x float> %shift, %74, !dbg !33
  %shift8 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %164 = fadd <2 x float> %shift8, %78, !dbg !33
  %shift9 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %165 = fadd <2 x float> %shift9, %83, !dbg !33
  %shift10 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %166 = fadd <2 x float> %shift10, %87, !dbg !33
  %shift11 = shufflevector <2 x float> %92, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %167 = fadd <2 x float> %shift11, %92, !dbg !33
  %shift12 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %168 = fadd <2 x float> %shift12, %96, !dbg !33
  %shift13 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %169 = fadd <2 x float> %shift13, %101, !dbg !33
  %shift14 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %170 = fadd <2 x float> %shift14, %105, !dbg !33
  %171 = shl nuw nsw i32 %10, 4, !dbg !33
  %172 = zext nneg i32 %171 to i64, !dbg !33
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %172, !dbg !33
  %174 = shufflevector <2 x float> %163, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %174, ptr addrspace(3) %173, align 4, !dbg !33
  %175 = or i32 %171, 2, !dbg !33
  %176 = zext nneg i32 %175 to i64, !dbg !33
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !33
  %178 = shufflevector <2 x float> %164, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %178, ptr addrspace(3) %177, align 4, !dbg !33
  %179 = or i32 %171, 4, !dbg !33
  %180 = zext nneg i32 %179 to i64, !dbg !33
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i64 %180, !dbg !33
  %182 = shufflevector <2 x float> %165, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %182, ptr addrspace(3) %181, align 4, !dbg !33
  %183 = or i32 %171, 6, !dbg !33
  %184 = zext nneg i32 %183 to i64, !dbg !33
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184, !dbg !33
  %186 = shufflevector <2 x float> %166, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %186, ptr addrspace(3) %185, align 4, !dbg !33
  %187 = or i32 %171, 8, !dbg !33
  %188 = zext nneg i32 %187 to i64, !dbg !33
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i64 %188, !dbg !33
  %190 = shufflevector <2 x float> %167, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %190, ptr addrspace(3) %189, align 4, !dbg !33
  %191 = or i32 %171, 10, !dbg !33
  %192 = zext nneg i32 %191 to i64, !dbg !33
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192, !dbg !33
  %194 = shufflevector <2 x float> %168, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %194, ptr addrspace(3) %193, align 4, !dbg !33
  %195 = or i32 %171, 12, !dbg !33
  %196 = zext nneg i32 %195 to i64, !dbg !33
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196, !dbg !33
  %198 = shufflevector <2 x float> %169, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %198, ptr addrspace(3) %197, align 4, !dbg !33
  %199 = or i32 %171, 14, !dbg !33
  %200 = zext nneg i32 %199 to i64, !dbg !33
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i64 %200, !dbg !33
  %202 = shufflevector <2 x float> %170, <2 x float> undef, <1 x i32> zeroinitializer, !dbg !33
  store <1 x float> %202, ptr addrspace(3) %201, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %203 = shl nuw nsw i32 %10, 1, !dbg !33
  %204 = zext nneg i32 %203 to i64, !dbg !33
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !33
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !33
  %207 = shl nuw nsw i32 %12, 1, !dbg !33
  %208 = zext nneg i32 %207 to i64, !dbg !33
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i64 %208, !dbg !33
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !33
  %211 = shl nuw nsw i32 %13, 1, !dbg !33
  %212 = zext nneg i32 %211 to i64, !dbg !33
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i64 %212, !dbg !33
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !33
  %215 = shl nuw nsw i32 %14, 1, !dbg !33
  %216 = zext nneg i32 %215 to i64, !dbg !33
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i64 %216, !dbg !33
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !33
  %219 = shl nuw nsw i32 %15, 1, !dbg !33
  %220 = zext nneg i32 %219 to i64, !dbg !33
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !33
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !33
  %223 = shl nuw nsw i32 %16, 1, !dbg !33
  %224 = zext nneg i32 %223 to i64, !dbg !33
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i64 %224, !dbg !33
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !33
  %227 = shl nuw nsw i32 %17, 1, !dbg !33
  %228 = zext nneg i32 %227 to i64, !dbg !33
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i64 %228, !dbg !33
  %230 = load float, ptr addrspace(3) %229, align 4, !dbg !33
  %231 = shl nuw nsw i32 %18, 1, !dbg !33
  %232 = zext nneg i32 %231 to i64, !dbg !33
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i64 %232, !dbg !33
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !33
  %235 = fadd float %206, %155, !dbg !34
  %236 = fadd float %210, %156, !dbg !34
  %237 = fadd float %214, %157, !dbg !34
  %238 = fadd float %218, %158, !dbg !34
  %239 = fadd float %222, %159, !dbg !34
  %240 = fadd float %226, %160, !dbg !34
  %241 = fadd float %230, %161, !dbg !34
  %242 = fadd float %234, %162, !dbg !34
  %243 = getelementptr half, ptr addrspace(1) %3, i64 %123, !dbg !35
  %244 = getelementptr half, ptr addrspace(1) %3, i64 %125, !dbg !35
  %245 = getelementptr half, ptr addrspace(1) %3, i64 %127, !dbg !35
  %246 = getelementptr half, ptr addrspace(1) %3, i64 %129, !dbg !35
  %247 = getelementptr half, ptr addrspace(1) %3, i64 %131, !dbg !35
  %248 = getelementptr half, ptr addrspace(1) %3, i64 %133, !dbg !35
  %249 = getelementptr half, ptr addrspace(1) %3, i64 %135, !dbg !35
  %250 = getelementptr half, ptr addrspace(1) %3, i64 %137, !dbg !35
  %251 = fptrunc float %235 to half, !dbg !36
  %252 = fptrunc float %236 to half, !dbg !36
  %253 = fptrunc float %237 to half, !dbg !36
  %254 = fptrunc float %238 to half, !dbg !36
  %255 = fptrunc float %239 to half, !dbg !36
  %256 = fptrunc float %240 to half, !dbg !36
  %257 = fptrunc float %241 to half, !dbg !36
  %258 = fptrunc float %242 to half, !dbg !36
  %259 = bitcast half %251 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %259, ptr addrspace(1) %243, i1 %50) #2, !dbg !36
  %260 = bitcast half %252 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %260, ptr addrspace(1) %244, i1 %51) #2, !dbg !36
  %261 = bitcast half %253 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %261, ptr addrspace(1) %245, i1 %52) #2, !dbg !36
  %262 = bitcast half %254 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %262, ptr addrspace(1) %246, i1 %53) #2, !dbg !36
  %263 = bitcast half %255 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %263, ptr addrspace(1) %247, i1 %54) #2, !dbg !36
  %264 = bitcast half %256 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %264, ptr addrspace(1) %248, i1 %55) #2, !dbg !36
  %265 = bitcast half %257 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %265, ptr addrspace(1) %249, i1 %56) #2, !dbg !36
  %266 = bitcast half %258 to i16, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %266, ptr addrspace(1) %250, i1 %57) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvnkzziuaamxderstgk37kmqtpw6ts5oyjn2wokngygz3uqzhmby.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/vn")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 22, column: 48, scope: !5)
!11 = !DILocation(line: 22, column: 53, scope: !5)
!12 = !DILocation(line: 22, column: 34, scope: !5)
!13 = !DILocation(line: 22, column: 58, scope: !5)
!14 = !DILocation(line: 23, column: 23, scope: !5)
!15 = !DILocation(line: 24, column: 21, scope: !5)
!16 = !DILocation(line: 25, column: 28, scope: !5)
!17 = !DILocation(line: 27, column: 21, scope: !5)
!18 = !DILocation(line: 30, column: 18, scope: !5)
!19 = !DILocation(line: 31, column: 41, scope: !5)
!20 = !DILocation(line: 31, column: 36, scope: !5)
!21 = !DILocation(line: 31, column: 30, scope: !5)
!22 = !DILocation(line: 31, column: 55, scope: !5)
!23 = !DILocation(line: 31, column: 47, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 35, scope: !5)
!26 = !DILocation(line: 31, column: 95, scope: !5)
!27 = !DILocation(line: 33, column: 40, scope: !5)
!28 = !DILocation(line: 33, column: 44, scope: !5)
!29 = !DILocation(line: 33, column: 36, scope: !5)
!30 = !DILocation(line: 33, column: 30, scope: !5)
!31 = !DILocation(line: 33, column: 50, scope: !5)
!32 = !DILocation(line: 33, column: 98, scope: !5)
!33 = !DILocation(line: 34, column: 18, scope: !5)
!34 = !DILocation(line: 35, column: 18, scope: !5)
!35 = !DILocation(line: 36, column: 25, scope: !5)
!36 = !DILocation(line: 36, column: 51, scope: !5)
!37 = !DILocation(line: 36, column: 4, scope: !5)
