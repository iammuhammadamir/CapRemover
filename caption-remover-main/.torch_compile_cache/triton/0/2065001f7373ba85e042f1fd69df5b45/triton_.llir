; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = shl nuw nsw i32 %8, 3, !dbg !8
  %10 = or i32 %8, 128, !dbg !8
  %11 = or i32 %8, 256, !dbg !8
  %12 = or i32 %8, 384, !dbg !8
  %13 = or i32 %8, 512, !dbg !8
  %14 = or i32 %8, 640, !dbg !8
  %15 = or i32 %8, 768, !dbg !8
  %16 = or i32 %8, 896, !dbg !8
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %19 = add i32 %18, 1, !dbg !11
  %20 = mul i32 %19, %17, !dbg !12
  %21 = icmp slt i32 %20, 4048, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 10, !dbg !15
  %24 = or i32 %23, %9, !dbg !16
  %25 = or i32 %23, %8, !dbg !16
  %26 = or i32 %23, %10, !dbg !16
  %27 = or i32 %23, %11, !dbg !16
  %28 = or i32 %23, %12, !dbg !16
  %29 = or i32 %23, %13, !dbg !16
  %30 = or i32 %23, %14, !dbg !16
  %31 = or i32 %23, %15, !dbg !16
  %32 = or i32 %23, %16, !dbg !16
  %33 = icmp slt i32 %24, 1280, !dbg !17
  %34 = icmp slt i32 %25, 1280, !dbg !17
  %35 = icmp slt i32 %26, 1280, !dbg !17
  %36 = icmp slt i32 %27, 1280, !dbg !17
  %37 = icmp slt i32 %28, 1280, !dbg !17
  %38 = icmp slt i32 %29, 1280, !dbg !17
  %39 = icmp slt i32 %30, 1280, !dbg !17
  %40 = icmp slt i32 %31, 1280, !dbg !17
  %41 = icmp slt i32 %32, 1280, !dbg !17
  %.frozen = freeze i32 %20
  %42 = sdiv i32 %.frozen, 184, !dbg !18
  %43 = mul i32 %42, 184
  %.decomposed = sub i32 %.frozen, %43
  %44 = mul i32 %20, 1280, !dbg !19
  %45 = add i32 %24, %44, !dbg !20
  %46 = sext i32 %45 to i64, !dbg !21
  %47 = getelementptr half, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = and i1 %21, %33, !dbg !22
  %49 = and i1 %21, %34, !dbg !22
  %50 = and i1 %21, %35, !dbg !22
  %51 = and i1 %21, %36, !dbg !22
  %52 = and i1 %21, %37, !dbg !22
  %53 = and i1 %21, %38, !dbg !22
  %54 = and i1 %21, %39, !dbg !22
  %55 = and i1 %21, %40, !dbg !22
  %56 = and i1 %21, %41, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %48) #2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !23
  %62 = sext i32 %24 to i64, !dbg !24
  %63 = getelementptr half, ptr addrspace(1) %1, i64 %62, !dbg !24
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %33) #2, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !25
  %extelt.offset4 = lshr i32 %65, 16, !dbg !25
  %69 = trunc i32 %extelt.offset4 to i16, !dbg !25
  %70 = bitcast i16 %69 to half, !dbg !25
  %extelt.offset5 = lshr i32 %66, 16, !dbg !25
  %71 = trunc i32 %extelt.offset5 to i16, !dbg !25
  %72 = bitcast i16 %71 to half, !dbg !25
  %extelt.offset6 = lshr i32 %67, 16, !dbg !25
  %73 = trunc i32 %extelt.offset6 to i16, !dbg !25
  %74 = bitcast i16 %73 to half, !dbg !25
  %extelt.offset7 = lshr i32 %68, 16, !dbg !25
  %75 = trunc i32 %extelt.offset7 to i16, !dbg !25
  %76 = bitcast i16 %75 to half, !dbg !25
  %77 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !23
  %78 = insertelement <2 x i32> %77, i32 %65, i64 1, !dbg !23
  %79 = trunc <2 x i32> %78 to <2 x i16>, !dbg !23
  %80 = bitcast <2 x i16> %79 to <2 x half>, !dbg !23
  %81 = fpext <2 x half> %80 to <2 x float>, !dbg !26
  %82 = fpext half %70 to float, !dbg !27
  %83 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !23
  %84 = insertelement <2 x i32> %83, i32 %66, i64 1, !dbg !23
  %85 = trunc <2 x i32> %84 to <2 x i16>, !dbg !23
  %86 = bitcast <2 x i16> %85 to <2 x half>, !dbg !23
  %87 = fpext <2 x half> %86 to <2 x float>, !dbg !26
  %88 = fpext half %72 to float, !dbg !27
  %89 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !23
  %90 = insertelement <2 x i32> %89, i32 %67, i64 1, !dbg !23
  %91 = trunc <2 x i32> %90 to <2 x i16>, !dbg !23
  %92 = bitcast <2 x i16> %91 to <2 x half>, !dbg !23
  %93 = fpext <2 x half> %92 to <2 x float>, !dbg !26
  %94 = fpext half %74 to float, !dbg !27
  %95 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !23
  %96 = insertelement <2 x i32> %95, i32 %68, i64 1, !dbg !23
  %97 = trunc <2 x i32> %96 to <2 x i16>, !dbg !23
  %98 = bitcast <2 x i16> %97 to <2 x half>, !dbg !23
  %99 = fpext <2 x half> %98 to <2 x float>, !dbg !26
  %100 = fpext half %76 to float, !dbg !27
  %101 = getelementptr half, ptr addrspace(1) %2, i64 %46, !dbg !28
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %48) #2, !dbg !29
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !29
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !29
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !29
  %107 = trunc i32 %103 to i16, !dbg !29
  %108 = bitcast i16 %107 to half, !dbg !29
  %109 = trunc i32 %104 to i16, !dbg !29
  %110 = bitcast i16 %109 to half, !dbg !29
  %111 = trunc i32 %105 to i16, !dbg !29
  %112 = bitcast i16 %111 to half, !dbg !29
  %113 = trunc i32 %106 to i16, !dbg !29
  %114 = bitcast i16 %113 to half, !dbg !29
  %115 = fpext half %108 to float, !dbg !30
  %116 = fpext half %110 to float, !dbg !30
  %117 = fpext half %112 to float, !dbg !30
  %118 = fpext half %114 to float, !dbg !30
  %shift = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %119 = fadd <2 x float> %shift, %81, !dbg !31
  %120 = extractelement <2 x float> %119, i64 0, !dbg !31
  %shift12 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %121 = fadd <2 x float> %shift12, %87, !dbg !31
  %122 = extractelement <2 x float> %121, i64 0, !dbg !31
  %shift13 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %123 = fadd <2 x float> %shift13, %93, !dbg !31
  %124 = extractelement <2 x float> %123, i64 0, !dbg !31
  %shift14 = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %125 = fadd <2 x float> %shift14, %99, !dbg !31
  %126 = extractelement <2 x float> %125, i64 0, !dbg !31
  %127 = fmul float %115, 1.250000e-01, !dbg !32
  %128 = insertelement <2 x i32> %77, i32 %103, i64 1, !dbg !23
  %129 = lshr <2 x i32> %128, <i32 16, i32 16>, !dbg !23
  %130 = trunc <2 x i32> %129 to <2 x i16>, !dbg !23
  %131 = bitcast <2 x i16> %130 to <2 x half>, !dbg !23
  %132 = fpext <2 x half> %131 to <2 x float>, !dbg !26
  %133 = fmul float %116, 1.250000e-01, !dbg !32
  %134 = insertelement <2 x i32> %83, i32 %104, i64 1, !dbg !23
  %135 = lshr <2 x i32> %134, <i32 16, i32 16>, !dbg !23
  %136 = trunc <2 x i32> %135 to <2 x i16>, !dbg !23
  %137 = bitcast <2 x i16> %136 to <2 x half>, !dbg !23
  %138 = fpext <2 x half> %137 to <2 x float>, !dbg !26
  %139 = fmul float %117, 1.250000e-01, !dbg !32
  %140 = insertelement <2 x i32> %89, i32 %105, i64 1, !dbg !23
  %141 = lshr <2 x i32> %140, <i32 16, i32 16>, !dbg !23
  %142 = trunc <2 x i32> %141 to <2 x i16>, !dbg !23
  %143 = bitcast <2 x i16> %142 to <2 x half>, !dbg !23
  %144 = fpext <2 x half> %143 to <2 x float>, !dbg !26
  %145 = fmul float %118, 1.250000e-01, !dbg !32
  %146 = insertelement <2 x i32> %95, i32 %106, i64 1, !dbg !23
  %147 = lshr <2 x i32> %146, <i32 16, i32 16>, !dbg !23
  %148 = trunc <2 x i32> %147 to <2 x i16>, !dbg !23
  %149 = bitcast <2 x i16> %148 to <2 x half>, !dbg !23
  %150 = fpext <2 x half> %149 to <2 x float>, !dbg !26
  %151 = fadd float %120, %127, !dbg !33
  %152 = extractelement <2 x float> %132, i64 0, !dbg !33
  %153 = fadd float %152, %82, !dbg !33
  %154 = extractelement <2 x float> %132, i64 1, !dbg !33
  %155 = fmul float %154, 1.250000e-01, !dbg !33
  %156 = fadd float %153, %155, !dbg !33
  %157 = fadd float %122, %133, !dbg !33
  %158 = extractelement <2 x float> %138, i64 0, !dbg !33
  %159 = fadd float %158, %88, !dbg !33
  %160 = extractelement <2 x float> %138, i64 1, !dbg !33
  %161 = fmul float %160, 1.250000e-01, !dbg !33
  %162 = fadd float %159, %161, !dbg !33
  %163 = fadd float %124, %139, !dbg !33
  %164 = extractelement <2 x float> %144, i64 0, !dbg !33
  %165 = fadd float %164, %94, !dbg !33
  %166 = extractelement <2 x float> %144, i64 1, !dbg !33
  %167 = fmul float %166, 1.250000e-01, !dbg !33
  %168 = fadd float %165, %167, !dbg !33
  %169 = fadd float %126, %145, !dbg !33
  %170 = extractelement <2 x float> %150, i64 0, !dbg !33
  %171 = fadd float %170, %100, !dbg !33
  %172 = extractelement <2 x float> %150, i64 1, !dbg !33
  %173 = fmul float %172, 1.250000e-01, !dbg !33
  %174 = fadd float %171, %173, !dbg !33
  %175 = mul i32 %25, 184, !dbg !34
  %176 = mul i32 %26, 184, !dbg !34
  %177 = mul i32 %27, 184, !dbg !34
  %178 = mul i32 %28, 184, !dbg !34
  %179 = mul i32 %29, 184, !dbg !34
  %180 = mul i32 %30, 184, !dbg !34
  %181 = mul i32 %31, 184, !dbg !34
  %182 = mul i32 %32, 184, !dbg !34
  %183 = mul i32 %42, 235520, !dbg !35
  %184 = add i32 %183, %.decomposed, !dbg !36
  %185 = add i32 %184, %175, !dbg !37
  %186 = add i32 %184, %176, !dbg !37
  %187 = add i32 %184, %177, !dbg !37
  %188 = add i32 %184, %178, !dbg !37
  %189 = add i32 %184, %179, !dbg !37
  %190 = add i32 %184, %180, !dbg !37
  %191 = add i32 %184, %181, !dbg !37
  %192 = add i32 %184, %182, !dbg !37
  %193 = sext i32 %185 to i64, !dbg !38
  %194 = getelementptr half, ptr addrspace(1) %3, i64 %193, !dbg !38
  %195 = sext i32 %186 to i64, !dbg !38
  %196 = getelementptr half, ptr addrspace(1) %3, i64 %195, !dbg !38
  %197 = sext i32 %187 to i64, !dbg !38
  %198 = getelementptr half, ptr addrspace(1) %3, i64 %197, !dbg !38
  %199 = sext i32 %188 to i64, !dbg !38
  %200 = getelementptr half, ptr addrspace(1) %3, i64 %199, !dbg !38
  %201 = sext i32 %189 to i64, !dbg !38
  %202 = getelementptr half, ptr addrspace(1) %3, i64 %201, !dbg !38
  %203 = sext i32 %190 to i64, !dbg !38
  %204 = getelementptr half, ptr addrspace(1) %3, i64 %203, !dbg !38
  %205 = sext i32 %191 to i64, !dbg !38
  %206 = getelementptr half, ptr addrspace(1) %3, i64 %205, !dbg !38
  %207 = sext i32 %192 to i64, !dbg !38
  %208 = getelementptr half, ptr addrspace(1) %3, i64 %207, !dbg !38
  %209 = fptrunc float %151 to half, !dbg !39
  %210 = fptrunc float %156 to half, !dbg !39
  %211 = fptrunc float %157 to half, !dbg !39
  %212 = fptrunc float %162 to half, !dbg !39
  %213 = fptrunc float %163 to half, !dbg !39
  %214 = fptrunc float %168 to half, !dbg !39
  %215 = fptrunc float %169 to half, !dbg !39
  %216 = fptrunc float %174 to half, !dbg !39
  %217 = zext nneg i32 %9 to i64, !dbg !39
  %218 = getelementptr half, ptr addrspace(3) @global_smem, i64 %217, !dbg !39
  %219 = insertelement <1 x half> undef, half %209, i64 0, !dbg !39
  store <1 x half> %219, ptr addrspace(3) %218, align 2, !dbg !39
  %220 = or i32 %9, 1, !dbg !39
  %221 = zext nneg i32 %220 to i64, !dbg !39
  %222 = getelementptr half, ptr addrspace(3) @global_smem, i64 %221, !dbg !39
  %223 = insertelement <1 x half> undef, half %210, i64 0, !dbg !39
  store <1 x half> %223, ptr addrspace(3) %222, align 2, !dbg !39
  %224 = or i32 %9, 2, !dbg !39
  %225 = zext nneg i32 %224 to i64, !dbg !39
  %226 = getelementptr half, ptr addrspace(3) @global_smem, i64 %225, !dbg !39
  %227 = insertelement <1 x half> undef, half %211, i64 0, !dbg !39
  store <1 x half> %227, ptr addrspace(3) %226, align 2, !dbg !39
  %228 = or i32 %9, 3, !dbg !39
  %229 = zext nneg i32 %228 to i64, !dbg !39
  %230 = getelementptr half, ptr addrspace(3) @global_smem, i64 %229, !dbg !39
  %231 = insertelement <1 x half> undef, half %212, i64 0, !dbg !39
  store <1 x half> %231, ptr addrspace(3) %230, align 2, !dbg !39
  %232 = or i32 %9, 4, !dbg !39
  %233 = zext nneg i32 %232 to i64, !dbg !39
  %234 = getelementptr half, ptr addrspace(3) @global_smem, i64 %233, !dbg !39
  %235 = insertelement <1 x half> undef, half %213, i64 0, !dbg !39
  store <1 x half> %235, ptr addrspace(3) %234, align 2, !dbg !39
  %236 = or i32 %9, 5, !dbg !39
  %237 = zext nneg i32 %236 to i64, !dbg !39
  %238 = getelementptr half, ptr addrspace(3) @global_smem, i64 %237, !dbg !39
  %239 = insertelement <1 x half> undef, half %214, i64 0, !dbg !39
  store <1 x half> %239, ptr addrspace(3) %238, align 2, !dbg !39
  %240 = or i32 %9, 6, !dbg !39
  %241 = zext nneg i32 %240 to i64, !dbg !39
  %242 = getelementptr half, ptr addrspace(3) @global_smem, i64 %241, !dbg !39
  %243 = insertelement <1 x half> undef, half %215, i64 0, !dbg !39
  store <1 x half> %243, ptr addrspace(3) %242, align 2, !dbg !39
  %244 = or i32 %9, 7, !dbg !39
  %245 = zext nneg i32 %244 to i64, !dbg !39
  %246 = getelementptr half, ptr addrspace(3) @global_smem, i64 %245, !dbg !39
  %247 = insertelement <1 x half> undef, half %216, i64 0, !dbg !39
  store <1 x half> %247, ptr addrspace(3) %246, align 2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %248 = zext nneg i32 %8 to i64, !dbg !39
  %249 = getelementptr half, ptr addrspace(3) @global_smem, i64 %248, !dbg !39
  %250 = load i16, ptr addrspace(3) %249, align 2, !dbg !39
  %251 = zext nneg i32 %10 to i64, !dbg !39
  %252 = getelementptr half, ptr addrspace(3) @global_smem, i64 %251, !dbg !39
  %253 = load i16, ptr addrspace(3) %252, align 2, !dbg !39
  %254 = zext nneg i32 %11 to i64, !dbg !39
  %255 = getelementptr half, ptr addrspace(3) @global_smem, i64 %254, !dbg !39
  %256 = load i16, ptr addrspace(3) %255, align 2, !dbg !39
  %257 = zext nneg i32 %12 to i64, !dbg !39
  %258 = getelementptr half, ptr addrspace(3) @global_smem, i64 %257, !dbg !39
  %259 = load i16, ptr addrspace(3) %258, align 2, !dbg !39
  %260 = zext nneg i32 %13 to i64, !dbg !39
  %261 = getelementptr half, ptr addrspace(3) @global_smem, i64 %260, !dbg !39
  %262 = load i16, ptr addrspace(3) %261, align 2, !dbg !39
  %263 = zext nneg i32 %14 to i64, !dbg !39
  %264 = getelementptr half, ptr addrspace(3) @global_smem, i64 %263, !dbg !39
  %265 = load i16, ptr addrspace(3) %264, align 2, !dbg !39
  %266 = zext nneg i32 %15 to i64, !dbg !39
  %267 = getelementptr half, ptr addrspace(3) @global_smem, i64 %266, !dbg !39
  %268 = load i16, ptr addrspace(3) %267, align 2, !dbg !39
  %269 = zext nneg i32 %16 to i64, !dbg !39
  %270 = getelementptr half, ptr addrspace(3) @global_smem, i64 %269, !dbg !39
  %271 = load i16, ptr addrspace(3) %270, align 2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %250, ptr addrspace(1) %194, i1 %49) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %253, ptr addrspace(1) %196, i1 %50) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %256, ptr addrspace(1) %198, i1 %51) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %259, ptr addrspace(1) %200, i1 %52) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %262, ptr addrspace(1) %202, i1 %53) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %265, ptr addrspace(1) %204, i1 %54) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %268, ptr addrspace(1) %206, i1 %55) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %271, ptr addrspace(1) %208, i1 %56) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chh7iszk6ffhaazzfhwqeazairgxtcdh6ogpnu4oipif47wazn2t.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hh")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 27, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 25, column: 21, scope: !5)
!14 = !DILocation(line: 26, column: 28, scope: !5)
!15 = !DILocation(line: 26, column: 33, scope: !5)
!16 = !DILocation(line: 27, column: 23, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 32, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 41, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 30, scope: !5)
!22 = !DILocation(line: 33, column: 55, scope: !5)
!23 = !DILocation(line: 33, column: 47, scope: !5)
!24 = !DILocation(line: 34, column: 30, scope: !5)
!25 = !DILocation(line: 34, column: 35, scope: !5)
!26 = !DILocation(line: 33, column: 95, scope: !5)
!27 = !DILocation(line: 34, column: 75, scope: !5)
!28 = !DILocation(line: 35, column: 30, scope: !5)
!29 = !DILocation(line: 35, column: 47, scope: !5)
!30 = !DILocation(line: 35, column: 95, scope: !5)
!31 = !DILocation(line: 36, column: 18, scope: !5)
!32 = !DILocation(line: 38, column: 18, scope: !5)
!33 = !DILocation(line: 39, column: 18, scope: !5)
!34 = !DILocation(line: 40, column: 35, scope: !5)
!35 = !DILocation(line: 40, column: 49, scope: !5)
!36 = !DILocation(line: 40, column: 31, scope: !5)
!37 = !DILocation(line: 40, column: 42, scope: !5)
!38 = !DILocation(line: 40, column: 25, scope: !5)
!39 = !DILocation(line: 40, column: 61, scope: !5)
!40 = !DILocation(line: 40, column: 4, scope: !5)
