; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = shl i32 %7, 3, !dbg !8
  %11 = and i32 %10, 24, !dbg !8
  %12 = and i32 %9, 3, !dbg !8
  %13 = lshr i32 %8, 3, !dbg !8
  %14 = shl nuw nsw i32 %12, 2, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = or i32 %15, 16, !dbg !8
  %17 = lshr i32 %8, 2, !dbg !9
  %18 = shl nuw nsw i32 %12, 3, !dbg !9
  %19 = or i32 %18, %17, !dbg !9
  %20 = shl i32 %7, 2, !dbg !9
  %21 = and i32 %20, 28, !dbg !9
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %24 = add i32 %23, 1, !dbg !12
  %25 = shl i32 %22, 5, !dbg !13
  %26 = mul i32 %25, %24, !dbg !14
  %27 = or i32 %26, %11, !dbg !15
  %28 = or i32 %26, %15, !dbg !15
  %29 = or i32 %26, %16, !dbg !15
  %30 = icmp slt i32 %27, 7040, !dbg !16
  %31 = icmp slt i32 %28, 7040, !dbg !16
  %32 = icmp slt i32 %29, 7040, !dbg !16
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %34 = shl i32 %33, 5, !dbg !18
  %35 = or i32 %34, %19, !dbg !19
  %36 = or i32 %34, %21, !dbg !19
  %37 = icmp slt i32 %35, 2700, !dbg !20
  %38 = icmp slt i32 %36, 2700, !dbg !20
  %39 = srem i32 %28, 320, !dbg !21
  %40 = srem i32 %29, 320, !dbg !21
  %41 = mul i32 %35, 7040, !dbg !22
  %42 = add i32 %41, %27, !dbg !23
  %43 = sext i32 %42 to i64, !dbg !24
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = and i1 %37, %30, !dbg !25
  %46 = and i1 %38, %31, !dbg !25
  %47 = and i1 %38, %32, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %45) #2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = trunc i32 %49 to i16, !dbg !26
  %extelt.offset = lshr i32 %49, 16, !dbg !26
  %54 = trunc i32 %extelt.offset to i16, !dbg !26
  %55 = trunc i32 %50 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %50, 16, !dbg !26
  %56 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %57 = trunc i32 %51 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %51, 16, !dbg !26
  %58 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %59 = trunc i32 %52 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %52, 16, !dbg !26
  %60 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %61 = mul nuw nsw i32 %11, 33, !dbg !27
  %62 = add nuw nsw i32 %19, %61, !dbg !27
  %63 = zext nneg i32 %62 to i64, !dbg !27
  %64 = getelementptr half, ptr addrspace(3) @global_smem, i64 %63, !dbg !27
  store i16 %53, ptr addrspace(3) %64, align 2, !dbg !27
  %65 = add nuw nsw i32 %61, 33, !dbg !27
  %66 = add nuw nsw i32 %65, %19, !dbg !27
  %67 = zext nneg i32 %66 to i64, !dbg !27
  %68 = getelementptr half, ptr addrspace(3) @global_smem, i64 %67, !dbg !27
  store i16 %54, ptr addrspace(3) %68, align 2, !dbg !27
  %69 = add nuw nsw i32 %61, 66, !dbg !27
  %70 = add nuw nsw i32 %69, %19, !dbg !27
  %71 = zext nneg i32 %70 to i64, !dbg !27
  %72 = getelementptr half, ptr addrspace(3) @global_smem, i64 %71, !dbg !27
  store i16 %55, ptr addrspace(3) %72, align 2, !dbg !27
  %73 = add nuw nsw i32 %61, 99, !dbg !27
  %74 = add nuw nsw i32 %73, %19, !dbg !27
  %75 = zext nneg i32 %74 to i64, !dbg !27
  %76 = getelementptr half, ptr addrspace(3) @global_smem, i64 %75, !dbg !27
  store i16 %56, ptr addrspace(3) %76, align 2, !dbg !27
  %77 = add nuw nsw i32 %61, 132, !dbg !27
  %78 = add nuw nsw i32 %77, %19, !dbg !27
  %79 = zext nneg i32 %78 to i64, !dbg !27
  %80 = getelementptr half, ptr addrspace(3) @global_smem, i64 %79, !dbg !27
  store i16 %57, ptr addrspace(3) %80, align 2, !dbg !27
  %81 = add nuw nsw i32 %61, 165, !dbg !27
  %82 = add nuw nsw i32 %81, %19, !dbg !27
  %83 = zext nneg i32 %82 to i64, !dbg !27
  %84 = getelementptr half, ptr addrspace(3) @global_smem, i64 %83, !dbg !27
  store i16 %58, ptr addrspace(3) %84, align 2, !dbg !27
  %85 = add nuw nsw i32 %61, 198, !dbg !27
  %86 = add nuw nsw i32 %85, %19, !dbg !27
  %87 = zext nneg i32 %86 to i64, !dbg !27
  %88 = getelementptr half, ptr addrspace(3) @global_smem, i64 %87, !dbg !27
  store i16 %59, ptr addrspace(3) %88, align 2, !dbg !27
  %89 = add nuw nsw i32 %61, 231, !dbg !27
  %90 = add nuw nsw i32 %89, %19, !dbg !27
  %91 = zext nneg i32 %90 to i64, !dbg !27
  %92 = getelementptr half, ptr addrspace(3) @global_smem, i64 %91, !dbg !27
  store i16 %60, ptr addrspace(3) %92, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %93 = mul nuw nsw i32 %15, 33, !dbg !27
  %94 = add nuw nsw i32 %93, %21, !dbg !27
  %95 = zext nneg i32 %94 to i64, !dbg !27
  %96 = getelementptr half, ptr addrspace(3) @global_smem, i64 %95, !dbg !27
  %97 = load half, ptr addrspace(3) %96, align 2, !dbg !27
  %98 = or i32 %21, 1, !dbg !27
  %99 = add nuw nsw i32 %93, %98, !dbg !27
  %100 = zext nneg i32 %99 to i64, !dbg !27
  %101 = getelementptr half, ptr addrspace(3) @global_smem, i64 %100, !dbg !27
  %102 = load half, ptr addrspace(3) %101, align 2, !dbg !27
  %103 = or i32 %21, 2, !dbg !27
  %104 = add nuw nsw i32 %93, %103, !dbg !27
  %105 = zext nneg i32 %104 to i64, !dbg !27
  %106 = getelementptr half, ptr addrspace(3) @global_smem, i64 %105, !dbg !27
  %107 = load half, ptr addrspace(3) %106, align 2, !dbg !27
  %108 = or i32 %21, 3, !dbg !27
  %109 = add nuw nsw i32 %93, %108, !dbg !27
  %110 = zext nneg i32 %109 to i64, !dbg !27
  %111 = getelementptr half, ptr addrspace(3) @global_smem, i64 %110, !dbg !27
  %112 = load half, ptr addrspace(3) %111, align 2, !dbg !27
  %113 = mul nuw nsw i32 %16, 33, !dbg !27
  %114 = add nuw nsw i32 %113, %21, !dbg !27
  %115 = zext nneg i32 %114 to i64, !dbg !27
  %116 = getelementptr half, ptr addrspace(3) @global_smem, i64 %115, !dbg !27
  %117 = load half, ptr addrspace(3) %116, align 2, !dbg !27
  %118 = add nuw nsw i32 %113, %98, !dbg !27
  %119 = zext nneg i32 %118 to i64, !dbg !27
  %120 = getelementptr half, ptr addrspace(3) @global_smem, i64 %119, !dbg !27
  %121 = load half, ptr addrspace(3) %120, align 2, !dbg !27
  %122 = add nuw nsw i32 %113, %103, !dbg !27
  %123 = zext nneg i32 %122 to i64, !dbg !27
  %124 = getelementptr half, ptr addrspace(3) @global_smem, i64 %123, !dbg !27
  %125 = load half, ptr addrspace(3) %124, align 2, !dbg !27
  %126 = add nuw nsw i32 %113, %108, !dbg !27
  %127 = zext nneg i32 %126 to i64, !dbg !27
  %128 = getelementptr half, ptr addrspace(3) @global_smem, i64 %127, !dbg !27
  %129 = load half, ptr addrspace(3) %128, align 2, !dbg !27
  %130 = sext i32 %39 to i64, !dbg !28
  %131 = getelementptr half, ptr addrspace(1) %1, i64 %130, !dbg !28
  %132 = sext i32 %40 to i64, !dbg !28
  %133 = getelementptr half, ptr addrspace(1) %1, i64 %132, !dbg !28
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %131, i1 %31) #2, !dbg !29
  %135 = bitcast i16 %134 to half, !dbg !29
  %136 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %131, i1 %31) #2, !dbg !29
  %137 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %131, i1 %31) #2, !dbg !29
  %138 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %131, i1 %31) #2, !dbg !29
  %139 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %133, i1 %32) #2, !dbg !29
  %140 = bitcast i16 %139 to half, !dbg !29
  %141 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %133, i1 %32) #2, !dbg !29
  %142 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %133, i1 %32) #2, !dbg !29
  %143 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %133, i1 %32) #2, !dbg !29
  %144 = fpext half %135 to float, !dbg !30
  %145 = fpext half %140 to float, !dbg !30
  %146 = mul i32 %28, 2700, !dbg !31
  %147 = mul i32 %29, 2700, !dbg !31
  %148 = add i32 %146, %36, !dbg !32
  %149 = add i32 %147, %36, !dbg !32
  %150 = sext i32 %148 to i64, !dbg !33
  %151 = getelementptr half, ptr addrspace(1) %2, i64 %150, !dbg !33
  %152 = sext i32 %149 to i64, !dbg !33
  %153 = getelementptr half, ptr addrspace(1) %2, i64 %152, !dbg !33
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %151, i1 %46) #2, !dbg !34
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !34
  %156 = extractvalue { i32, i32 } %154, 1, !dbg !34
  %extelt.offset4 = lshr i32 %155, 16, !dbg !34
  %extelt.offset5 = lshr i32 %156, 16, !dbg !34
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %153, i1 %47) #2, !dbg !34
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !34
  %159 = extractvalue { i32, i32 } %157, 1, !dbg !34
  %extelt.offset6 = lshr i32 %158, 16, !dbg !34
  %extelt.offset7 = lshr i32 %159, 16, !dbg !34
  %160 = getelementptr half, ptr addrspace(1) %3, i64 %150, !dbg !35
  %161 = getelementptr half, ptr addrspace(1) %3, i64 %152, !dbg !35
  %162 = insertelement <2 x half> poison, half %97, i64 0, !dbg !36
  %163 = insertelement <2 x half> %162, half %102, i64 1, !dbg !36
  %164 = fpext <2 x half> %163 to <2 x float>, !dbg !36
  %165 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !34
  %166 = insertelement <2 x i32> %165, i32 %extelt.offset4, i64 1, !dbg !34
  %167 = trunc <2 x i32> %166 to <2 x i16>, !dbg !34
  %168 = bitcast <2 x i16> %167 to <2 x half>, !dbg !34
  %169 = fpext <2 x half> %168 to <2 x float>, !dbg !37
  %170 = insertelement <2 x float> poison, float %144, i64 0, !dbg !27
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %172 = fadd <2 x float> %171, %164, !dbg !27
  %173 = fadd <2 x float> %172, %169, !dbg !38
  %174 = fptrunc <2 x float> %173 to <2 x half>, !dbg !39
  %175 = insertelement <2 x half> poison, half %107, i64 0, !dbg !36
  %176 = insertelement <2 x half> %175, half %112, i64 1, !dbg !36
  %177 = fpext <2 x half> %176 to <2 x float>, !dbg !36
  %178 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !34
  %179 = insertelement <2 x i32> %178, i32 %extelt.offset5, i64 1, !dbg !34
  %180 = trunc <2 x i32> %179 to <2 x i16>, !dbg !34
  %181 = bitcast <2 x i16> %180 to <2 x half>, !dbg !34
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !37
  %183 = fadd <2 x float> %171, %177, !dbg !27
  %184 = fadd <2 x float> %183, %182, !dbg !38
  %185 = fptrunc <2 x float> %184 to <2 x half>, !dbg !39
  %186 = insertelement <2 x half> poison, half %117, i64 0, !dbg !36
  %187 = insertelement <2 x half> %186, half %121, i64 1, !dbg !36
  %188 = fpext <2 x half> %187 to <2 x float>, !dbg !36
  %189 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !34
  %190 = insertelement <2 x i32> %189, i32 %extelt.offset6, i64 1, !dbg !34
  %191 = trunc <2 x i32> %190 to <2 x i16>, !dbg !34
  %192 = bitcast <2 x i16> %191 to <2 x half>, !dbg !34
  %193 = fpext <2 x half> %192 to <2 x float>, !dbg !37
  %194 = insertelement <2 x float> poison, float %145, i64 0, !dbg !27
  %195 = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %196 = fadd <2 x float> %195, %188, !dbg !27
  %197 = fadd <2 x float> %196, %193, !dbg !38
  %198 = fptrunc <2 x float> %197 to <2 x half>, !dbg !39
  %199 = insertelement <2 x half> poison, half %125, i64 0, !dbg !36
  %200 = insertelement <2 x half> %199, half %129, i64 1, !dbg !36
  %201 = fpext <2 x half> %200 to <2 x float>, !dbg !36
  %202 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !34
  %203 = insertelement <2 x i32> %202, i32 %extelt.offset7, i64 1, !dbg !34
  %204 = trunc <2 x i32> %203 to <2 x i16>, !dbg !34
  %205 = bitcast <2 x i16> %204 to <2 x half>, !dbg !34
  %206 = fpext <2 x half> %205 to <2 x float>, !dbg !37
  %207 = fadd <2 x float> %195, %201, !dbg !27
  %208 = fadd <2 x float> %207, %206, !dbg !38
  %209 = fptrunc <2 x float> %208 to <2 x half>, !dbg !39
  %210 = bitcast <2 x half> %174 to i32, !dbg !39
  %211 = bitcast <2 x half> %185 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %210, i32 %211, ptr addrspace(1) %160, i1 %46) #2, !dbg !39
  %212 = bitcast <2 x half> %198 to i32, !dbg !39
  %213 = bitcast <2 x half> %209 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %212, i32 %213, ptr addrspace(1) %161, i1 %47) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cx7ckqfutqse3ilr2z62el5q32t7bwenw24l2vqyqcz2dwwtd4wo.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/x7")
!3 = !{ptr @triton__0d1d2d3d4de5, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5", linkageName: "triton__0d1d2d3d4de5", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 18, scope: !5)
!22 = !DILocation(line: 32, column: 41, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 55, scope: !5)
!26 = !DILocation(line: 32, column: 47, scope: !5)
!27 = !DILocation(line: 35, column: 18, scope: !5)
!28 = !DILocation(line: 33, column: 30, scope: !5)
!29 = !DILocation(line: 33, column: 35, scope: !5)
!30 = !DILocation(line: 33, column: 75, scope: !5)
!31 = !DILocation(line: 34, column: 41, scope: !5)
!32 = !DILocation(line: 34, column: 36, scope: !5)
!33 = !DILocation(line: 34, column: 30, scope: !5)
!34 = !DILocation(line: 34, column: 47, scope: !5)
!35 = !DILocation(line: 37, column: 25, scope: !5)
!36 = !DILocation(line: 32, column: 95, scope: !5)
!37 = !DILocation(line: 34, column: 95, scope: !5)
!38 = !DILocation(line: 36, column: 18, scope: !5)
!39 = !DILocation(line: 37, column: 48, scope: !5)
!40 = !DILocation(line: 37, column: 4, scope: !5)
