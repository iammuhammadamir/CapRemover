; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8910de11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %14 = and i32 %13, 127, !dbg !10
  %15 = or i32 %14, 128, !dbg !10
  %16 = or i32 %14, 256, !dbg !10
  %17 = or i32 %14, 384, !dbg !10
  %18 = or i32 %14, 512, !dbg !10
  %19 = or i32 %14, 640, !dbg !10
  %20 = or i32 %14, 768, !dbg !10
  %21 = or i32 %14, 896, !dbg !10
  %22 = shl nuw nsw i32 %14, 3, !dbg !10
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !11
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !12
  %25 = add i32 %24, 1, !dbg !13
  %26 = shl i32 %23, 10, !dbg !14
  %27 = mul i32 %26, %25, !dbg !15
  %28 = or i32 %27, %14, !dbg !16
  %29 = or i32 %27, %15, !dbg !16
  %30 = or i32 %27, %16, !dbg !16
  %31 = or i32 %27, %17, !dbg !16
  %32 = or i32 %27, %18, !dbg !16
  %33 = or i32 %27, %19, !dbg !16
  %34 = or i32 %27, %20, !dbg !16
  %35 = or i32 %27, %21, !dbg !16
  %36 = or i32 %27, %22, !dbg !16
  %37 = icmp slt i32 %28, 14080, !dbg !17
  %38 = icmp slt i32 %29, 14080, !dbg !17
  %39 = icmp slt i32 %30, 14080, !dbg !17
  %40 = icmp slt i32 %31, 14080, !dbg !17
  %41 = icmp slt i32 %32, 14080, !dbg !17
  %42 = icmp slt i32 %33, 14080, !dbg !17
  %43 = icmp slt i32 %34, 14080, !dbg !17
  %44 = icmp slt i32 %35, 14080, !dbg !17
  %45 = icmp slt i32 %36, 14080, !dbg !17
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !18
  %47 = icmp slt i32 %46, %11, !dbg !19
  %.frozen = freeze i32 %36
  %48 = sdiv i32 %.frozen, 640, !dbg !20
  %49 = mul i32 %48, 640
  %.decomposed = sub i32 %.frozen, %49
  %50 = sdiv i32 %28, 640, !dbg !20
  %51 = sdiv i32 %29, 640, !dbg !20
  %52 = sdiv i32 %30, 640, !dbg !20
  %53 = sdiv i32 %31, 640, !dbg !20
  %54 = sdiv i32 %32, 640, !dbg !20
  %55 = sdiv i32 %33, 640, !dbg !20
  %56 = sdiv i32 %34, 640, !dbg !20
  %57 = sdiv i32 %35, 640, !dbg !20
  %58 = mul i32 %9, %8, !dbg !21
  %59 = mul i32 %28, %58, !dbg !22
  %60 = mul i32 %29, %58, !dbg !22
  %61 = mul i32 %30, %58, !dbg !22
  %62 = mul i32 %31, %58, !dbg !22
  %63 = mul i32 %32, %58, !dbg !22
  %64 = mul i32 %33, %58, !dbg !22
  %65 = mul i32 %34, %58, !dbg !22
  %66 = mul i32 %35, %58, !dbg !22
  %67 = add i32 %59, %46, !dbg !23
  %68 = add i32 %60, %46, !dbg !23
  %69 = add i32 %61, %46, !dbg !23
  %70 = add i32 %62, %46, !dbg !23
  %71 = add i32 %63, %46, !dbg !23
  %72 = add i32 %64, %46, !dbg !23
  %73 = add i32 %65, %46, !dbg !23
  %74 = add i32 %66, %46, !dbg !23
  %75 = sext i32 %67 to i64, !dbg !24
  %76 = getelementptr half, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = sext i32 %68 to i64, !dbg !24
  %78 = getelementptr half, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = sext i32 %69 to i64, !dbg !24
  %80 = getelementptr half, ptr addrspace(1) %0, i64 %79, !dbg !24
  %81 = sext i32 %70 to i64, !dbg !24
  %82 = getelementptr half, ptr addrspace(1) %0, i64 %81, !dbg !24
  %83 = sext i32 %71 to i64, !dbg !24
  %84 = getelementptr half, ptr addrspace(1) %0, i64 %83, !dbg !24
  %85 = sext i32 %72 to i64, !dbg !24
  %86 = getelementptr half, ptr addrspace(1) %0, i64 %85, !dbg !24
  %87 = sext i32 %73 to i64, !dbg !24
  %88 = getelementptr half, ptr addrspace(1) %0, i64 %87, !dbg !24
  %89 = sext i32 %74 to i64, !dbg !24
  %90 = getelementptr half, ptr addrspace(1) %0, i64 %89, !dbg !24
  %91 = and i1 %47, %37, !dbg !25
  %92 = and i1 %47, %38, !dbg !25
  %93 = and i1 %47, %39, !dbg !25
  %94 = and i1 %47, %40, !dbg !25
  %95 = and i1 %47, %41, !dbg !25
  %96 = and i1 %47, %42, !dbg !25
  %97 = and i1 %47, %43, !dbg !25
  %98 = and i1 %47, %44, !dbg !25
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %76, i1 %91) #5, !dbg !26
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %92) #5, !dbg !26
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %80, i1 %93) #5, !dbg !26
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %82, i1 %94) #5, !dbg !26
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %84, i1 %95) #5, !dbg !26
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %86, i1 %96) #5, !dbg !26
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %97) #5, !dbg !26
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %90, i1 %98) #5, !dbg !26
  %107 = sext i32 %.decomposed to i64, !dbg !27
  %108 = getelementptr half, ptr addrspace(1) %1, i64 %107, !dbg !27
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %45) #5, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !28
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !28
  %114 = trunc i32 %110 to i16, !dbg !28
  %extelt.offset = lshr i32 %110, 16, !dbg !28
  %115 = trunc i32 %extelt.offset to i16, !dbg !28
  %116 = trunc i32 %111 to i16, !dbg !28
  %extelt.offset1 = lshr i32 %111, 16, !dbg !28
  %117 = trunc i32 %extelt.offset1 to i16, !dbg !28
  %118 = trunc i32 %112 to i16, !dbg !28
  %extelt.offset2 = lshr i32 %112, 16, !dbg !28
  %119 = trunc i32 %extelt.offset2 to i16, !dbg !28
  %120 = trunc i32 %113 to i16, !dbg !28
  %extelt.offset3 = lshr i32 %113, 16, !dbg !28
  %121 = trunc i32 %extelt.offset3 to i16, !dbg !28
  %122 = shl nuw nsw i32 %14, 4, !dbg !29
  %123 = zext nneg i32 %122 to i64, !dbg !29
  %124 = getelementptr half, ptr addrspace(3) @global_smem, i64 %123, !dbg !29
  store i16 %114, ptr addrspace(3) %124, align 2, !dbg !29
  %125 = or i32 %122, 2, !dbg !29
  %126 = zext nneg i32 %125 to i64, !dbg !29
  %127 = getelementptr half, ptr addrspace(3) @global_smem, i64 %126, !dbg !29
  store i16 %115, ptr addrspace(3) %127, align 2, !dbg !29
  %128 = or i32 %122, 4, !dbg !29
  %129 = zext nneg i32 %128 to i64, !dbg !29
  %130 = getelementptr half, ptr addrspace(3) @global_smem, i64 %129, !dbg !29
  store i16 %116, ptr addrspace(3) %130, align 2, !dbg !29
  %131 = or i32 %122, 6, !dbg !29
  %132 = zext nneg i32 %131 to i64, !dbg !29
  %133 = getelementptr half, ptr addrspace(3) @global_smem, i64 %132, !dbg !29
  store i16 %117, ptr addrspace(3) %133, align 2, !dbg !29
  %134 = or i32 %122, 8, !dbg !29
  %135 = zext nneg i32 %134 to i64, !dbg !29
  %136 = getelementptr half, ptr addrspace(3) @global_smem, i64 %135, !dbg !29
  store i16 %118, ptr addrspace(3) %136, align 2, !dbg !29
  %137 = or i32 %122, 10, !dbg !29
  %138 = zext nneg i32 %137 to i64, !dbg !29
  %139 = getelementptr half, ptr addrspace(3) @global_smem, i64 %138, !dbg !29
  store i16 %119, ptr addrspace(3) %139, align 2, !dbg !29
  %140 = or i32 %122, 12, !dbg !29
  %141 = zext nneg i32 %140 to i64, !dbg !29
  %142 = getelementptr half, ptr addrspace(3) @global_smem, i64 %141, !dbg !29
  store i16 %120, ptr addrspace(3) %142, align 2, !dbg !29
  %143 = or i32 %122, 14, !dbg !29
  %144 = zext nneg i32 %143 to i64, !dbg !29
  %145 = getelementptr half, ptr addrspace(3) @global_smem, i64 %144, !dbg !29
  store i16 %121, ptr addrspace(3) %145, align 2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %146 = shl nuw nsw i32 %14, 1, !dbg !29
  %147 = zext nneg i32 %146 to i64, !dbg !29
  %148 = getelementptr half, ptr addrspace(3) @global_smem, i64 %147, !dbg !29
  %149 = load <1 x half>, ptr addrspace(3) %148, align 2, !dbg !29
  %150 = shl nuw nsw i32 %15, 1, !dbg !29
  %151 = zext nneg i32 %150 to i64, !dbg !29
  %152 = getelementptr half, ptr addrspace(3) @global_smem, i64 %151, !dbg !29
  %153 = load <1 x half>, ptr addrspace(3) %152, align 2, !dbg !29
  %154 = shl nuw nsw i32 %16, 1, !dbg !29
  %155 = zext nneg i32 %154 to i64, !dbg !29
  %156 = getelementptr half, ptr addrspace(3) @global_smem, i64 %155, !dbg !29
  %157 = load <1 x half>, ptr addrspace(3) %156, align 2, !dbg !29
  %158 = shl nuw nsw i32 %17, 1, !dbg !29
  %159 = zext nneg i32 %158 to i64, !dbg !29
  %160 = getelementptr half, ptr addrspace(3) @global_smem, i64 %159, !dbg !29
  %161 = load <1 x half>, ptr addrspace(3) %160, align 2, !dbg !29
  %162 = shl nuw nsw i32 %18, 1, !dbg !29
  %163 = zext nneg i32 %162 to i64, !dbg !29
  %164 = getelementptr half, ptr addrspace(3) @global_smem, i64 %163, !dbg !29
  %165 = load <1 x half>, ptr addrspace(3) %164, align 2, !dbg !29
  %166 = shl nuw nsw i32 %19, 1, !dbg !29
  %167 = zext nneg i32 %166 to i64, !dbg !29
  %168 = getelementptr half, ptr addrspace(3) @global_smem, i64 %167, !dbg !29
  %169 = load <1 x half>, ptr addrspace(3) %168, align 2, !dbg !29
  %170 = shl nuw nsw i32 %20, 1, !dbg !29
  %171 = zext nneg i32 %170 to i64, !dbg !29
  %172 = getelementptr half, ptr addrspace(3) @global_smem, i64 %171, !dbg !29
  %173 = load <1 x half>, ptr addrspace(3) %172, align 2, !dbg !29
  %174 = shl nuw nsw i32 %21, 1, !dbg !29
  %175 = zext nneg i32 %174 to i64, !dbg !29
  %176 = getelementptr half, ptr addrspace(3) @global_smem, i64 %175, !dbg !29
  %177 = load <1 x half>, ptr addrspace(3) %176, align 2, !dbg !29
  %178 = getelementptr half, ptr addrspace(1) %2, i64 %75, !dbg !30
  %179 = getelementptr half, ptr addrspace(1) %2, i64 %77, !dbg !30
  %180 = getelementptr half, ptr addrspace(1) %2, i64 %79, !dbg !30
  %181 = getelementptr half, ptr addrspace(1) %2, i64 %81, !dbg !30
  %182 = getelementptr half, ptr addrspace(1) %2, i64 %83, !dbg !30
  %183 = getelementptr half, ptr addrspace(1) %2, i64 %85, !dbg !30
  %184 = getelementptr half, ptr addrspace(1) %2, i64 %87, !dbg !30
  %185 = getelementptr half, ptr addrspace(1) %2, i64 %89, !dbg !30
  %186 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %178, i1 %91) #5, !dbg !31
  %187 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %179, i1 %92) #5, !dbg !31
  %188 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %180, i1 %93) #5, !dbg !31
  %189 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %181, i1 %94) #5, !dbg !31
  %190 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %182, i1 %95) #5, !dbg !31
  %191 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %183, i1 %96) #5, !dbg !31
  %192 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %184, i1 %97) #5, !dbg !31
  %193 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %185, i1 %98) #5, !dbg !31
  %194 = mul i32 %50, %58, !dbg !32
  %195 = mul i32 %51, %58, !dbg !32
  %196 = mul i32 %52, %58, !dbg !32
  %197 = mul i32 %53, %58, !dbg !32
  %198 = mul i32 %54, %58, !dbg !32
  %199 = mul i32 %55, %58, !dbg !32
  %200 = mul i32 %56, %58, !dbg !32
  %201 = mul i32 %57, %58, !dbg !32
  %202 = add i32 %194, %46, !dbg !33
  %203 = add i32 %195, %46, !dbg !33
  %204 = add i32 %196, %46, !dbg !33
  %205 = add i32 %197, %46, !dbg !33
  %206 = add i32 %198, %46, !dbg !33
  %207 = add i32 %199, %46, !dbg !33
  %208 = add i32 %200, %46, !dbg !33
  %209 = add i32 %201, %46, !dbg !33
  %210 = sext i32 %202 to i64, !dbg !34
  %211 = getelementptr float, ptr addrspace(1) %3, i64 %210, !dbg !34
  %212 = sext i32 %203 to i64, !dbg !34
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %212, !dbg !34
  %214 = sext i32 %204 to i64, !dbg !34
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %214, !dbg !34
  %216 = sext i32 %205 to i64, !dbg !34
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !34
  %218 = sext i32 %206 to i64, !dbg !34
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !34
  %220 = sext i32 %207 to i64, !dbg !34
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %220, !dbg !34
  %222 = sext i32 %208 to i64, !dbg !34
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !34
  %224 = sext i32 %209 to i64, !dbg !34
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !34
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %91) #5, !dbg !35
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %92) #5, !dbg !35
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %93) #5, !dbg !35
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %94) #5, !dbg !35
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %95) #5, !dbg !35
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %96) #5, !dbg !35
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %97) #5, !dbg !35
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %98) #5, !dbg !35
  %234 = getelementptr float, ptr addrspace(1) %4, i64 %210, !dbg !36
  %235 = getelementptr float, ptr addrspace(1) %4, i64 %212, !dbg !36
  %236 = getelementptr float, ptr addrspace(1) %4, i64 %214, !dbg !36
  %237 = getelementptr float, ptr addrspace(1) %4, i64 %216, !dbg !36
  %238 = getelementptr float, ptr addrspace(1) %4, i64 %218, !dbg !36
  %239 = getelementptr float, ptr addrspace(1) %4, i64 %220, !dbg !36
  %240 = getelementptr float, ptr addrspace(1) %4, i64 %222, !dbg !36
  %241 = getelementptr float, ptr addrspace(1) %4, i64 %224, !dbg !36
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %91) #5, !dbg !37
  %243 = bitcast i32 %242 to float, !dbg !37
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %92) #5, !dbg !37
  %245 = bitcast i32 %244 to float, !dbg !37
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %93) #5, !dbg !37
  %247 = bitcast i32 %246 to float, !dbg !37
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 %94) #5, !dbg !37
  %249 = bitcast i32 %248 to float, !dbg !37
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %95) #5, !dbg !37
  %251 = bitcast i32 %250 to float, !dbg !37
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %96) #5, !dbg !37
  %253 = bitcast i32 %252 to float, !dbg !37
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %97) #5, !dbg !37
  %255 = bitcast i32 %254 to float, !dbg !37
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %98) #5, !dbg !37
  %257 = bitcast i32 %256 to float, !dbg !37
  %258 = getelementptr half, ptr addrspace(1) %5, i64 %107, !dbg !38
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %258, i1 %45) #5, !dbg !39
  %260 = getelementptr half, ptr addrspace(1) %6, i64 %107, !dbg !40
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %260, i1 %45) #5, !dbg !41
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float 6.400000e+02) #5, !dbg !42
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float 6.400000e+02) #5, !dbg !42
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float 6.400000e+02) #5, !dbg !42
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float 6.400000e+02) #5, !dbg !42
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float 6.400000e+02) #5, !dbg !42
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float 6.400000e+02) #5, !dbg !42
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float 6.400000e+02) #5, !dbg !42
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float 6.400000e+02) #5, !dbg !42
  %270 = fadd float %262, 0x3EE4F8B580000000, !dbg !43
  %271 = fadd float %263, 0x3EE4F8B580000000, !dbg !43
  %272 = fadd float %264, 0x3EE4F8B580000000, !dbg !43
  %273 = fadd float %265, 0x3EE4F8B580000000, !dbg !43
  %274 = fadd float %266, 0x3EE4F8B580000000, !dbg !43
  %275 = fadd float %267, 0x3EE4F8B580000000, !dbg !43
  %276 = fadd float %268, 0x3EE4F8B580000000, !dbg !43
  %277 = fadd float %269, 0x3EE4F8B580000000, !dbg !43
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %278, 0, !dbg !44
  br i1 %.not.i, label %281, label %279, !dbg !44

279:                                              ; preds = %12
  %280 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %270), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

281:                                              ; preds = %12
  %282 = tail call float @llvm.nvvm.rsqrt.approx.f(float %270), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %279, %281
  %.0.i = phi float [ %280, %279 ], [ %282, %281 ], !dbg !44
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i12 = icmp eq i32 %283, 0, !dbg !44
  br i1 %.not.i12, label %286, label %284, !dbg !44

284:                                              ; preds = %__nv_rsqrtf.exit
  %285 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %271), !dbg !44
  br label %__nv_rsqrtf.exit14, !dbg !44

286:                                              ; preds = %__nv_rsqrtf.exit
  %287 = tail call float @llvm.nvvm.rsqrt.approx.f(float %271), !dbg !44
  br label %__nv_rsqrtf.exit14, !dbg !44

__nv_rsqrtf.exit14:                               ; preds = %284, %286
  %.0.i13 = phi float [ %285, %284 ], [ %287, %286 ], !dbg !44
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i15 = icmp eq i32 %288, 0, !dbg !44
  br i1 %.not.i15, label %291, label %289, !dbg !44

289:                                              ; preds = %__nv_rsqrtf.exit14
  %290 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %272), !dbg !44
  br label %__nv_rsqrtf.exit17, !dbg !44

291:                                              ; preds = %__nv_rsqrtf.exit14
  %292 = tail call float @llvm.nvvm.rsqrt.approx.f(float %272), !dbg !44
  br label %__nv_rsqrtf.exit17, !dbg !44

__nv_rsqrtf.exit17:                               ; preds = %289, %291
  %.0.i16 = phi float [ %290, %289 ], [ %292, %291 ], !dbg !44
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i18 = icmp eq i32 %293, 0, !dbg !44
  br i1 %.not.i18, label %296, label %294, !dbg !44

294:                                              ; preds = %__nv_rsqrtf.exit17
  %295 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %273), !dbg !44
  br label %__nv_rsqrtf.exit20, !dbg !44

296:                                              ; preds = %__nv_rsqrtf.exit17
  %297 = tail call float @llvm.nvvm.rsqrt.approx.f(float %273), !dbg !44
  br label %__nv_rsqrtf.exit20, !dbg !44

__nv_rsqrtf.exit20:                               ; preds = %294, %296
  %.0.i19 = phi float [ %295, %294 ], [ %297, %296 ], !dbg !44
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i21 = icmp eq i32 %298, 0, !dbg !44
  br i1 %.not.i21, label %301, label %299, !dbg !44

299:                                              ; preds = %__nv_rsqrtf.exit20
  %300 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %274), !dbg !44
  br label %__nv_rsqrtf.exit23, !dbg !44

301:                                              ; preds = %__nv_rsqrtf.exit20
  %302 = tail call float @llvm.nvvm.rsqrt.approx.f(float %274), !dbg !44
  br label %__nv_rsqrtf.exit23, !dbg !44

__nv_rsqrtf.exit23:                               ; preds = %299, %301
  %.0.i22 = phi float [ %300, %299 ], [ %302, %301 ], !dbg !44
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i24 = icmp eq i32 %303, 0, !dbg !44
  br i1 %.not.i24, label %306, label %304, !dbg !44

304:                                              ; preds = %__nv_rsqrtf.exit23
  %305 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %275), !dbg !44
  br label %__nv_rsqrtf.exit26, !dbg !44

306:                                              ; preds = %__nv_rsqrtf.exit23
  %307 = tail call float @llvm.nvvm.rsqrt.approx.f(float %275), !dbg !44
  br label %__nv_rsqrtf.exit26, !dbg !44

__nv_rsqrtf.exit26:                               ; preds = %304, %306
  %.0.i25 = phi float [ %305, %304 ], [ %307, %306 ], !dbg !44
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i27 = icmp eq i32 %308, 0, !dbg !44
  br i1 %.not.i27, label %311, label %309, !dbg !44

309:                                              ; preds = %__nv_rsqrtf.exit26
  %310 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %276), !dbg !44
  br label %__nv_rsqrtf.exit29, !dbg !44

311:                                              ; preds = %__nv_rsqrtf.exit26
  %312 = tail call float @llvm.nvvm.rsqrt.approx.f(float %276), !dbg !44
  br label %__nv_rsqrtf.exit29, !dbg !44

__nv_rsqrtf.exit29:                               ; preds = %309, %311
  %.0.i28 = phi float [ %310, %309 ], [ %312, %311 ], !dbg !44
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i30 = icmp eq i32 %313, 0, !dbg !44
  br i1 %.not.i30, label %316, label %314, !dbg !44

314:                                              ; preds = %__nv_rsqrtf.exit29
  %315 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %277), !dbg !44
  br label %__nv_rsqrtf.exit32, !dbg !44

316:                                              ; preds = %__nv_rsqrtf.exit29
  %317 = tail call float @llvm.nvvm.rsqrt.approx.f(float %277), !dbg !44
  br label %__nv_rsqrtf.exit32, !dbg !44

__nv_rsqrtf.exit32:                               ; preds = %314, %316
  %.0.i31 = phi float [ %315, %314 ], [ %317, %316 ], !dbg !44
  %318 = bitcast i16 %106 to half, !dbg !26
  %319 = fpext half %318 to float, !dbg !45
  %320 = extractelement <1 x half> %177, i64 0, !dbg !29
  %321 = fpext half %320 to float, !dbg !46
  %322 = fadd float %319, %321, !dbg !29
  %323 = bitcast i16 %193 to half, !dbg !31
  %324 = fpext half %323 to float, !dbg !47
  %325 = fmul float %324, 1.250000e-01, !dbg !48
  %326 = fadd float %322, %325, !dbg !49
  %327 = bitcast i32 %233 to float, !dbg !35
  %328 = fsub float %326, %327, !dbg !50
  %329 = bitcast i16 %105 to half, !dbg !26
  %330 = fpext half %329 to float, !dbg !45
  %331 = extractelement <1 x half> %173, i64 0, !dbg !29
  %332 = fpext half %331 to float, !dbg !46
  %333 = fadd float %330, %332, !dbg !29
  %334 = bitcast i16 %192 to half, !dbg !31
  %335 = fpext half %334 to float, !dbg !47
  %336 = fmul float %335, 1.250000e-01, !dbg !48
  %337 = fadd float %333, %336, !dbg !49
  %338 = bitcast i32 %232 to float, !dbg !35
  %339 = fsub float %337, %338, !dbg !50
  %340 = bitcast i16 %104 to half, !dbg !26
  %341 = fpext half %340 to float, !dbg !45
  %342 = extractelement <1 x half> %169, i64 0, !dbg !29
  %343 = fpext half %342 to float, !dbg !46
  %344 = fadd float %341, %343, !dbg !29
  %345 = bitcast i16 %191 to half, !dbg !31
  %346 = fpext half %345 to float, !dbg !47
  %347 = fmul float %346, 1.250000e-01, !dbg !48
  %348 = fadd float %344, %347, !dbg !49
  %349 = bitcast i32 %231 to float, !dbg !35
  %350 = fsub float %348, %349, !dbg !50
  %351 = bitcast i16 %103 to half, !dbg !26
  %352 = fpext half %351 to float, !dbg !45
  %353 = extractelement <1 x half> %165, i64 0, !dbg !29
  %354 = fpext half %353 to float, !dbg !46
  %355 = fadd float %352, %354, !dbg !29
  %356 = bitcast i16 %190 to half, !dbg !31
  %357 = fpext half %356 to float, !dbg !47
  %358 = fmul float %357, 1.250000e-01, !dbg !48
  %359 = fadd float %355, %358, !dbg !49
  %360 = bitcast i32 %230 to float, !dbg !35
  %361 = fsub float %359, %360, !dbg !50
  %362 = bitcast i16 %102 to half, !dbg !26
  %363 = fpext half %362 to float, !dbg !45
  %364 = extractelement <1 x half> %161, i64 0, !dbg !29
  %365 = fpext half %364 to float, !dbg !46
  %366 = fadd float %363, %365, !dbg !29
  %367 = bitcast i16 %189 to half, !dbg !31
  %368 = fpext half %367 to float, !dbg !47
  %369 = fmul float %368, 1.250000e-01, !dbg !48
  %370 = fadd float %366, %369, !dbg !49
  %371 = bitcast i32 %229 to float, !dbg !35
  %372 = fsub float %370, %371, !dbg !50
  %373 = bitcast i16 %101 to half, !dbg !26
  %374 = fpext half %373 to float, !dbg !45
  %375 = extractelement <1 x half> %157, i64 0, !dbg !29
  %376 = fpext half %375 to float, !dbg !46
  %377 = fadd float %374, %376, !dbg !29
  %378 = bitcast i16 %188 to half, !dbg !31
  %379 = fpext half %378 to float, !dbg !47
  %380 = fmul float %379, 1.250000e-01, !dbg !48
  %381 = fadd float %377, %380, !dbg !49
  %382 = bitcast i32 %228 to float, !dbg !35
  %383 = fsub float %381, %382, !dbg !50
  %384 = bitcast i16 %100 to half, !dbg !26
  %385 = fpext half %384 to float, !dbg !45
  %386 = extractelement <1 x half> %153, i64 0, !dbg !29
  %387 = fpext half %386 to float, !dbg !46
  %388 = fadd float %385, %387, !dbg !29
  %389 = bitcast i16 %187 to half, !dbg !31
  %390 = fpext half %389 to float, !dbg !47
  %391 = fmul float %390, 1.250000e-01, !dbg !48
  %392 = fadd float %388, %391, !dbg !49
  %393 = bitcast i32 %227 to float, !dbg !35
  %394 = fsub float %392, %393, !dbg !50
  %395 = bitcast i16 %99 to half, !dbg !26
  %396 = fpext half %395 to float, !dbg !45
  %397 = extractelement <1 x half> %149, i64 0, !dbg !29
  %398 = fpext half %397 to float, !dbg !46
  %399 = fadd float %396, %398, !dbg !29
  %400 = bitcast i16 %186 to half, !dbg !31
  %401 = fpext half %400 to float, !dbg !47
  %402 = fmul float %401, 1.250000e-01, !dbg !48
  %403 = fadd float %399, %402, !dbg !49
  %404 = bitcast i32 %226 to float, !dbg !35
  %405 = fsub float %403, %404, !dbg !50
  %406 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !41
  %extelt.offset11 = lshr i32 %406, 16, !dbg !41
  %407 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !41
  %extelt.offset10 = lshr i32 %407, 16, !dbg !41
  %408 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !41
  %extelt.offset9 = lshr i32 %408, 16, !dbg !41
  %409 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !41
  %extelt.offset8 = lshr i32 %409, 16, !dbg !41
  %410 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !39
  %extelt.offset7 = lshr i32 %410, 16, !dbg !39
  %411 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !39
  %extelt.offset6 = lshr i32 %411, 16, !dbg !39
  %412 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !39
  %extelt.offset5 = lshr i32 %412, 16, !dbg !39
  %413 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !39
  %extelt.offset4 = lshr i32 %413, 16, !dbg !39
  %414 = and i1 %47, %45, !dbg !25
  %415 = fmul float %405, %.0.i, !dbg !51
  %416 = fmul float %394, %.0.i13, !dbg !51
  %417 = fmul float %383, %.0.i16, !dbg !51
  %418 = fmul float %372, %.0.i19, !dbg !51
  %419 = fmul float %361, %.0.i22, !dbg !51
  %420 = fmul float %350, %.0.i25, !dbg !51
  %421 = fmul float %339, %.0.i28, !dbg !51
  %422 = fmul float %328, %.0.i31, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %423 = zext nneg i32 %14 to i64, !dbg !51
  %424 = getelementptr float, ptr addrspace(3) @global_smem, i64 %423, !dbg !51
  %425 = insertelement <1 x float> undef, float %415, i64 0, !dbg !51
  store <1 x float> %425, ptr addrspace(3) %424, align 4, !dbg !51
  %426 = zext nneg i32 %15 to i64, !dbg !51
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i64 %426, !dbg !51
  %428 = insertelement <1 x float> undef, float %416, i64 0, !dbg !51
  store <1 x float> %428, ptr addrspace(3) %427, align 4, !dbg !51
  %429 = zext nneg i32 %16 to i64, !dbg !51
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i64 %429, !dbg !51
  %431 = insertelement <1 x float> undef, float %417, i64 0, !dbg !51
  store <1 x float> %431, ptr addrspace(3) %430, align 4, !dbg !51
  %432 = zext nneg i32 %17 to i64, !dbg !51
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i64 %432, !dbg !51
  %434 = insertelement <1 x float> undef, float %418, i64 0, !dbg !51
  store <1 x float> %434, ptr addrspace(3) %433, align 4, !dbg !51
  %435 = zext nneg i32 %18 to i64, !dbg !51
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i64 %435, !dbg !51
  %437 = insertelement <1 x float> undef, float %419, i64 0, !dbg !51
  store <1 x float> %437, ptr addrspace(3) %436, align 4, !dbg !51
  %438 = zext nneg i32 %19 to i64, !dbg !51
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i64 %438, !dbg !51
  %440 = insertelement <1 x float> undef, float %420, i64 0, !dbg !51
  store <1 x float> %440, ptr addrspace(3) %439, align 4, !dbg !51
  %441 = zext nneg i32 %20 to i64, !dbg !51
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i64 %441, !dbg !51
  %443 = insertelement <1 x float> undef, float %421, i64 0, !dbg !51
  store <1 x float> %443, ptr addrspace(3) %442, align 4, !dbg !51
  %444 = zext nneg i32 %21 to i64, !dbg !51
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i64 %444, !dbg !51
  %446 = insertelement <1 x float> undef, float %422, i64 0, !dbg !51
  store <1 x float> %446, ptr addrspace(3) %445, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %447 = zext nneg i32 %22 to i64, !dbg !51
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i64 %447, !dbg !51
  %449 = getelementptr inbounds <8 x float>, ptr addrspace(3) %448, i64 0, i64 2, !dbg !51
  %450 = getelementptr inbounds <8 x float>, ptr addrspace(3) %448, i64 0, i64 4, !dbg !51
  %451 = getelementptr inbounds <8 x float>, ptr addrspace(3) %448, i64 0, i64 6, !dbg !51
  %452 = mul i32 %58, %48, !dbg !52
  %reass.add = add i32 %452, %46
  %reass.mul = mul i32 %reass.add, 640
  %453 = add i32 %reass.mul, %.decomposed, !dbg !53
  %454 = sext i32 %453 to i64, !dbg !54
  %455 = getelementptr half, ptr addrspace(1) %7, i64 %454, !dbg !54
  %456 = insertelement <2 x i32> poison, i32 %409, i64 0, !dbg !41
  %457 = insertelement <2 x i32> %456, i32 %extelt.offset8, i64 1, !dbg !41
  %458 = trunc <2 x i32> %457 to <2 x i16>, !dbg !41
  %459 = bitcast <2 x i16> %458 to <2 x half>, !dbg !41
  %460 = fpext <2 x half> %459 to <2 x float>, !dbg !55
  %461 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !39
  %462 = insertelement <2 x i32> %461, i32 %extelt.offset4, i64 1, !dbg !39
  %463 = trunc <2 x i32> %462 to <2 x i16>, !dbg !39
  %464 = bitcast <2 x i16> %463 to <2 x half>, !dbg !39
  %465 = fpext <2 x half> %464 to <2 x float>, !dbg !56
  %466 = load <2 x float>, ptr addrspace(3) %448, align 32, !dbg !51
  %467 = fmul <2 x float> %466, %465, !dbg !57
  %468 = fadd <2 x float> %467, %460, !dbg !58
  %469 = fptrunc <2 x float> %468 to <2 x half>, !dbg !59
  %470 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !41
  %471 = insertelement <2 x i32> %470, i32 %extelt.offset9, i64 1, !dbg !41
  %472 = trunc <2 x i32> %471 to <2 x i16>, !dbg !41
  %473 = bitcast <2 x i16> %472 to <2 x half>, !dbg !41
  %474 = fpext <2 x half> %473 to <2 x float>, !dbg !55
  %475 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !39
  %476 = insertelement <2 x i32> %475, i32 %extelt.offset5, i64 1, !dbg !39
  %477 = trunc <2 x i32> %476 to <2 x i16>, !dbg !39
  %478 = bitcast <2 x i16> %477 to <2 x half>, !dbg !39
  %479 = fpext <2 x half> %478 to <2 x float>, !dbg !56
  %480 = load <2 x float>, ptr addrspace(3) %449, align 8, !dbg !51
  %481 = fmul <2 x float> %480, %479, !dbg !57
  %482 = fadd <2 x float> %481, %474, !dbg !58
  %483 = fptrunc <2 x float> %482 to <2 x half>, !dbg !59
  %484 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !41
  %485 = insertelement <2 x i32> %484, i32 %extelt.offset10, i64 1, !dbg !41
  %486 = trunc <2 x i32> %485 to <2 x i16>, !dbg !41
  %487 = bitcast <2 x i16> %486 to <2 x half>, !dbg !41
  %488 = fpext <2 x half> %487 to <2 x float>, !dbg !55
  %489 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !39
  %490 = insertelement <2 x i32> %489, i32 %extelt.offset6, i64 1, !dbg !39
  %491 = trunc <2 x i32> %490 to <2 x i16>, !dbg !39
  %492 = bitcast <2 x i16> %491 to <2 x half>, !dbg !39
  %493 = fpext <2 x half> %492 to <2 x float>, !dbg !56
  %494 = load <2 x float>, ptr addrspace(3) %450, align 16, !dbg !51
  %495 = fmul <2 x float> %494, %493, !dbg !57
  %496 = fadd <2 x float> %495, %488, !dbg !58
  %497 = fptrunc <2 x float> %496 to <2 x half>, !dbg !59
  %498 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !41
  %499 = insertelement <2 x i32> %498, i32 %extelt.offset11, i64 1, !dbg !41
  %500 = trunc <2 x i32> %499 to <2 x i16>, !dbg !41
  %501 = bitcast <2 x i16> %500 to <2 x half>, !dbg !41
  %502 = fpext <2 x half> %501 to <2 x float>, !dbg !55
  %503 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !39
  %504 = insertelement <2 x i32> %503, i32 %extelt.offset7, i64 1, !dbg !39
  %505 = trunc <2 x i32> %504 to <2 x i16>, !dbg !39
  %506 = bitcast <2 x i16> %505 to <2 x half>, !dbg !39
  %507 = fpext <2 x half> %506 to <2 x float>, !dbg !56
  %508 = load <2 x float>, ptr addrspace(3) %451, align 8, !dbg !51
  %509 = fmul <2 x float> %508, %507, !dbg !57
  %510 = fadd <2 x float> %509, %502, !dbg !58
  %511 = fptrunc <2 x float> %510 to <2 x half>, !dbg !59
  %512 = bitcast <2 x half> %469 to i32, !dbg !59
  %513 = bitcast <2 x half> %483 to i32, !dbg !59
  %514 = bitcast <2 x half> %497 to i32, !dbg !59
  %515 = bitcast <2 x half> %511 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %512, i32 %513, i32 %514, i32 %515, ptr addrspace(1) %455, i1 %414) #5, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "ch7cb3qvfeeoxpgaq4smdlfjwsvn4n7fj3ynl3jonwdzq6atj4ay.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/h7")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8910de11, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8910de11, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8910de11", linkageName: "triton__0d1d2d3d4d5d6d7d8910de11", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 44, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 22, column: 48, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 58, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 20, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 58, scope: !7)
!26 = !DILocation(line: 32, column: 50, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 50, scope: !7)
!32 = !DILocation(line: 35, column: 44, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 50, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 51, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 36, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 28, scope: !7)
!45 = !DILocation(line: 32, column: 98, scope: !7)
!46 = !DILocation(line: 33, column: 75, scope: !7)
!47 = !DILocation(line: 34, column: 98, scope: !7)
!48 = !DILocation(line: 41, column: 18, scope: !7)
!49 = !DILocation(line: 42, column: 18, scope: !7)
!50 = !DILocation(line: 44, column: 18, scope: !7)
!51 = !DILocation(line: 50, column: 19, scope: !7)
!52 = !DILocation(line: 56, column: 54, scope: !7)
!53 = !DILocation(line: 56, column: 42, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 38, column: 76, scope: !7)
!56 = !DILocation(line: 37, column: 76, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 56, column: 67, scope: !7)
!60 = !DILocation(line: 56, column: 4, scope: !7)
