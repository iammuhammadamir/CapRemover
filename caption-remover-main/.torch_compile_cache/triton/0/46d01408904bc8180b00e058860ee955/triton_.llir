; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6e7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = and i32 %11, 3, !dbg !10
  %urem = shl i32 %9, 2, !dbg !10
  %13 = and i32 %urem, 508, !dbg !10
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %15 = icmp slt i32 %14, 59400, !dbg !12
  %16 = icmp ult i32 %13, 320, !dbg !13
  %17 = mul i32 %14, 320, !dbg !14
  %18 = add i32 %17, %13, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr half, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = and i1 %16, %15, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #6, !dbg !18
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %extelt.offset = lshr i32 %23, 16, !dbg !18
  %extelt.offset1 = lshr i32 %24, 16, !dbg !18
  %25 = zext nneg i32 %13 to i64, !dbg !19
  %26 = getelementptr half, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %extelt.offset2 = lshr i32 %28, 16, !dbg !20
  %extelt.offset3 = lshr i32 %29, 16, !dbg !20
  %30 = getelementptr half, ptr addrspace(1) %2, i64 %19, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #6, !dbg !22
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %extelt.offset4 = lshr i32 %32, 16, !dbg !22
  %extelt.offset5 = lshr i32 %33, 16, !dbg !22
  %34 = getelementptr half, ptr addrspace(1) %3, i64 %25, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !24
  %36 = getelementptr half, ptr addrspace(1) %4, i64 %25, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !26
  %38 = icmp eq i32 %10, 0, !dbg !27
  %39 = zext nneg i32 %12 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i64 %39, !dbg !27
  %41 = icmp slt i32 %9, 4, !dbg !27
  %42 = sext i32 %9 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(3) @global_smem, i64 %42, !dbg !27
  %44 = and i32 %9, 3, !dbg !27
  %45 = icmp eq i32 %44, 0, !dbg !27
  %46 = and i1 %41, %45, !dbg !27
  %47 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %48 = insertelement <2 x i32> %47, i32 %extelt.offset1, i64 1, !dbg !18
  %49 = trunc <2 x i32> %48 to <2 x i16>, !dbg !18
  %50 = bitcast <2 x i16> %49 to <2 x half>, !dbg !18
  %51 = fpext <2 x half> %50 to <2 x float>, !dbg !31
  %52 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %53 = insertelement <2 x i32> %52, i32 %extelt.offset3, i64 1, !dbg !20
  %54 = trunc <2 x i32> %53 to <2 x i16>, !dbg !20
  %55 = bitcast <2 x i16> %54 to <2 x half>, !dbg !20
  %56 = fpext <2 x half> %55 to <2 x float>, !dbg !32
  %57 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !22
  %58 = insertelement <2 x i32> %57, i32 %extelt.offset5, i64 1, !dbg !22
  %59 = trunc <2 x i32> %58 to <2 x i16>, !dbg !22
  %60 = bitcast <2 x i16> %59 to <2 x half>, !dbg !22
  %61 = fpext <2 x half> %60 to <2 x float>, !dbg !33
  %62 = fadd <2 x float> %51, %56, !dbg !34
  %63 = fmul <2 x float> %61, <float 1.250000e-01, float 1.250000e-01>, !dbg !35
  %64 = fadd <2 x float> %62, %63, !dbg !36
  %65 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %66 = insertelement <2 x i32> %65, i32 %extelt.offset, i64 1, !dbg !18
  %67 = trunc <2 x i32> %66 to <2 x i16>, !dbg !18
  %68 = bitcast <2 x i16> %67 to <2 x half>, !dbg !18
  %69 = fpext <2 x half> %68 to <2 x float>, !dbg !31
  %70 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !20
  %71 = insertelement <2 x i32> %70, i32 %extelt.offset2, i64 1, !dbg !20
  %72 = trunc <2 x i32> %71 to <2 x i16>, !dbg !20
  %73 = bitcast <2 x i16> %72 to <2 x half>, !dbg !20
  %74 = fpext <2 x half> %73 to <2 x float>, !dbg !32
  %75 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !22
  %76 = insertelement <2 x i32> %75, i32 %extelt.offset4, i64 1, !dbg !22
  %77 = trunc <2 x i32> %76 to <2 x i16>, !dbg !22
  %78 = bitcast <2 x i16> %77 to <2 x half>, !dbg !22
  %79 = fpext <2 x half> %78 to <2 x float>, !dbg !33
  %80 = fadd <2 x float> %69, %74, !dbg !34
  %81 = fmul <2 x float> %79, <float 1.250000e-01, float 1.250000e-01>, !dbg !35
  %82 = fadd <2 x float> %80, %81, !dbg !36
  %shift = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %83 = fadd <2 x float> %82, %shift, !dbg !37
  %84 = fadd <2 x float> %64, %83, !dbg !37
  %shift10 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %85 = fadd <2 x float> %shift10, %84, !dbg !37
  %86 = extractelement <2 x float> %85, i64 0, !dbg !37
  %87 = select i1 %21, float %86, float 0.000000e+00, !dbg !37
  %88 = bitcast float %87 to i32, !dbg !27
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !27
  %90 = bitcast i32 %89 to float, !dbg !27
  %91 = fadd float %87, %90, !dbg !37
  %92 = bitcast float %91 to i32, !dbg !27
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !27
  %94 = bitcast i32 %93 to float, !dbg !27
  %95 = fadd float %91, %94, !dbg !37
  %96 = bitcast float %95 to i32, !dbg !27
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !27
  %98 = bitcast i32 %97 to float, !dbg !27
  %99 = fadd float %95, %98, !dbg !37
  %100 = bitcast float %99 to i32, !dbg !27
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = fadd float %99, %102, !dbg !37
  %104 = bitcast float %103 to i32, !dbg !27
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !27
  %106 = bitcast i32 %105 to float, !dbg !27
  %107 = fadd float %103, %106, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, float %107, i1 %38) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %108 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %43, i1 %41) #6, !dbg !27
  %109 = bitcast float %108 to i32, !dbg !27
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = fadd float %108, %111, !dbg !37
  %113 = bitcast float %112 to i32, !dbg !27
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = fadd float %112, %115, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, float %116, i1 %46) #6, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %117 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !27
  %118 = fadd float %117, 0.000000e+00, !dbg !41
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 3.200000e+02) #6, !dbg !45
  %120 = insertelement <2 x float> poison, float %119, i64 0, !dbg !46
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  %122 = fsub <2 x float> %82, %121, !dbg !46
  %123 = fsub <2 x float> %64, %121, !dbg !46
  %124 = fmul <2 x float> %122, %122, !dbg !47
  %125 = fmul <2 x float> %123, %123, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %shift11 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %126 = fadd <2 x float> %124, %shift11, !dbg !50
  %127 = fadd <2 x float> %125, %126, !dbg !50
  %shift12 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %128 = fadd <2 x float> %shift12, %127, !dbg !50
  %129 = extractelement <2 x float> %128, i64 0, !dbg !50
  %130 = select i1 %21, float %129, float 0.000000e+00, !dbg !50
  %131 = bitcast float %130 to i32, !dbg !48
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 16, i32 31), !dbg !48
  %133 = bitcast i32 %132 to float, !dbg !48
  %134 = fadd float %130, %133, !dbg !50
  %135 = bitcast float %134 to i32, !dbg !48
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !48
  %137 = bitcast i32 %136 to float, !dbg !48
  %138 = fadd float %134, %137, !dbg !50
  %139 = bitcast float %138 to i32, !dbg !48
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !48
  %141 = bitcast i32 %140 to float, !dbg !48
  %142 = fadd float %138, %141, !dbg !50
  %143 = bitcast float %142 to i32, !dbg !48
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !48
  %145 = bitcast i32 %144 to float, !dbg !48
  %146 = fadd float %142, %145, !dbg !50
  %147 = bitcast float %146 to i32, !dbg !48
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !48
  %149 = bitcast i32 %148 to float, !dbg !48
  %150 = fadd float %146, %149, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, float %150, i1 %38) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %151 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %43, i1 %41) #6, !dbg !48
  %152 = bitcast float %151 to i32, !dbg !48
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !48
  %154 = bitcast i32 %153 to float, !dbg !48
  %155 = fadd float %151, %154, !dbg !50
  %156 = bitcast float %155 to i32, !dbg !48
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !48
  %158 = bitcast i32 %157 to float, !dbg !48
  %159 = fadd float %155, %158, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, float %159, i1 %46) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %160 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !48
  %161 = fadd float %160, 0.000000e+00, !dbg !53
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float 3.200000e+02) #6, !dbg !55
  %163 = fadd float %162, 0x3EE4F8B580000000, !dbg !56
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %.not.i = icmp eq i32 %164, 0, !dbg !57
  br i1 %.not.i, label %167, label %165, !dbg !57

165:                                              ; preds = %8
  %166 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

167:                                              ; preds = %8
  %168 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %165, %167
  %.0.i = phi float [ %166, %165 ], [ %168, %167 ], !dbg !57
  %169 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %extelt.offset9 = lshr i32 %169, 16, !dbg !26
  %170 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %extelt.offset8 = lshr i32 %170, 16, !dbg !26
  %171 = extractvalue { i32, i32 } %35, 1, !dbg !24
  %extelt.offset7 = lshr i32 %171, 16, !dbg !24
  %172 = extractvalue { i32, i32 } %35, 0, !dbg !24
  %extelt.offset6 = lshr i32 %172, 16, !dbg !24
  %173 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !58
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %175 = fmul <2 x float> %122, %174, !dbg !58
  %176 = fmul <2 x float> %123, %174, !dbg !58
  %177 = getelementptr half, ptr addrspace(1) %5, i64 %19, !dbg !59
  %178 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !26
  %179 = insertelement <2 x i32> %178, i32 %extelt.offset8, i64 1, !dbg !26
  %180 = trunc <2 x i32> %179 to <2 x i16>, !dbg !26
  %181 = bitcast <2 x i16> %180 to <2 x half>, !dbg !26
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !60
  %183 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !24
  %184 = insertelement <2 x i32> %183, i32 %extelt.offset6, i64 1, !dbg !24
  %185 = trunc <2 x i32> %184 to <2 x i16>, !dbg !24
  %186 = bitcast <2 x i16> %185 to <2 x half>, !dbg !24
  %187 = fpext <2 x half> %186 to <2 x float>, !dbg !61
  %188 = fmul <2 x float> %175, %187, !dbg !62
  %189 = fadd <2 x float> %188, %182, !dbg !63
  %190 = fptrunc <2 x float> %189 to <2 x half>, !dbg !64
  %191 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !26
  %192 = insertelement <2 x i32> %191, i32 %extelt.offset9, i64 1, !dbg !26
  %193 = trunc <2 x i32> %192 to <2 x i16>, !dbg !26
  %194 = bitcast <2 x i16> %193 to <2 x half>, !dbg !26
  %195 = fpext <2 x half> %194 to <2 x float>, !dbg !60
  %196 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !24
  %197 = insertelement <2 x i32> %196, i32 %extelt.offset7, i64 1, !dbg !24
  %198 = trunc <2 x i32> %197 to <2 x i16>, !dbg !24
  %199 = bitcast <2 x i16> %198 to <2 x half>, !dbg !24
  %200 = fpext <2 x half> %199 to <2 x float>, !dbg !61
  %201 = fmul <2 x float> %176, %200, !dbg !62
  %202 = fadd <2 x float> %201, %195, !dbg !63
  %203 = fptrunc <2 x float> %202 to <2 x half>, !dbg !64
  %204 = bitcast <2 x half> %190 to i32, !dbg !64
  %205 = bitcast <2 x half> %203 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %204, i32 %205, ptr addrspace(1) %177, i1 %21) #6, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cj2bi2crlvp2opikx6su63vct2ia7kawpgewbobyjpt2kyrt5jn6.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/j2")
!4 = !{ptr @triton__0d1d2d3d4d5d6e7de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6e7de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6e7de", linkageName: "triton__0d1d2d3d4d5d6e7de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 26, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 27, column: 21, scope: !7)
!13 = !DILocation(line: 30, column: 21, scope: !7)
!14 = !DILocation(line: 33, column: 40, scope: !7)
!15 = !DILocation(line: 33, column: 36, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 46, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 46, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!30 = !DILocation(line: 47, column: 59, scope: !28)
!31 = !DILocation(line: 33, column: 75, scope: !7)
!32 = !DILocation(line: 34, column: 86, scope: !7)
!33 = !DILocation(line: 35, column: 75, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 233, column: 15, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!39 = !DILocation(line: 243, column: 36, scope: !38, inlinedAt: !40)
!40 = !DILocation(line: 47, column: 59, scope: !38)
!41 = !DILocation(line: 17, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!44 = !DILocation(line: 47, column: 45, scope: !42)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 243, column: 36, scope: !28, inlinedAt: !49)
!49 = !DILocation(line: 55, column: 59, scope: !28)
!50 = !DILocation(line: 233, column: 15, scope: !38, inlinedAt: !51)
!51 = !DILocation(line: 243, column: 36, scope: !38, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 59, scope: !38)
!53 = !DILocation(line: 17, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 55, column: 45, scope: !42)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 28, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 68, column: 25, scope: !7)
!60 = !DILocation(line: 37, column: 87, scope: !7)
!61 = !DILocation(line: 36, column: 87, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 66, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 48, scope: !7)
!65 = !DILocation(line: 68, column: 4, scope: !7)
