; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d345de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %8, 255, !dbg !8
  %9 = shl nuw nsw i32 %urem, 1, !dbg !8
  %10 = or i32 %urem, 256, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %12 = icmp slt i32 %11, 704, !dbg !10
  %13 = mul i32 %3, 30, !dbg !11
  %14 = mul i32 %13, %4, !dbg !12
  %15 = mul i32 %14, %11, !dbg !13
  %16 = icmp sgt i32 %6, 0, !dbg !14
  %17 = zext nneg i32 %urem to i64
  br i1 %16, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !14

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre41 = zext nneg i32 %10 to i64, !dbg !14
  %.pre43 = zext nneg i32 %9 to i64, !dbg !14
  br label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7
  %18 = getelementptr float, ptr addrspace(3) @global_smem, i64 %17
  %19 = zext nneg i32 %10 to i64
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19
  %21 = zext nneg i32 %9 to i64
  %22 = getelementptr float, ptr addrspace(3) @global_smem, i64 %21
  %23 = getelementptr inbounds <2 x float>, ptr addrspace(3) %22, i64 0, i64 1
  br label %24, !dbg !14

24:                                               ; preds = %.lr.ph, %._crit_edge16
  %25 = phi float [ 0.000000e+00, %.lr.ph ], [ %140, %._crit_edge16 ]
  %26 = phi float [ 0.000000e+00, %.lr.ph ], [ %141, %._crit_edge16 ]
  %27 = phi float [ 0.000000e+00, %.lr.ph ], [ %142, %._crit_edge16 ]
  %28 = phi float [ 0.000000e+00, %.lr.ph ], [ %143, %._crit_edge16 ]
  %29 = phi float [ 0.000000e+00, %.lr.ph ], [ %136, %._crit_edge16 ]
  %30 = phi float [ 0.000000e+00, %.lr.ph ], [ %137, %._crit_edge16 ]
  %31 = phi float [ 0.000000e+00, %.lr.ph ], [ %138, %._crit_edge16 ]
  %32 = phi float [ 0.000000e+00, %.lr.ph ], [ %139, %._crit_edge16 ]
  %33 = phi float [ 0.000000e+00, %.lr.ph ], [ %132, %._crit_edge16 ]
  %34 = phi float [ 0.000000e+00, %.lr.ph ], [ %133, %._crit_edge16 ]
  %35 = phi float [ 0.000000e+00, %.lr.ph ], [ %134, %._crit_edge16 ]
  %36 = phi float [ 0.000000e+00, %.lr.ph ], [ %135, %._crit_edge16 ]
  %37 = phi i32 [ 0, %.lr.ph ], [ %144, %._crit_edge16 ]
  %38 = or i32 %37, %9, !dbg !15
  %39 = or i32 %38, 1, !dbg !15
  %40 = or i32 %38, 512, !dbg !15
  %41 = or i32 %38, 513, !dbg !15
  %42 = or i32 %37, %urem, !dbg !15
  %43 = or i32 %37, %10, !dbg !15
  %44 = or i32 %42, 512, !dbg !15
  %45 = or i32 %42, 768, !dbg !15
  %46 = icmp slt i32 %38, %6, !dbg !16
  %47 = icmp slt i32 %39, %6, !dbg !16
  %48 = icmp slt i32 %40, %6, !dbg !16
  %49 = icmp slt i32 %41, %6, !dbg !16
  %50 = icmp slt i32 %42, %6, !dbg !16
  %51 = icmp slt i32 %43, %6, !dbg !16
  %52 = icmp slt i32 %44, %6, !dbg !16
  %53 = icmp slt i32 %45, %6, !dbg !16
  %54 = add i32 %38, %15, !dbg !17
  %55 = add i32 %39, %15, !dbg !17
  %56 = add i32 %40, %15, !dbg !17
  %57 = add i32 %41, %15, !dbg !17
  %58 = sext i32 %54 to i64, !dbg !18
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = sext i32 %55 to i64, !dbg !18
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = sext i32 %56 to i64, !dbg !18
  %63 = getelementptr half, ptr addrspace(1) %0, i64 %62, !dbg !18
  %64 = sext i32 %57 to i64, !dbg !18
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !18
  %66 = and i1 %12, %46, !dbg !19
  %67 = and i1 %12, %47, !dbg !19
  %68 = and i1 %12, %48, !dbg !19
  %69 = and i1 %12, %49, !dbg !19
  %70 = and i1 %12, %50, !dbg !19
  %71 = and i1 %12, %51, !dbg !19
  %72 = and i1 %12, %52, !dbg !19
  %73 = and i1 %12, %53, !dbg !19
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %59, i1 %66, i16 0, i1 %66) #3, !dbg !20
  %75 = bitcast i16 %74 to half, !dbg !20
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 %67, i16 0, i1 %67) #3, !dbg !20
  %77 = bitcast i16 %76 to half, !dbg !20
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %63, i1 %68, i16 0, i1 %68) #3, !dbg !20
  %79 = bitcast i16 %78 to half, !dbg !20
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %65, i1 %69, i16 0, i1 %69) #3, !dbg !20
  %81 = bitcast i16 %80 to half, !dbg !20
  %82 = fpext half %75 to float, !dbg !21
  %83 = fpext half %77 to float, !dbg !21
  %84 = fpext half %79 to float, !dbg !21
  %85 = fpext half %81 to float, !dbg !21
  %86 = icmp eq i32 %37, 0, !dbg !22
  br i1 %86, label %._crit_edge16, label %87, !dbg !23

87:                                               ; preds = %24
  %88 = fsub float %82, %33, !dbg !27
  %89 = fsub float %83, %34, !dbg !27
  %90 = fsub float %84, %35, !dbg !27
  %91 = fsub float %85, %36, !dbg !27
  %92 = fadd float %25, 1.000000e+00, !dbg !28
  %93 = fadd float %26, 1.000000e+00, !dbg !28
  %94 = fadd float %27, 1.000000e+00, !dbg !28
  %95 = fadd float %28, 1.000000e+00, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %96 = insertelement <1 x float> undef, float %92, i64 0, !dbg !28
  store <1 x float> %96, ptr addrspace(3) %18, align 4, !dbg !28
  %97 = insertelement <1 x float> undef, float %93, i64 0, !dbg !28
  store <1 x float> %97, ptr addrspace(3) %20, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %98 = load float, ptr addrspace(3) %22, align 8, !dbg !28
  %99 = load float, ptr addrspace(3) %23, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %100 = insertelement <1 x float> undef, float %94, i64 0, !dbg !28
  store <1 x float> %100, ptr addrspace(3) %18, align 4, !dbg !28
  %101 = insertelement <1 x float> undef, float %95, i64 0, !dbg !28
  store <1 x float> %101, ptr addrspace(3) %20, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %102 = load float, ptr addrspace(3) %22, align 8, !dbg !28
  %103 = load float, ptr addrspace(3) %23, align 4, !dbg !28
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %98) #3, !dbg !29
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %99) #3, !dbg !29
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %102) #3, !dbg !29
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %103) #3, !dbg !29
  %108 = fadd float %33, %104, !dbg !30
  %109 = fadd float %34, %105, !dbg !30
  %110 = fadd float %35, %106, !dbg !30
  %111 = fadd float %36, %107, !dbg !30
  %112 = fsub float %82, %108, !dbg !31
  %113 = fsub float %83, %109, !dbg !31
  %114 = fsub float %84, %110, !dbg !31
  %115 = fsub float %85, %111, !dbg !31
  %116 = fmul float %88, %112, !dbg !32
  %117 = fmul float %89, %113, !dbg !32
  %118 = fmul float %90, %114, !dbg !32
  %119 = fmul float %91, %115, !dbg !32
  %120 = fadd float %29, %116, !dbg !33
  %121 = fadd float %30, %117, !dbg !33
  %122 = fadd float %31, %118, !dbg !33
  %123 = fadd float %32, %119, !dbg !33
  br label %._crit_edge16, !dbg !23

._crit_edge16:                                    ; preds = %24, %87
  %124 = phi float [ %92, %87 ], [ 1.000000e+00, %24 ]
  %125 = phi float [ %93, %87 ], [ 1.000000e+00, %24 ]
  %126 = phi float [ %94, %87 ], [ 1.000000e+00, %24 ]
  %127 = phi float [ %95, %87 ], [ 1.000000e+00, %24 ]
  %128 = phi float [ %120, %87 ], [ 0.000000e+00, %24 ]
  %129 = phi float [ %121, %87 ], [ 0.000000e+00, %24 ]
  %130 = phi float [ %122, %87 ], [ 0.000000e+00, %24 ]
  %131 = phi float [ %123, %87 ], [ 0.000000e+00, %24 ]
  %.pn8 = phi float [ %108, %87 ], [ %82, %24 ]
  %.pn6 = phi float [ %109, %87 ], [ %83, %24 ]
  %.pn4 = phi float [ %110, %87 ], [ %84, %24 ]
  %.pn2 = phi float [ %111, %87 ], [ %85, %24 ]
  %132 = select i1 %66, float %.pn8, float %33, !dbg !34
  %133 = select i1 %67, float %.pn6, float %34, !dbg !34
  %134 = select i1 %68, float %.pn4, float %35, !dbg !34
  %135 = select i1 %69, float %.pn2, float %36, !dbg !34
  %136 = select i1 %66, float %128, float %29, !dbg !35
  %137 = select i1 %67, float %129, float %30, !dbg !35
  %138 = select i1 %68, float %130, float %31, !dbg !35
  %139 = select i1 %69, float %131, float %32, !dbg !35
  %140 = select i1 %70, float %124, float %25, !dbg !36
  %141 = select i1 %71, float %125, float %26, !dbg !36
  %142 = select i1 %72, float %126, float %27, !dbg !36
  %143 = select i1 %73, float %127, float %28, !dbg !36
  %144 = add i32 %37, 1024, !dbg !14
  %145 = icmp slt i32 %144, %6, !dbg !14
  br i1 %145, label %24, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %._crit_edge16, %.._crit_edge_crit_edge
  %.pre-phi44 = phi i64 [ %.pre43, %.._crit_edge_crit_edge ], [ %21, %._crit_edge16 ], !dbg !14
  %.pre-phi42 = phi i64 [ %.pre41, %.._crit_edge_crit_edge ], [ %19, %._crit_edge16 ], !dbg !14
  %146 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %132, %._crit_edge16 ]
  %147 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %133, %._crit_edge16 ]
  %148 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %134, %._crit_edge16 ]
  %149 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %135, %._crit_edge16 ]
  %150 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %136, %._crit_edge16 ]
  %151 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %137, %._crit_edge16 ]
  %152 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %138, %._crit_edge16 ]
  %153 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %139, %._crit_edge16 ]
  %154 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %140, %._crit_edge16 ]
  %155 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %141, %._crit_edge16 ]
  %156 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %142, %._crit_edge16 ]
  %157 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %143, %._crit_edge16 ]
  %158 = lshr i32 %8, 5, !dbg !8
  %159 = and i32 %158, 7, !dbg !8
  %160 = and i32 %8, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i64 %17, !dbg !14
  %162 = insertelement <1 x float> undef, float %154, i64 0, !dbg !14
  store <1 x float> %162, ptr addrspace(3) %161, align 4, !dbg !14
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi42, !dbg !14
  %164 = insertelement <1 x float> undef, float %155, i64 0, !dbg !14
  store <1 x float> %164, ptr addrspace(3) %163, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi44, !dbg !14
  %166 = load float, ptr addrspace(3) %165, align 8, !dbg !14
  %167 = getelementptr inbounds <2 x float>, ptr addrspace(3) %165, i64 0, i64 1, !dbg !14
  %168 = load float, ptr addrspace(3) %167, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %169 = insertelement <1 x float> undef, float %156, i64 0, !dbg !14
  store <1 x float> %169, ptr addrspace(3) %161, align 4, !dbg !14
  %170 = insertelement <1 x float> undef, float %157, i64 0, !dbg !14
  store <1 x float> %170, ptr addrspace(3) %163, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %171 = load float, ptr addrspace(3) %165, align 8, !dbg !14
  %172 = load float, ptr addrspace(3) %167, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %173 = fsub float %147, %146, !dbg !39
  %174 = fadd float %166, %168, !dbg !43
  %175 = fcmp oeq float %174, 0.000000e+00, !dbg !44
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %174) #3, !dbg !45
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !46
  %178 = fmul float %173, %177, !dbg !47
  %179 = fadd float %146, %178, !dbg !48
  %180 = fadd float %150, %151, !dbg !49
  %181 = fmul float %173, %173, !dbg !50
  %182 = fmul float %181, %166, !dbg !51
  %183 = fmul float %182, %177, !dbg !52
  %184 = fadd float %180, %183, !dbg !53
  %185 = fsub float %148, %179, !dbg !39
  %186 = fadd float %174, %171, !dbg !43
  %187 = fcmp oeq float %186, 0.000000e+00, !dbg !44
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %186) #3, !dbg !45
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !46
  %190 = fmul float %189, %185, !dbg !47
  %191 = fadd float %179, %190, !dbg !48
  %192 = fadd float %152, %184, !dbg !49
  %193 = fmul float %185, %185, !dbg !50
  %194 = fmul float %174, %193, !dbg !51
  %195 = fmul float %189, %194, !dbg !52
  %196 = fadd float %192, %195, !dbg !53
  %197 = fsub float %149, %191, !dbg !39
  %198 = fadd float %172, %186, !dbg !43
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !44
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %198) #3, !dbg !45
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !46
  %202 = fmul float %201, %197, !dbg !47
  %203 = fadd float %191, %202, !dbg !48
  %204 = fadd float %153, %196, !dbg !49
  %205 = fmul float %197, %197, !dbg !50
  %206 = fmul float %186, %205, !dbg !51
  %207 = fmul float %201, %206, !dbg !52
  %208 = fadd float %204, %207, !dbg !53
  %209 = bitcast float %203 to i32, !dbg !37
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !37
  %211 = bitcast i32 %210 to float, !dbg !37
  %212 = bitcast float %208 to i32, !dbg !37
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 16, i32 31), !dbg !37
  %214 = bitcast i32 %213 to float, !dbg !37
  %215 = bitcast float %198 to i32, !dbg !37
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !37
  %217 = bitcast i32 %216 to float, !dbg !37
  %218 = fsub float %211, %203, !dbg !39
  %219 = fadd float %198, %217, !dbg !43
  %220 = fcmp oeq float %219, 0.000000e+00, !dbg !44
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %219) #3, !dbg !45
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !46
  %223 = fmul float %222, %218, !dbg !47
  %224 = fadd float %203, %223, !dbg !48
  %225 = fadd float %208, %214, !dbg !49
  %226 = fmul float %218, %218, !dbg !50
  %227 = fmul float %198, %226, !dbg !51
  %228 = fmul float %222, %227, !dbg !52
  %229 = fadd float %225, %228, !dbg !53
  %230 = bitcast float %224 to i32, !dbg !37
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !37
  %232 = bitcast i32 %231 to float, !dbg !37
  %233 = bitcast float %229 to i32, !dbg !37
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !37
  %235 = bitcast i32 %234 to float, !dbg !37
  %236 = bitcast float %219 to i32, !dbg !37
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !37
  %238 = bitcast i32 %237 to float, !dbg !37
  %239 = fsub float %232, %224, !dbg !39
  %240 = fadd float %219, %238, !dbg !43
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !44
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %240) #3, !dbg !45
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !46
  %244 = fmul float %239, %243, !dbg !47
  %245 = fadd float %224, %244, !dbg !48
  %246 = fadd float %229, %235, !dbg !49
  %247 = fmul float %239, %239, !dbg !50
  %248 = fmul float %219, %247, !dbg !51
  %249 = fmul float %243, %248, !dbg !52
  %250 = fadd float %246, %249, !dbg !53
  %251 = bitcast float %245 to i32, !dbg !37
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !37
  %253 = bitcast i32 %252 to float, !dbg !37
  %254 = bitcast float %250 to i32, !dbg !37
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 4, i32 31), !dbg !37
  %256 = bitcast i32 %255 to float, !dbg !37
  %257 = bitcast float %240 to i32, !dbg !37
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !37
  %259 = bitcast i32 %258 to float, !dbg !37
  %260 = fsub float %253, %245, !dbg !39
  %261 = fadd float %240, %259, !dbg !43
  %262 = fcmp oeq float %261, 0.000000e+00, !dbg !44
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %261) #3, !dbg !45
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !46
  %265 = fmul float %260, %264, !dbg !47
  %266 = fadd float %245, %265, !dbg !48
  %267 = fadd float %250, %256, !dbg !49
  %268 = fmul float %260, %260, !dbg !50
  %269 = fmul float %240, %268, !dbg !51
  %270 = fmul float %264, %269, !dbg !52
  %271 = fadd float %267, %270, !dbg !53
  %272 = bitcast float %266 to i32, !dbg !37
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !37
  %274 = bitcast i32 %273 to float, !dbg !37
  %275 = bitcast float %271 to i32, !dbg !37
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !37
  %277 = bitcast i32 %276 to float, !dbg !37
  %278 = bitcast float %261 to i32, !dbg !37
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !37
  %280 = bitcast i32 %279 to float, !dbg !37
  %281 = fsub float %274, %266, !dbg !39
  %282 = fadd float %261, %280, !dbg !43
  %283 = fcmp oeq float %282, 0.000000e+00, !dbg !44
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %282) #3, !dbg !45
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !46
  %286 = fmul float %281, %285, !dbg !47
  %287 = fadd float %266, %286, !dbg !48
  %288 = fadd float %271, %277, !dbg !49
  %289 = fmul float %281, %281, !dbg !50
  %290 = fmul float %261, %289, !dbg !51
  %291 = fmul float %285, %290, !dbg !52
  %292 = fadd float %288, %291, !dbg !53
  %293 = bitcast float %287 to i32, !dbg !37
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !37
  %295 = bitcast i32 %294 to float, !dbg !37
  %296 = bitcast float %292 to i32, !dbg !37
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !37
  %298 = bitcast i32 %297 to float, !dbg !37
  %299 = bitcast float %282 to i32, !dbg !37
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !37
  %301 = bitcast i32 %300 to float, !dbg !37
  %302 = fsub float %295, %287, !dbg !39
  %303 = fadd float %282, %301, !dbg !43
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !44
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %303) #3, !dbg !45
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !46
  %307 = fmul float %302, %306, !dbg !47
  %308 = fadd float %287, %307, !dbg !48
  %309 = fadd float %292, %298, !dbg !49
  %310 = fmul float %302, %302, !dbg !50
  %311 = fmul float %282, %310, !dbg !51
  %312 = fmul float %306, %311, !dbg !52
  %313 = fadd float %309, %312, !dbg !53
  %314 = icmp eq i32 %160, 0, !dbg !37
  %315 = zext nneg i32 %159 to i64, !dbg !37
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, float %308, i1 %314) #3, !dbg !37
  %317 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %315, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, float %313, i1 %314) #3, !dbg !37
  %318 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %315, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, float %303, i1 %314) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %319 = icmp slt i32 %8, 8, !dbg !37
  %320 = sext i32 %8 to i64, !dbg !37
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !37
  %322 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %321, i1 %319) #3, !dbg !37
  %323 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %320, !dbg !37
  %324 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %323, i1 %319) #3, !dbg !37
  %325 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %320, !dbg !37
  %326 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %325, i1 %319) #3, !dbg !37
  %327 = bitcast float %322 to i32, !dbg !37
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !37
  %329 = bitcast i32 %328 to float, !dbg !37
  %330 = bitcast float %324 to i32, !dbg !37
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 4, i32 31), !dbg !37
  %332 = bitcast i32 %331 to float, !dbg !37
  %333 = bitcast float %326 to i32, !dbg !37
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 4, i32 31), !dbg !37
  %335 = bitcast i32 %334 to float, !dbg !37
  %336 = fsub float %329, %322, !dbg !39
  %337 = fadd float %326, %335, !dbg !43
  %338 = fcmp oeq float %337, 0.000000e+00, !dbg !44
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float %337) #3, !dbg !45
  %340 = select i1 %338, float 0.000000e+00, float %339, !dbg !46
  %341 = fmul float %336, %340, !dbg !47
  %342 = fadd float %322, %341, !dbg !48
  %343 = fadd float %324, %332, !dbg !49
  %344 = fmul float %336, %336, !dbg !50
  %345 = fmul float %326, %344, !dbg !51
  %346 = fmul float %345, %340, !dbg !52
  %347 = fadd float %343, %346, !dbg !53
  %348 = bitcast float %342 to i32, !dbg !37
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 2, i32 31), !dbg !37
  %350 = bitcast i32 %349 to float, !dbg !37
  %351 = bitcast float %347 to i32, !dbg !37
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 2, i32 31), !dbg !37
  %353 = bitcast i32 %352 to float, !dbg !37
  %354 = bitcast float %337 to i32, !dbg !37
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 2, i32 31), !dbg !37
  %356 = bitcast i32 %355 to float, !dbg !37
  %357 = fsub float %350, %342, !dbg !39
  %358 = fadd float %337, %356, !dbg !43
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !44
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %358) #3, !dbg !45
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !46
  %362 = fmul float %357, %361, !dbg !47
  %363 = fadd float %342, %362, !dbg !48
  %364 = fadd float %347, %353, !dbg !49
  %365 = fmul float %357, %357, !dbg !50
  %366 = fmul float %337, %365, !dbg !51
  %367 = fmul float %361, %366, !dbg !52
  %368 = fadd float %364, %367, !dbg !53
  %369 = bitcast float %363 to i32, !dbg !37
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 1, i32 31), !dbg !37
  %371 = bitcast i32 %370 to float, !dbg !37
  %372 = bitcast float %368 to i32, !dbg !37
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 1, i32 31), !dbg !37
  %374 = bitcast i32 %373 to float, !dbg !37
  %375 = bitcast float %358 to i32, !dbg !37
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !37
  %377 = bitcast i32 %376 to float, !dbg !37
  %378 = fsub float %371, %363, !dbg !39
  %379 = fadd float %358, %377, !dbg !43
  %380 = fcmp oeq float %379, 0.000000e+00, !dbg !44
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %379) #3, !dbg !45
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !46
  %383 = fmul float %378, %382, !dbg !47
  %384 = fadd float %363, %383, !dbg !48
  %385 = fadd float %368, %374, !dbg !49
  %386 = fmul float %378, %378, !dbg !50
  %387 = fmul float %358, %386, !dbg !51
  %388 = fmul float %382, %387, !dbg !52
  %389 = fadd float %385, %388, !dbg !53
  %390 = and i32 %8, 7, !dbg !37
  %391 = icmp eq i32 %390, 0, !dbg !37
  %392 = and i1 %319, %391, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, float %384, i1 %392) #3, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, float %389, i1 %392) #3, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, float %379, i1 %392) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %393 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !37
  %394 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %395 = insertelement <1 x float> undef, float %393, i64 0, !dbg !54
  store <1 x float> %395, ptr addrspace(3) @global_smem, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %396 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %397 = insertelement <1 x float> undef, float %394, i64 0, !dbg !55
  store <1 x float> %397, ptr addrspace(3) @global_smem, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %398 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !55
  %399 = sext i32 %11 to i64, !dbg !56
  %400 = getelementptr float, ptr addrspace(1) %1, i64 %399, !dbg !56
  %401 = icmp eq i32 %urem, 0, !dbg !57
  %402 = and i1 %401, %12, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %400, i1 %402) #3, !dbg !57
  %403 = getelementptr float, ptr addrspace(1) %2, i64 %399, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %398, ptr addrspace(1) %403, i1 %402) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "comqjhzxyqzjlo7umk67mvki7j47mnkqruik56edoyic6jg5kq42.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/om")
!3 = !{ptr @triton__0d1d2d345de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d345de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d345de6", linkageName: "triton__0d1d2d345de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 34, column: 43, scope: !5)
!12 = !DILocation(line: 34, column: 47, scope: !5)
!13 = !DILocation(line: 34, column: 51, scope: !5)
!14 = !DILocation(line: 30, column: 36, scope: !5)
!15 = !DILocation(line: 31, column: 27, scope: !5)
!16 = !DILocation(line: 32, column: 25, scope: !5)
!17 = !DILocation(line: 34, column: 40, scope: !5)
!18 = !DILocation(line: 34, column: 34, scope: !5)
!19 = !DILocation(line: 34, column: 65, scope: !5)
!20 = !DILocation(line: 34, column: 57, scope: !5)
!21 = !DILocation(line: 34, column: 117, scope: !5)
!22 = !DILocation(line: 38, column: 62, scope: !5)
!23 = !DILocation(line: 105, column: 7, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!26 = !DILocation(line: 38, column: 51, scope: !24)
!27 = !DILocation(line: 110, column: 24, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 111, column: 30, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 112, column: 34, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 112, column: 26, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 113, column: 39, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 113, column: 31, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 113, column: 22, scope: !24, inlinedAt: !26)
!34 = !DILocation(line: 40, column: 60, scope: !5)
!35 = !DILocation(line: 41, column: 56, scope: !5)
!36 = !DILocation(line: 42, column: 64, scope: !5)
!37 = !DILocation(line: 131, column: 46, scope: !24, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 41, scope: !24)
!39 = !DILocation(line: 119, column: 21, scope: !40, inlinedAt: !41)
!40 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!41 = !DILocation(line: 131, column: 46, scope: !40, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 41, scope: !40)
!43 = !DILocation(line: 120, column: 28, scope: !40, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 39, scope: !40, inlinedAt: !41)
!45 = !DILocation(line: 121, column: 60, scope: !40, inlinedAt: !41)
!46 = !DILocation(line: 121, column: 49, scope: !40, inlinedAt: !41)
!47 = !DILocation(line: 123, column: 25, scope: !40, inlinedAt: !41)
!48 = !DILocation(line: 123, column: 17, scope: !40, inlinedAt: !41)
!49 = !DILocation(line: 124, column: 15, scope: !40, inlinedAt: !41)
!50 = !DILocation(line: 124, column: 30, scope: !40, inlinedAt: !41)
!51 = !DILocation(line: 124, column: 38, scope: !40, inlinedAt: !41)
!52 = !DILocation(line: 124, column: 49, scope: !40, inlinedAt: !41)
!53 = !DILocation(line: 124, column: 22, scope: !40, inlinedAt: !41)
!54 = !DILocation(line: 46, column: 20, scope: !5)
!55 = !DILocation(line: 47, column: 20, scope: !5)
!56 = !DILocation(line: 49, column: 25, scope: !5)
!57 = !DILocation(line: 49, column: 36, scope: !5)
!58 = !DILocation(line: 50, column: 25, scope: !5)
!59 = !DILocation(line: 50, column: 36, scope: !5)
!60 = !DILocation(line: 50, column: 4, scope: !5)
