; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d891011de12e(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %14, 255, !dbg !8
  %15 = or i32 %urem, 512, !dbg !8
  %16 = or i32 %urem, 768, !dbg !8
  %17 = shl nuw nsw i32 %urem, 2, !dbg !8
  %18 = or i32 %17, 1, !dbg !8
  %19 = or i32 %17, 2, !dbg !8
  %20 = or i32 %17, 3, !dbg !8
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %22 = icmp slt i32 %21, 704, !dbg !10
  %23 = srem i32 %21, 32, !dbg !11
  %24 = mul i32 %21, 40, !dbg !12
  %25 = mul i32 %24, %8, !dbg !13
  %26 = mul i32 %25, %9, !dbg !14
  %27 = mul nsw i32 %23, 40, !dbg !15
  %28 = icmp sgt i32 %12, 0, !dbg !16
  br i1 %28, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !16

.._crit_edge_crit_edge:                           ; preds = %13
  %.pre45 = shl nuw nsw i32 %urem, 1, !dbg !16
  %.pre47 = zext nneg i32 %.pre45 to i64, !dbg !16
  br label %._crit_edge, !dbg !16

.lr.ph:                                           ; preds = %13
  %29 = or i32 %urem, 256, !dbg !8
  %30 = shl nuw nsw i32 %urem, 3
  %31 = zext nneg i32 %30 to i64
  %32 = getelementptr half, ptr addrspace(3) @global_smem, i64 %31
  %33 = shl nuw nsw i32 %18, 1
  %34 = zext nneg i32 %33 to i64
  %35 = getelementptr half, ptr addrspace(3) @global_smem, i64 %34
  %36 = shl nuw nsw i32 %19, 1
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr half, ptr addrspace(3) @global_smem, i64 %37
  %39 = shl nuw nsw i32 %20, 1
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr half, ptr addrspace(3) @global_smem, i64 %40
  %42 = shl nuw nsw i32 %urem, 1
  %43 = zext nneg i32 %42 to i64
  %44 = getelementptr half, ptr addrspace(3) @global_smem, i64 %43
  %45 = shl nuw nsw i32 %29, 1
  %46 = zext nneg i32 %45 to i64
  %47 = getelementptr half, ptr addrspace(3) @global_smem, i64 %46
  %48 = shl nuw nsw i32 %15, 1
  %49 = zext nneg i32 %48 to i64
  %50 = getelementptr half, ptr addrspace(3) @global_smem, i64 %49
  %51 = shl nuw nsw i32 %16, 1
  %52 = zext nneg i32 %51 to i64
  %53 = getelementptr half, ptr addrspace(3) @global_smem, i64 %52
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %43
  %55 = zext nneg i32 %urem to i64
  %56 = getelementptr half, ptr addrspace(3) @global_smem, i64 %55
  %57 = zext nneg i32 %29 to i64
  %58 = getelementptr half, ptr addrspace(3) @global_smem, i64 %57
  %59 = zext nneg i32 %15 to i64
  %60 = getelementptr half, ptr addrspace(3) @global_smem, i64 %59
  %61 = zext nneg i32 %16 to i64
  %62 = getelementptr half, ptr addrspace(3) @global_smem, i64 %61
  %63 = zext nneg i32 %17 to i64
  %64 = getelementptr half, ptr addrspace(3) @global_smem, i64 %63
  %65 = insertelement <2 x i1> poison, i1 %22, i64 0, !dbg !17
  %66 = shufflevector <2 x i1> %65, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !17
  %67 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !18
  %68 = insertelement <2 x i32> %67, i32 %urem, i64 1, !dbg !18
  %69 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !19
  %70 = shufflevector <2 x i32> %69, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !19
  br label %71, !dbg !16

71:                                               ; preds = %.lr.ph, %._crit_edge22
  %72 = phi float [ 0.000000e+00, %.lr.ph ], [ %317, %._crit_edge22 ]
  %73 = phi float [ 0.000000e+00, %.lr.ph ], [ %318, %._crit_edge22 ]
  %74 = phi float [ 0.000000e+00, %.lr.ph ], [ %319, %._crit_edge22 ]
  %75 = phi float [ 0.000000e+00, %.lr.ph ], [ %320, %._crit_edge22 ]
  %76 = phi float [ 0.000000e+00, %.lr.ph ], [ %313, %._crit_edge22 ]
  %77 = phi float [ 0.000000e+00, %.lr.ph ], [ %314, %._crit_edge22 ]
  %78 = phi float [ 0.000000e+00, %.lr.ph ], [ %315, %._crit_edge22 ]
  %79 = phi float [ 0.000000e+00, %.lr.ph ], [ %316, %._crit_edge22 ]
  %80 = phi float [ 0.000000e+00, %.lr.ph ], [ %311, %._crit_edge22 ]
  %81 = phi float [ 0.000000e+00, %.lr.ph ], [ %312, %._crit_edge22 ]
  %82 = phi i32 [ 0, %.lr.ph ], [ %332, %._crit_edge22 ]
  %83 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %310, %._crit_edge22 ]
  %84 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !18
  %85 = shufflevector <2 x i32> %84, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %86 = or <2 x i32> %85, %68, !dbg !18
  %87 = or i32 %82, %15, !dbg !18
  %88 = or i32 %82, %16, !dbg !18
  %89 = or i32 %82, %17, !dbg !18
  %90 = or i32 %82, %18, !dbg !18
  %91 = or i32 %82, %19, !dbg !18
  %92 = or i32 %82, %20, !dbg !18
  %93 = icmp slt i32 %87, %12, !dbg !19
  %94 = icmp slt i32 %88, %12, !dbg !19
  %95 = icmp slt i32 %89, %12, !dbg !19
  %96 = icmp slt i32 %90, %12, !dbg !19
  %97 = icmp slt i32 %91, %12, !dbg !19
  %98 = icmp slt i32 %92, %12, !dbg !19
  %99 = extractelement <2 x i32> %86, i64 1, !dbg !20
  %100 = sdiv i32 %99, %10, !dbg !20
  %101 = extractelement <2 x i32> %86, i64 0, !dbg !20
  %102 = sdiv i32 %101, %10, !dbg !20
  %103 = sdiv i32 %87, %10, !dbg !20
  %104 = sdiv i32 %88, %10, !dbg !20
  %105 = add i32 %89, %26, !dbg !21
  %106 = add i32 %90, %26, !dbg !21
  %107 = add i32 %91, %26, !dbg !21
  %108 = add i32 %92, %26, !dbg !21
  %109 = sext i32 %105 to i64, !dbg !22
  %110 = getelementptr half, ptr addrspace(1) %0, i64 %109, !dbg !22
  %111 = sext i32 %106 to i64, !dbg !22
  %112 = getelementptr half, ptr addrspace(1) %0, i64 %111, !dbg !22
  %113 = sext i32 %107 to i64, !dbg !22
  %114 = getelementptr half, ptr addrspace(1) %0, i64 %113, !dbg !22
  %115 = sext i32 %108 to i64, !dbg !22
  %116 = getelementptr half, ptr addrspace(1) %0, i64 %115, !dbg !22
  %117 = and i1 %22, %93, !dbg !17
  %118 = and i1 %22, %94, !dbg !17
  %119 = and i1 %22, %95, !dbg !17
  %120 = and i1 %22, %96, !dbg !17
  %121 = and i1 %22, %97, !dbg !17
  %122 = and i1 %22, %98, !dbg !17
  %123 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %110, i1 %119, i16 0, i1 %119) #3, !dbg !23
  %124 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %112, i1 %120, i16 0, i1 %120) #3, !dbg !23
  %125 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %114, i1 %121, i16 0, i1 %121) #3, !dbg !23
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %116, i1 %122, i16 0, i1 %122) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %123, ptr addrspace(3) %32, align 2, !dbg !24
  store i16 %124, ptr addrspace(3) %35, align 2, !dbg !24
  store i16 %125, ptr addrspace(3) %38, align 2, !dbg !24
  store i16 %126, ptr addrspace(3) %41, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %127 = load half, ptr addrspace(3) %44, align 2, !dbg !24
  %128 = load half, ptr addrspace(3) %47, align 2, !dbg !24
  %129 = load half, ptr addrspace(3) %50, align 2, !dbg !24
  %130 = load half, ptr addrspace(3) %53, align 2, !dbg !24
  %131 = add i32 %100, %27, !dbg !25
  %132 = add i32 %102, %27, !dbg !25
  %133 = add i32 %103, %27, !dbg !25
  %134 = add i32 %104, %27, !dbg !25
  %135 = sext i32 %131 to i64, !dbg !26
  %136 = getelementptr half, ptr addrspace(1) %1, i64 %135, !dbg !26
  %137 = sext i32 %132 to i64, !dbg !26
  %138 = getelementptr half, ptr addrspace(1) %1, i64 %137, !dbg !26
  %139 = sext i32 %133 to i64, !dbg !26
  %140 = getelementptr half, ptr addrspace(1) %1, i64 %139, !dbg !26
  %141 = sext i32 %134 to i64, !dbg !26
  %142 = getelementptr half, ptr addrspace(1) %1, i64 %141, !dbg !26
  %143 = getelementptr half, ptr addrspace(1) %2, i64 %109, !dbg !27
  %144 = getelementptr half, ptr addrspace(1) %2, i64 %111, !dbg !27
  %145 = getelementptr half, ptr addrspace(1) %2, i64 %113, !dbg !27
  %146 = getelementptr half, ptr addrspace(1) %2, i64 %115, !dbg !27
  %147 = add i32 %100, %24, !dbg !28
  %148 = add i32 %102, %24, !dbg !28
  %149 = add i32 %103, %24, !dbg !28
  %150 = add i32 %104, %24, !dbg !28
  %151 = sext i32 %147 to i64, !dbg !29
  %152 = getelementptr half, ptr addrspace(1) %3, i64 %151, !dbg !29
  %153 = sext i32 %148 to i64, !dbg !29
  %154 = getelementptr half, ptr addrspace(1) %3, i64 %153, !dbg !29
  %155 = sext i32 %149 to i64, !dbg !29
  %156 = getelementptr half, ptr addrspace(1) %3, i64 %155, !dbg !29
  %157 = sext i32 %150 to i64, !dbg !29
  %158 = getelementptr half, ptr addrspace(1) %3, i64 %157, !dbg !29
  %159 = getelementptr half, ptr addrspace(1) %4, i64 %135, !dbg !30
  %160 = getelementptr half, ptr addrspace(1) %4, i64 %137, !dbg !30
  %161 = getelementptr half, ptr addrspace(1) %4, i64 %139, !dbg !30
  %162 = getelementptr half, ptr addrspace(1) %4, i64 %141, !dbg !30
  %163 = getelementptr half, ptr addrspace(1) %5, i64 %151, !dbg !31
  %164 = getelementptr half, ptr addrspace(1) %5, i64 %153, !dbg !31
  %165 = getelementptr half, ptr addrspace(1) %5, i64 %155, !dbg !31
  %166 = getelementptr half, ptr addrspace(1) %5, i64 %157, !dbg !31
  %167 = icmp slt <2 x i32> %86, %70, !dbg !19
  %168 = and <2 x i1> %66, %167, !dbg !17
  %169 = insertelement <2 x half> poison, half %128, i64 0, !dbg !24
  %170 = insertelement <2 x half> %169, half %127, i64 1, !dbg !24
  %171 = fpext <2 x half> %170 to <2 x float>, !dbg !24
  %172 = extractelement <2 x i1> %168, i64 1, !dbg !32
  %173 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %136, i1 %172, i16 0, i1 %172) #3, !dbg !33
  %174 = extractelement <2 x i1> %168, i64 0, !dbg !32
  %175 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %138, i1 %174, i16 0, i1 %174) #3, !dbg !33
  %176 = insertelement <2 x i16> poison, i16 %175, i64 0, !dbg !33
  %177 = insertelement <2 x i16> %176, i16 %173, i64 1, !dbg !33
  %178 = bitcast <2 x i16> %177 to <2 x half>, !dbg !33
  %179 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %140, i1 %117, i16 0, i1 %117) #3, !dbg !33
  %180 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %142, i1 %118, i16 0, i1 %118) #3, !dbg !33
  %181 = fpext <2 x half> %178 to <2 x float>, !dbg !34
  %182 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %143, i1 %119, i16 0, i1 %119) #3, !dbg !35
  %183 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %144, i1 %120, i16 0, i1 %120) #3, !dbg !35
  %184 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %145, i1 %121, i16 0, i1 %121) #3, !dbg !35
  %185 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %146, i1 %122, i16 0, i1 %122) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %182, ptr addrspace(3) %32, align 2, !dbg !36
  store i16 %183, ptr addrspace(3) %35, align 2, !dbg !36
  store i16 %184, ptr addrspace(3) %38, align 2, !dbg !36
  store i16 %185, ptr addrspace(3) %41, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %186 = load half, ptr addrspace(3) %44, align 2, !dbg !36
  %187 = load half, ptr addrspace(3) %47, align 2, !dbg !36
  %188 = load half, ptr addrspace(3) %50, align 2, !dbg !36
  %189 = load half, ptr addrspace(3) %53, align 2, !dbg !36
  %190 = insertelement <2 x half> poison, half %187, i64 0, !dbg !37
  %191 = insertelement <2 x half> %190, half %186, i64 1, !dbg !37
  %192 = fpext <2 x half> %191 to <2 x float>, !dbg !37
  %193 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %152, i1 %172, i16 0, i1 %172) #3, !dbg !38
  %194 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %154, i1 %174, i16 0, i1 %174) #3, !dbg !38
  %195 = insertelement <2 x i16> poison, i16 %194, i64 0, !dbg !38
  %196 = insertelement <2 x i16> %195, i16 %193, i64 1, !dbg !38
  %197 = bitcast <2 x i16> %196 to <2 x half>, !dbg !38
  %198 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %156, i1 %117, i16 0, i1 %117) #3, !dbg !38
  %199 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %158, i1 %118, i16 0, i1 %118) #3, !dbg !38
  %200 = fpext <2 x half> %197 to <2 x float>, !dbg !39
  %201 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %159, i1 %172, i16 0, i1 %172) #3, !dbg !40
  %202 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %160, i1 %174, i16 0, i1 %174) #3, !dbg !40
  %203 = insertelement <2 x i16> poison, i16 %202, i64 0, !dbg !40
  %204 = insertelement <2 x i16> %203, i16 %201, i64 1, !dbg !40
  %205 = bitcast <2 x i16> %204 to <2 x half>, !dbg !40
  %206 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %161, i1 %117, i16 0, i1 %117) #3, !dbg !40
  %207 = bitcast i16 %206 to half, !dbg !40
  %208 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 %118, i16 0, i1 %118) #3, !dbg !40
  %209 = bitcast i16 %208 to half, !dbg !40
  %210 = fpext <2 x half> %205 to <2 x float>, !dbg !41
  %211 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %163, i1 %172, i16 0, i1 %172) #3, !dbg !32
  %212 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %164, i1 %174, i16 0, i1 %174) #3, !dbg !32
  %213 = insertelement <2 x i16> poison, i16 %212, i64 0, !dbg !32
  %214 = insertelement <2 x i16> %213, i16 %211, i64 1, !dbg !32
  %215 = bitcast <2 x i16> %214 to <2 x half>, !dbg !32
  %216 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %165, i1 %117, i16 0, i1 %117) #3, !dbg !32
  %217 = bitcast i16 %216 to half, !dbg !32
  %218 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %166, i1 %118, i16 0, i1 %118) #3, !dbg !32
  %219 = bitcast i16 %218 to half, !dbg !32
  %220 = fpext <2 x half> %215 to <2 x float>, !dbg !42
  %221 = fadd <2 x float> %171, %181, !dbg !43
  %222 = fmul <2 x float> %192, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %223 = fadd <2 x float> %221, %222, !dbg !36
  %224 = fadd <2 x float> %200, %210, !dbg !45
  %225 = fmul <2 x float> %220, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %226 = fadd <2 x float> %224, %225, !dbg !47
  %227 = insertelement <2 x i16> poison, i16 %179, i64 0, !dbg !33
  %228 = insertelement <2 x i16> %227, i16 %198, i64 1, !dbg !33
  %229 = bitcast <2 x i16> %228 to <2 x half>, !dbg !33
  %230 = fpext <2 x half> %229 to <2 x float>, !dbg !34
  %231 = insertelement <2 x half> poison, half %129, i64 0, !dbg !24
  %232 = insertelement <2 x half> %231, half %207, i64 1, !dbg !24
  %233 = fpext <2 x half> %232 to <2 x float>, !dbg !24
  %234 = insertelement <2 x half> poison, half %188, i64 0, !dbg !37
  %235 = insertelement <2 x half> %234, half %217, i64 1, !dbg !37
  %236 = fpext <2 x half> %235 to <2 x float>, !dbg !37
  %237 = fadd <2 x float> %230, %233, !dbg !43
  %238 = fmul <2 x float> %236, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %239 = fadd <2 x float> %237, %238, !dbg !36
  %240 = insertelement <2 x i16> poison, i16 %180, i64 0, !dbg !33
  %241 = insertelement <2 x i16> %240, i16 %199, i64 1, !dbg !33
  %242 = bitcast <2 x i16> %241 to <2 x half>, !dbg !33
  %243 = fpext <2 x half> %242 to <2 x float>, !dbg !34
  %244 = insertelement <2 x half> poison, half %130, i64 0, !dbg !24
  %245 = insertelement <2 x half> %244, half %209, i64 1, !dbg !24
  %246 = fpext <2 x half> %245 to <2 x float>, !dbg !24
  %247 = insertelement <2 x half> poison, half %189, i64 0, !dbg !37
  %248 = insertelement <2 x half> %247, half %219, i64 1, !dbg !37
  %249 = fpext <2 x half> %248 to <2 x float>, !dbg !37
  %250 = fadd <2 x float> %243, %246, !dbg !43
  %251 = fmul <2 x float> %249, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %252 = fadd <2 x float> %250, %251, !dbg !36
  %253 = fadd <2 x float> %223, %226, !dbg !48
  %shift = shufflevector <2 x float> %239, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %254 = fadd <2 x float> %239, %shift, !dbg !48
  %255 = extractelement <2 x float> %254, i64 0, !dbg !48
  %shift63 = shufflevector <2 x float> %252, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %256 = fadd <2 x float> %252, %shift63, !dbg !48
  %257 = extractelement <2 x float> %256, i64 0, !dbg !48
  %258 = icmp eq i32 %82, 0, !dbg !49
  br i1 %258, label %._crit_edge22, label %259, !dbg !50

259:                                              ; preds = %71
  %260 = fsub <2 x float> %253, %83, !dbg !54
  %261 = extractelement <2 x float> %260, i64 1, !dbg !54
  %262 = fsub <2 x float> %253, %83, !dbg !54
  %263 = extractelement <2 x float> %262, i64 0, !dbg !54
  %264 = fsub float %255, %80, !dbg !54
  %265 = fsub float %257, %81, !dbg !54
  %266 = fadd float %72, 1.000000e+00, !dbg !55
  %267 = fadd float %73, 1.000000e+00, !dbg !55
  %268 = fadd float %74, 1.000000e+00, !dbg !55
  %269 = fadd float %75, 1.000000e+00, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %270 = insertelement <1 x float> undef, float %266, i64 0, !dbg !55
  store <1 x float> %270, ptr addrspace(3) %54, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %271 = load float, ptr addrspace(3) %54, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %272 = insertelement <1 x float> undef, float %267, i64 0, !dbg !55
  store <1 x float> %272, ptr addrspace(3) %54, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %273 = load float, ptr addrspace(3) %54, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %274 = insertelement <1 x float> undef, float %268, i64 0, !dbg !55
  store <1 x float> %274, ptr addrspace(3) %54, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %275 = load float, ptr addrspace(3) %54, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %276 = insertelement <1 x float> undef, float %269, i64 0, !dbg !55
  store <1 x float> %276, ptr addrspace(3) %54, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %277 = load float, ptr addrspace(3) %54, align 4, !dbg !55
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %271) #3, !dbg !56
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %273) #3, !dbg !56
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %275) #3, !dbg !56
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %277) #3, !dbg !56
  %282 = insertelement <2 x float> poison, float %279, i64 0, !dbg !57
  %283 = insertelement <2 x float> %282, float %278, i64 1, !dbg !57
  %284 = fadd <2 x float> %83, %283, !dbg !57
  %285 = fadd float %80, %280, !dbg !57
  %286 = fadd float %81, %281, !dbg !57
  %287 = fsub <2 x float> %253, %284, !dbg !58
  %288 = fsub <2 x float> %253, %284, !dbg !58
  %289 = fsub float %255, %285, !dbg !58
  %290 = fsub float %257, %286, !dbg !58
  %291 = fmul <2 x float> %260, %287, !dbg !59
  %292 = extractelement <2 x float> %291, i64 1, !dbg !59
  %293 = fmul <2 x float> %262, %288, !dbg !59
  %294 = extractelement <2 x float> %293, i64 0, !dbg !59
  %295 = fmul float %264, %289, !dbg !59
  %296 = fmul float %265, %290, !dbg !59
  %297 = fadd float %76, %292, !dbg !60
  %298 = fadd float %77, %294, !dbg !60
  %299 = fadd float %78, %295, !dbg !60
  %300 = fadd float %79, %296, !dbg !60
  br label %._crit_edge22, !dbg !50

._crit_edge22:                                    ; preds = %71, %259
  %301 = phi float [ %266, %259 ], [ 1.000000e+00, %71 ]
  %302 = phi float [ %267, %259 ], [ 1.000000e+00, %71 ]
  %303 = phi float [ %268, %259 ], [ 1.000000e+00, %71 ]
  %304 = phi float [ %269, %259 ], [ 1.000000e+00, %71 ]
  %305 = phi float [ %297, %259 ], [ 0.000000e+00, %71 ]
  %306 = phi float [ %298, %259 ], [ 0.000000e+00, %71 ]
  %307 = phi float [ %299, %259 ], [ 0.000000e+00, %71 ]
  %308 = phi float [ %300, %259 ], [ 0.000000e+00, %71 ]
  %.pn4 = phi float [ %285, %259 ], [ %255, %71 ]
  %.pn2 = phi float [ %286, %259 ], [ %257, %71 ]
  %309 = phi <2 x float> [ %284, %259 ], [ %253, %71 ]
  %310 = select <2 x i1> %168, <2 x float> %309, <2 x float> %83, !dbg !61
  %311 = select i1 %117, float %.pn4, float %80, !dbg !61
  %312 = select i1 %118, float %.pn2, float %81, !dbg !61
  %313 = select i1 %172, float %305, float %76, !dbg !62
  %314 = select i1 %174, float %306, float %77, !dbg !62
  %315 = select i1 %117, float %307, float %78, !dbg !62
  %316 = select i1 %118, float %308, float %79, !dbg !62
  %317 = select i1 %172, float %301, float %72, !dbg !63
  %318 = select i1 %174, float %302, float %73, !dbg !63
  %319 = select i1 %117, float %303, float %74, !dbg !63
  %320 = select i1 %118, float %304, float %75, !dbg !63
  %321 = extractelement <2 x float> %253, i64 1, !dbg !64
  %322 = fptrunc float %321 to half, !dbg !64
  %323 = extractelement <2 x float> %253, i64 0, !dbg !64
  %324 = fptrunc float %323 to half, !dbg !64
  %325 = fptrunc float %255 to half, !dbg !64
  %326 = fptrunc float %257 to half, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %327 = insertelement <1 x half> undef, half %322, i64 0, !dbg !64
  store <1 x half> %327, ptr addrspace(3) %56, align 2, !dbg !64
  %328 = insertelement <1 x half> undef, half %324, i64 0, !dbg !64
  store <1 x half> %328, ptr addrspace(3) %58, align 2, !dbg !64
  %329 = insertelement <1 x half> undef, half %325, i64 0, !dbg !64
  store <1 x half> %329, ptr addrspace(3) %60, align 2, !dbg !64
  %330 = insertelement <1 x half> undef, half %326, i64 0, !dbg !64
  store <1 x half> %330, ptr addrspace(3) %62, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %331 = load <4 x i16>, ptr addrspace(3) %64, align 8, !dbg !64
  %.extract = extractelement <4 x i16> %331, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract, ptr addrspace(1) %110, i1 %119) #3, !dbg !64
  %.extract10 = extractelement <4 x i16> %331, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract10, ptr addrspace(1) %112, i1 %120) #3, !dbg !64
  %.extract12 = extractelement <4 x i16> %331, i64 2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract12, ptr addrspace(1) %114, i1 %121) #3, !dbg !64
  %.extract14 = extractelement <4 x i16> %331, i64 3, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract14, ptr addrspace(1) %116, i1 %122) #3, !dbg !64
  %332 = add i32 %82, 1024, !dbg !16
  %333 = icmp slt i32 %332, %12, !dbg !16
  br i1 %333, label %71, label %._crit_edge, !dbg !16

._crit_edge:                                      ; preds = %._crit_edge22, %.._crit_edge_crit_edge
  %.pre-phi48 = phi i64 [ %.pre47, %.._crit_edge_crit_edge ], [ %43, %._crit_edge22 ], !dbg !16
  %334 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %311, %._crit_edge22 ]
  %335 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %312, %._crit_edge22 ]
  %336 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %313, %._crit_edge22 ]
  %337 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %314, %._crit_edge22 ]
  %338 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %315, %._crit_edge22 ]
  %339 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %316, %._crit_edge22 ]
  %340 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %317, %._crit_edge22 ]
  %341 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %318, %._crit_edge22 ]
  %342 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %319, %._crit_edge22 ]
  %343 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %320, %._crit_edge22 ]
  %344 = phi <2 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %310, %._crit_edge22 ]
  %345 = lshr i32 %14, 5, !dbg !8
  %346 = and i32 %345, 7, !dbg !8
  %347 = and i32 %14, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi48, !dbg !16
  %349 = insertelement <1 x float> undef, float %340, i64 0, !dbg !16
  store <1 x float> %349, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %350 = load float, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %351 = insertelement <1 x float> undef, float %341, i64 0, !dbg !16
  store <1 x float> %351, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %352 = load float, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %353 = insertelement <1 x float> undef, float %342, i64 0, !dbg !16
  store <1 x float> %353, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %354 = load float, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %355 = insertelement <1 x float> undef, float %343, i64 0, !dbg !16
  store <1 x float> %355, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %356 = load float, ptr addrspace(3) %348, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %357 = extractelement <2 x float> %344, i64 0, !dbg !67
  %358 = extractelement <2 x float> %344, i64 1, !dbg !67
  %359 = fsub float %357, %358, !dbg !67
  %360 = fadd float %350, %352, !dbg !71
  %361 = fcmp oeq float %360, 0.000000e+00, !dbg !72
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %360) #3, !dbg !73
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !74
  %364 = fmul float %359, %363, !dbg !75
  %365 = fadd float %358, %364, !dbg !76
  %366 = fadd float %336, %337, !dbg !77
  %367 = fmul float %359, %359, !dbg !78
  %368 = fmul float %367, %350, !dbg !79
  %369 = fmul float %368, %363, !dbg !80
  %370 = fadd float %366, %369, !dbg !81
  %371 = fsub float %334, %365, !dbg !67
  %372 = fadd float %360, %354, !dbg !71
  %373 = fcmp oeq float %372, 0.000000e+00, !dbg !72
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %372) #3, !dbg !73
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !74
  %376 = fmul float %375, %371, !dbg !75
  %377 = fadd float %365, %376, !dbg !76
  %378 = fadd float %338, %370, !dbg !77
  %379 = fmul float %371, %371, !dbg !78
  %380 = fmul float %360, %379, !dbg !79
  %381 = fmul float %375, %380, !dbg !80
  %382 = fadd float %378, %381, !dbg !81
  %383 = fsub float %335, %377, !dbg !67
  %384 = fadd float %372, %356, !dbg !71
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !72
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %384) #3, !dbg !73
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !74
  %388 = fmul float %387, %383, !dbg !75
  %389 = fadd float %377, %388, !dbg !76
  %390 = fadd float %339, %382, !dbg !77
  %391 = fmul float %383, %383, !dbg !78
  %392 = fmul float %372, %391, !dbg !79
  %393 = fmul float %387, %392, !dbg !80
  %394 = fadd float %390, %393, !dbg !81
  %395 = bitcast float %389 to i32, !dbg !65
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 16, i32 31), !dbg !65
  %397 = bitcast i32 %396 to float, !dbg !65
  %398 = bitcast float %394 to i32, !dbg !65
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 16, i32 31), !dbg !65
  %400 = bitcast i32 %399 to float, !dbg !65
  %401 = bitcast float %384 to i32, !dbg !65
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 16, i32 31), !dbg !65
  %403 = bitcast i32 %402 to float, !dbg !65
  %404 = fsub float %397, %389, !dbg !67
  %405 = fadd float %384, %403, !dbg !71
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !72
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %405) #3, !dbg !73
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !74
  %409 = fmul float %408, %404, !dbg !75
  %410 = fadd float %389, %409, !dbg !76
  %411 = fadd float %394, %400, !dbg !77
  %412 = fmul float %404, %404, !dbg !78
  %413 = fmul float %384, %412, !dbg !79
  %414 = fmul float %408, %413, !dbg !80
  %415 = fadd float %411, %414, !dbg !81
  %416 = bitcast float %410 to i32, !dbg !65
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 8, i32 31), !dbg !65
  %418 = bitcast i32 %417 to float, !dbg !65
  %419 = bitcast float %415 to i32, !dbg !65
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 8, i32 31), !dbg !65
  %421 = bitcast i32 %420 to float, !dbg !65
  %422 = bitcast float %405 to i32, !dbg !65
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 8, i32 31), !dbg !65
  %424 = bitcast i32 %423 to float, !dbg !65
  %425 = fsub float %418, %410, !dbg !67
  %426 = fadd float %405, %424, !dbg !71
  %427 = fcmp oeq float %426, 0.000000e+00, !dbg !72
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %426) #3, !dbg !73
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !74
  %430 = fmul float %425, %429, !dbg !75
  %431 = fadd float %410, %430, !dbg !76
  %432 = fadd float %415, %421, !dbg !77
  %433 = fmul float %425, %425, !dbg !78
  %434 = fmul float %405, %433, !dbg !79
  %435 = fmul float %429, %434, !dbg !80
  %436 = fadd float %432, %435, !dbg !81
  %437 = bitcast float %431 to i32, !dbg !65
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 4, i32 31), !dbg !65
  %439 = bitcast i32 %438 to float, !dbg !65
  %440 = bitcast float %436 to i32, !dbg !65
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 4, i32 31), !dbg !65
  %442 = bitcast i32 %441 to float, !dbg !65
  %443 = bitcast float %426 to i32, !dbg !65
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 4, i32 31), !dbg !65
  %445 = bitcast i32 %444 to float, !dbg !65
  %446 = fsub float %439, %431, !dbg !67
  %447 = fadd float %426, %445, !dbg !71
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !72
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %445, float %447) #3, !dbg !73
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !74
  %451 = fmul float %446, %450, !dbg !75
  %452 = fadd float %431, %451, !dbg !76
  %453 = fadd float %436, %442, !dbg !77
  %454 = fmul float %446, %446, !dbg !78
  %455 = fmul float %426, %454, !dbg !79
  %456 = fmul float %450, %455, !dbg !80
  %457 = fadd float %453, %456, !dbg !81
  %458 = bitcast float %452 to i32, !dbg !65
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 2, i32 31), !dbg !65
  %460 = bitcast i32 %459 to float, !dbg !65
  %461 = bitcast float %457 to i32, !dbg !65
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 2, i32 31), !dbg !65
  %463 = bitcast i32 %462 to float, !dbg !65
  %464 = bitcast float %447 to i32, !dbg !65
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 2, i32 31), !dbg !65
  %466 = bitcast i32 %465 to float, !dbg !65
  %467 = fsub float %460, %452, !dbg !67
  %468 = fadd float %447, %466, !dbg !71
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !72
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %466, float %468) #3, !dbg !73
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !74
  %472 = fmul float %467, %471, !dbg !75
  %473 = fadd float %452, %472, !dbg !76
  %474 = fadd float %457, %463, !dbg !77
  %475 = fmul float %467, %467, !dbg !78
  %476 = fmul float %447, %475, !dbg !79
  %477 = fmul float %471, %476, !dbg !80
  %478 = fadd float %474, %477, !dbg !81
  %479 = bitcast float %473 to i32, !dbg !65
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 1, i32 31), !dbg !65
  %481 = bitcast i32 %480 to float, !dbg !65
  %482 = bitcast float %478 to i32, !dbg !65
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 1, i32 31), !dbg !65
  %484 = bitcast i32 %483 to float, !dbg !65
  %485 = bitcast float %468 to i32, !dbg !65
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 1, i32 31), !dbg !65
  %487 = bitcast i32 %486 to float, !dbg !65
  %488 = fsub float %481, %473, !dbg !67
  %489 = fadd float %468, %487, !dbg !71
  %490 = fcmp oeq float %489, 0.000000e+00, !dbg !72
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %487, float %489) #3, !dbg !73
  %492 = select i1 %490, float 0.000000e+00, float %491, !dbg !74
  %493 = fmul float %488, %492, !dbg !75
  %494 = fadd float %473, %493, !dbg !76
  %495 = fadd float %478, %484, !dbg !77
  %496 = fmul float %488, %488, !dbg !78
  %497 = fmul float %468, %496, !dbg !79
  %498 = fmul float %492, %497, !dbg !80
  %499 = fadd float %495, %498, !dbg !81
  %500 = icmp eq i32 %347, 0, !dbg !65
  %501 = zext nneg i32 %346 to i64, !dbg !65
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i64 %501, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, float %494, i1 %500) #3, !dbg !65
  %503 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %501, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, float %499, i1 %500) #3, !dbg !65
  %504 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %501, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %504, float %489, i1 %500) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %505 = icmp slt i32 %14, 8, !dbg !65
  %506 = sext i32 %14 to i64, !dbg !65
  %507 = getelementptr float, ptr addrspace(3) @global_smem, i64 %506, !dbg !65
  %508 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %507, i1 %505) #3, !dbg !65
  %509 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %506, !dbg !65
  %510 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %509, i1 %505) #3, !dbg !65
  %511 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %506, !dbg !65
  %512 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %511, i1 %505) #3, !dbg !65
  %513 = bitcast float %508 to i32, !dbg !65
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 4, i32 31), !dbg !65
  %515 = bitcast i32 %514 to float, !dbg !65
  %516 = bitcast float %510 to i32, !dbg !65
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 4, i32 31), !dbg !65
  %518 = bitcast i32 %517 to float, !dbg !65
  %519 = bitcast float %512 to i32, !dbg !65
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 4, i32 31), !dbg !65
  %521 = bitcast i32 %520 to float, !dbg !65
  %522 = fsub float %515, %508, !dbg !67
  %523 = fadd float %512, %521, !dbg !71
  %524 = fcmp oeq float %523, 0.000000e+00, !dbg !72
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %521, float %523) #3, !dbg !73
  %526 = select i1 %524, float 0.000000e+00, float %525, !dbg !74
  %527 = fmul float %522, %526, !dbg !75
  %528 = fadd float %508, %527, !dbg !76
  %529 = fadd float %510, %518, !dbg !77
  %530 = fmul float %522, %522, !dbg !78
  %531 = fmul float %512, %530, !dbg !79
  %532 = fmul float %531, %526, !dbg !80
  %533 = fadd float %529, %532, !dbg !81
  %534 = bitcast float %528 to i32, !dbg !65
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 2, i32 31), !dbg !65
  %536 = bitcast i32 %535 to float, !dbg !65
  %537 = bitcast float %533 to i32, !dbg !65
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 2, i32 31), !dbg !65
  %539 = bitcast i32 %538 to float, !dbg !65
  %540 = bitcast float %523 to i32, !dbg !65
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 2, i32 31), !dbg !65
  %542 = bitcast i32 %541 to float, !dbg !65
  %543 = fsub float %536, %528, !dbg !67
  %544 = fadd float %523, %542, !dbg !71
  %545 = fcmp oeq float %544, 0.000000e+00, !dbg !72
  %546 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %542, float %544) #3, !dbg !73
  %547 = select i1 %545, float 0.000000e+00, float %546, !dbg !74
  %548 = fmul float %543, %547, !dbg !75
  %549 = fadd float %528, %548, !dbg !76
  %550 = fadd float %533, %539, !dbg !77
  %551 = fmul float %543, %543, !dbg !78
  %552 = fmul float %523, %551, !dbg !79
  %553 = fmul float %547, %552, !dbg !80
  %554 = fadd float %550, %553, !dbg !81
  %555 = bitcast float %549 to i32, !dbg !65
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 1, i32 31), !dbg !65
  %557 = bitcast i32 %556 to float, !dbg !65
  %558 = bitcast float %554 to i32, !dbg !65
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 1, i32 31), !dbg !65
  %560 = bitcast i32 %559 to float, !dbg !65
  %561 = bitcast float %544 to i32, !dbg !65
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 1, i32 31), !dbg !65
  %563 = bitcast i32 %562 to float, !dbg !65
  %564 = fsub float %557, %549, !dbg !67
  %565 = fadd float %544, %563, !dbg !71
  %566 = fcmp oeq float %565, 0.000000e+00, !dbg !72
  %567 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %563, float %565) #3, !dbg !73
  %568 = select i1 %566, float 0.000000e+00, float %567, !dbg !74
  %569 = fmul float %564, %568, !dbg !75
  %570 = fadd float %549, %569, !dbg !76
  %571 = fadd float %554, %560, !dbg !77
  %572 = fmul float %564, %564, !dbg !78
  %573 = fmul float %544, %572, !dbg !79
  %574 = fmul float %568, %573, !dbg !80
  %575 = fadd float %571, %574, !dbg !81
  %576 = and i32 %14, 7, !dbg !65
  %577 = icmp eq i32 %576, 0, !dbg !65
  %578 = and i1 %505, %577, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, float %570, i1 %578) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %509, float %575, i1 %578) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, float %565, i1 %578) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %579 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !65
  %580 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !65
  %581 = sext i32 %21 to i64, !dbg !82
  %582 = getelementptr float, ptr addrspace(1) %6, i64 %581, !dbg !82
  %583 = icmp eq i32 %urem, 0, !dbg !83
  %584 = and i1 %583, %22, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %579, ptr addrspace(1) %582, i1 %584) #3, !dbg !83
  %585 = getelementptr float, ptr addrspace(1) %7, i64 %581, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %580, ptr addrspace(1) %585, i1 %584) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cxdfotzcizqqusvzl6zcrzdystbnegyzkpbu35j7nzmkmlrzbtjl.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/xd")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12e, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d891011de12e", linkageName: "triton__0d1d2d3d4d5d6d7d891011de12e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 27, column: 18, scope: !5)
!12 = !DILocation(line: 36, column: 47, scope: !5)
!13 = !DILocation(line: 36, column: 51, scope: !5)
!14 = !DILocation(line: 36, column: 55, scope: !5)
!15 = !DILocation(line: 37, column: 43, scope: !5)
!16 = !DILocation(line: 31, column: 36, scope: !5)
!17 = !DILocation(line: 36, column: 69, scope: !5)
!18 = !DILocation(line: 32, column: 27, scope: !5)
!19 = !DILocation(line: 33, column: 25, scope: !5)
!20 = !DILocation(line: 35, column: 24, scope: !5)
!21 = !DILocation(line: 36, column: 44, scope: !5)
!22 = !DILocation(line: 36, column: 38, scope: !5)
!23 = !DILocation(line: 36, column: 61, scope: !5)
!24 = !DILocation(line: 36, column: 120, scope: !5)
!25 = !DILocation(line: 37, column: 40, scope: !5)
!26 = !DILocation(line: 37, column: 34, scope: !5)
!27 = !DILocation(line: 38, column: 34, scope: !5)
!28 = !DILocation(line: 39, column: 40, scope: !5)
!29 = !DILocation(line: 39, column: 34, scope: !5)
!30 = !DILocation(line: 40, column: 34, scope: !5)
!31 = !DILocation(line: 41, column: 35, scope: !5)
!32 = !DILocation(line: 41, column: 50, scope: !5)
!33 = !DILocation(line: 37, column: 49, scope: !5)
!34 = !DILocation(line: 37, column: 108, scope: !5)
!35 = !DILocation(line: 38, column: 57, scope: !5)
!36 = !DILocation(line: 45, column: 22, scope: !5)
!37 = !DILocation(line: 38, column: 116, scope: !5)
!38 = !DILocation(line: 39, column: 49, scope: !5)
!39 = !DILocation(line: 39, column: 108, scope: !5)
!40 = !DILocation(line: 40, column: 49, scope: !5)
!41 = !DILocation(line: 40, column: 108, scope: !5)
!42 = !DILocation(line: 41, column: 109, scope: !5)
!43 = !DILocation(line: 42, column: 22, scope: !5)
!44 = !DILocation(line: 44, column: 22, scope: !5)
!45 = !DILocation(line: 46, column: 22, scope: !5)
!46 = !DILocation(line: 47, column: 24, scope: !5)
!47 = !DILocation(line: 48, column: 23, scope: !5)
!48 = !DILocation(line: 49, column: 23, scope: !5)
!49 = !DILocation(line: 53, column: 66, scope: !5)
!50 = !DILocation(line: 105, column: 7, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !5, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!53 = !DILocation(line: 53, column: 55, scope: !51)
!54 = !DILocation(line: 110, column: 24, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 111, column: 30, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 112, column: 34, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 112, column: 26, scope: !51, inlinedAt: !53)
!58 = !DILocation(line: 113, column: 39, scope: !51, inlinedAt: !53)
!59 = !DILocation(line: 113, column: 31, scope: !51, inlinedAt: !53)
!60 = !DILocation(line: 113, column: 22, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 55, column: 62, scope: !5)
!62 = !DILocation(line: 56, column: 58, scope: !5)
!63 = !DILocation(line: 57, column: 66, scope: !5)
!64 = !DILocation(line: 58, column: 62, scope: !5)
!65 = !DILocation(line: 131, column: 46, scope: !51, inlinedAt: !66)
!66 = !DILocation(line: 60, column: 44, scope: !51)
!67 = !DILocation(line: 119, column: 21, scope: !68, inlinedAt: !69)
!68 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!69 = !DILocation(line: 131, column: 46, scope: !68, inlinedAt: !70)
!70 = !DILocation(line: 60, column: 44, scope: !68)
!71 = !DILocation(line: 120, column: 28, scope: !68, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 39, scope: !68, inlinedAt: !69)
!73 = !DILocation(line: 121, column: 60, scope: !68, inlinedAt: !69)
!74 = !DILocation(line: 121, column: 49, scope: !68, inlinedAt: !69)
!75 = !DILocation(line: 123, column: 25, scope: !68, inlinedAt: !69)
!76 = !DILocation(line: 123, column: 17, scope: !68, inlinedAt: !69)
!77 = !DILocation(line: 124, column: 15, scope: !68, inlinedAt: !69)
!78 = !DILocation(line: 124, column: 30, scope: !68, inlinedAt: !69)
!79 = !DILocation(line: 124, column: 38, scope: !68, inlinedAt: !69)
!80 = !DILocation(line: 124, column: 49, scope: !68, inlinedAt: !69)
!81 = !DILocation(line: 124, column: 22, scope: !68, inlinedAt: !69)
!82 = !DILocation(line: 65, column: 25, scope: !5)
!83 = !DILocation(line: 65, column: 37, scope: !5)
!84 = !DILocation(line: 66, column: 25, scope: !5)
!85 = !DILocation(line: 66, column: 37, scope: !5)
!86 = !DILocation(line: 66, column: 4, scope: !5)
