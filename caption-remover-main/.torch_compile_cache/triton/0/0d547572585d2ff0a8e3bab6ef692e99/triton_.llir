; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = and i32 %10, 7, !dbg !8
  %12 = lshr i32 %9, 4, !dbg !8
  %13 = shl nuw nsw i32 %11, 1, !dbg !8
  %14 = or i32 %13, %12, !dbg !8
  %15 = or i32 %14, 16, !dbg !8
  %16 = or i32 %14, 32, !dbg !8
  %17 = or i32 %14, 48, !dbg !8
  %18 = shl i32 %8, 3, !dbg !8
  %19 = and i32 %18, 56, !dbg !8
  %20 = shl i32 %8, 2, !dbg !9
  %21 = and i32 %20, 60, !dbg !9
  %22 = lshr i32 %9, 3, !dbg !9
  %23 = shl nuw nsw i32 %11, 2, !dbg !9
  %24 = or i32 %23, %22, !dbg !9
  %25 = or i32 %24, 32, !dbg !9
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %28 = add i32 %27, 1, !dbg !12
  %29 = shl i32 %26, 6, !dbg !13
  %30 = mul i32 %29, %28, !dbg !14
  %31 = or i32 %30, %14, !dbg !15
  %32 = or i32 %30, %15, !dbg !15
  %33 = or i32 %30, %16, !dbg !15
  %34 = or i32 %30, %17, !dbg !15
  %35 = or i32 %30, %19, !dbg !15
  %36 = icmp slt i32 %31, 7040, !dbg !16
  %37 = icmp slt i32 %32, 7040, !dbg !16
  %38 = icmp slt i32 %33, 7040, !dbg !16
  %39 = icmp slt i32 %34, 7040, !dbg !16
  %40 = icmp slt i32 %35, 7040, !dbg !16
  %41 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %42 = shl i32 %41, 6, !dbg !18
  %43 = or i32 %42, %21, !dbg !19
  %44 = or i32 %42, %24, !dbg !19
  %45 = or i32 %42, %25, !dbg !19
  %46 = icmp slt i32 %43, 2700, !dbg !20
  %47 = icmp slt i32 %44, 2700, !dbg !20
  %48 = icmp slt i32 %45, 2700, !dbg !20
  %.frozen = freeze i32 %35
  %49 = sdiv i32 %.frozen, 320, !dbg !21
  %50 = mul i32 %49, 320
  %.decomposed = sub i32 %.frozen, %50
  %51 = mul i32 %31, 2700, !dbg !22
  %52 = mul i32 %32, 2700, !dbg !22
  %53 = mul i32 %33, 2700, !dbg !22
  %54 = mul i32 %34, 2700, !dbg !22
  %55 = add i32 %51, %43, !dbg !23
  %56 = add i32 %52, %43, !dbg !23
  %57 = add i32 %53, %43, !dbg !23
  %58 = add i32 %54, %43, !dbg !23
  %59 = sext i32 %55 to i64, !dbg !24
  %60 = getelementptr half, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %56 to i64, !dbg !24
  %62 = getelementptr half, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = sext i32 %57 to i64, !dbg !24
  %64 = getelementptr half, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = sext i32 %58 to i64, !dbg !24
  %66 = getelementptr half, ptr addrspace(1) %0, i64 %65, !dbg !24
  %67 = and i1 %46, %36, !dbg !25
  %68 = and i1 %46, %37, !dbg !25
  %69 = and i1 %46, %38, !dbg !25
  %70 = and i1 %46, %39, !dbg !25
  %71 = and i1 %47, %40, !dbg !25
  %72 = and i1 %48, %40, !dbg !25
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %67) #2, !dbg !26
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !26
  %76 = trunc i32 %74 to i16, !dbg !26
  %extelt.offset = lshr i32 %74, 16, !dbg !26
  %77 = trunc i32 %extelt.offset to i16, !dbg !26
  %78 = trunc i32 %75 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %75, 16, !dbg !26
  %79 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %68) #2, !dbg !26
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !26
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !26
  %83 = trunc i32 %81 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %81, 16, !dbg !26
  %84 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %85 = trunc i32 %82 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %82, 16, !dbg !26
  %86 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %69) #2, !dbg !26
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !26
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !26
  %90 = trunc i32 %88 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %88, 16, !dbg !26
  %91 = trunc i32 %extelt.offset4 to i16, !dbg !26
  %92 = trunc i32 %89 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %89, 16, !dbg !26
  %93 = trunc i32 %extelt.offset5 to i16, !dbg !26
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %70) #2, !dbg !26
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !26
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !26
  %97 = trunc i32 %95 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %95, 16, !dbg !26
  %98 = trunc i32 %extelt.offset6 to i16, !dbg !26
  %99 = trunc i32 %96 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %96, 16, !dbg !26
  %100 = trunc i32 %extelt.offset7 to i16, !dbg !26
  %101 = mul nuw nsw i32 %21, 72, !dbg !27
  %102 = or i32 %14, %101, !dbg !27
  %103 = zext nneg i32 %102 to i64, !dbg !27
  %104 = getelementptr half, ptr addrspace(3) @global_smem, i64 %103, !dbg !27
  store i16 %76, ptr addrspace(3) %104, align 2, !dbg !27
  %105 = or i32 %21, 1, !dbg !27
  %106 = mul nuw nsw i32 %105, 72, !dbg !27
  %107 = add nuw nsw i32 %106, %14, !dbg !27
  %108 = zext nneg i32 %107 to i64, !dbg !27
  %109 = getelementptr half, ptr addrspace(3) @global_smem, i64 %108, !dbg !27
  store i16 %77, ptr addrspace(3) %109, align 2, !dbg !27
  %110 = or i32 %21, 2, !dbg !27
  %111 = mul nuw nsw i32 %110, 72, !dbg !27
  %112 = or i32 %111, %14, !dbg !27
  %113 = zext nneg i32 %112 to i64, !dbg !27
  %114 = getelementptr half, ptr addrspace(3) @global_smem, i64 %113, !dbg !27
  store i16 %78, ptr addrspace(3) %114, align 2, !dbg !27
  %115 = or i32 %21, 3, !dbg !27
  %116 = mul nuw nsw i32 %115, 72, !dbg !27
  %117 = add nuw nsw i32 %116, %14, !dbg !27
  %118 = zext nneg i32 %117 to i64, !dbg !27
  %119 = getelementptr half, ptr addrspace(3) @global_smem, i64 %118, !dbg !27
  store i16 %79, ptr addrspace(3) %119, align 2, !dbg !27
  %120 = or i32 %15, %101, !dbg !27
  %121 = zext nneg i32 %120 to i64, !dbg !27
  %122 = getelementptr half, ptr addrspace(3) @global_smem, i64 %121, !dbg !27
  store i16 %83, ptr addrspace(3) %122, align 2, !dbg !27
  %123 = add nuw nsw i32 %15, %106, !dbg !27
  %124 = zext nneg i32 %123 to i64, !dbg !27
  %125 = getelementptr half, ptr addrspace(3) @global_smem, i64 %124, !dbg !27
  store i16 %84, ptr addrspace(3) %125, align 2, !dbg !27
  %126 = add nuw nsw i32 %15, %111, !dbg !27
  %127 = zext nneg i32 %126 to i64, !dbg !27
  %128 = getelementptr half, ptr addrspace(3) @global_smem, i64 %127, !dbg !27
  store i16 %85, ptr addrspace(3) %128, align 2, !dbg !27
  %129 = add nuw nsw i32 %15, %116, !dbg !27
  %130 = zext nneg i32 %129 to i64, !dbg !27
  %131 = getelementptr half, ptr addrspace(3) @global_smem, i64 %130, !dbg !27
  store i16 %86, ptr addrspace(3) %131, align 2, !dbg !27
  %132 = add nuw nsw i32 %16, %101, !dbg !27
  %133 = zext nneg i32 %132 to i64, !dbg !27
  %134 = getelementptr half, ptr addrspace(3) @global_smem, i64 %133, !dbg !27
  store i16 %90, ptr addrspace(3) %134, align 2, !dbg !27
  %135 = add nuw nsw i32 %16, %106, !dbg !27
  %136 = zext nneg i32 %135 to i64, !dbg !27
  %137 = getelementptr half, ptr addrspace(3) @global_smem, i64 %136, !dbg !27
  store i16 %91, ptr addrspace(3) %137, align 2, !dbg !27
  %138 = add nuw nsw i32 %16, %111, !dbg !27
  %139 = zext nneg i32 %138 to i64, !dbg !27
  %140 = getelementptr half, ptr addrspace(3) @global_smem, i64 %139, !dbg !27
  store i16 %92, ptr addrspace(3) %140, align 2, !dbg !27
  %141 = add nuw nsw i32 %16, %116, !dbg !27
  %142 = zext nneg i32 %141 to i64, !dbg !27
  %143 = getelementptr half, ptr addrspace(3) @global_smem, i64 %142, !dbg !27
  store i16 %93, ptr addrspace(3) %143, align 2, !dbg !27
  %144 = add nuw nsw i32 %17, %101, !dbg !27
  %145 = zext nneg i32 %144 to i64, !dbg !27
  %146 = getelementptr half, ptr addrspace(3) @global_smem, i64 %145, !dbg !27
  store i16 %97, ptr addrspace(3) %146, align 2, !dbg !27
  %147 = add nuw nsw i32 %17, %106, !dbg !27
  %148 = zext nneg i32 %147 to i64, !dbg !27
  %149 = getelementptr half, ptr addrspace(3) @global_smem, i64 %148, !dbg !27
  store i16 %98, ptr addrspace(3) %149, align 2, !dbg !27
  %150 = add nuw nsw i32 %17, %111, !dbg !27
  %151 = zext nneg i32 %150 to i64, !dbg !27
  %152 = getelementptr half, ptr addrspace(3) @global_smem, i64 %151, !dbg !27
  store i16 %99, ptr addrspace(3) %152, align 2, !dbg !27
  %153 = add nuw nsw i32 %17, %116, !dbg !27
  %154 = zext nneg i32 %153 to i64, !dbg !27
  %155 = getelementptr half, ptr addrspace(3) @global_smem, i64 %154, !dbg !27
  store i16 %100, ptr addrspace(3) %155, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %156 = mul nuw nsw i32 %24, 72, !dbg !27
  %157 = add nuw nsw i32 %156, %19, !dbg !27
  %158 = zext nneg i32 %157 to i64, !dbg !27
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i64 %158, !dbg !27
  %160 = load half, ptr addrspace(3) %159, align 16, !dbg !27
  %161 = getelementptr inbounds <8 x half>, ptr addrspace(3) %159, i64 0, i64 1, !dbg !27
  %162 = load half, ptr addrspace(3) %161, align 2, !dbg !27
  %163 = getelementptr inbounds <8 x half>, ptr addrspace(3) %159, i64 0, i64 2, !dbg !27
  %164 = load half, ptr addrspace(3) %163, align 4, !dbg !27
  %165 = getelementptr inbounds <8 x half>, ptr addrspace(3) %159, i64 0, i64 3, !dbg !27
  %166 = load half, ptr addrspace(3) %165, align 2, !dbg !27
  %167 = getelementptr inbounds <8 x half>, ptr addrspace(3) %159, i64 0, i64 4, !dbg !27
  %168 = load half, ptr addrspace(3) %167, align 8, !dbg !27
  %169 = getelementptr inbounds <8 x half>, ptr addrspace(3) %159, i64 0, i64 5, !dbg !27
  %170 = load half, ptr addrspace(3) %169, align 2, !dbg !27
  %171 = getelementptr inbounds <8 x half>, ptr addrspace(3) %159, i64 0, i64 6, !dbg !27
  %172 = load half, ptr addrspace(3) %171, align 4, !dbg !27
  %173 = getelementptr inbounds <8 x half>, ptr addrspace(3) %159, i64 0, i64 7, !dbg !27
  %174 = load half, ptr addrspace(3) %173, align 2, !dbg !27
  %175 = mul nuw nsw i32 %25, 72, !dbg !27
  %176 = add nuw nsw i32 %175, %19, !dbg !27
  %177 = zext nneg i32 %176 to i64, !dbg !27
  %178 = getelementptr half, ptr addrspace(3) @global_smem, i64 %177, !dbg !27
  %179 = load half, ptr addrspace(3) %178, align 16, !dbg !27
  %180 = getelementptr inbounds <8 x half>, ptr addrspace(3) %178, i64 0, i64 1, !dbg !27
  %181 = load half, ptr addrspace(3) %180, align 2, !dbg !27
  %182 = getelementptr inbounds <8 x half>, ptr addrspace(3) %178, i64 0, i64 2, !dbg !27
  %183 = load half, ptr addrspace(3) %182, align 4, !dbg !27
  %184 = getelementptr inbounds <8 x half>, ptr addrspace(3) %178, i64 0, i64 3, !dbg !27
  %185 = load half, ptr addrspace(3) %184, align 2, !dbg !27
  %186 = getelementptr inbounds <8 x half>, ptr addrspace(3) %178, i64 0, i64 4, !dbg !27
  %187 = load half, ptr addrspace(3) %186, align 8, !dbg !27
  %188 = getelementptr inbounds <8 x half>, ptr addrspace(3) %178, i64 0, i64 5, !dbg !27
  %189 = load half, ptr addrspace(3) %188, align 2, !dbg !27
  %190 = getelementptr inbounds <8 x half>, ptr addrspace(3) %178, i64 0, i64 6, !dbg !27
  %191 = load half, ptr addrspace(3) %190, align 4, !dbg !27
  %192 = getelementptr inbounds <8 x half>, ptr addrspace(3) %178, i64 0, i64 7, !dbg !27
  %193 = load half, ptr addrspace(3) %192, align 2, !dbg !27
  %194 = fpext half %160 to float, !dbg !27
  %195 = fpext half %162 to float, !dbg !27
  %196 = fpext half %164 to float, !dbg !27
  %197 = fpext half %166 to float, !dbg !27
  %198 = fpext half %168 to float, !dbg !27
  %199 = fpext half %170 to float, !dbg !27
  %200 = fpext half %172 to float, !dbg !27
  %201 = fpext half %174 to float, !dbg !27
  %202 = fpext half %179 to float, !dbg !27
  %203 = fpext half %181 to float, !dbg !27
  %204 = fpext half %183 to float, !dbg !27
  %205 = fpext half %185 to float, !dbg !27
  %206 = fpext half %187 to float, !dbg !27
  %207 = fpext half %189 to float, !dbg !27
  %208 = fpext half %191 to float, !dbg !27
  %209 = fpext half %193 to float, !dbg !27
  %210 = mul i32 %44, 320, !dbg !28
  %211 = mul i32 %45, 320, !dbg !28
  %212 = mul i32 %49, 864000, !dbg !29
  %213 = add i32 %212, %.decomposed, !dbg !30
  %214 = add i32 %213, %210, !dbg !31
  %215 = add i32 %213, %211, !dbg !31
  %216 = sext i32 %214 to i64, !dbg !32
  %217 = getelementptr half, ptr addrspace(1) %1, i64 %216, !dbg !32
  %218 = sext i32 %215 to i64, !dbg !32
  %219 = getelementptr half, ptr addrspace(1) %1, i64 %218, !dbg !32
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %71) #2, !dbg !33
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !33
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !33
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !33
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !33
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 %72) #2, !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !33
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !33
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !33
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !33
  %230 = trunc i32 %226 to i16, !dbg !33
  %231 = bitcast i16 %230 to half, !dbg !33
  %232 = trunc i32 %227 to i16, !dbg !33
  %233 = bitcast i16 %232 to half, !dbg !33
  %234 = trunc i32 %228 to i16, !dbg !33
  %235 = bitcast i16 %234 to half, !dbg !33
  %236 = trunc i32 %229 to i16, !dbg !33
  %237 = bitcast i16 %236 to half, !dbg !33
  %238 = fpext half %231 to float, !dbg !34
  %239 = fpext half %233 to float, !dbg !34
  %240 = fpext half %235 to float, !dbg !34
  %241 = fpext half %237 to float, !dbg !34
  %242 = sext i32 %.decomposed to i64, !dbg !35
  %243 = getelementptr half, ptr addrspace(1) %2, i64 %242, !dbg !35
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %243, i1 %40) #2, !dbg !36
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !36
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !36
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !36
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !36
  %extelt.offset16 = lshr i32 %245, 16, !dbg !36
  %249 = trunc i32 %extelt.offset16 to i16, !dbg !36
  %250 = bitcast i16 %249 to half, !dbg !36
  %extelt.offset17 = lshr i32 %246, 16, !dbg !36
  %251 = trunc i32 %extelt.offset17 to i16, !dbg !36
  %252 = bitcast i16 %251 to half, !dbg !36
  %extelt.offset18 = lshr i32 %247, 16, !dbg !36
  %253 = trunc i32 %extelt.offset18 to i16, !dbg !36
  %254 = bitcast i16 %253 to half, !dbg !36
  %extelt.offset19 = lshr i32 %248, 16, !dbg !36
  %255 = trunc i32 %extelt.offset19 to i16, !dbg !36
  %256 = bitcast i16 %255 to half, !dbg !36
  %257 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !33
  %258 = insertelement <2 x i32> %257, i32 %245, i64 1, !dbg !33
  %259 = trunc <2 x i32> %258 to <2 x i16>, !dbg !33
  %260 = bitcast <2 x i16> %259 to <2 x half>, !dbg !33
  %261 = fpext <2 x half> %260 to <2 x float>, !dbg !34
  %262 = fpext half %250 to float, !dbg !37
  %263 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !33
  %264 = insertelement <2 x i32> %263, i32 %246, i64 1, !dbg !33
  %265 = trunc <2 x i32> %264 to <2 x i16>, !dbg !33
  %266 = bitcast <2 x i16> %265 to <2 x half>, !dbg !33
  %267 = fpext <2 x half> %266 to <2 x float>, !dbg !34
  %268 = fpext half %252 to float, !dbg !37
  %269 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !33
  %270 = insertelement <2 x i32> %269, i32 %247, i64 1, !dbg !33
  %271 = trunc <2 x i32> %270 to <2 x i16>, !dbg !33
  %272 = bitcast <2 x i16> %271 to <2 x half>, !dbg !33
  %273 = fpext <2 x half> %272 to <2 x float>, !dbg !34
  %274 = fpext half %254 to float, !dbg !37
  %275 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !33
  %276 = insertelement <2 x i32> %275, i32 %248, i64 1, !dbg !33
  %277 = trunc <2 x i32> %276 to <2 x i16>, !dbg !33
  %278 = bitcast <2 x i16> %277 to <2 x half>, !dbg !33
  %279 = fpext <2 x half> %278 to <2 x float>, !dbg !34
  %280 = fpext half %256 to float, !dbg !37
  %281 = getelementptr half, ptr addrspace(1) %3, i64 %216, !dbg !38
  %282 = getelementptr half, ptr addrspace(1) %3, i64 %218, !dbg !38
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %281, i1 %71) #2, !dbg !39
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !39
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !39
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !39
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !39
  %288 = trunc i32 %284 to i16, !dbg !39
  %289 = bitcast i16 %288 to half, !dbg !39
  %290 = trunc i32 %285 to i16, !dbg !39
  %291 = bitcast i16 %290 to half, !dbg !39
  %292 = trunc i32 %286 to i16, !dbg !39
  %293 = bitcast i16 %292 to half, !dbg !39
  %294 = trunc i32 %287 to i16, !dbg !39
  %295 = bitcast i16 %294 to half, !dbg !39
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %282, i1 %72) #2, !dbg !39
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !39
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !39
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !39
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !39
  %301 = trunc i32 %297 to i16, !dbg !39
  %302 = bitcast i16 %301 to half, !dbg !39
  %303 = trunc i32 %298 to i16, !dbg !39
  %304 = bitcast i16 %303 to half, !dbg !39
  %305 = trunc i32 %299 to i16, !dbg !39
  %306 = bitcast i16 %305 to half, !dbg !39
  %307 = trunc i32 %300 to i16, !dbg !39
  %308 = bitcast i16 %307 to half, !dbg !39
  %309 = fpext half %289 to float, !dbg !40
  %310 = fpext half %291 to float, !dbg !40
  %311 = fpext half %293 to float, !dbg !40
  %312 = fpext half %295 to float, !dbg !40
  %313 = fpext half %302 to float, !dbg !40
  %314 = fpext half %304 to float, !dbg !40
  %315 = fpext half %306 to float, !dbg !40
  %316 = fpext half %308 to float, !dbg !40
  %317 = extractelement <2 x float> %261, i64 0, !dbg !41
  %318 = extractelement <2 x float> %261, i64 1, !dbg !41
  %319 = fadd float %317, %318, !dbg !41
  %320 = extractelement <2 x float> %267, i64 0, !dbg !41
  %321 = extractelement <2 x float> %267, i64 1, !dbg !41
  %322 = fadd float %320, %321, !dbg !41
  %323 = extractelement <2 x float> %273, i64 0, !dbg !41
  %324 = extractelement <2 x float> %273, i64 1, !dbg !41
  %325 = fadd float %323, %324, !dbg !41
  %326 = extractelement <2 x float> %279, i64 0, !dbg !41
  %327 = extractelement <2 x float> %279, i64 1, !dbg !41
  %328 = fadd float %326, %327, !dbg !41
  %329 = fadd float %318, %238, !dbg !41
  %330 = fadd float %321, %239, !dbg !41
  %331 = fadd float %324, %240, !dbg !41
  %332 = fadd float %327, %241, !dbg !41
  %333 = fmul float %309, 1.250000e-01, !dbg !42
  %334 = insertelement <2 x i32> %257, i32 %284, i64 1, !dbg !33
  %335 = lshr <2 x i32> %334, <i32 16, i32 16>, !dbg !33
  %336 = trunc <2 x i32> %335 to <2 x i16>, !dbg !33
  %337 = bitcast <2 x i16> %336 to <2 x half>, !dbg !33
  %338 = fpext <2 x half> %337 to <2 x float>, !dbg !34
  %339 = fmul float %310, 1.250000e-01, !dbg !42
  %340 = insertelement <2 x i32> %263, i32 %285, i64 1, !dbg !33
  %341 = lshr <2 x i32> %340, <i32 16, i32 16>, !dbg !33
  %342 = trunc <2 x i32> %341 to <2 x i16>, !dbg !33
  %343 = bitcast <2 x i16> %342 to <2 x half>, !dbg !33
  %344 = fpext <2 x half> %343 to <2 x float>, !dbg !34
  %345 = fmul float %311, 1.250000e-01, !dbg !42
  %346 = insertelement <2 x i32> %269, i32 %286, i64 1, !dbg !33
  %347 = lshr <2 x i32> %346, <i32 16, i32 16>, !dbg !33
  %348 = trunc <2 x i32> %347 to <2 x i16>, !dbg !33
  %349 = bitcast <2 x i16> %348 to <2 x half>, !dbg !33
  %350 = fpext <2 x half> %349 to <2 x float>, !dbg !34
  %351 = fmul float %312, 1.250000e-01, !dbg !42
  %352 = insertelement <2 x i32> %275, i32 %287, i64 1, !dbg !33
  %353 = lshr <2 x i32> %352, <i32 16, i32 16>, !dbg !33
  %354 = trunc <2 x i32> %353 to <2 x i16>, !dbg !33
  %355 = bitcast <2 x i16> %354 to <2 x half>, !dbg !33
  %356 = fpext <2 x half> %355 to <2 x float>, !dbg !34
  %357 = fmul float %313, 1.250000e-01, !dbg !42
  %358 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !33
  %359 = insertelement <2 x i32> %358, i32 %297, i64 1, !dbg !33
  %360 = lshr <2 x i32> %359, <i32 16, i32 16>, !dbg !33
  %361 = trunc <2 x i32> %360 to <2 x i16>, !dbg !33
  %362 = bitcast <2 x i16> %361 to <2 x half>, !dbg !33
  %363 = fpext <2 x half> %362 to <2 x float>, !dbg !34
  %364 = fmul float %314, 1.250000e-01, !dbg !42
  %365 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !33
  %366 = insertelement <2 x i32> %365, i32 %298, i64 1, !dbg !33
  %367 = lshr <2 x i32> %366, <i32 16, i32 16>, !dbg !33
  %368 = trunc <2 x i32> %367 to <2 x i16>, !dbg !33
  %369 = bitcast <2 x i16> %368 to <2 x half>, !dbg !33
  %370 = fpext <2 x half> %369 to <2 x float>, !dbg !34
  %371 = fmul float %315, 1.250000e-01, !dbg !42
  %372 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !33
  %373 = insertelement <2 x i32> %372, i32 %299, i64 1, !dbg !33
  %374 = lshr <2 x i32> %373, <i32 16, i32 16>, !dbg !33
  %375 = trunc <2 x i32> %374 to <2 x i16>, !dbg !33
  %376 = bitcast <2 x i16> %375 to <2 x half>, !dbg !33
  %377 = fpext <2 x half> %376 to <2 x float>, !dbg !34
  %378 = fmul float %316, 1.250000e-01, !dbg !42
  %379 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !33
  %380 = insertelement <2 x i32> %379, i32 %300, i64 1, !dbg !33
  %381 = lshr <2 x i32> %380, <i32 16, i32 16>, !dbg !33
  %382 = trunc <2 x i32> %381 to <2 x i16>, !dbg !33
  %383 = bitcast <2 x i16> %382 to <2 x half>, !dbg !33
  %384 = fpext <2 x half> %383 to <2 x float>, !dbg !34
  %385 = fadd float %319, %333, !dbg !43
  %386 = extractelement <2 x float> %338, i64 0, !dbg !43
  %387 = fadd float %386, %262, !dbg !43
  %388 = extractelement <2 x float> %338, i64 1, !dbg !43
  %389 = fmul float %388, 1.250000e-01, !dbg !43
  %390 = fadd float %387, %389, !dbg !43
  %391 = fadd float %322, %339, !dbg !43
  %392 = extractelement <2 x float> %344, i64 0, !dbg !43
  %393 = fadd float %392, %268, !dbg !43
  %394 = extractelement <2 x float> %344, i64 1, !dbg !43
  %395 = fmul float %394, 1.250000e-01, !dbg !43
  %396 = fadd float %393, %395, !dbg !43
  %397 = fadd float %325, %345, !dbg !43
  %398 = extractelement <2 x float> %350, i64 0, !dbg !43
  %399 = fadd float %398, %274, !dbg !43
  %400 = extractelement <2 x float> %350, i64 1, !dbg !43
  %401 = fmul float %400, 1.250000e-01, !dbg !43
  %402 = fadd float %399, %401, !dbg !43
  %403 = fadd float %328, %351, !dbg !43
  %404 = extractelement <2 x float> %356, i64 0, !dbg !43
  %405 = fadd float %404, %280, !dbg !43
  %406 = extractelement <2 x float> %356, i64 1, !dbg !43
  %407 = fmul float %406, 1.250000e-01, !dbg !43
  %408 = fadd float %405, %407, !dbg !43
  %409 = fadd float %329, %357, !dbg !43
  %410 = extractelement <2 x float> %363, i64 0, !dbg !43
  %411 = fadd float %410, %262, !dbg !43
  %412 = extractelement <2 x float> %363, i64 1, !dbg !43
  %413 = fmul float %412, 1.250000e-01, !dbg !43
  %414 = fadd float %411, %413, !dbg !43
  %415 = fadd float %330, %364, !dbg !43
  %416 = extractelement <2 x float> %370, i64 0, !dbg !43
  %417 = fadd float %416, %268, !dbg !43
  %418 = extractelement <2 x float> %370, i64 1, !dbg !43
  %419 = fmul float %418, 1.250000e-01, !dbg !43
  %420 = fadd float %417, %419, !dbg !43
  %421 = fadd float %331, %371, !dbg !43
  %422 = extractelement <2 x float> %377, i64 0, !dbg !43
  %423 = fadd float %422, %274, !dbg !43
  %424 = extractelement <2 x float> %377, i64 1, !dbg !43
  %425 = fmul float %424, 1.250000e-01, !dbg !43
  %426 = fadd float %423, %425, !dbg !43
  %427 = fadd float %332, %378, !dbg !43
  %428 = extractelement <2 x float> %384, i64 0, !dbg !43
  %429 = fadd float %428, %280, !dbg !43
  %430 = extractelement <2 x float> %384, i64 1, !dbg !43
  %431 = fmul float %430, 1.250000e-01, !dbg !43
  %432 = fadd float %429, %431, !dbg !43
  %433 = fadd float %385, %194, !dbg !44
  %434 = fadd float %390, %195, !dbg !44
  %435 = fadd float %391, %196, !dbg !44
  %436 = fadd float %396, %197, !dbg !44
  %437 = fadd float %397, %198, !dbg !44
  %438 = fadd float %402, %199, !dbg !44
  %439 = fadd float %403, %200, !dbg !44
  %440 = fadd float %408, %201, !dbg !44
  %441 = fadd float %409, %202, !dbg !44
  %442 = fadd float %414, %203, !dbg !44
  %443 = fadd float %415, %204, !dbg !44
  %444 = fadd float %420, %205, !dbg !44
  %445 = fadd float %421, %206, !dbg !44
  %446 = fadd float %426, %207, !dbg !44
  %447 = fadd float %427, %208, !dbg !44
  %448 = fadd float %432, %209, !dbg !44
  %449 = getelementptr half, ptr addrspace(1) %4, i64 %59, !dbg !45
  %450 = getelementptr half, ptr addrspace(1) %4, i64 %61, !dbg !45
  %451 = getelementptr half, ptr addrspace(1) %4, i64 %63, !dbg !45
  %452 = getelementptr half, ptr addrspace(1) %4, i64 %65, !dbg !45
  %453 = fptrunc float %433 to half, !dbg !46
  %454 = fptrunc float %434 to half, !dbg !46
  %455 = fptrunc float %435 to half, !dbg !46
  %456 = fptrunc float %436 to half, !dbg !46
  %457 = fptrunc float %437 to half, !dbg !46
  %458 = fptrunc float %438 to half, !dbg !46
  %459 = fptrunc float %439 to half, !dbg !46
  %460 = fptrunc float %440 to half, !dbg !46
  %461 = fptrunc float %441 to half, !dbg !46
  %462 = fptrunc float %442 to half, !dbg !46
  %463 = fptrunc float %443 to half, !dbg !46
  %464 = fptrunc float %444 to half, !dbg !46
  %465 = fptrunc float %445 to half, !dbg !46
  %466 = fptrunc float %446 to half, !dbg !46
  %467 = fptrunc float %447 to half, !dbg !46
  %468 = fptrunc float %448 to half, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %469 = mul nuw nsw i32 %19, 65, !dbg !46
  %470 = add nuw nsw i32 %24, %469, !dbg !46
  %471 = zext nneg i32 %470 to i64, !dbg !46
  %472 = getelementptr half, ptr addrspace(3) @global_smem, i64 %471, !dbg !46
  %473 = insertelement <1 x half> undef, half %453, i64 0, !dbg !46
  store <1 x half> %473, ptr addrspace(3) %472, align 2, !dbg !46
  %474 = add nuw nsw i32 %469, 65, !dbg !46
  %475 = add nuw nsw i32 %474, %24, !dbg !46
  %476 = zext nneg i32 %475 to i64, !dbg !46
  %477 = getelementptr half, ptr addrspace(3) @global_smem, i64 %476, !dbg !46
  %478 = insertelement <1 x half> undef, half %454, i64 0, !dbg !46
  store <1 x half> %478, ptr addrspace(3) %477, align 2, !dbg !46
  %479 = add nuw nsw i32 %469, 130, !dbg !46
  %480 = add nuw nsw i32 %479, %24, !dbg !46
  %481 = zext nneg i32 %480 to i64, !dbg !46
  %482 = getelementptr half, ptr addrspace(3) @global_smem, i64 %481, !dbg !46
  %483 = insertelement <1 x half> undef, half %455, i64 0, !dbg !46
  store <1 x half> %483, ptr addrspace(3) %482, align 2, !dbg !46
  %484 = add nuw nsw i32 %469, 195, !dbg !46
  %485 = add nuw nsw i32 %484, %24, !dbg !46
  %486 = zext nneg i32 %485 to i64, !dbg !46
  %487 = getelementptr half, ptr addrspace(3) @global_smem, i64 %486, !dbg !46
  %488 = insertelement <1 x half> undef, half %456, i64 0, !dbg !46
  store <1 x half> %488, ptr addrspace(3) %487, align 2, !dbg !46
  %489 = add nuw nsw i32 %469, 260, !dbg !46
  %490 = add nuw nsw i32 %489, %24, !dbg !46
  %491 = zext nneg i32 %490 to i64, !dbg !46
  %492 = getelementptr half, ptr addrspace(3) @global_smem, i64 %491, !dbg !46
  %493 = insertelement <1 x half> undef, half %457, i64 0, !dbg !46
  store <1 x half> %493, ptr addrspace(3) %492, align 2, !dbg !46
  %494 = add nuw nsw i32 %469, 325, !dbg !46
  %495 = add nuw nsw i32 %494, %24, !dbg !46
  %496 = zext nneg i32 %495 to i64, !dbg !46
  %497 = getelementptr half, ptr addrspace(3) @global_smem, i64 %496, !dbg !46
  %498 = insertelement <1 x half> undef, half %458, i64 0, !dbg !46
  store <1 x half> %498, ptr addrspace(3) %497, align 2, !dbg !46
  %499 = add nuw nsw i32 %469, 390, !dbg !46
  %500 = add nuw nsw i32 %499, %24, !dbg !46
  %501 = zext nneg i32 %500 to i64, !dbg !46
  %502 = getelementptr half, ptr addrspace(3) @global_smem, i64 %501, !dbg !46
  %503 = insertelement <1 x half> undef, half %459, i64 0, !dbg !46
  store <1 x half> %503, ptr addrspace(3) %502, align 2, !dbg !46
  %504 = add nuw nsw i32 %469, 455, !dbg !46
  %505 = add nuw nsw i32 %504, %24, !dbg !46
  %506 = zext nneg i32 %505 to i64, !dbg !46
  %507 = getelementptr half, ptr addrspace(3) @global_smem, i64 %506, !dbg !46
  %508 = insertelement <1 x half> undef, half %460, i64 0, !dbg !46
  store <1 x half> %508, ptr addrspace(3) %507, align 2, !dbg !46
  %509 = add nuw nsw i32 %25, %469, !dbg !46
  %510 = zext nneg i32 %509 to i64, !dbg !46
  %511 = getelementptr half, ptr addrspace(3) @global_smem, i64 %510, !dbg !46
  %512 = insertelement <1 x half> undef, half %461, i64 0, !dbg !46
  store <1 x half> %512, ptr addrspace(3) %511, align 2, !dbg !46
  %513 = add nuw nsw i32 %25, %474, !dbg !46
  %514 = zext nneg i32 %513 to i64, !dbg !46
  %515 = getelementptr half, ptr addrspace(3) @global_smem, i64 %514, !dbg !46
  %516 = insertelement <1 x half> undef, half %462, i64 0, !dbg !46
  store <1 x half> %516, ptr addrspace(3) %515, align 2, !dbg !46
  %517 = add nuw nsw i32 %25, %479, !dbg !46
  %518 = zext nneg i32 %517 to i64, !dbg !46
  %519 = getelementptr half, ptr addrspace(3) @global_smem, i64 %518, !dbg !46
  %520 = insertelement <1 x half> undef, half %463, i64 0, !dbg !46
  store <1 x half> %520, ptr addrspace(3) %519, align 2, !dbg !46
  %521 = add nuw nsw i32 %25, %484, !dbg !46
  %522 = zext nneg i32 %521 to i64, !dbg !46
  %523 = getelementptr half, ptr addrspace(3) @global_smem, i64 %522, !dbg !46
  %524 = insertelement <1 x half> undef, half %464, i64 0, !dbg !46
  store <1 x half> %524, ptr addrspace(3) %523, align 2, !dbg !46
  %525 = add nuw nsw i32 %25, %489, !dbg !46
  %526 = zext nneg i32 %525 to i64, !dbg !46
  %527 = getelementptr half, ptr addrspace(3) @global_smem, i64 %526, !dbg !46
  %528 = insertelement <1 x half> undef, half %465, i64 0, !dbg !46
  store <1 x half> %528, ptr addrspace(3) %527, align 2, !dbg !46
  %529 = add nuw nsw i32 %25, %494, !dbg !46
  %530 = zext nneg i32 %529 to i64, !dbg !46
  %531 = getelementptr half, ptr addrspace(3) @global_smem, i64 %530, !dbg !46
  %532 = insertelement <1 x half> undef, half %466, i64 0, !dbg !46
  store <1 x half> %532, ptr addrspace(3) %531, align 2, !dbg !46
  %533 = add nuw nsw i32 %25, %499, !dbg !46
  %534 = zext nneg i32 %533 to i64, !dbg !46
  %535 = getelementptr half, ptr addrspace(3) @global_smem, i64 %534, !dbg !46
  %536 = insertelement <1 x half> undef, half %467, i64 0, !dbg !46
  store <1 x half> %536, ptr addrspace(3) %535, align 2, !dbg !46
  %537 = add nuw nsw i32 %25, %504, !dbg !46
  %538 = zext nneg i32 %537 to i64, !dbg !46
  %539 = getelementptr half, ptr addrspace(3) @global_smem, i64 %538, !dbg !46
  %540 = insertelement <1 x half> undef, half %468, i64 0, !dbg !46
  store <1 x half> %540, ptr addrspace(3) %539, align 2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %541 = mul nuw nsw i32 %14, 65, !dbg !46
  %542 = add nuw nsw i32 %541, %21, !dbg !46
  %543 = zext nneg i32 %542 to i64, !dbg !46
  %544 = getelementptr half, ptr addrspace(3) @global_smem, i64 %543, !dbg !46
  %545 = load <1 x half>, ptr addrspace(3) %544, align 2, !dbg !46
  %546 = add nuw nsw i32 %541, %105, !dbg !46
  %547 = zext nneg i32 %546 to i64, !dbg !46
  %548 = getelementptr half, ptr addrspace(3) @global_smem, i64 %547, !dbg !46
  %549 = load <1 x half>, ptr addrspace(3) %548, align 2, !dbg !46
  %550 = add nuw nsw i32 %541, %110, !dbg !46
  %551 = zext nneg i32 %550 to i64, !dbg !46
  %552 = getelementptr half, ptr addrspace(3) @global_smem, i64 %551, !dbg !46
  %553 = load <1 x half>, ptr addrspace(3) %552, align 2, !dbg !46
  %554 = add nuw nsw i32 %541, %115, !dbg !46
  %555 = zext nneg i32 %554 to i64, !dbg !46
  %556 = getelementptr half, ptr addrspace(3) @global_smem, i64 %555, !dbg !46
  %557 = load <1 x half>, ptr addrspace(3) %556, align 2, !dbg !46
  %558 = mul nuw nsw i32 %15, 65, !dbg !46
  %559 = add nuw nsw i32 %558, %21, !dbg !46
  %560 = zext nneg i32 %559 to i64, !dbg !46
  %561 = getelementptr half, ptr addrspace(3) @global_smem, i64 %560, !dbg !46
  %562 = load <1 x half>, ptr addrspace(3) %561, align 2, !dbg !46
  %563 = add nuw nsw i32 %558, %105, !dbg !46
  %564 = zext nneg i32 %563 to i64, !dbg !46
  %565 = getelementptr half, ptr addrspace(3) @global_smem, i64 %564, !dbg !46
  %566 = load <1 x half>, ptr addrspace(3) %565, align 2, !dbg !46
  %567 = add nuw nsw i32 %558, %110, !dbg !46
  %568 = zext nneg i32 %567 to i64, !dbg !46
  %569 = getelementptr half, ptr addrspace(3) @global_smem, i64 %568, !dbg !46
  %570 = load <1 x half>, ptr addrspace(3) %569, align 2, !dbg !46
  %571 = add nuw nsw i32 %558, %115, !dbg !46
  %572 = zext nneg i32 %571 to i64, !dbg !46
  %573 = getelementptr half, ptr addrspace(3) @global_smem, i64 %572, !dbg !46
  %574 = load <1 x half>, ptr addrspace(3) %573, align 2, !dbg !46
  %575 = mul nuw nsw i32 %16, 65, !dbg !46
  %576 = add nuw nsw i32 %575, %21, !dbg !46
  %577 = zext nneg i32 %576 to i64, !dbg !46
  %578 = getelementptr half, ptr addrspace(3) @global_smem, i64 %577, !dbg !46
  %579 = load <1 x half>, ptr addrspace(3) %578, align 2, !dbg !46
  %580 = add nuw nsw i32 %575, %105, !dbg !46
  %581 = zext nneg i32 %580 to i64, !dbg !46
  %582 = getelementptr half, ptr addrspace(3) @global_smem, i64 %581, !dbg !46
  %583 = load <1 x half>, ptr addrspace(3) %582, align 2, !dbg !46
  %584 = add nuw nsw i32 %575, %110, !dbg !46
  %585 = zext nneg i32 %584 to i64, !dbg !46
  %586 = getelementptr half, ptr addrspace(3) @global_smem, i64 %585, !dbg !46
  %587 = load <1 x half>, ptr addrspace(3) %586, align 2, !dbg !46
  %588 = add nuw nsw i32 %575, %115, !dbg !46
  %589 = zext nneg i32 %588 to i64, !dbg !46
  %590 = getelementptr half, ptr addrspace(3) @global_smem, i64 %589, !dbg !46
  %591 = load <1 x half>, ptr addrspace(3) %590, align 2, !dbg !46
  %592 = mul nuw nsw i32 %17, 65, !dbg !46
  %593 = add nuw nsw i32 %592, %21, !dbg !46
  %594 = zext nneg i32 %593 to i64, !dbg !46
  %595 = getelementptr half, ptr addrspace(3) @global_smem, i64 %594, !dbg !46
  %596 = load <1 x half>, ptr addrspace(3) %595, align 2, !dbg !46
  %597 = add nuw nsw i32 %592, %105, !dbg !46
  %598 = zext nneg i32 %597 to i64, !dbg !46
  %599 = getelementptr half, ptr addrspace(3) @global_smem, i64 %598, !dbg !46
  %600 = load <1 x half>, ptr addrspace(3) %599, align 2, !dbg !46
  %601 = add nuw nsw i32 %592, %110, !dbg !46
  %602 = zext nneg i32 %601 to i64, !dbg !46
  %603 = getelementptr half, ptr addrspace(3) @global_smem, i64 %602, !dbg !46
  %604 = load <1 x half>, ptr addrspace(3) %603, align 2, !dbg !46
  %605 = add nuw nsw i32 %592, %115, !dbg !46
  %606 = zext nneg i32 %605 to i64, !dbg !46
  %607 = getelementptr half, ptr addrspace(3) @global_smem, i64 %606, !dbg !46
  %608 = load <1 x half>, ptr addrspace(3) %607, align 2, !dbg !46
  %609 = shufflevector <1 x half> %545, <1 x half> %549, <2 x i32> <i32 0, i32 1>, !dbg !46
  %610 = bitcast <2 x half> %609 to i32, !dbg !46
  %611 = shufflevector <1 x half> %553, <1 x half> %557, <2 x i32> <i32 0, i32 1>, !dbg !46
  %612 = bitcast <2 x half> %611 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %610, i32 %612, ptr addrspace(1) %449, i1 %67) #2, !dbg !46
  %613 = shufflevector <1 x half> %562, <1 x half> %566, <2 x i32> <i32 0, i32 1>, !dbg !46
  %614 = bitcast <2 x half> %613 to i32, !dbg !46
  %615 = shufflevector <1 x half> %570, <1 x half> %574, <2 x i32> <i32 0, i32 1>, !dbg !46
  %616 = bitcast <2 x half> %615 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %614, i32 %616, ptr addrspace(1) %450, i1 %68) #2, !dbg !46
  %617 = shufflevector <1 x half> %579, <1 x half> %583, <2 x i32> <i32 0, i32 1>, !dbg !46
  %618 = bitcast <2 x half> %617 to i32, !dbg !46
  %619 = shufflevector <1 x half> %587, <1 x half> %591, <2 x i32> <i32 0, i32 1>, !dbg !46
  %620 = bitcast <2 x half> %619 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %618, i32 %620, ptr addrspace(1) %451, i1 %69) #2, !dbg !46
  %621 = shufflevector <1 x half> %596, <1 x half> %600, <2 x i32> <i32 0, i32 1>, !dbg !46
  %622 = bitcast <2 x half> %621 to i32, !dbg !46
  %623 = shufflevector <1 x half> %604, <1 x half> %608, <2 x i32> <i32 0, i32 1>, !dbg !46
  %624 = bitcast <2 x half> %623 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %622, i32 %624, ptr addrspace(1) %452, i1 %70) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvk77foil2cmgtxf3tky32mtvmynvcpxcyxs7fk4towlrhqtdrni.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/vk")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 41, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 55, scope: !5)
!26 = !DILocation(line: 33, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 95, scope: !5)
!28 = !DILocation(line: 34, column: 40, scope: !5)
!29 = !DILocation(line: 34, column: 54, scope: !5)
!30 = !DILocation(line: 34, column: 36, scope: !5)
!31 = !DILocation(line: 34, column: 47, scope: !5)
!32 = !DILocation(line: 34, column: 30, scope: !5)
!33 = !DILocation(line: 34, column: 60, scope: !5)
!34 = !DILocation(line: 34, column: 108, scope: !5)
!35 = !DILocation(line: 35, column: 30, scope: !5)
!36 = !DILocation(line: 35, column: 35, scope: !5)
!37 = !DILocation(line: 35, column: 75, scope: !5)
!38 = !DILocation(line: 36, column: 30, scope: !5)
!39 = !DILocation(line: 36, column: 60, scope: !5)
!40 = !DILocation(line: 36, column: 108, scope: !5)
!41 = !DILocation(line: 37, column: 18, scope: !5)
!42 = !DILocation(line: 39, column: 18, scope: !5)
!43 = !DILocation(line: 40, column: 18, scope: !5)
!44 = !DILocation(line: 41, column: 18, scope: !5)
!45 = !DILocation(line: 44, column: 25, scope: !5)
!46 = !DILocation(line: 44, column: 49, scope: !5)
!47 = !DILocation(line: 44, column: 4, scope: !5)
