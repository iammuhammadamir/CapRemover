; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = lshr i32 %7, 2, !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = shl i32 %7, 3, !dbg !8
  %11 = and i32 %10, 24, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %14 = add i32 %13, 1, !dbg !11
  %15 = shl i32 %12, 5, !dbg !12
  %16 = mul i32 %15, %14, !dbg !13
  %17 = or i32 %16, %9, !dbg !14
  %18 = or i32 %16, %11, !dbg !14
  %19 = icmp slt i32 %17, 4048, !dbg !15
  %20 = icmp slt i32 %18, 4048, !dbg !15
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !16
  %22 = shl i32 %21, 5, !dbg !17
  %23 = or i32 %22, %11, !dbg !18
  %24 = or i32 %22, %9, !dbg !18
  %25 = icmp slt i32 %23, 1280, !dbg !19
  %26 = icmp slt i32 %24, 1280, !dbg !19
  %.frozen = freeze i32 %18
  %27 = sdiv i32 %.frozen, 184, !dbg !20
  %28 = mul i32 %27, 184
  %.decomposed = sub i32 %.frozen, %28
  %29 = mul i32 %17, 1280, !dbg !21
  %30 = add i32 %29, %23, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %25, %19, !dbg !24
  %34 = and i1 %26, %20, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #2, !dbg !25
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !25
  %40 = sext i32 %23 to i64, !dbg !26
  %41 = getelementptr half, ptr addrspace(1) %1, i64 %40, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %25) #2, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %extelt.offset4 = lshr i32 %43, 16, !dbg !27
  %47 = trunc i32 %extelt.offset4 to i16, !dbg !27
  %48 = bitcast i16 %47 to half, !dbg !27
  %extelt.offset5 = lshr i32 %44, 16, !dbg !27
  %49 = trunc i32 %extelt.offset5 to i16, !dbg !27
  %50 = bitcast i16 %49 to half, !dbg !27
  %extelt.offset6 = lshr i32 %45, 16, !dbg !27
  %51 = trunc i32 %extelt.offset6 to i16, !dbg !27
  %52 = bitcast i16 %51 to half, !dbg !27
  %extelt.offset7 = lshr i32 %46, 16, !dbg !27
  %53 = trunc i32 %extelt.offset7 to i16, !dbg !27
  %54 = bitcast i16 %53 to half, !dbg !27
  %55 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %56 = insertelement <2 x i32> %55, i32 %43, i64 1, !dbg !25
  %57 = trunc <2 x i32> %56 to <2 x i16>, !dbg !25
  %58 = bitcast <2 x i16> %57 to <2 x half>, !dbg !25
  %59 = fpext <2 x half> %58 to <2 x float>, !dbg !28
  %60 = fpext half %48 to float, !dbg !29
  %61 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !25
  %62 = insertelement <2 x i32> %61, i32 %44, i64 1, !dbg !25
  %63 = trunc <2 x i32> %62 to <2 x i16>, !dbg !25
  %64 = bitcast <2 x i16> %63 to <2 x half>, !dbg !25
  %65 = fpext <2 x half> %64 to <2 x float>, !dbg !28
  %66 = fpext half %50 to float, !dbg !29
  %67 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !25
  %68 = insertelement <2 x i32> %67, i32 %45, i64 1, !dbg !25
  %69 = trunc <2 x i32> %68 to <2 x i16>, !dbg !25
  %70 = bitcast <2 x i16> %69 to <2 x half>, !dbg !25
  %71 = fpext <2 x half> %70 to <2 x float>, !dbg !28
  %72 = fpext half %52 to float, !dbg !29
  %73 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !25
  %74 = insertelement <2 x i32> %73, i32 %46, i64 1, !dbg !25
  %75 = trunc <2 x i32> %74 to <2 x i16>, !dbg !25
  %76 = bitcast <2 x i16> %75 to <2 x half>, !dbg !25
  %77 = fpext <2 x half> %76 to <2 x float>, !dbg !28
  %78 = fpext half %54 to float, !dbg !29
  %79 = getelementptr half, ptr addrspace(1) %2, i64 %31, !dbg !30
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %33) #2, !dbg !31
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !31
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !31
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !31
  %85 = trunc i32 %81 to i16, !dbg !31
  %86 = bitcast i16 %85 to half, !dbg !31
  %87 = trunc i32 %82 to i16, !dbg !31
  %88 = bitcast i16 %87 to half, !dbg !31
  %89 = trunc i32 %83 to i16, !dbg !31
  %90 = bitcast i16 %89 to half, !dbg !31
  %91 = trunc i32 %84 to i16, !dbg !31
  %92 = bitcast i16 %91 to half, !dbg !31
  %93 = fpext half %86 to float, !dbg !32
  %94 = fpext half %88 to float, !dbg !32
  %95 = fpext half %90 to float, !dbg !32
  %96 = fpext half %92 to float, !dbg !32
  %shift = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %97 = fadd <2 x float> %shift, %59, !dbg !33
  %98 = extractelement <2 x float> %97, i64 0, !dbg !33
  %shift18 = shufflevector <2 x float> %65, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %99 = fadd <2 x float> %shift18, %65, !dbg !33
  %100 = extractelement <2 x float> %99, i64 0, !dbg !33
  %shift19 = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %101 = fadd <2 x float> %shift19, %71, !dbg !33
  %102 = extractelement <2 x float> %101, i64 0, !dbg !33
  %shift20 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %103 = fadd <2 x float> %shift20, %77, !dbg !33
  %104 = extractelement <2 x float> %103, i64 0, !dbg !33
  %105 = fmul float %93, 1.250000e-01, !dbg !34
  %106 = insertelement <2 x i32> %55, i32 %81, i64 1, !dbg !25
  %107 = lshr <2 x i32> %106, <i32 16, i32 16>, !dbg !25
  %108 = trunc <2 x i32> %107 to <2 x i16>, !dbg !25
  %109 = bitcast <2 x i16> %108 to <2 x half>, !dbg !25
  %110 = fpext <2 x half> %109 to <2 x float>, !dbg !28
  %111 = fmul float %94, 1.250000e-01, !dbg !34
  %112 = insertelement <2 x i32> %61, i32 %82, i64 1, !dbg !25
  %113 = lshr <2 x i32> %112, <i32 16, i32 16>, !dbg !25
  %114 = trunc <2 x i32> %113 to <2 x i16>, !dbg !25
  %115 = bitcast <2 x i16> %114 to <2 x half>, !dbg !25
  %116 = fpext <2 x half> %115 to <2 x float>, !dbg !28
  %117 = fmul float %95, 1.250000e-01, !dbg !34
  %118 = insertelement <2 x i32> %67, i32 %83, i64 1, !dbg !25
  %119 = lshr <2 x i32> %118, <i32 16, i32 16>, !dbg !25
  %120 = trunc <2 x i32> %119 to <2 x i16>, !dbg !25
  %121 = bitcast <2 x i16> %120 to <2 x half>, !dbg !25
  %122 = fpext <2 x half> %121 to <2 x float>, !dbg !28
  %123 = fmul float %96, 1.250000e-01, !dbg !34
  %124 = insertelement <2 x i32> %73, i32 %84, i64 1, !dbg !25
  %125 = lshr <2 x i32> %124, <i32 16, i32 16>, !dbg !25
  %126 = trunc <2 x i32> %125 to <2 x i16>, !dbg !25
  %127 = bitcast <2 x i16> %126 to <2 x half>, !dbg !25
  %128 = fpext <2 x half> %127 to <2 x float>, !dbg !28
  %129 = fadd float %98, %105, !dbg !35
  %130 = extractelement <2 x float> %110, i64 0, !dbg !35
  %131 = fadd float %130, %60, !dbg !35
  %132 = extractelement <2 x float> %110, i64 1, !dbg !35
  %133 = fmul float %132, 1.250000e-01, !dbg !35
  %134 = fadd float %131, %133, !dbg !35
  %135 = fadd float %100, %111, !dbg !35
  %136 = extractelement <2 x float> %116, i64 0, !dbg !35
  %137 = fadd float %136, %66, !dbg !35
  %138 = extractelement <2 x float> %116, i64 1, !dbg !35
  %139 = fmul float %138, 1.250000e-01, !dbg !35
  %140 = fadd float %137, %139, !dbg !35
  %141 = fadd float %102, %117, !dbg !35
  %142 = extractelement <2 x float> %122, i64 0, !dbg !35
  %143 = fadd float %142, %72, !dbg !35
  %144 = extractelement <2 x float> %122, i64 1, !dbg !35
  %145 = fmul float %144, 1.250000e-01, !dbg !35
  %146 = fadd float %143, %145, !dbg !35
  %147 = fadd float %104, %123, !dbg !35
  %148 = extractelement <2 x float> %128, i64 0, !dbg !35
  %149 = fadd float %148, %78, !dbg !35
  %150 = extractelement <2 x float> %128, i64 1, !dbg !35
  %151 = fmul float %150, 1.250000e-01, !dbg !35
  %152 = fadd float %149, %151, !dbg !35
  %153 = mul i32 %24, 184, !dbg !36
  %154 = add i32 %.decomposed, %153, !dbg !37
  %155 = mul i32 %27, 235520, !dbg !38
  %156 = add i32 %154, %155, !dbg !39
  %157 = sext i32 %156 to i64, !dbg !40
  %158 = getelementptr half, ptr addrspace(1) %3, i64 %157, !dbg !40
  %159 = fptrunc float %129 to half, !dbg !41
  %160 = fptrunc float %134 to half, !dbg !41
  %161 = fptrunc float %135 to half, !dbg !41
  %162 = fptrunc float %140 to half, !dbg !41
  %163 = fptrunc float %141 to half, !dbg !41
  %164 = fptrunc float %146 to half, !dbg !41
  %165 = fptrunc float %147 to half, !dbg !41
  %166 = fptrunc float %152 to half, !dbg !41
  %167 = mul nuw nsw i32 %11, 40, !dbg !41
  %168 = or i32 %167, %9, !dbg !41
  %169 = zext nneg i32 %168 to i64, !dbg !41
  %170 = getelementptr half, ptr addrspace(3) @global_smem, i64 %169, !dbg !41
  %171 = insertelement <1 x half> undef, half %159, i64 0, !dbg !41
  store <1 x half> %171, ptr addrspace(3) %170, align 2, !dbg !41
  %172 = add nuw nsw i32 %168, 40, !dbg !41
  %173 = zext nneg i32 %172 to i64, !dbg !41
  %174 = getelementptr half, ptr addrspace(3) @global_smem, i64 %173, !dbg !41
  %175 = insertelement <1 x half> undef, half %160, i64 0, !dbg !41
  store <1 x half> %175, ptr addrspace(3) %174, align 2, !dbg !41
  %176 = add nuw nsw i32 %168, 80, !dbg !41
  %177 = zext nneg i32 %176 to i64, !dbg !41
  %178 = getelementptr half, ptr addrspace(3) @global_smem, i64 %177, !dbg !41
  %179 = insertelement <1 x half> undef, half %161, i64 0, !dbg !41
  store <1 x half> %179, ptr addrspace(3) %178, align 2, !dbg !41
  %180 = add nuw nsw i32 %168, 120, !dbg !41
  %181 = zext nneg i32 %180 to i64, !dbg !41
  %182 = getelementptr half, ptr addrspace(3) @global_smem, i64 %181, !dbg !41
  %183 = insertelement <1 x half> undef, half %162, i64 0, !dbg !41
  store <1 x half> %183, ptr addrspace(3) %182, align 2, !dbg !41
  %184 = add nuw nsw i32 %167, 160, !dbg !41
  %185 = or i32 %184, %9, !dbg !41
  %186 = zext nneg i32 %185 to i64, !dbg !41
  %187 = getelementptr half, ptr addrspace(3) @global_smem, i64 %186, !dbg !41
  %188 = insertelement <1 x half> undef, half %163, i64 0, !dbg !41
  store <1 x half> %188, ptr addrspace(3) %187, align 2, !dbg !41
  %189 = add nuw nsw i32 %168, 200, !dbg !41
  %190 = zext nneg i32 %189 to i64, !dbg !41
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !41
  %192 = insertelement <1 x half> undef, half %164, i64 0, !dbg !41
  store <1 x half> %192, ptr addrspace(3) %191, align 2, !dbg !41
  %193 = add nuw nsw i32 %168, 240, !dbg !41
  %194 = zext nneg i32 %193 to i64, !dbg !41
  %195 = getelementptr half, ptr addrspace(3) @global_smem, i64 %194, !dbg !41
  %196 = insertelement <1 x half> undef, half %165, i64 0, !dbg !41
  store <1 x half> %196, ptr addrspace(3) %195, align 2, !dbg !41
  %197 = add nuw nsw i32 %168, 280, !dbg !41
  %198 = zext nneg i32 %197 to i64, !dbg !41
  %199 = getelementptr half, ptr addrspace(3) @global_smem, i64 %198, !dbg !41
  %200 = insertelement <1 x half> undef, half %166, i64 0, !dbg !41
  store <1 x half> %200, ptr addrspace(3) %199, align 2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %201 = mul nuw nsw i32 %9, 40, !dbg !41
  %202 = add nuw nsw i32 %201, %11, !dbg !41
  %203 = zext nneg i32 %202 to i64, !dbg !41
  %204 = getelementptr half, ptr addrspace(3) @global_smem, i64 %203, !dbg !41
  %.extract = load i32, ptr addrspace(3) %204, align 16, !dbg !41
  %205 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %204, i64 0, i64 1, !dbg !41
  %.extract13 = load i32, ptr addrspace(3) %205, align 4, !dbg !41
  %206 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %204, i64 0, i64 2, !dbg !41
  %.extract15 = load i32, ptr addrspace(3) %206, align 8, !dbg !41
  %207 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %204, i64 0, i64 3, !dbg !41
  %.extract17 = load i32, ptr addrspace(3) %207, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract13, i32 %.extract15, i32 %.extract17, ptr addrspace(1) %158, i1 %34) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chh7iszk6ffhaazzfhwqeazairgxtcdh6ogpnu4oipif47wazn2t.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hh")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 23, column: 58, scope: !5)
!14 = !DILocation(line: 24, column: 23, scope: !5)
!15 = !DILocation(line: 25, column: 21, scope: !5)
!16 = !DILocation(line: 26, column: 28, scope: !5)
!17 = !DILocation(line: 26, column: 33, scope: !5)
!18 = !DILocation(line: 27, column: 23, scope: !5)
!19 = !DILocation(line: 28, column: 21, scope: !5)
!20 = !DILocation(line: 32, column: 20, scope: !5)
!21 = !DILocation(line: 33, column: 41, scope: !5)
!22 = !DILocation(line: 33, column: 36, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 55, scope: !5)
!25 = !DILocation(line: 33, column: 47, scope: !5)
!26 = !DILocation(line: 34, column: 30, scope: !5)
!27 = !DILocation(line: 34, column: 35, scope: !5)
!28 = !DILocation(line: 33, column: 95, scope: !5)
!29 = !DILocation(line: 34, column: 75, scope: !5)
!30 = !DILocation(line: 35, column: 30, scope: !5)
!31 = !DILocation(line: 35, column: 47, scope: !5)
!32 = !DILocation(line: 35, column: 95, scope: !5)
!33 = !DILocation(line: 36, column: 18, scope: !5)
!34 = !DILocation(line: 38, column: 18, scope: !5)
!35 = !DILocation(line: 39, column: 18, scope: !5)
!36 = !DILocation(line: 40, column: 35, scope: !5)
!37 = !DILocation(line: 40, column: 31, scope: !5)
!38 = !DILocation(line: 40, column: 49, scope: !5)
!39 = !DILocation(line: 40, column: 42, scope: !5)
!40 = !DILocation(line: 40, column: 25, scope: !5)
!41 = !DILocation(line: 40, column: 61, scope: !5)
!42 = !DILocation(line: 40, column: 4, scope: !5)
