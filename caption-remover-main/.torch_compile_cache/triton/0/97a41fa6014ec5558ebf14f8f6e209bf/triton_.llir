; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = lshr i32 %8, 3, !dbg !8
  %10 = and i32 %9, 7, !dbg !8
  %11 = and i32 %8, 7, !dbg !8
  %12 = shl nuw nsw i32 %11, 2, !dbg !9
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 3, !dbg !11
  %15 = or i32 %14, %10, !dbg !12
  %16 = or i32 %14, %11, !dbg !12
  %17 = icmp slt i32 %15, 32, !dbg !13
  %18 = icmp slt i32 %16, 32, !dbg !13
  %19 = icmp ult i32 %11, 5, !dbg !14
  %20 = mul i32 %15, 20, !dbg !15
  %21 = add i32 %20, %12, !dbg !16
  %22 = sext i32 %21 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = and i1 %19, %17, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %40 = bitcast i32 %36 to float, !dbg !21
  %41 = bitcast i32 %37 to float, !dbg !21
  %42 = bitcast i32 %38 to float, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = select i1 %24, float %30, float 0.000000e+00, !dbg !24
  %55 = select i1 %24, float %31, float 0.000000e+00, !dbg !24
  %56 = select i1 %24, float %32, float 0.000000e+00, !dbg !24
  %57 = select i1 %24, float %33, float 0.000000e+00, !dbg !24
  %58 = select i1 %24, float %42, float 0.000000e+00, !dbg !25
  %59 = select i1 %24, float %43, float 0.000000e+00, !dbg !25
  %60 = select i1 %24, float %50, float 0.000000e+00, !dbg !26
  %61 = select i1 %24, float %51, float 0.000000e+00, !dbg !26
  %62 = select i1 %24, float %52, float 0.000000e+00, !dbg !26
  %63 = select i1 %24, float %53, float 0.000000e+00, !dbg !26
  %64 = fsub float %55, %54, !dbg !27
  %65 = fadd float %60, %61, !dbg !33
  %66 = fcmp oeq float %65, 0.000000e+00, !dbg !34
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %65) #3, !dbg !35
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !36
  %69 = fmul float %64, %68, !dbg !37
  %70 = fadd float %54, %69, !dbg !38
  %71 = fadd float %40, %41, !dbg !39
  %72 = select i1 %24, float %71, float 0.000000e+00, !dbg !39
  %73 = fmul float %64, %64, !dbg !40
  %74 = fmul float %60, %73, !dbg !41
  %75 = fmul float %74, %68, !dbg !42
  %76 = fadd float %72, %75, !dbg !43
  %77 = fsub float %56, %70, !dbg !27
  %78 = fadd float %62, %65, !dbg !33
  %79 = fcmp oeq float %78, 0.000000e+00, !dbg !34
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %78) #3, !dbg !35
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !36
  %82 = fmul float %81, %77, !dbg !37
  %83 = fadd float %70, %82, !dbg !38
  %84 = fadd float %58, %76, !dbg !39
  %85 = fmul float %77, %77, !dbg !40
  %86 = fmul float %65, %85, !dbg !41
  %87 = fmul float %81, %86, !dbg !42
  %88 = fadd float %84, %87, !dbg !43
  %89 = fsub float %57, %83, !dbg !27
  %90 = fadd float %63, %78, !dbg !33
  %91 = fcmp oeq float %90, 0.000000e+00, !dbg !34
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %90) #3, !dbg !35
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !36
  %94 = fmul float %93, %89, !dbg !37
  %95 = fadd float %83, %94, !dbg !38
  %96 = fadd float %59, %88, !dbg !39
  %97 = fmul float %89, %89, !dbg !40
  %98 = fmul float %78, %97, !dbg !41
  %99 = fmul float %93, %98, !dbg !42
  %100 = fadd float %96, %99, !dbg !43
  %101 = bitcast float %95 to i32, !dbg !44
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !44
  %103 = bitcast i32 %102 to float, !dbg !44
  %104 = bitcast float %100 to i32, !dbg !44
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !44
  %106 = bitcast i32 %105 to float, !dbg !44
  %107 = bitcast float %90 to i32, !dbg !44
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !44
  %109 = bitcast i32 %108 to float, !dbg !44
  %110 = fsub float %103, %95, !dbg !27
  %111 = fadd float %90, %109, !dbg !33
  %112 = fcmp oeq float %111, 0.000000e+00, !dbg !34
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %111) #3, !dbg !35
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !36
  %115 = fmul float %114, %110, !dbg !37
  %116 = fadd float %95, %115, !dbg !38
  %117 = fadd float %100, %106, !dbg !39
  %118 = fmul float %110, %110, !dbg !40
  %119 = fmul float %90, %118, !dbg !41
  %120 = fmul float %114, %119, !dbg !42
  %121 = fadd float %117, %120, !dbg !43
  %122 = bitcast float %116 to i32, !dbg !44
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !44
  %124 = bitcast i32 %123 to float, !dbg !44
  %125 = bitcast float %121 to i32, !dbg !44
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !44
  %127 = bitcast i32 %126 to float, !dbg !44
  %128 = bitcast float %111 to i32, !dbg !44
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !44
  %130 = bitcast i32 %129 to float, !dbg !44
  %131 = fsub float %124, %116, !dbg !27
  %132 = fadd float %111, %130, !dbg !33
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !34
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %132) #3, !dbg !35
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !36
  %136 = fmul float %135, %131, !dbg !37
  %137 = fadd float %116, %136, !dbg !38
  %138 = fadd float %121, %127, !dbg !39
  %139 = fmul float %131, %131, !dbg !40
  %140 = fmul float %111, %139, !dbg !41
  %141 = fmul float %135, %140, !dbg !42
  %142 = fadd float %138, %141, !dbg !43
  %143 = bitcast float %137 to i32, !dbg !44
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !44
  %145 = bitcast i32 %144 to float, !dbg !44
  %146 = bitcast float %142 to i32, !dbg !44
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !44
  %148 = bitcast i32 %147 to float, !dbg !44
  %149 = bitcast float %132 to i32, !dbg !44
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !44
  %151 = bitcast i32 %150 to float, !dbg !44
  %152 = fsub float %145, %137, !dbg !27
  %153 = fadd float %132, %151, !dbg !33
  %154 = fcmp oeq float %153, 0.000000e+00, !dbg !34
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %153) #3, !dbg !35
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !36
  %157 = fmul float %156, %152, !dbg !37
  %158 = fadd float %137, %157, !dbg !38
  %159 = fadd float %142, %148, !dbg !39
  %160 = fmul float %152, %152, !dbg !40
  %161 = fmul float %132, %160, !dbg !41
  %162 = fmul float %156, %161, !dbg !42
  %163 = fadd float %159, %162, !dbg !43
  %164 = zext nneg i32 %10 to i64, !dbg !46
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !46
  %166 = insertelement <1 x float> undef, float %158, i64 0, !dbg !46
  store <1 x float> %166, ptr addrspace(3) %165, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %167 = zext nneg i32 %11 to i64, !dbg !46
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i64 %167, !dbg !46
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %170 = insertelement <1 x float> undef, float %163, i64 0, !dbg !47
  store <1 x float> %170, ptr addrspace(3) %165, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %171 = load i32, ptr addrspace(3) %168, align 4, !dbg !47
  %172 = sext i32 %16 to i64, !dbg !48
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %172, !dbg !48
  %174 = icmp eq i32 %10, 0, !dbg !49
  %175 = and i1 %174, %18, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %173, i1 %175) #3, !dbg !49
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %172, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %176, i1 %175) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cyulatcju435c4mt4fqrcnddbaikk6e56onid6d5j4rqnat2pnlx.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/yu")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 64}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 34, scope: !5)
!10 = !DILocation(line: 24, column: 28, scope: !5)
!11 = !DILocation(line: 24, column: 33, scope: !5)
!12 = !DILocation(line: 25, column: 23, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 29, column: 21, scope: !5)
!15 = !DILocation(line: 32, column: 39, scope: !5)
!16 = !DILocation(line: 32, column: 36, scope: !5)
!17 = !DILocation(line: 32, column: 30, scope: !5)
!18 = !DILocation(line: 32, column: 53, scope: !5)
!19 = !DILocation(line: 32, column: 45, scope: !5)
!20 = !DILocation(line: 33, column: 30, scope: !5)
!21 = !DILocation(line: 33, column: 45, scope: !5)
!22 = !DILocation(line: 34, column: 30, scope: !5)
!23 = !DILocation(line: 34, column: 45, scope: !5)
!24 = !DILocation(line: 38, column: 41, scope: !5)
!25 = !DILocation(line: 39, column: 41, scope: !5)
!26 = !DILocation(line: 40, column: 41, scope: !5)
!27 = !DILocation(line: 119, column: 21, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!30 = distinct !DILexicalBlockFile(scope: !5, file: !29, discriminator: 0)
!31 = !DILocation(line: 131, column: 46, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 41, column: 67, scope: !28)
!33 = !DILocation(line: 120, column: 28, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 39, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 121, column: 60, scope: !28, inlinedAt: !31)
!36 = !DILocation(line: 121, column: 49, scope: !28, inlinedAt: !31)
!37 = !DILocation(line: 123, column: 25, scope: !28, inlinedAt: !31)
!38 = !DILocation(line: 123, column: 17, scope: !28, inlinedAt: !31)
!39 = !DILocation(line: 124, column: 15, scope: !28, inlinedAt: !31)
!40 = !DILocation(line: 124, column: 30, scope: !28, inlinedAt: !31)
!41 = !DILocation(line: 124, column: 38, scope: !28, inlinedAt: !31)
!42 = !DILocation(line: 124, column: 49, scope: !28, inlinedAt: !31)
!43 = !DILocation(line: 124, column: 22, scope: !28, inlinedAt: !31)
!44 = !DILocation(line: 131, column: 46, scope: !30, inlinedAt: !45)
!45 = !DILocation(line: 41, column: 67, scope: !30)
!46 = !DILocation(line: 42, column: 18, scope: !5)
!47 = !DILocation(line: 43, column: 18, scope: !5)
!48 = !DILocation(line: 45, column: 25, scope: !5)
!49 = !DILocation(line: 45, column: 37, scope: !5)
!50 = !DILocation(line: 46, column: 25, scope: !5)
!51 = !DILocation(line: 46, column: 37, scope: !5)
!52 = !DILocation(line: 46, column: 4, scope: !5)
