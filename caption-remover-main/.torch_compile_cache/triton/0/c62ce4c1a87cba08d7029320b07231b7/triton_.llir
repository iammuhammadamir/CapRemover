; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = shl i32 %9, 3, !dbg !8
  %11 = and i32 %10, 56, !dbg !8
  %12 = lshr i32 %9, 6, !dbg !8
  %13 = and i32 %12, 3, !dbg !8
  %14 = or i32 %13, 4, !dbg !8
  %15 = or i32 %13, 8, !dbg !8
  %16 = or i32 %13, 12, !dbg !8
  %17 = or i32 %13, 16, !dbg !8
  %18 = or i32 %13, 20, !dbg !8
  %19 = or i32 %13, 24, !dbg !8
  %20 = or i32 %13, 28, !dbg !8
  %21 = or i32 %13, 32, !dbg !8
  %22 = or i32 %13, 36, !dbg !8
  %23 = or i32 %13, 40, !dbg !8
  %24 = or i32 %13, 44, !dbg !8
  %25 = or i32 %13, 48, !dbg !8
  %26 = or i32 %13, 52, !dbg !8
  %27 = or i32 %13, 56, !dbg !8
  %28 = or i32 %13, 60, !dbg !8
  %29 = lshr i32 %9, 3, !dbg !9
  %30 = and i32 %29, 31, !dbg !9
  %31 = or i32 %30, 32, !dbg !9
  %32 = and i32 %9, 63, !dbg !9
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %35 = add i32 %34, 1, !dbg !12
  %36 = shl i32 %33, 6, !dbg !13
  %37 = mul i32 %36, %35, !dbg !14
  %38 = or i32 %37, %11, !dbg !15
  %39 = or i32 %37, %13, !dbg !15
  %40 = or i32 %37, %14, !dbg !15
  %41 = or i32 %37, %15, !dbg !15
  %42 = or i32 %37, %16, !dbg !15
  %43 = or i32 %37, %17, !dbg !15
  %44 = or i32 %37, %18, !dbg !15
  %45 = or i32 %37, %19, !dbg !15
  %46 = or i32 %37, %20, !dbg !15
  %47 = or i32 %37, %21, !dbg !15
  %48 = or i32 %37, %22, !dbg !15
  %49 = or i32 %37, %23, !dbg !15
  %50 = or i32 %37, %24, !dbg !15
  %51 = or i32 %37, %25, !dbg !15
  %52 = or i32 %37, %26, !dbg !15
  %53 = or i32 %37, %27, !dbg !15
  %54 = or i32 %37, %28, !dbg !15
  %55 = icmp slt i32 %38, 28160, !dbg !16
  %56 = icmp slt i32 %39, 28160, !dbg !16
  %57 = icmp slt i32 %40, 28160, !dbg !16
  %58 = icmp slt i32 %41, 28160, !dbg !16
  %59 = icmp slt i32 %42, 28160, !dbg !16
  %60 = icmp slt i32 %43, 28160, !dbg !16
  %61 = icmp slt i32 %44, 28160, !dbg !16
  %62 = icmp slt i32 %45, 28160, !dbg !16
  %63 = icmp slt i32 %46, 28160, !dbg !16
  %64 = icmp slt i32 %47, 28160, !dbg !16
  %65 = icmp slt i32 %48, 28160, !dbg !16
  %66 = icmp slt i32 %49, 28160, !dbg !16
  %67 = icmp slt i32 %50, 28160, !dbg !16
  %68 = icmp slt i32 %51, 28160, !dbg !16
  %69 = icmp slt i32 %52, 28160, !dbg !16
  %70 = icmp slt i32 %53, 28160, !dbg !16
  %71 = icmp slt i32 %54, 28160, !dbg !16
  %72 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %73 = shl i32 %72, 6, !dbg !18
  %74 = or i32 %73, %30, !dbg !19
  %75 = or i32 %73, %31, !dbg !19
  %76 = or i32 %73, %32, !dbg !19
  %77 = icmp slt i32 %74, %7, !dbg !20
  %78 = icmp slt i32 %75, %7, !dbg !20
  %79 = icmp slt i32 %76, %7, !dbg !20
  %80 = srem i32 %39, 1280, !dbg !21
  %81 = srem i32 %40, 1280, !dbg !21
  %82 = srem i32 %41, 1280, !dbg !21
  %83 = srem i32 %42, 1280, !dbg !21
  %84 = srem i32 %43, 1280, !dbg !21
  %85 = srem i32 %44, 1280, !dbg !21
  %86 = srem i32 %45, 1280, !dbg !21
  %87 = srem i32 %46, 1280, !dbg !21
  %88 = srem i32 %47, 1280, !dbg !21
  %89 = srem i32 %48, 1280, !dbg !21
  %90 = srem i32 %49, 1280, !dbg !21
  %91 = srem i32 %50, 1280, !dbg !21
  %92 = srem i32 %51, 1280, !dbg !21
  %93 = srem i32 %52, 1280, !dbg !21
  %94 = srem i32 %53, 1280, !dbg !21
  %95 = srem i32 %54, 1280, !dbg !21
  %96 = mul i32 %74, 28160, !dbg !22
  %97 = mul i32 %75, 28160, !dbg !22
  %98 = add i32 %96, %38, !dbg !23
  %99 = add i32 %97, %38, !dbg !23
  %100 = sext i32 %98 to i64, !dbg !24
  %101 = getelementptr half, ptr addrspace(1) %0, i64 %100, !dbg !24
  %102 = sext i32 %99 to i64, !dbg !24
  %103 = getelementptr half, ptr addrspace(1) %0, i64 %102, !dbg !24
  %104 = and i1 %77, %55, !dbg !25
  %105 = and i1 %78, %55, !dbg !25
  %106 = and i1 %79, %56, !dbg !25
  %107 = and i1 %79, %57, !dbg !25
  %108 = and i1 %79, %58, !dbg !25
  %109 = and i1 %79, %59, !dbg !25
  %110 = and i1 %79, %60, !dbg !25
  %111 = and i1 %79, %61, !dbg !25
  %112 = and i1 %79, %62, !dbg !25
  %113 = and i1 %79, %63, !dbg !25
  %114 = and i1 %79, %64, !dbg !25
  %115 = and i1 %79, %65, !dbg !25
  %116 = and i1 %79, %66, !dbg !25
  %117 = and i1 %79, %67, !dbg !25
  %118 = and i1 %79, %68, !dbg !25
  %119 = and i1 %79, %69, !dbg !25
  %120 = and i1 %79, %70, !dbg !25
  %121 = and i1 %79, %71, !dbg !25
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %104) #2, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !26
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !26
  %127 = trunc i32 %123 to i16, !dbg !26
  %extelt.offset = lshr i32 %123, 16, !dbg !26
  %128 = trunc i32 %extelt.offset to i16, !dbg !26
  %129 = trunc i32 %124 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %124, 16, !dbg !26
  %130 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %131 = trunc i32 %125 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %125, 16, !dbg !26
  %132 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %133 = trunc i32 %126 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %126, 16, !dbg !26
  %134 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %105) #2, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !26
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !26
  %140 = trunc i32 %136 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %136, 16, !dbg !26
  %141 = trunc i32 %extelt.offset4 to i16, !dbg !26
  %142 = trunc i32 %137 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %137, 16, !dbg !26
  %143 = trunc i32 %extelt.offset5 to i16, !dbg !26
  %144 = trunc i32 %138 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %138, 16, !dbg !26
  %145 = trunc i32 %extelt.offset6 to i16, !dbg !26
  %146 = trunc i32 %139 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %139, 16, !dbg !26
  %147 = trunc i32 %extelt.offset7 to i16, !dbg !26
  %148 = mul nuw nsw i32 %11, 65, !dbg !27
  %149 = add nuw nsw i32 %148, %30, !dbg !27
  %150 = zext nneg i32 %149 to i64, !dbg !27
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i64 %150, !dbg !27
  store i16 %127, ptr addrspace(3) %151, align 2, !dbg !27
  %152 = add nuw nsw i32 %148, 65, !dbg !27
  %153 = add nuw nsw i32 %152, %30, !dbg !27
  %154 = zext nneg i32 %153 to i64, !dbg !27
  %155 = getelementptr half, ptr addrspace(3) @global_smem, i64 %154, !dbg !27
  store i16 %128, ptr addrspace(3) %155, align 2, !dbg !27
  %156 = add nuw nsw i32 %148, 130, !dbg !27
  %157 = add nuw nsw i32 %156, %30, !dbg !27
  %158 = zext nneg i32 %157 to i64, !dbg !27
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i64 %158, !dbg !27
  store i16 %129, ptr addrspace(3) %159, align 2, !dbg !27
  %160 = add nuw nsw i32 %148, 195, !dbg !27
  %161 = add nuw nsw i32 %160, %30, !dbg !27
  %162 = zext nneg i32 %161 to i64, !dbg !27
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i64 %162, !dbg !27
  store i16 %130, ptr addrspace(3) %163, align 2, !dbg !27
  %164 = add nuw nsw i32 %148, 260, !dbg !27
  %165 = add nuw nsw i32 %164, %30, !dbg !27
  %166 = zext nneg i32 %165 to i64, !dbg !27
  %167 = getelementptr half, ptr addrspace(3) @global_smem, i64 %166, !dbg !27
  store i16 %131, ptr addrspace(3) %167, align 2, !dbg !27
  %168 = add nuw nsw i32 %148, 325, !dbg !27
  %169 = add nuw nsw i32 %168, %30, !dbg !27
  %170 = zext nneg i32 %169 to i64, !dbg !27
  %171 = getelementptr half, ptr addrspace(3) @global_smem, i64 %170, !dbg !27
  store i16 %132, ptr addrspace(3) %171, align 2, !dbg !27
  %172 = add nuw nsw i32 %148, 390, !dbg !27
  %173 = add nuw nsw i32 %172, %30, !dbg !27
  %174 = zext nneg i32 %173 to i64, !dbg !27
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !27
  store i16 %133, ptr addrspace(3) %175, align 2, !dbg !27
  %176 = add nuw nsw i32 %148, 455, !dbg !27
  %177 = add nuw nsw i32 %176, %30, !dbg !27
  %178 = zext nneg i32 %177 to i64, !dbg !27
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i64 %178, !dbg !27
  store i16 %134, ptr addrspace(3) %179, align 2, !dbg !27
  %180 = add nuw nsw i32 %148, %31, !dbg !27
  %181 = zext nneg i32 %180 to i64, !dbg !27
  %182 = getelementptr half, ptr addrspace(3) @global_smem, i64 %181, !dbg !27
  store i16 %140, ptr addrspace(3) %182, align 2, !dbg !27
  %183 = add nuw nsw i32 %152, %31, !dbg !27
  %184 = zext nneg i32 %183 to i64, !dbg !27
  %185 = getelementptr half, ptr addrspace(3) @global_smem, i64 %184, !dbg !27
  store i16 %141, ptr addrspace(3) %185, align 2, !dbg !27
  %186 = add nuw nsw i32 %156, %31, !dbg !27
  %187 = zext nneg i32 %186 to i64, !dbg !27
  %188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %187, !dbg !27
  store i16 %142, ptr addrspace(3) %188, align 2, !dbg !27
  %189 = add nuw nsw i32 %160, %31, !dbg !27
  %190 = zext nneg i32 %189 to i64, !dbg !27
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !27
  store i16 %143, ptr addrspace(3) %191, align 2, !dbg !27
  %192 = add nuw nsw i32 %164, %31, !dbg !27
  %193 = zext nneg i32 %192 to i64, !dbg !27
  %194 = getelementptr half, ptr addrspace(3) @global_smem, i64 %193, !dbg !27
  store i16 %144, ptr addrspace(3) %194, align 2, !dbg !27
  %195 = add nuw nsw i32 %168, %31, !dbg !27
  %196 = zext nneg i32 %195 to i64, !dbg !27
  %197 = getelementptr half, ptr addrspace(3) @global_smem, i64 %196, !dbg !27
  store i16 %145, ptr addrspace(3) %197, align 2, !dbg !27
  %198 = add nuw nsw i32 %172, %31, !dbg !27
  %199 = zext nneg i32 %198 to i64, !dbg !27
  %200 = getelementptr half, ptr addrspace(3) @global_smem, i64 %199, !dbg !27
  store i16 %146, ptr addrspace(3) %200, align 2, !dbg !27
  %201 = add nuw nsw i32 %176, %31, !dbg !27
  %202 = zext nneg i32 %201 to i64, !dbg !27
  %203 = getelementptr half, ptr addrspace(3) @global_smem, i64 %202, !dbg !27
  store i16 %147, ptr addrspace(3) %203, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %204 = mul nuw nsw i32 %13, 65, !dbg !27
  %205 = add nuw nsw i32 %204, %32, !dbg !27
  %206 = zext nneg i32 %205 to i64, !dbg !27
  %207 = getelementptr half, ptr addrspace(3) @global_smem, i64 %206, !dbg !27
  %208 = load half, ptr addrspace(3) %207, align 2, !dbg !27
  %209 = mul nuw nsw i32 %14, 65, !dbg !27
  %210 = add nuw nsw i32 %209, %32, !dbg !27
  %211 = zext nneg i32 %210 to i64, !dbg !27
  %212 = getelementptr half, ptr addrspace(3) @global_smem, i64 %211, !dbg !27
  %213 = load half, ptr addrspace(3) %212, align 2, !dbg !27
  %214 = mul nuw nsw i32 %15, 65, !dbg !27
  %215 = add nuw nsw i32 %214, %32, !dbg !27
  %216 = zext nneg i32 %215 to i64, !dbg !27
  %217 = getelementptr half, ptr addrspace(3) @global_smem, i64 %216, !dbg !27
  %218 = load half, ptr addrspace(3) %217, align 2, !dbg !27
  %219 = mul nuw nsw i32 %16, 65, !dbg !27
  %220 = add nuw nsw i32 %219, %32, !dbg !27
  %221 = zext nneg i32 %220 to i64, !dbg !27
  %222 = getelementptr half, ptr addrspace(3) @global_smem, i64 %221, !dbg !27
  %223 = load half, ptr addrspace(3) %222, align 2, !dbg !27
  %224 = mul nuw nsw i32 %17, 65, !dbg !27
  %225 = add nuw nsw i32 %224, %32, !dbg !27
  %226 = zext nneg i32 %225 to i64, !dbg !27
  %227 = getelementptr half, ptr addrspace(3) @global_smem, i64 %226, !dbg !27
  %228 = load half, ptr addrspace(3) %227, align 2, !dbg !27
  %229 = mul nuw nsw i32 %18, 65, !dbg !27
  %230 = add nuw nsw i32 %229, %32, !dbg !27
  %231 = zext nneg i32 %230 to i64, !dbg !27
  %232 = getelementptr half, ptr addrspace(3) @global_smem, i64 %231, !dbg !27
  %233 = load half, ptr addrspace(3) %232, align 2, !dbg !27
  %234 = mul nuw nsw i32 %19, 65, !dbg !27
  %235 = add nuw nsw i32 %234, %32, !dbg !27
  %236 = zext nneg i32 %235 to i64, !dbg !27
  %237 = getelementptr half, ptr addrspace(3) @global_smem, i64 %236, !dbg !27
  %238 = load half, ptr addrspace(3) %237, align 2, !dbg !27
  %239 = mul nuw nsw i32 %20, 65, !dbg !27
  %240 = add nuw nsw i32 %239, %32, !dbg !27
  %241 = zext nneg i32 %240 to i64, !dbg !27
  %242 = getelementptr half, ptr addrspace(3) @global_smem, i64 %241, !dbg !27
  %243 = load half, ptr addrspace(3) %242, align 2, !dbg !27
  %244 = mul nuw nsw i32 %21, 65, !dbg !27
  %245 = add nuw nsw i32 %244, %32, !dbg !27
  %246 = zext nneg i32 %245 to i64, !dbg !27
  %247 = getelementptr half, ptr addrspace(3) @global_smem, i64 %246, !dbg !27
  %248 = load half, ptr addrspace(3) %247, align 2, !dbg !27
  %249 = mul nuw nsw i32 %22, 65, !dbg !27
  %250 = add nuw nsw i32 %249, %32, !dbg !27
  %251 = zext nneg i32 %250 to i64, !dbg !27
  %252 = getelementptr half, ptr addrspace(3) @global_smem, i64 %251, !dbg !27
  %253 = load half, ptr addrspace(3) %252, align 2, !dbg !27
  %254 = mul nuw nsw i32 %23, 65, !dbg !27
  %255 = add nuw nsw i32 %254, %32, !dbg !27
  %256 = zext nneg i32 %255 to i64, !dbg !27
  %257 = getelementptr half, ptr addrspace(3) @global_smem, i64 %256, !dbg !27
  %258 = load half, ptr addrspace(3) %257, align 2, !dbg !27
  %259 = mul nuw nsw i32 %24, 65, !dbg !27
  %260 = add nuw nsw i32 %259, %32, !dbg !27
  %261 = zext nneg i32 %260 to i64, !dbg !27
  %262 = getelementptr half, ptr addrspace(3) @global_smem, i64 %261, !dbg !27
  %263 = load half, ptr addrspace(3) %262, align 2, !dbg !27
  %264 = mul nuw nsw i32 %25, 65, !dbg !27
  %265 = add nuw nsw i32 %264, %32, !dbg !27
  %266 = zext nneg i32 %265 to i64, !dbg !27
  %267 = getelementptr half, ptr addrspace(3) @global_smem, i64 %266, !dbg !27
  %268 = load half, ptr addrspace(3) %267, align 2, !dbg !27
  %269 = mul nuw nsw i32 %26, 65, !dbg !27
  %270 = add nuw nsw i32 %269, %32, !dbg !27
  %271 = zext nneg i32 %270 to i64, !dbg !27
  %272 = getelementptr half, ptr addrspace(3) @global_smem, i64 %271, !dbg !27
  %273 = load half, ptr addrspace(3) %272, align 2, !dbg !27
  %274 = mul nuw nsw i32 %27, 65, !dbg !27
  %275 = add nuw nsw i32 %274, %32, !dbg !27
  %276 = zext nneg i32 %275 to i64, !dbg !27
  %277 = getelementptr half, ptr addrspace(3) @global_smem, i64 %276, !dbg !27
  %278 = load half, ptr addrspace(3) %277, align 2, !dbg !27
  %279 = mul nuw nsw i32 %28, 65, !dbg !27
  %280 = add nuw nsw i32 %279, %32, !dbg !27
  %281 = zext nneg i32 %280 to i64, !dbg !27
  %282 = getelementptr half, ptr addrspace(3) @global_smem, i64 %281, !dbg !27
  %283 = load half, ptr addrspace(3) %282, align 2, !dbg !27
  %284 = fpext half %208 to float, !dbg !28
  %285 = fpext half %213 to float, !dbg !28
  %286 = fpext half %218 to float, !dbg !28
  %287 = fpext half %223 to float, !dbg !28
  %288 = fpext half %228 to float, !dbg !28
  %289 = fpext half %233 to float, !dbg !28
  %290 = fpext half %238 to float, !dbg !28
  %291 = fpext half %243 to float, !dbg !28
  %292 = fpext half %248 to float, !dbg !28
  %293 = fpext half %253 to float, !dbg !28
  %294 = fpext half %258 to float, !dbg !28
  %295 = fpext half %263 to float, !dbg !28
  %296 = fpext half %268 to float, !dbg !28
  %297 = fpext half %273 to float, !dbg !28
  %298 = fpext half %278 to float, !dbg !28
  %299 = fpext half %283 to float, !dbg !28
  %300 = sext i32 %80 to i64, !dbg !29
  %301 = getelementptr half, ptr addrspace(1) %1, i64 %300, !dbg !29
  %302 = sext i32 %81 to i64, !dbg !29
  %303 = getelementptr half, ptr addrspace(1) %1, i64 %302, !dbg !29
  %304 = sext i32 %82 to i64, !dbg !29
  %305 = getelementptr half, ptr addrspace(1) %1, i64 %304, !dbg !29
  %306 = sext i32 %83 to i64, !dbg !29
  %307 = getelementptr half, ptr addrspace(1) %1, i64 %306, !dbg !29
  %308 = sext i32 %84 to i64, !dbg !29
  %309 = getelementptr half, ptr addrspace(1) %1, i64 %308, !dbg !29
  %310 = sext i32 %85 to i64, !dbg !29
  %311 = getelementptr half, ptr addrspace(1) %1, i64 %310, !dbg !29
  %312 = sext i32 %86 to i64, !dbg !29
  %313 = getelementptr half, ptr addrspace(1) %1, i64 %312, !dbg !29
  %314 = sext i32 %87 to i64, !dbg !29
  %315 = getelementptr half, ptr addrspace(1) %1, i64 %314, !dbg !29
  %316 = sext i32 %88 to i64, !dbg !29
  %317 = getelementptr half, ptr addrspace(1) %1, i64 %316, !dbg !29
  %318 = sext i32 %89 to i64, !dbg !29
  %319 = getelementptr half, ptr addrspace(1) %1, i64 %318, !dbg !29
  %320 = sext i32 %90 to i64, !dbg !29
  %321 = getelementptr half, ptr addrspace(1) %1, i64 %320, !dbg !29
  %322 = sext i32 %91 to i64, !dbg !29
  %323 = getelementptr half, ptr addrspace(1) %1, i64 %322, !dbg !29
  %324 = sext i32 %92 to i64, !dbg !29
  %325 = getelementptr half, ptr addrspace(1) %1, i64 %324, !dbg !29
  %326 = sext i32 %93 to i64, !dbg !29
  %327 = getelementptr half, ptr addrspace(1) %1, i64 %326, !dbg !29
  %328 = sext i32 %94 to i64, !dbg !29
  %329 = getelementptr half, ptr addrspace(1) %1, i64 %328, !dbg !29
  %330 = sext i32 %95 to i64, !dbg !29
  %331 = getelementptr half, ptr addrspace(1) %1, i64 %330, !dbg !29
  %332 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %301, i1 %56) #2, !dbg !30
  %333 = bitcast i16 %332 to half, !dbg !30
  %334 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %303, i1 %57) #2, !dbg !30
  %335 = bitcast i16 %334 to half, !dbg !30
  %336 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %305, i1 %58) #2, !dbg !30
  %337 = bitcast i16 %336 to half, !dbg !30
  %338 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %307, i1 %59) #2, !dbg !30
  %339 = bitcast i16 %338 to half, !dbg !30
  %340 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %309, i1 %60) #2, !dbg !30
  %341 = bitcast i16 %340 to half, !dbg !30
  %342 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %311, i1 %61) #2, !dbg !30
  %343 = bitcast i16 %342 to half, !dbg !30
  %344 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %313, i1 %62) #2, !dbg !30
  %345 = bitcast i16 %344 to half, !dbg !30
  %346 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %315, i1 %63) #2, !dbg !30
  %347 = bitcast i16 %346 to half, !dbg !30
  %348 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %317, i1 %64) #2, !dbg !30
  %349 = bitcast i16 %348 to half, !dbg !30
  %350 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %319, i1 %65) #2, !dbg !30
  %351 = bitcast i16 %350 to half, !dbg !30
  %352 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %321, i1 %66) #2, !dbg !30
  %353 = bitcast i16 %352 to half, !dbg !30
  %354 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %323, i1 %67) #2, !dbg !30
  %355 = bitcast i16 %354 to half, !dbg !30
  %356 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %325, i1 %68) #2, !dbg !30
  %357 = bitcast i16 %356 to half, !dbg !30
  %358 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %327, i1 %69) #2, !dbg !30
  %359 = bitcast i16 %358 to half, !dbg !30
  %360 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %329, i1 %70) #2, !dbg !30
  %361 = bitcast i16 %360 to half, !dbg !30
  %362 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %331, i1 %71) #2, !dbg !30
  %363 = bitcast i16 %362 to half, !dbg !30
  %364 = fpext half %333 to float, !dbg !31
  %365 = fpext half %335 to float, !dbg !31
  %366 = fpext half %337 to float, !dbg !31
  %367 = fpext half %339 to float, !dbg !31
  %368 = fpext half %341 to float, !dbg !31
  %369 = fpext half %343 to float, !dbg !31
  %370 = fpext half %345 to float, !dbg !31
  %371 = fpext half %347 to float, !dbg !31
  %372 = fpext half %349 to float, !dbg !31
  %373 = fpext half %351 to float, !dbg !31
  %374 = fpext half %353 to float, !dbg !31
  %375 = fpext half %355 to float, !dbg !31
  %376 = fpext half %357 to float, !dbg !31
  %377 = fpext half %359 to float, !dbg !31
  %378 = fpext half %361 to float, !dbg !31
  %379 = fpext half %363 to float, !dbg !31
  %380 = mul i32 %5, %4, !dbg !32
  %381 = mul i32 %39, %380, !dbg !33
  %382 = mul i32 %40, %380, !dbg !33
  %383 = mul i32 %41, %380, !dbg !33
  %384 = mul i32 %42, %380, !dbg !33
  %385 = mul i32 %43, %380, !dbg !33
  %386 = mul i32 %44, %380, !dbg !33
  %387 = mul i32 %45, %380, !dbg !33
  %388 = mul i32 %46, %380, !dbg !33
  %389 = mul i32 %47, %380, !dbg !33
  %390 = mul i32 %48, %380, !dbg !33
  %391 = mul i32 %49, %380, !dbg !33
  %392 = mul i32 %50, %380, !dbg !33
  %393 = mul i32 %51, %380, !dbg !33
  %394 = mul i32 %52, %380, !dbg !33
  %395 = mul i32 %53, %380, !dbg !33
  %396 = mul i32 %54, %380, !dbg !33
  %397 = add i32 %381, %76, !dbg !34
  %398 = add i32 %382, %76, !dbg !34
  %399 = add i32 %383, %76, !dbg !34
  %400 = add i32 %384, %76, !dbg !34
  %401 = add i32 %385, %76, !dbg !34
  %402 = add i32 %386, %76, !dbg !34
  %403 = add i32 %387, %76, !dbg !34
  %404 = add i32 %388, %76, !dbg !34
  %405 = add i32 %389, %76, !dbg !34
  %406 = add i32 %390, %76, !dbg !34
  %407 = add i32 %391, %76, !dbg !34
  %408 = add i32 %392, %76, !dbg !34
  %409 = add i32 %393, %76, !dbg !34
  %410 = add i32 %394, %76, !dbg !34
  %411 = add i32 %395, %76, !dbg !34
  %412 = add i32 %396, %76, !dbg !34
  %413 = sext i32 %397 to i64, !dbg !35
  %414 = getelementptr half, ptr addrspace(1) %2, i64 %413, !dbg !35
  %415 = sext i32 %398 to i64, !dbg !35
  %416 = getelementptr half, ptr addrspace(1) %2, i64 %415, !dbg !35
  %417 = sext i32 %399 to i64, !dbg !35
  %418 = getelementptr half, ptr addrspace(1) %2, i64 %417, !dbg !35
  %419 = sext i32 %400 to i64, !dbg !35
  %420 = getelementptr half, ptr addrspace(1) %2, i64 %419, !dbg !35
  %421 = sext i32 %401 to i64, !dbg !35
  %422 = getelementptr half, ptr addrspace(1) %2, i64 %421, !dbg !35
  %423 = sext i32 %402 to i64, !dbg !35
  %424 = getelementptr half, ptr addrspace(1) %2, i64 %423, !dbg !35
  %425 = sext i32 %403 to i64, !dbg !35
  %426 = getelementptr half, ptr addrspace(1) %2, i64 %425, !dbg !35
  %427 = sext i32 %404 to i64, !dbg !35
  %428 = getelementptr half, ptr addrspace(1) %2, i64 %427, !dbg !35
  %429 = sext i32 %405 to i64, !dbg !35
  %430 = getelementptr half, ptr addrspace(1) %2, i64 %429, !dbg !35
  %431 = sext i32 %406 to i64, !dbg !35
  %432 = getelementptr half, ptr addrspace(1) %2, i64 %431, !dbg !35
  %433 = sext i32 %407 to i64, !dbg !35
  %434 = getelementptr half, ptr addrspace(1) %2, i64 %433, !dbg !35
  %435 = sext i32 %408 to i64, !dbg !35
  %436 = getelementptr half, ptr addrspace(1) %2, i64 %435, !dbg !35
  %437 = sext i32 %409 to i64, !dbg !35
  %438 = getelementptr half, ptr addrspace(1) %2, i64 %437, !dbg !35
  %439 = sext i32 %410 to i64, !dbg !35
  %440 = getelementptr half, ptr addrspace(1) %2, i64 %439, !dbg !35
  %441 = sext i32 %411 to i64, !dbg !35
  %442 = getelementptr half, ptr addrspace(1) %2, i64 %441, !dbg !35
  %443 = sext i32 %412 to i64, !dbg !35
  %444 = getelementptr half, ptr addrspace(1) %2, i64 %443, !dbg !35
  %445 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %414, i1 %106) #2, !dbg !36
  %446 = bitcast i16 %445 to half, !dbg !36
  %447 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %416, i1 %107) #2, !dbg !36
  %448 = bitcast i16 %447 to half, !dbg !36
  %449 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %418, i1 %108) #2, !dbg !36
  %450 = bitcast i16 %449 to half, !dbg !36
  %451 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %420, i1 %109) #2, !dbg !36
  %452 = bitcast i16 %451 to half, !dbg !36
  %453 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %422, i1 %110) #2, !dbg !36
  %454 = bitcast i16 %453 to half, !dbg !36
  %455 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %424, i1 %111) #2, !dbg !36
  %456 = bitcast i16 %455 to half, !dbg !36
  %457 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %426, i1 %112) #2, !dbg !36
  %458 = bitcast i16 %457 to half, !dbg !36
  %459 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %428, i1 %113) #2, !dbg !36
  %460 = bitcast i16 %459 to half, !dbg !36
  %461 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %430, i1 %114) #2, !dbg !36
  %462 = bitcast i16 %461 to half, !dbg !36
  %463 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %432, i1 %115) #2, !dbg !36
  %464 = bitcast i16 %463 to half, !dbg !36
  %465 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %434, i1 %116) #2, !dbg !36
  %466 = bitcast i16 %465 to half, !dbg !36
  %467 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %436, i1 %117) #2, !dbg !36
  %468 = bitcast i16 %467 to half, !dbg !36
  %469 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %438, i1 %118) #2, !dbg !36
  %470 = bitcast i16 %469 to half, !dbg !36
  %471 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %440, i1 %119) #2, !dbg !36
  %472 = bitcast i16 %471 to half, !dbg !36
  %473 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %442, i1 %120) #2, !dbg !36
  %474 = bitcast i16 %473 to half, !dbg !36
  %475 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %444, i1 %121) #2, !dbg !36
  %476 = bitcast i16 %475 to half, !dbg !36
  %477 = fpext half %446 to float, !dbg !37
  %478 = fpext half %448 to float, !dbg !37
  %479 = fpext half %450 to float, !dbg !37
  %480 = fpext half %452 to float, !dbg !37
  %481 = fpext half %454 to float, !dbg !37
  %482 = fpext half %456 to float, !dbg !37
  %483 = fpext half %458 to float, !dbg !37
  %484 = fpext half %460 to float, !dbg !37
  %485 = fpext half %462 to float, !dbg !37
  %486 = fpext half %464 to float, !dbg !37
  %487 = fpext half %466 to float, !dbg !37
  %488 = fpext half %468 to float, !dbg !37
  %489 = fpext half %470 to float, !dbg !37
  %490 = fpext half %472 to float, !dbg !37
  %491 = fpext half %474 to float, !dbg !37
  %492 = fpext half %476 to float, !dbg !37
  %493 = fadd float %284, %364, !dbg !27
  %494 = fadd float %285, %365, !dbg !27
  %495 = fadd float %286, %366, !dbg !27
  %496 = fadd float %287, %367, !dbg !27
  %497 = fadd float %288, %368, !dbg !27
  %498 = fadd float %289, %369, !dbg !27
  %499 = fadd float %290, %370, !dbg !27
  %500 = fadd float %291, %371, !dbg !27
  %501 = fadd float %292, %372, !dbg !27
  %502 = fadd float %293, %373, !dbg !27
  %503 = fadd float %294, %374, !dbg !27
  %504 = fadd float %295, %375, !dbg !27
  %505 = fadd float %296, %376, !dbg !27
  %506 = fadd float %297, %377, !dbg !27
  %507 = fadd float %298, %378, !dbg !27
  %508 = fadd float %299, %379, !dbg !27
  %509 = fadd float %493, %477, !dbg !38
  %510 = fadd float %494, %478, !dbg !38
  %511 = fadd float %495, %479, !dbg !38
  %512 = fadd float %496, %480, !dbg !38
  %513 = fadd float %497, %481, !dbg !38
  %514 = fadd float %498, %482, !dbg !38
  %515 = fadd float %499, %483, !dbg !38
  %516 = fadd float %500, %484, !dbg !38
  %517 = fadd float %501, %485, !dbg !38
  %518 = fadd float %502, %486, !dbg !38
  %519 = fadd float %503, %487, !dbg !38
  %520 = fadd float %504, %488, !dbg !38
  %521 = fadd float %505, %489, !dbg !38
  %522 = fadd float %506, %490, !dbg !38
  %523 = fadd float %507, %491, !dbg !38
  %524 = fadd float %508, %492, !dbg !38
  %525 = getelementptr half, ptr addrspace(1) %3, i64 %413, !dbg !39
  %526 = getelementptr half, ptr addrspace(1) %3, i64 %415, !dbg !39
  %527 = getelementptr half, ptr addrspace(1) %3, i64 %417, !dbg !39
  %528 = getelementptr half, ptr addrspace(1) %3, i64 %419, !dbg !39
  %529 = getelementptr half, ptr addrspace(1) %3, i64 %421, !dbg !39
  %530 = getelementptr half, ptr addrspace(1) %3, i64 %423, !dbg !39
  %531 = getelementptr half, ptr addrspace(1) %3, i64 %425, !dbg !39
  %532 = getelementptr half, ptr addrspace(1) %3, i64 %427, !dbg !39
  %533 = getelementptr half, ptr addrspace(1) %3, i64 %429, !dbg !39
  %534 = getelementptr half, ptr addrspace(1) %3, i64 %431, !dbg !39
  %535 = getelementptr half, ptr addrspace(1) %3, i64 %433, !dbg !39
  %536 = getelementptr half, ptr addrspace(1) %3, i64 %435, !dbg !39
  %537 = getelementptr half, ptr addrspace(1) %3, i64 %437, !dbg !39
  %538 = getelementptr half, ptr addrspace(1) %3, i64 %439, !dbg !39
  %539 = getelementptr half, ptr addrspace(1) %3, i64 %441, !dbg !39
  %540 = getelementptr half, ptr addrspace(1) %3, i64 %443, !dbg !39
  %541 = fptrunc float %509 to half, !dbg !40
  %542 = fptrunc float %510 to half, !dbg !40
  %543 = fptrunc float %511 to half, !dbg !40
  %544 = fptrunc float %512 to half, !dbg !40
  %545 = fptrunc float %513 to half, !dbg !40
  %546 = fptrunc float %514 to half, !dbg !40
  %547 = fptrunc float %515 to half, !dbg !40
  %548 = fptrunc float %516 to half, !dbg !40
  %549 = fptrunc float %517 to half, !dbg !40
  %550 = fptrunc float %518 to half, !dbg !40
  %551 = fptrunc float %519 to half, !dbg !40
  %552 = fptrunc float %520 to half, !dbg !40
  %553 = fptrunc float %521 to half, !dbg !40
  %554 = fptrunc float %522 to half, !dbg !40
  %555 = fptrunc float %523 to half, !dbg !40
  %556 = fptrunc float %524 to half, !dbg !40
  %557 = bitcast half %541 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %557, ptr addrspace(1) %525, i1 %106) #2, !dbg !40
  %558 = bitcast half %542 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %558, ptr addrspace(1) %526, i1 %107) #2, !dbg !40
  %559 = bitcast half %543 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %559, ptr addrspace(1) %527, i1 %108) #2, !dbg !40
  %560 = bitcast half %544 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %560, ptr addrspace(1) %528, i1 %109) #2, !dbg !40
  %561 = bitcast half %545 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %561, ptr addrspace(1) %529, i1 %110) #2, !dbg !40
  %562 = bitcast half %546 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %562, ptr addrspace(1) %530, i1 %111) #2, !dbg !40
  %563 = bitcast half %547 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %563, ptr addrspace(1) %531, i1 %112) #2, !dbg !40
  %564 = bitcast half %548 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %564, ptr addrspace(1) %532, i1 %113) #2, !dbg !40
  %565 = bitcast half %549 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %565, ptr addrspace(1) %533, i1 %114) #2, !dbg !40
  %566 = bitcast half %550 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %566, ptr addrspace(1) %534, i1 %115) #2, !dbg !40
  %567 = bitcast half %551 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %567, ptr addrspace(1) %535, i1 %116) #2, !dbg !40
  %568 = bitcast half %552 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %568, ptr addrspace(1) %536, i1 %117) #2, !dbg !40
  %569 = bitcast half %553 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %569, ptr addrspace(1) %537, i1 %118) #2, !dbg !40
  %570 = bitcast half %554 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %570, ptr addrspace(1) %538, i1 %119) #2, !dbg !40
  %571 = bitcast half %555 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %571, ptr addrspace(1) %539, i1 %120) #2, !dbg !40
  %572 = bitcast half %556 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %572, ptr addrspace(1) %540, i1 %121) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c5lfiujh4m6mmrxkiywtbi2vmoy2hagcofoij37usmtrd6bv5cr4.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/5l")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 30, column: 18, scope: !5)
!22 = !DILocation(line: 31, column: 42, scope: !5)
!23 = !DILocation(line: 31, column: 36, scope: !5)
!24 = !DILocation(line: 31, column: 30, scope: !5)
!25 = !DILocation(line: 31, column: 56, scope: !5)
!26 = !DILocation(line: 31, column: 48, scope: !5)
!27 = !DILocation(line: 34, column: 18, scope: !5)
!28 = !DILocation(line: 31, column: 96, scope: !5)
!29 = !DILocation(line: 32, column: 30, scope: !5)
!30 = !DILocation(line: 32, column: 35, scope: !5)
!31 = !DILocation(line: 32, column: 75, scope: !5)
!32 = !DILocation(line: 33, column: 40, scope: !5)
!33 = !DILocation(line: 33, column: 44, scope: !5)
!34 = !DILocation(line: 33, column: 36, scope: !5)
!35 = !DILocation(line: 33, column: 30, scope: !5)
!36 = !DILocation(line: 33, column: 50, scope: !5)
!37 = !DILocation(line: 33, column: 98, scope: !5)
!38 = !DILocation(line: 35, column: 18, scope: !5)
!39 = !DILocation(line: 36, column: 25, scope: !5)
!40 = !DILocation(line: 36, column: 51, scope: !5)
!41 = !DILocation(line: 36, column: 4, scope: !5)
