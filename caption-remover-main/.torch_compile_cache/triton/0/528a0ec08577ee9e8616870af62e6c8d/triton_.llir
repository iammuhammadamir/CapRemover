; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d56789de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) local_unnamed_addr !dbg !5 {
.peel.next:
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %11 = and i32 %10, 63, !dbg !8
  %12 = lshr i32 %10, 2, !dbg !8
  %13 = and i32 %12, 63, !dbg !8
  %14 = lshr i32 %10, 6, !dbg !9
  %15 = and i32 %14, 3, !dbg !9
  %16 = and i32 %10, 3, !dbg !9
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 6, !dbg !11
  %19 = or i32 %18, %11, !dbg !12
  %20 = or i32 %18, %13, !dbg !12
  %21 = icmp slt i32 %19, %8, !dbg !13
  %22 = icmp slt i32 %20, %8, !dbg !13
  %.frozen = freeze i32 %19
  %.frozen18 = freeze i32 %5
  %23 = sdiv i32 %.frozen, %.frozen18, !dbg !14
  %24 = mul i32 %23, %.frozen18
  %.decomposed = sub i32 %.frozen, %24
  %25 = mul i32 %23, 640, !dbg !15
  %reass.mul3 = mul i32 %7, %6
  %26 = mul nuw nsw i32 %16, 65
  %27 = add nuw nsw i32 %26, %13
  %28 = zext nneg i32 %27 to i64
  %29 = getelementptr float, ptr addrspace(3) @global_smem, i64 %28
  %30 = mul nuw nsw i32 %15, 65
  %31 = add nuw nsw i32 %30, %11
  %32 = zext nneg i32 %31 to i64
  %33 = getelementptr float, ptr addrspace(3) @global_smem, i64 %32
  %reass.add2.peel = or i32 %15, %25
  %reass.mul.peel = mul i32 %reass.mul3, %reass.add2.peel
  %34 = add i32 %reass.mul.peel, %.decomposed, !dbg !16
  %35 = sext i32 %34 to i64, !dbg !17
  %36 = getelementptr half, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %36, i1 %21, i16 0, i1 %21) #3, !dbg !18
  %38 = zext nneg i32 %15 to i64, !dbg !19
  %39 = getelementptr half, ptr addrspace(1) %1, i64 %38, !dbg !19
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %39, i1 true, i16 0, i1 true) #3, !dbg !20
  %41 = getelementptr half, ptr addrspace(1) %2, i64 %35, !dbg !21
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %41, i1 %21, i16 0, i1 %21) #3, !dbg !22
  %43 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %44 = bitcast i16 %37 to half, !dbg !18
  %45 = fpext half %44 to float, !dbg !24
  %46 = bitcast i16 %40 to half, !dbg !20
  %47 = fpext half %46 to float, !dbg !25
  %48 = fadd float %45, %47, !dbg !26
  %49 = bitcast i16 %42 to half, !dbg !22
  %50 = fpext half %49 to float, !dbg !27
  %51 = fmul float %50, 1.250000e-01, !dbg !28
  %52 = fadd float %48, %51, !dbg !29
  %53 = select i1 %21, float %52, float 0.000000e+00, !dbg !30
  br label %54, !dbg !31

54:                                               ; preds = %.peel.next, %54
  %55 = phi float [ %43, %.peel.next ], [ %89, %54 ]
  %56 = phi float [ 0.000000e+00, %.peel.next ], [ %88, %54 ]
  %57 = phi float [ %53, %.peel.next ], [ %86, %54 ]
  %58 = phi i32 [ 4, %.peel.next ], [ %90, %54 ]
  %59 = or i32 %58, %15, !dbg !32
  %reass.add2 = add i32 %59, %25
  %reass.mul = mul i32 %reass.mul3, %reass.add2
  %60 = add i32 %reass.mul, %.decomposed, !dbg !16
  %61 = sext i32 %60 to i64, !dbg !17
  %62 = getelementptr half, ptr addrspace(1) %0, i64 %61, !dbg !17
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %62, i1 %21, i16 0, i1 %21) #3, !dbg !18
  %64 = zext nneg i32 %59 to i64, !dbg !19
  %65 = getelementptr half, ptr addrspace(1) %1, i64 %64, !dbg !19
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %65, i1 true, i16 0, i1 true) #3, !dbg !20
  %67 = getelementptr half, ptr addrspace(1) %2, i64 %61, !dbg !21
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %67, i1 %21, i16 0, i1 %21) #3, !dbg !22
  %69 = bitcast i16 %63 to half, !dbg !18
  %70 = fpext half %69 to float, !dbg !24
  %71 = bitcast i16 %66 to half, !dbg !20
  %72 = fpext half %71 to float, !dbg !25
  %73 = fadd float %70, %72, !dbg !26
  %74 = bitcast i16 %68 to half, !dbg !22
  %75 = fpext half %74 to float, !dbg !27
  %76 = fmul float %75, 1.250000e-01, !dbg !28
  %77 = fadd float %73, %76, !dbg !29
  %78 = fsub float %77, %57, !dbg !33
  %79 = fadd float %55, 1.000000e+00, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %80 = insertelement <1 x float> undef, float %79, i64 0, !dbg !37
  store <1 x float> %80, ptr addrspace(3) %29, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %81 = load float, ptr addrspace(3) %33, align 4, !dbg !37
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %81) #3, !dbg !38
  %83 = fadd float %57, %82, !dbg !39
  %84 = fsub float %77, %83, !dbg !40
  %85 = fmul float %78, %84, !dbg !41
  %86 = select i1 %21, float %83, float %57, !dbg !30
  %87 = select i1 %21, float %85, float -0.000000e+00, !dbg !42
  %88 = fadd float %56, %87, !dbg !42
  %89 = select i1 %22, float %79, float %55, !dbg !23
  %90 = add nuw nsw i32 %58, 4, !dbg !31
  %91 = icmp ult i32 %58, 636, !dbg !31
  br i1 %91, label %54, label %.loopexit, !dbg !31, !llvm.loop !43

.loopexit:                                        ; preds = %54
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %92 = insertelement <1 x float> undef, float %89, i64 0, !dbg !31
  store <1 x float> %92, ptr addrspace(3) %29, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %93 = load float, ptr addrspace(3) %33, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %94 = shl nuw nsw i32 %11, 2, !dbg !45
  %95 = or i32 %94, %15, !dbg !45
  %96 = zext nneg i32 %95 to i64, !dbg !45
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, float %86, i1 true) #3, !dbg !45
  %98 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %96, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, float %88, i1 true) #3, !dbg !45
  %99 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %96, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, float %93, i1 true) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %100 = icmp slt i32 %10, 256, !dbg !45
  %101 = sext i32 %10 to i64, !dbg !45
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i64 %101, !dbg !45
  %103 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %102, i1 %100) #3, !dbg !45
  %104 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %101, !dbg !45
  %105 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %104, i1 %100) #3, !dbg !45
  %106 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %101, !dbg !45
  %107 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %100) #3, !dbg !45
  %108 = bitcast float %103 to i32, !dbg !45
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !45
  %110 = bitcast i32 %109 to float, !dbg !45
  %111 = bitcast float %105 to i32, !dbg !45
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !45
  %113 = bitcast i32 %112 to float, !dbg !45
  %114 = bitcast float %107 to i32, !dbg !45
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !45
  %116 = bitcast i32 %115 to float, !dbg !45
  %117 = fsub float %110, %103, !dbg !47
  %118 = fadd float %107, %116, !dbg !51
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !52
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %118) #3, !dbg !53
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !54
  %122 = fmul float %117, %121, !dbg !55
  %123 = fadd float %103, %122, !dbg !56
  %124 = fadd float %105, %113, !dbg !57
  %125 = fmul float %117, %117, !dbg !58
  %126 = fmul float %107, %125, !dbg !59
  %127 = fmul float %126, %121, !dbg !60
  %128 = fadd float %124, %127, !dbg !61
  %129 = bitcast float %123 to i32, !dbg !45
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !45
  %131 = bitcast i32 %130 to float, !dbg !45
  %132 = bitcast float %128 to i32, !dbg !45
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !45
  %134 = bitcast i32 %133 to float, !dbg !45
  %135 = bitcast float %118 to i32, !dbg !45
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !45
  %137 = bitcast i32 %136 to float, !dbg !45
  %138 = fsub float %131, %123, !dbg !47
  %139 = fadd float %118, %137, !dbg !51
  %140 = fcmp oeq float %139, 0.000000e+00, !dbg !52
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %139) #3, !dbg !53
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !54
  %143 = fmul float %138, %142, !dbg !55
  %144 = fadd float %123, %143, !dbg !56
  %145 = fadd float %128, %134, !dbg !57
  %146 = fmul float %138, %138, !dbg !58
  %147 = fmul float %118, %146, !dbg !59
  %148 = fmul float %142, %147, !dbg !60
  %149 = fadd float %145, %148, !dbg !61
  %150 = icmp eq i32 %16, 0, !dbg !45
  %151 = and i1 %100, %150, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, float %144, i1 %151) #3, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, float %149, i1 %151) #3, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, float %139, i1 %151) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %152 = zext nneg i32 %94 to i64, !dbg !45
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i64 %152, !dbg !45
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !45
  %155 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %152, !dbg !45
  %156 = load i32, ptr addrspace(3) %155, align 4, !dbg !45
  %157 = sext i32 %19 to i64, !dbg !62
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !62
  %159 = icmp eq i32 %15, 0, !dbg !63
  %160 = and i1 %159, %21, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %158, i1 %160) #3, !dbg !63
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %161, i1 %160) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ccehsxhd25ziwkgruplxbpazyec5xvwv4igp7me7k2nuy4twka22.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/ce")
!3 = !{ptr @triton__0d1d2d3d4d56789de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d56789de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d56789de", linkageName: "triton__0d1d2d3d4d56789de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 33, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 33, scope: !5)
!12 = !DILocation(line: 23, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 21, scope: !5)
!14 = !DILocation(line: 27, column: 20, scope: !5)
!15 = !DILocation(line: 36, column: 67, scope: !5)
!16 = !DILocation(line: 36, column: 55, scope: !5)
!17 = !DILocation(line: 36, column: 34, scope: !5)
!18 = !DILocation(line: 36, column: 73, scope: !5)
!19 = !DILocation(line: 37, column: 34, scope: !5)
!20 = !DILocation(line: 37, column: 39, scope: !5)
!21 = !DILocation(line: 38, column: 34, scope: !5)
!22 = !DILocation(line: 38, column: 73, scope: !5)
!23 = !DILocation(line: 50, column: 64, scope: !5)
!24 = !DILocation(line: 36, column: 132, scope: !5)
!25 = !DILocation(line: 37, column: 90, scope: !5)
!26 = !DILocation(line: 39, column: 22, scope: !5)
!27 = !DILocation(line: 38, column: 132, scope: !5)
!28 = !DILocation(line: 41, column: 22, scope: !5)
!29 = !DILocation(line: 42, column: 22, scope: !5)
!30 = !DILocation(line: 48, column: 60, scope: !5)
!31 = !DILocation(line: 32, column: 36, scope: !5)
!32 = !DILocation(line: 33, column: 27, scope: !5)
!33 = !DILocation(line: 110, column: 24, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !5, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!36 = !DILocation(line: 46, column: 51, scope: !34)
!37 = !DILocation(line: 111, column: 30, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 112, column: 34, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 112, column: 26, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 113, column: 39, scope: !34, inlinedAt: !36)
!41 = !DILocation(line: 113, column: 31, scope: !34, inlinedAt: !36)
!42 = !DILocation(line: 49, column: 56, scope: !5)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = !DILocation(line: 131, column: 46, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 52, column: 41, scope: !34)
!47 = !DILocation(line: 119, column: 21, scope: !48, inlinedAt: !49)
!48 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!49 = !DILocation(line: 131, column: 46, scope: !48, inlinedAt: !50)
!50 = !DILocation(line: 52, column: 41, scope: !48)
!51 = !DILocation(line: 120, column: 28, scope: !48, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 39, scope: !48, inlinedAt: !49)
!53 = !DILocation(line: 121, column: 60, scope: !48, inlinedAt: !49)
!54 = !DILocation(line: 121, column: 49, scope: !48, inlinedAt: !49)
!55 = !DILocation(line: 123, column: 25, scope: !48, inlinedAt: !49)
!56 = !DILocation(line: 123, column: 17, scope: !48, inlinedAt: !49)
!57 = !DILocation(line: 124, column: 15, scope: !48, inlinedAt: !49)
!58 = !DILocation(line: 124, column: 30, scope: !48, inlinedAt: !49)
!59 = !DILocation(line: 124, column: 38, scope: !48, inlinedAt: !49)
!60 = !DILocation(line: 124, column: 49, scope: !48, inlinedAt: !49)
!61 = !DILocation(line: 124, column: 22, scope: !48, inlinedAt: !49)
!62 = !DILocation(line: 57, column: 25, scope: !5)
!63 = !DILocation(line: 57, column: 36, scope: !5)
!64 = !DILocation(line: 58, column: 25, scope: !5)
!65 = !DILocation(line: 58, column: 37, scope: !5)
!66 = !DILocation(line: 58, column: 4, scope: !5)
