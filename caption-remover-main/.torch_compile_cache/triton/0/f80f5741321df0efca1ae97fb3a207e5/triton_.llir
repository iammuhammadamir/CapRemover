; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = shl i32 %8, 3, !dbg !8
  %12 = and i32 %11, 24, !dbg !8
  %13 = and i32 %10, 3, !dbg !8
  %14 = lshr i32 %9, 3, !dbg !8
  %15 = shl nuw nsw i32 %13, 2, !dbg !8
  %16 = or i32 %15, %14, !dbg !8
  %17 = or i32 %16, 16, !dbg !8
  %18 = lshr i32 %9, 2, !dbg !9
  %19 = shl nuw nsw i32 %13, 3, !dbg !9
  %20 = or i32 %19, %18, !dbg !9
  %21 = shl i32 %8, 2, !dbg !9
  %22 = and i32 %21, 28, !dbg !9
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %25 = add i32 %24, 1, !dbg !12
  %26 = shl i32 %23, 5, !dbg !13
  %27 = mul i32 %26, %25, !dbg !14
  %28 = or i32 %27, %12, !dbg !15
  %29 = or i32 %27, %16, !dbg !15
  %30 = or i32 %27, %17, !dbg !15
  %31 = icmp slt i32 %28, 7040, !dbg !16
  %32 = icmp slt i32 %29, 7040, !dbg !16
  %33 = icmp slt i32 %30, 7040, !dbg !16
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %35 = shl i32 %34, 5, !dbg !18
  %36 = or i32 %35, %20, !dbg !19
  %37 = or i32 %35, %22, !dbg !19
  %38 = icmp slt i32 %36, 2700, !dbg !20
  %39 = icmp slt i32 %37, 2700, !dbg !20
  %.frozen = freeze i32 %28
  %40 = sdiv i32 %.frozen, 320, !dbg !21
  %41 = mul i32 %40, 320
  %.decomposed = sub i32 %.frozen, %41
  %42 = mul i32 %36, 320, !dbg !22
  %43 = add i32 %.decomposed, %42, !dbg !23
  %44 = mul i32 %40, 864000, !dbg !24
  %45 = add i32 %43, %44, !dbg !25
  %46 = sext i32 %45 to i64, !dbg !26
  %47 = getelementptr half, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = and i1 %38, %31, !dbg !27
  %49 = and i1 %39, %32, !dbg !27
  %50 = and i1 %39, %33, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %48) #2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = sext i32 %.decomposed to i64, !dbg !29
  %57 = getelementptr half, ptr addrspace(1) %1, i64 %56, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %31) #2, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %extelt.offset4 = lshr i32 %59, 16, !dbg !30
  %63 = trunc i32 %extelt.offset4 to i16, !dbg !30
  %64 = bitcast i16 %63 to half, !dbg !30
  %extelt.offset5 = lshr i32 %60, 16, !dbg !30
  %65 = trunc i32 %extelt.offset5 to i16, !dbg !30
  %66 = bitcast i16 %65 to half, !dbg !30
  %extelt.offset6 = lshr i32 %61, 16, !dbg !30
  %67 = trunc i32 %extelt.offset6 to i16, !dbg !30
  %68 = bitcast i16 %67 to half, !dbg !30
  %extelt.offset7 = lshr i32 %62, 16, !dbg !30
  %69 = trunc i32 %extelt.offset7 to i16, !dbg !30
  %70 = bitcast i16 %69 to half, !dbg !30
  %71 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !28
  %72 = insertelement <2 x i32> %71, i32 %59, i64 1, !dbg !28
  %73 = trunc <2 x i32> %72 to <2 x i16>, !dbg !28
  %74 = bitcast <2 x i16> %73 to <2 x half>, !dbg !28
  %75 = fpext <2 x half> %74 to <2 x float>, !dbg !31
  %76 = fpext half %64 to float, !dbg !32
  %77 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !28
  %78 = insertelement <2 x i32> %77, i32 %60, i64 1, !dbg !28
  %79 = trunc <2 x i32> %78 to <2 x i16>, !dbg !28
  %80 = bitcast <2 x i16> %79 to <2 x half>, !dbg !28
  %81 = fpext <2 x half> %80 to <2 x float>, !dbg !31
  %82 = fpext half %66 to float, !dbg !32
  %83 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !28
  %84 = insertelement <2 x i32> %83, i32 %61, i64 1, !dbg !28
  %85 = trunc <2 x i32> %84 to <2 x i16>, !dbg !28
  %86 = bitcast <2 x i16> %85 to <2 x half>, !dbg !28
  %87 = fpext <2 x half> %86 to <2 x float>, !dbg !31
  %88 = fpext half %68 to float, !dbg !32
  %89 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !28
  %90 = insertelement <2 x i32> %89, i32 %62, i64 1, !dbg !28
  %91 = trunc <2 x i32> %90 to <2 x i16>, !dbg !28
  %92 = bitcast <2 x i16> %91 to <2 x half>, !dbg !28
  %93 = fpext <2 x half> %92 to <2 x float>, !dbg !31
  %94 = fpext half %70 to float, !dbg !32
  %95 = getelementptr half, ptr addrspace(1) %2, i64 %46, !dbg !33
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %48) #2, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !34
  %101 = trunc i32 %97 to i16, !dbg !34
  %102 = bitcast i16 %101 to half, !dbg !34
  %103 = trunc i32 %98 to i16, !dbg !34
  %104 = bitcast i16 %103 to half, !dbg !34
  %105 = trunc i32 %99 to i16, !dbg !34
  %106 = bitcast i16 %105 to half, !dbg !34
  %107 = trunc i32 %100 to i16, !dbg !34
  %108 = bitcast i16 %107 to half, !dbg !34
  %109 = fpext half %102 to float, !dbg !35
  %110 = fpext half %104 to float, !dbg !35
  %111 = fpext half %106 to float, !dbg !35
  %112 = fpext half %108 to float, !dbg !35
  %113 = mul i32 %29, 2700, !dbg !36
  %114 = mul i32 %30, 2700, !dbg !36
  %115 = add i32 %113, %37, !dbg !37
  %116 = add i32 %114, %37, !dbg !37
  %117 = sext i32 %115 to i64, !dbg !38
  %118 = getelementptr half, ptr addrspace(1) %3, i64 %117, !dbg !38
  %119 = sext i32 %116 to i64, !dbg !38
  %120 = getelementptr half, ptr addrspace(1) %3, i64 %119, !dbg !38
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %118, i1 %49) #2, !dbg !39
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !39
  %123 = extractvalue { i32, i32 } %121, 1, !dbg !39
  %extelt.offset12 = lshr i32 %122, 16, !dbg !39
  %extelt.offset13 = lshr i32 %123, 16, !dbg !39
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %120, i1 %50) #2, !dbg !39
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !39
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !39
  %extelt.offset14 = lshr i32 %125, 16, !dbg !39
  %extelt.offset15 = lshr i32 %126, 16, !dbg !39
  %shift = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %127 = fadd <2 x float> %shift, %75, !dbg !40
  %128 = extractelement <2 x float> %127, i64 0, !dbg !40
  %shift16 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %129 = fadd <2 x float> %shift16, %81, !dbg !40
  %130 = extractelement <2 x float> %129, i64 0, !dbg !40
  %shift17 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %131 = fadd <2 x float> %shift17, %87, !dbg !40
  %132 = extractelement <2 x float> %131, i64 0, !dbg !40
  %shift18 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %133 = fadd <2 x float> %shift18, %93, !dbg !40
  %134 = extractelement <2 x float> %133, i64 0, !dbg !40
  %135 = fmul float %109, 1.250000e-01, !dbg !41
  %136 = insertelement <2 x i32> %71, i32 %97, i64 1, !dbg !28
  %137 = lshr <2 x i32> %136, <i32 16, i32 16>, !dbg !28
  %138 = trunc <2 x i32> %137 to <2 x i16>, !dbg !28
  %139 = bitcast <2 x i16> %138 to <2 x half>, !dbg !28
  %140 = fpext <2 x half> %139 to <2 x float>, !dbg !31
  %141 = fmul float %110, 1.250000e-01, !dbg !41
  %142 = insertelement <2 x i32> %77, i32 %98, i64 1, !dbg !28
  %143 = lshr <2 x i32> %142, <i32 16, i32 16>, !dbg !28
  %144 = trunc <2 x i32> %143 to <2 x i16>, !dbg !28
  %145 = bitcast <2 x i16> %144 to <2 x half>, !dbg !28
  %146 = fpext <2 x half> %145 to <2 x float>, !dbg !31
  %147 = fmul float %111, 1.250000e-01, !dbg !41
  %148 = insertelement <2 x i32> %83, i32 %99, i64 1, !dbg !28
  %149 = lshr <2 x i32> %148, <i32 16, i32 16>, !dbg !28
  %150 = trunc <2 x i32> %149 to <2 x i16>, !dbg !28
  %151 = bitcast <2 x i16> %150 to <2 x half>, !dbg !28
  %152 = fpext <2 x half> %151 to <2 x float>, !dbg !31
  %153 = fmul float %112, 1.250000e-01, !dbg !41
  %154 = insertelement <2 x i32> %89, i32 %100, i64 1, !dbg !28
  %155 = lshr <2 x i32> %154, <i32 16, i32 16>, !dbg !28
  %156 = trunc <2 x i32> %155 to <2 x i16>, !dbg !28
  %157 = bitcast <2 x i16> %156 to <2 x half>, !dbg !28
  %158 = fpext <2 x half> %157 to <2 x float>, !dbg !31
  %159 = fadd float %128, %135, !dbg !42
  %160 = extractelement <2 x float> %140, i64 0, !dbg !42
  %161 = fadd float %160, %76, !dbg !42
  %162 = extractelement <2 x float> %140, i64 1, !dbg !42
  %163 = fmul float %162, 1.250000e-01, !dbg !42
  %164 = fadd float %161, %163, !dbg !42
  %165 = fadd float %130, %141, !dbg !42
  %166 = extractelement <2 x float> %146, i64 0, !dbg !42
  %167 = fadd float %166, %82, !dbg !42
  %168 = extractelement <2 x float> %146, i64 1, !dbg !42
  %169 = fmul float %168, 1.250000e-01, !dbg !42
  %170 = fadd float %167, %169, !dbg !42
  %171 = fadd float %132, %147, !dbg !42
  %172 = extractelement <2 x float> %152, i64 0, !dbg !42
  %173 = fadd float %172, %88, !dbg !42
  %174 = extractelement <2 x float> %152, i64 1, !dbg !42
  %175 = fmul float %174, 1.250000e-01, !dbg !42
  %176 = fadd float %173, %175, !dbg !42
  %177 = fadd float %134, %153, !dbg !42
  %178 = extractelement <2 x float> %158, i64 0, !dbg !42
  %179 = fadd float %178, %94, !dbg !42
  %180 = extractelement <2 x float> %158, i64 1, !dbg !42
  %181 = fmul float %180, 1.250000e-01, !dbg !42
  %182 = fadd float %179, %181, !dbg !42
  %183 = mul nuw nsw i32 %12, 33, !dbg !42
  %184 = add nuw nsw i32 %20, %183, !dbg !42
  %185 = zext nneg i32 %184 to i64, !dbg !42
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i64 %185, !dbg !42
  %187 = insertelement <1 x float> undef, float %159, i64 0, !dbg !42
  store <1 x float> %187, ptr addrspace(3) %186, align 4, !dbg !42
  %188 = add nuw nsw i32 %183, 33, !dbg !42
  %189 = add nuw nsw i32 %188, %20, !dbg !42
  %190 = zext nneg i32 %189 to i64, !dbg !42
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !42
  %192 = insertelement <1 x float> undef, float %164, i64 0, !dbg !42
  store <1 x float> %192, ptr addrspace(3) %191, align 4, !dbg !42
  %193 = add nuw nsw i32 %183, 66, !dbg !42
  %194 = add nuw nsw i32 %193, %20, !dbg !42
  %195 = zext nneg i32 %194 to i64, !dbg !42
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i64 %195, !dbg !42
  %197 = insertelement <1 x float> undef, float %165, i64 0, !dbg !42
  store <1 x float> %197, ptr addrspace(3) %196, align 4, !dbg !42
  %198 = add nuw nsw i32 %183, 99, !dbg !42
  %199 = add nuw nsw i32 %198, %20, !dbg !42
  %200 = zext nneg i32 %199 to i64, !dbg !42
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i64 %200, !dbg !42
  %202 = insertelement <1 x float> undef, float %170, i64 0, !dbg !42
  store <1 x float> %202, ptr addrspace(3) %201, align 4, !dbg !42
  %203 = add nuw nsw i32 %183, 132, !dbg !42
  %204 = add nuw nsw i32 %203, %20, !dbg !42
  %205 = zext nneg i32 %204 to i64, !dbg !42
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205, !dbg !42
  %207 = insertelement <1 x float> undef, float %171, i64 0, !dbg !42
  store <1 x float> %207, ptr addrspace(3) %206, align 4, !dbg !42
  %208 = add nuw nsw i32 %183, 165, !dbg !42
  %209 = add nuw nsw i32 %208, %20, !dbg !42
  %210 = zext nneg i32 %209 to i64, !dbg !42
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i64 %210, !dbg !42
  %212 = insertelement <1 x float> undef, float %176, i64 0, !dbg !42
  store <1 x float> %212, ptr addrspace(3) %211, align 4, !dbg !42
  %213 = add nuw nsw i32 %183, 198, !dbg !42
  %214 = add nuw nsw i32 %213, %20, !dbg !42
  %215 = zext nneg i32 %214 to i64, !dbg !42
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i64 %215, !dbg !42
  %217 = insertelement <1 x float> undef, float %177, i64 0, !dbg !42
  store <1 x float> %217, ptr addrspace(3) %216, align 4, !dbg !42
  %218 = add nuw nsw i32 %183, 231, !dbg !42
  %219 = add nuw nsw i32 %218, %20, !dbg !42
  %220 = zext nneg i32 %219 to i64, !dbg !42
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !42
  %222 = insertelement <1 x float> undef, float %182, i64 0, !dbg !42
  store <1 x float> %222, ptr addrspace(3) %221, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %223 = mul nuw nsw i32 %16, 33, !dbg !42
  %224 = add nuw nsw i32 %223, %22, !dbg !42
  %225 = zext nneg i32 %224 to i64, !dbg !42
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !42
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !42
  %228 = or i32 %22, 1, !dbg !42
  %229 = add nuw nsw i32 %223, %228, !dbg !42
  %230 = zext nneg i32 %229 to i64, !dbg !42
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i64 %230, !dbg !42
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !42
  %233 = or i32 %22, 2, !dbg !42
  %234 = add nuw nsw i32 %223, %233, !dbg !42
  %235 = zext nneg i32 %234 to i64, !dbg !42
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i64 %235, !dbg !42
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !42
  %238 = or i32 %22, 3, !dbg !42
  %239 = add nuw nsw i32 %223, %238, !dbg !42
  %240 = zext nneg i32 %239 to i64, !dbg !42
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i64 %240, !dbg !42
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !42
  %243 = mul nuw nsw i32 %17, 33, !dbg !42
  %244 = add nuw nsw i32 %243, %22, !dbg !42
  %245 = zext nneg i32 %244 to i64, !dbg !42
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i64 %245, !dbg !42
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !42
  %248 = add nuw nsw i32 %243, %228, !dbg !42
  %249 = zext nneg i32 %248 to i64, !dbg !42
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i64 %249, !dbg !42
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !42
  %252 = add nuw nsw i32 %243, %233, !dbg !42
  %253 = zext nneg i32 %252 to i64, !dbg !42
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !42
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !42
  %256 = add nuw nsw i32 %243, %238, !dbg !42
  %257 = zext nneg i32 %256 to i64, !dbg !42
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i64 %257, !dbg !42
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !42
  %260 = getelementptr half, ptr addrspace(1) %4, i64 %117, !dbg !43
  %261 = getelementptr half, ptr addrspace(1) %4, i64 %119, !dbg !43
  %262 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !39
  %263 = insertelement <2 x i32> %262, i32 %extelt.offset12, i64 1, !dbg !39
  %264 = trunc <2 x i32> %263 to <2 x i16>, !dbg !39
  %265 = bitcast <2 x i16> %264 to <2 x half>, !dbg !39
  %266 = fpext <2 x half> %265 to <2 x float>, !dbg !44
  %267 = insertelement <2 x float> poison, float %227, i64 0, !dbg !45
  %268 = insertelement <2 x float> %267, float %232, i64 1, !dbg !45
  %269 = fadd <2 x float> %268, %266, !dbg !45
  %270 = fptrunc <2 x float> %269 to <2 x half>, !dbg !46
  %271 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !39
  %272 = insertelement <2 x i32> %271, i32 %extelt.offset13, i64 1, !dbg !39
  %273 = trunc <2 x i32> %272 to <2 x i16>, !dbg !39
  %274 = bitcast <2 x i16> %273 to <2 x half>, !dbg !39
  %275 = fpext <2 x half> %274 to <2 x float>, !dbg !44
  %276 = insertelement <2 x float> poison, float %237, i64 0, !dbg !45
  %277 = insertelement <2 x float> %276, float %242, i64 1, !dbg !45
  %278 = fadd <2 x float> %277, %275, !dbg !45
  %279 = fptrunc <2 x float> %278 to <2 x half>, !dbg !46
  %280 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !39
  %281 = insertelement <2 x i32> %280, i32 %extelt.offset14, i64 1, !dbg !39
  %282 = trunc <2 x i32> %281 to <2 x i16>, !dbg !39
  %283 = bitcast <2 x i16> %282 to <2 x half>, !dbg !39
  %284 = fpext <2 x half> %283 to <2 x float>, !dbg !44
  %285 = insertelement <2 x float> poison, float %247, i64 0, !dbg !45
  %286 = insertelement <2 x float> %285, float %251, i64 1, !dbg !45
  %287 = fadd <2 x float> %286, %284, !dbg !45
  %288 = fptrunc <2 x float> %287 to <2 x half>, !dbg !46
  %289 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !39
  %290 = insertelement <2 x i32> %289, i32 %extelt.offset15, i64 1, !dbg !39
  %291 = trunc <2 x i32> %290 to <2 x i16>, !dbg !39
  %292 = bitcast <2 x i16> %291 to <2 x half>, !dbg !39
  %293 = fpext <2 x half> %292 to <2 x float>, !dbg !44
  %294 = insertelement <2 x float> poison, float %255, i64 0, !dbg !45
  %295 = insertelement <2 x float> %294, float %259, i64 1, !dbg !45
  %296 = fadd <2 x float> %295, %293, !dbg !45
  %297 = fptrunc <2 x float> %296 to <2 x half>, !dbg !46
  %298 = bitcast <2 x half> %270 to i32, !dbg !46
  %299 = bitcast <2 x half> %279 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %298, i32 %299, ptr addrspace(1) %260, i1 %49) #2, !dbg !46
  %300 = bitcast <2 x half> %288 to i32, !dbg !46
  %301 = bitcast <2 x half> %297 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %300, i32 %301, ptr addrspace(1) %261, i1 %50) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cuwudlitabc4tos2oztf6jaxh24gzbno753bi6gidux5mkpnwqqu.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/uw")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 40, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 54, scope: !5)
!25 = !DILocation(line: 33, column: 47, scope: !5)
!26 = !DILocation(line: 33, column: 30, scope: !5)
!27 = !DILocation(line: 33, column: 68, scope: !5)
!28 = !DILocation(line: 33, column: 60, scope: !5)
!29 = !DILocation(line: 34, column: 30, scope: !5)
!30 = !DILocation(line: 34, column: 35, scope: !5)
!31 = !DILocation(line: 33, column: 108, scope: !5)
!32 = !DILocation(line: 34, column: 75, scope: !5)
!33 = !DILocation(line: 35, column: 30, scope: !5)
!34 = !DILocation(line: 35, column: 60, scope: !5)
!35 = !DILocation(line: 35, column: 108, scope: !5)
!36 = !DILocation(line: 36, column: 41, scope: !5)
!37 = !DILocation(line: 36, column: 36, scope: !5)
!38 = !DILocation(line: 36, column: 30, scope: !5)
!39 = !DILocation(line: 36, column: 47, scope: !5)
!40 = !DILocation(line: 37, column: 18, scope: !5)
!41 = !DILocation(line: 39, column: 18, scope: !5)
!42 = !DILocation(line: 40, column: 18, scope: !5)
!43 = !DILocation(line: 42, column: 25, scope: !5)
!44 = !DILocation(line: 36, column: 95, scope: !5)
!45 = !DILocation(line: 41, column: 18, scope: !5)
!46 = !DILocation(line: 42, column: 48, scope: !5)
!47 = !DILocation(line: 42, column: 4, scope: !5)
