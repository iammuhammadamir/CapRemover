; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 6, !dbg !10
  %11 = and i32 %10, 3, !dbg !10
  %12 = or i32 %11, 4, !dbg !10
  %13 = or i32 %11, 8, !dbg !10
  %14 = or i32 %11, 12, !dbg !10
  %15 = shl i32 %9, 3, !dbg !10
  %16 = and i32 %15, 8, !dbg !10
  %17 = shl i32 %9, 2, !dbg !11
  %18 = and i32 %17, 252, !dbg !11
  %19 = lshr i32 %9, 1, !dbg !11
  %20 = and i32 %19, 127, !dbg !11
  %21 = or i32 %20, 128, !dbg !11
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !12
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !13
  %24 = add i32 %23, 1, !dbg !14
  %25 = shl i32 %22, 4, !dbg !15
  %26 = mul i32 %25, %24, !dbg !16
  %27 = or i32 %26, %11, !dbg !17
  %28 = or i32 %26, %12, !dbg !17
  %29 = or i32 %26, %13, !dbg !17
  %30 = or i32 %26, %14, !dbg !17
  %31 = or i32 %26, %16, !dbg !17
  %32 = or i32 %31, 2, !dbg !17
  %33 = or i32 %31, 4, !dbg !17
  %34 = or i32 %31, 6, !dbg !17
  %35 = icmp slt i32 %27, 7040, !dbg !18
  %36 = icmp slt i32 %28, 7040, !dbg !18
  %37 = icmp slt i32 %29, 7040, !dbg !18
  %38 = icmp slt i32 %30, 7040, !dbg !18
  %39 = icmp slt i32 %31, 7040, !dbg !18
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !19
  %41 = shl i32 %40, 8, !dbg !20
  %42 = or i32 %41, %18, !dbg !21
  %43 = icmp slt i32 %42, 2700, !dbg !22
  %.frozen = freeze i32 %31
  %44 = sdiv i32 %.frozen, 320, !dbg !23
  %45 = mul i32 %44, 320
  %.decomposed = sub i32 %.frozen, %45
  %46 = srem i32 %32, 320, !dbg !24
  %47 = srem i32 %33, 320, !dbg !24
  %48 = srem i32 %34, 320, !dbg !24
  %49 = mul i32 %27, 2700, !dbg !25
  %50 = mul i32 %28, 2700, !dbg !25
  %51 = mul i32 %29, 2700, !dbg !25
  %52 = mul i32 %30, 2700, !dbg !25
  %53 = add i32 %49, %42, !dbg !26
  %54 = add i32 %50, %42, !dbg !26
  %55 = add i32 %51, %42, !dbg !26
  %56 = add i32 %52, %42, !dbg !26
  %57 = sext i32 %53 to i64, !dbg !27
  %58 = getelementptr half, ptr addrspace(1) %0, i64 %57, !dbg !27
  %59 = sext i32 %54 to i64, !dbg !27
  %60 = getelementptr half, ptr addrspace(1) %0, i64 %59, !dbg !27
  %61 = sext i32 %55 to i64, !dbg !27
  %62 = getelementptr half, ptr addrspace(1) %0, i64 %61, !dbg !27
  %63 = sext i32 %56 to i64, !dbg !27
  %64 = getelementptr half, ptr addrspace(1) %0, i64 %63, !dbg !27
  %65 = and i1 %43, %35, !dbg !28
  %66 = and i1 %43, %36, !dbg !28
  %67 = and i1 %43, %37, !dbg !28
  %68 = and i1 %43, %38, !dbg !28
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %65) #5, !dbg !29
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !29
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !29
  %72 = trunc i32 %70 to i16, !dbg !29
  %extelt.offset = lshr i32 %70, 16, !dbg !29
  %73 = trunc i32 %extelt.offset to i16, !dbg !29
  %74 = trunc i32 %71 to i16, !dbg !29
  %extelt.offset1 = lshr i32 %71, 16, !dbg !29
  %75 = trunc i32 %extelt.offset1 to i16, !dbg !29
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %66) #5, !dbg !29
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !29
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !29
  %79 = trunc i32 %77 to i16, !dbg !29
  %extelt.offset2 = lshr i32 %77, 16, !dbg !29
  %80 = trunc i32 %extelt.offset2 to i16, !dbg !29
  %81 = trunc i32 %78 to i16, !dbg !29
  %extelt.offset3 = lshr i32 %78, 16, !dbg !29
  %82 = trunc i32 %extelt.offset3 to i16, !dbg !29
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %67) #5, !dbg !29
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !29
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !29
  %86 = trunc i32 %84 to i16, !dbg !29
  %extelt.offset4 = lshr i32 %84, 16, !dbg !29
  %87 = trunc i32 %extelt.offset4 to i16, !dbg !29
  %88 = trunc i32 %85 to i16, !dbg !29
  %extelt.offset5 = lshr i32 %85, 16, !dbg !29
  %89 = trunc i32 %extelt.offset5 to i16, !dbg !29
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %68) #5, !dbg !29
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !29
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !29
  %93 = trunc i32 %91 to i16, !dbg !29
  %extelt.offset6 = lshr i32 %91, 16, !dbg !29
  %94 = trunc i32 %extelt.offset6 to i16, !dbg !29
  %95 = trunc i32 %92 to i16, !dbg !29
  %extelt.offset7 = lshr i32 %92, 16, !dbg !29
  %96 = trunc i32 %extelt.offset7 to i16, !dbg !29
  %97 = mul nuw nsw i32 %18, 24, !dbg !30
  %98 = or i32 %97, %11, !dbg !30
  %99 = zext nneg i32 %98 to i64, !dbg !30
  %100 = getelementptr half, ptr addrspace(3) @global_smem, i64 %99, !dbg !30
  store i16 %72, ptr addrspace(3) %100, align 2, !dbg !30
  %101 = or i32 %97, 24, !dbg !30
  %102 = or i32 %101, %11, !dbg !30
  %103 = zext nneg i32 %102 to i64, !dbg !30
  %104 = getelementptr half, ptr addrspace(3) @global_smem, i64 %103, !dbg !30
  store i16 %73, ptr addrspace(3) %104, align 2, !dbg !30
  %105 = add nuw nsw i32 %97, 48, !dbg !30
  %106 = or i32 %105, %11, !dbg !30
  %107 = zext nneg i32 %106 to i64, !dbg !30
  %108 = getelementptr half, ptr addrspace(3) @global_smem, i64 %107, !dbg !30
  store i16 %74, ptr addrspace(3) %108, align 2, !dbg !30
  %109 = add nuw nsw i32 %97, 72, !dbg !30
  %110 = or i32 %109, %11, !dbg !30
  %111 = zext nneg i32 %110 to i64, !dbg !30
  %112 = getelementptr half, ptr addrspace(3) @global_smem, i64 %111, !dbg !30
  store i16 %75, ptr addrspace(3) %112, align 2, !dbg !30
  %113 = or i32 %97, %12, !dbg !30
  %114 = zext nneg i32 %113 to i64, !dbg !30
  %115 = getelementptr half, ptr addrspace(3) @global_smem, i64 %114, !dbg !30
  store i16 %79, ptr addrspace(3) %115, align 2, !dbg !30
  %116 = or i32 %101, %12, !dbg !30
  %117 = zext nneg i32 %116 to i64, !dbg !30
  %118 = getelementptr half, ptr addrspace(3) @global_smem, i64 %117, !dbg !30
  store i16 %80, ptr addrspace(3) %118, align 2, !dbg !30
  %119 = or i32 %105, %12, !dbg !30
  %120 = zext nneg i32 %119 to i64, !dbg !30
  %121 = getelementptr half, ptr addrspace(3) @global_smem, i64 %120, !dbg !30
  store i16 %81, ptr addrspace(3) %121, align 2, !dbg !30
  %122 = or i32 %109, %12, !dbg !30
  %123 = zext nneg i32 %122 to i64, !dbg !30
  %124 = getelementptr half, ptr addrspace(3) @global_smem, i64 %123, !dbg !30
  store i16 %82, ptr addrspace(3) %124, align 2, !dbg !30
  %125 = or i32 %97, %13, !dbg !30
  %126 = zext nneg i32 %125 to i64, !dbg !30
  %127 = getelementptr half, ptr addrspace(3) @global_smem, i64 %126, !dbg !30
  store i16 %86, ptr addrspace(3) %127, align 2, !dbg !30
  %128 = add nuw nsw i32 %101, %13, !dbg !30
  %129 = zext nneg i32 %128 to i64, !dbg !30
  %130 = getelementptr half, ptr addrspace(3) @global_smem, i64 %129, !dbg !30
  store i16 %87, ptr addrspace(3) %130, align 2, !dbg !30
  %131 = or i32 %105, %13, !dbg !30
  %132 = zext nneg i32 %131 to i64, !dbg !30
  %133 = getelementptr half, ptr addrspace(3) @global_smem, i64 %132, !dbg !30
  store i16 %88, ptr addrspace(3) %133, align 2, !dbg !30
  %134 = add nuw nsw i32 %109, %13, !dbg !30
  %135 = zext nneg i32 %134 to i64, !dbg !30
  %136 = getelementptr half, ptr addrspace(3) @global_smem, i64 %135, !dbg !30
  store i16 %89, ptr addrspace(3) %136, align 2, !dbg !30
  %137 = or i32 %97, %14, !dbg !30
  %138 = zext nneg i32 %137 to i64, !dbg !30
  %139 = getelementptr half, ptr addrspace(3) @global_smem, i64 %138, !dbg !30
  store i16 %93, ptr addrspace(3) %139, align 2, !dbg !30
  %140 = add nuw nsw i32 %101, %14, !dbg !30
  %141 = zext nneg i32 %140 to i64, !dbg !30
  %142 = getelementptr half, ptr addrspace(3) @global_smem, i64 %141, !dbg !30
  store i16 %94, ptr addrspace(3) %142, align 2, !dbg !30
  %143 = or i32 %105, %14, !dbg !30
  %144 = zext nneg i32 %143 to i64, !dbg !30
  %145 = getelementptr half, ptr addrspace(3) @global_smem, i64 %144, !dbg !30
  store i16 %95, ptr addrspace(3) %145, align 2, !dbg !30
  %146 = add nuw nsw i32 %109, %14, !dbg !30
  %147 = zext nneg i32 %146 to i64, !dbg !30
  %148 = getelementptr half, ptr addrspace(3) @global_smem, i64 %147, !dbg !30
  store i16 %96, ptr addrspace(3) %148, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %149 = mul nuw nsw i32 %20, 24, !dbg !30
  %150 = add nuw nsw i32 %149, %16, !dbg !30
  %151 = zext nneg i32 %150 to i64, !dbg !30
  %152 = getelementptr half, ptr addrspace(3) @global_smem, i64 %151, !dbg !30
  %153 = load <8 x half>, ptr addrspace(3) %152, align 16, !dbg !30
  %154 = mul nuw nsw i32 %21, 24, !dbg !30
  %155 = add nuw nsw i32 %154, %16, !dbg !30
  %156 = zext nneg i32 %155 to i64, !dbg !30
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i64 %156, !dbg !30
  %158 = load <8 x half>, ptr addrspace(3) %157, align 16, !dbg !30
  %159 = shl nsw i32 %44, 5, !dbg !31
  %.lhs.trunc = trunc i32 %.decomposed to i16, !dbg !32
  %160 = sdiv i16 %.lhs.trunc, 10, !dbg !32
  %.sext = sext i16 %160 to i32, !dbg !32
  %.lhs.trunc37 = trunc i32 %46 to i16, !dbg !32
  %161 = sdiv i16 %.lhs.trunc37, 10, !dbg !32
  %.sext38 = sext i16 %161 to i32, !dbg !32
  %.lhs.trunc39 = trunc i32 %47 to i16, !dbg !32
  %162 = sdiv i16 %.lhs.trunc39, 10, !dbg !32
  %.sext40 = sext i16 %162 to i32, !dbg !32
  %.lhs.trunc41 = trunc i32 %48 to i16, !dbg !32
  %163 = sdiv i16 %.lhs.trunc41, 10, !dbg !32
  %.sext42 = sext i16 %163 to i32, !dbg !32
  %164 = add nsw i32 %159, %.sext, !dbg !33
  %165 = add nsw i32 %159, %.sext38, !dbg !33
  %166 = add nsw i32 %159, %.sext40, !dbg !33
  %167 = add nsw i32 %159, %.sext42, !dbg !33
  %168 = sext i32 %164 to i64, !dbg !34
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !34
  %170 = sext i32 %165 to i64, !dbg !34
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !34
  %172 = sext i32 %166 to i64, !dbg !34
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !34
  %174 = sext i32 %167 to i64, !dbg !34
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !34
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %39) #5, !dbg !35
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %39) #5, !dbg !35
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %39) #5, !dbg !35
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %39) #5, !dbg !35
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %39) #5, !dbg !35
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %39) #5, !dbg !35
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %39) #5, !dbg !35
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %39) #5, !dbg !35
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !36
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !36
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !36
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %39) #5, !dbg !37
  %189 = bitcast i32 %188 to float, !dbg !37
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %39) #5, !dbg !37
  %191 = bitcast i32 %190 to float, !dbg !37
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %39) #5, !dbg !37
  %193 = bitcast i32 %192 to float, !dbg !37
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %39) #5, !dbg !37
  %195 = bitcast i32 %194 to float, !dbg !37
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %39) #5, !dbg !37
  %197 = bitcast i32 %196 to float, !dbg !37
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %39) #5, !dbg !37
  %199 = bitcast i32 %198 to float, !dbg !37
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %39) #5, !dbg !37
  %201 = bitcast i32 %200 to float, !dbg !37
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %39) #5, !dbg !37
  %203 = bitcast i32 %202 to float, !dbg !37
  %204 = sext i32 %.decomposed to i64, !dbg !38
  %205 = getelementptr half, ptr addrspace(1) %3, i64 %204, !dbg !38
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %205, i1 %39) #5, !dbg !39
  %207 = getelementptr half, ptr addrspace(1) %4, i64 %204, !dbg !40
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 %39) #5, !dbg !41
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float 2.700000e+04) #5, !dbg !42
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float 2.700000e+04) #5, !dbg !42
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float 2.700000e+04) #5, !dbg !42
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 2.700000e+04) #5, !dbg !42
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float 2.700000e+04) #5, !dbg !42
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float 2.700000e+04) #5, !dbg !42
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float 2.700000e+04) #5, !dbg !42
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 2.700000e+04) #5, !dbg !42
  %217 = fadd float %209, 0x3EE4F8B580000000, !dbg !43
  %218 = fadd float %210, 0x3EE4F8B580000000, !dbg !43
  %219 = fadd float %211, 0x3EE4F8B580000000, !dbg !43
  %220 = fadd float %212, 0x3EE4F8B580000000, !dbg !43
  %221 = fadd float %213, 0x3EE4F8B580000000, !dbg !43
  %222 = fadd float %214, 0x3EE4F8B580000000, !dbg !43
  %223 = fadd float %215, 0x3EE4F8B580000000, !dbg !43
  %224 = fadd float %216, 0x3EE4F8B580000000, !dbg !43
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %225, 0, !dbg !44
  br i1 %.not.i, label %228, label %226, !dbg !44

226:                                              ; preds = %8
  %227 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %217), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

228:                                              ; preds = %8
  %229 = tail call float @llvm.nvvm.rsqrt.approx.f(float %217), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %226, %228
  %.0.i = phi float [ %227, %226 ], [ %229, %228 ], !dbg !44
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i16 = icmp eq i32 %230, 0, !dbg !44
  br i1 %.not.i16, label %233, label %231, !dbg !44

231:                                              ; preds = %__nv_rsqrtf.exit
  %232 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %218), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

233:                                              ; preds = %__nv_rsqrtf.exit
  %234 = tail call float @llvm.nvvm.rsqrt.approx.f(float %218), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

__nv_rsqrtf.exit18:                               ; preds = %231, %233
  %.0.i17 = phi float [ %232, %231 ], [ %234, %233 ], !dbg !44
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i19 = icmp eq i32 %235, 0, !dbg !44
  br i1 %.not.i19, label %238, label %236, !dbg !44

236:                                              ; preds = %__nv_rsqrtf.exit18
  %237 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %219), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

238:                                              ; preds = %__nv_rsqrtf.exit18
  %239 = tail call float @llvm.nvvm.rsqrt.approx.f(float %219), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

__nv_rsqrtf.exit21:                               ; preds = %236, %238
  %.0.i20 = phi float [ %237, %236 ], [ %239, %238 ], !dbg !44
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i22 = icmp eq i32 %240, 0, !dbg !44
  br i1 %.not.i22, label %243, label %241, !dbg !44

241:                                              ; preds = %__nv_rsqrtf.exit21
  %242 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %220), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

243:                                              ; preds = %__nv_rsqrtf.exit21
  %244 = tail call float @llvm.nvvm.rsqrt.approx.f(float %220), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

__nv_rsqrtf.exit24:                               ; preds = %241, %243
  %.0.i23 = phi float [ %242, %241 ], [ %244, %243 ], !dbg !44
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i25 = icmp eq i32 %245, 0, !dbg !44
  br i1 %.not.i25, label %248, label %246, !dbg !44

246:                                              ; preds = %__nv_rsqrtf.exit24
  %247 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

248:                                              ; preds = %__nv_rsqrtf.exit24
  %249 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

__nv_rsqrtf.exit27:                               ; preds = %246, %248
  %.0.i26 = phi float [ %247, %246 ], [ %249, %248 ], !dbg !44
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i28 = icmp eq i32 %250, 0, !dbg !44
  br i1 %.not.i28, label %253, label %251, !dbg !44

251:                                              ; preds = %__nv_rsqrtf.exit27
  %252 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %222), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

253:                                              ; preds = %__nv_rsqrtf.exit27
  %254 = tail call float @llvm.nvvm.rsqrt.approx.f(float %222), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

__nv_rsqrtf.exit30:                               ; preds = %251, %253
  %.0.i29 = phi float [ %252, %251 ], [ %254, %253 ], !dbg !44
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i31 = icmp eq i32 %255, 0, !dbg !44
  br i1 %.not.i31, label %258, label %256, !dbg !44

256:                                              ; preds = %__nv_rsqrtf.exit30
  %257 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %223), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

258:                                              ; preds = %__nv_rsqrtf.exit30
  %259 = tail call float @llvm.nvvm.rsqrt.approx.f(float %223), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

__nv_rsqrtf.exit33:                               ; preds = %256, %258
  %.0.i32 = phi float [ %257, %256 ], [ %259, %258 ], !dbg !44
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i34 = icmp eq i32 %260, 0, !dbg !44
  br i1 %.not.i34, label %263, label %261, !dbg !44

261:                                              ; preds = %__nv_rsqrtf.exit33
  %262 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %224), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

263:                                              ; preds = %__nv_rsqrtf.exit33
  %264 = tail call float @llvm.nvvm.rsqrt.approx.f(float %224), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

__nv_rsqrtf.exit36:                               ; preds = %261, %263
  %.0.i35 = phi float [ %262, %261 ], [ %264, %263 ], !dbg !44
  %265 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !35
  %266 = insertelement <2 x i32> %265, i32 %183, i64 1, !dbg !35
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !35
  %268 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !35
  %269 = insertelement <2 x i32> %268, i32 %181, i64 1, !dbg !35
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !35
  %271 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !35
  %272 = insertelement <2 x i32> %271, i32 %179, i64 1, !dbg !35
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !35
  %274 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !35
  %275 = insertelement <2 x i32> %274, i32 %177, i64 1, !dbg !35
  %276 = bitcast <2 x i32> %275 to <2 x float>, !dbg !35
  %277 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !41
  %extelt.offset15 = lshr i32 %277, 16, !dbg !41
  %278 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !41
  %extelt.offset14 = lshr i32 %278, 16, !dbg !41
  %279 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !41
  %extelt.offset13 = lshr i32 %279, 16, !dbg !41
  %280 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !41
  %extelt.offset12 = lshr i32 %280, 16, !dbg !41
  %281 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !39
  %extelt.offset11 = lshr i32 %281, 16, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !39
  %extelt.offset10 = lshr i32 %282, 16, !dbg !39
  %283 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !39
  %extelt.offset9 = lshr i32 %283, 16, !dbg !39
  %284 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !39
  %extelt.offset8 = lshr i32 %284, 16, !dbg !39
  %285 = or i32 %41, %21, !dbg !21
  %286 = icmp slt i32 %285, 2700, !dbg !22
  %287 = and i1 %286, %39, !dbg !28
  %288 = or i32 %41, %20, !dbg !21
  %289 = icmp slt i32 %288, 2700, !dbg !22
  %290 = and i1 %289, %39, !dbg !28
  %291 = mul i32 %288, 320, !dbg !45
  %292 = mul i32 %285, 320, !dbg !45
  %293 = add i32 %.decomposed, %291, !dbg !46
  %294 = add i32 %.decomposed, %292, !dbg !46
  %295 = mul i32 %44, 864000, !dbg !47
  %296 = add i32 %293, %295, !dbg !48
  %297 = add i32 %294, %295, !dbg !48
  %298 = sext i32 %296 to i64, !dbg !49
  %299 = getelementptr half, ptr addrspace(1) %5, i64 %298, !dbg !49
  %300 = sext i32 %297 to i64, !dbg !49
  %301 = getelementptr half, ptr addrspace(1) %5, i64 %300, !dbg !49
  %302 = shufflevector <8 x half> %153, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !50
  %303 = fpext <2 x half> %302 to <2 x float>, !dbg !50
  %304 = fsub <2 x float> %303, %267, !dbg !51
  %305 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !41
  %306 = insertelement <2 x i32> %305, i32 %extelt.offset15, i64 1, !dbg !41
  %307 = trunc <2 x i32> %306 to <2 x i16>, !dbg !41
  %308 = bitcast <2 x i16> %307 to <2 x half>, !dbg !41
  %309 = fpext <2 x half> %308 to <2 x float>, !dbg !52
  %310 = insertelement <2 x i32> poison, i32 %281, i64 0, !dbg !39
  %311 = insertelement <2 x i32> %310, i32 %extelt.offset11, i64 1, !dbg !39
  %312 = trunc <2 x i32> %311 to <2 x i16>, !dbg !39
  %313 = bitcast <2 x i16> %312 to <2 x half>, !dbg !39
  %314 = fpext <2 x half> %313 to <2 x float>, !dbg !53
  %315 = insertelement <2 x float> poison, float %.0.i32, i64 0, !dbg !54
  %316 = insertelement <2 x float> %315, float %.0.i35, i64 1, !dbg !54
  %317 = fmul <2 x float> %304, %316, !dbg !54
  %318 = fmul <2 x float> %317, %314, !dbg !55
  %319 = fadd <2 x float> %318, %309, !dbg !56
  %320 = extractelement <2 x float> %319, i64 0, !dbg !57
  %321 = fsub float 0.000000e+00, %320, !dbg !57
  %322 = extractelement <2 x float> %319, i64 1, !dbg !57
  %323 = fsub float 0.000000e+00, %322, !dbg !57
  %324 = fmul float %321, 0x3FF7154760000000, !dbg !61
  %325 = fmul float %323, 0x3FF7154760000000, !dbg !61
  %326 = shufflevector <8 x half> %153, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !50
  %327 = fpext <2 x half> %326 to <2 x float>, !dbg !50
  %328 = fsub <2 x float> %327, %270, !dbg !51
  %329 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !41
  %330 = insertelement <2 x i32> %329, i32 %extelt.offset14, i64 1, !dbg !41
  %331 = trunc <2 x i32> %330 to <2 x i16>, !dbg !41
  %332 = bitcast <2 x i16> %331 to <2 x half>, !dbg !41
  %333 = fpext <2 x half> %332 to <2 x float>, !dbg !52
  %334 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !39
  %335 = insertelement <2 x i32> %334, i32 %extelt.offset10, i64 1, !dbg !39
  %336 = trunc <2 x i32> %335 to <2 x i16>, !dbg !39
  %337 = bitcast <2 x i16> %336 to <2 x half>, !dbg !39
  %338 = fpext <2 x half> %337 to <2 x float>, !dbg !53
  %339 = insertelement <2 x float> poison, float %.0.i26, i64 0, !dbg !54
  %340 = insertelement <2 x float> %339, float %.0.i29, i64 1, !dbg !54
  %341 = fmul <2 x float> %328, %340, !dbg !54
  %342 = fmul <2 x float> %341, %338, !dbg !55
  %343 = fadd <2 x float> %342, %333, !dbg !56
  %344 = extractelement <2 x float> %343, i64 0, !dbg !57
  %345 = fsub float 0.000000e+00, %344, !dbg !57
  %346 = extractelement <2 x float> %343, i64 1, !dbg !57
  %347 = fsub float 0.000000e+00, %346, !dbg !57
  %348 = fmul float %345, 0x3FF7154760000000, !dbg !61
  %349 = fmul float %347, 0x3FF7154760000000, !dbg !61
  %350 = shufflevector <8 x half> %153, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !50
  %351 = fpext <2 x half> %350 to <2 x float>, !dbg !50
  %352 = fsub <2 x float> %351, %273, !dbg !51
  %353 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !41
  %354 = insertelement <2 x i32> %353, i32 %extelt.offset13, i64 1, !dbg !41
  %355 = trunc <2 x i32> %354 to <2 x i16>, !dbg !41
  %356 = bitcast <2 x i16> %355 to <2 x half>, !dbg !41
  %357 = fpext <2 x half> %356 to <2 x float>, !dbg !52
  %358 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !39
  %359 = insertelement <2 x i32> %358, i32 %extelt.offset9, i64 1, !dbg !39
  %360 = trunc <2 x i32> %359 to <2 x i16>, !dbg !39
  %361 = bitcast <2 x i16> %360 to <2 x half>, !dbg !39
  %362 = fpext <2 x half> %361 to <2 x float>, !dbg !53
  %363 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !54
  %364 = insertelement <2 x float> %363, float %.0.i23, i64 1, !dbg !54
  %365 = fmul <2 x float> %352, %364, !dbg !54
  %366 = fmul <2 x float> %365, %362, !dbg !55
  %367 = fadd <2 x float> %366, %357, !dbg !56
  %368 = extractelement <2 x float> %367, i64 0, !dbg !57
  %369 = fsub float 0.000000e+00, %368, !dbg !57
  %370 = extractelement <2 x float> %367, i64 1, !dbg !57
  %371 = fsub float 0.000000e+00, %370, !dbg !57
  %372 = fmul float %369, 0x3FF7154760000000, !dbg !61
  %373 = fmul float %371, 0x3FF7154760000000, !dbg !61
  %374 = shufflevector <8 x half> %153, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !50
  %375 = fpext <2 x half> %374 to <2 x float>, !dbg !50
  %376 = fsub <2 x float> %375, %276, !dbg !51
  %377 = insertelement <2 x i32> poison, i32 %280, i64 0, !dbg !41
  %378 = insertelement <2 x i32> %377, i32 %extelt.offset12, i64 1, !dbg !41
  %379 = trunc <2 x i32> %378 to <2 x i16>, !dbg !41
  %380 = bitcast <2 x i16> %379 to <2 x half>, !dbg !41
  %381 = fpext <2 x half> %380 to <2 x float>, !dbg !52
  %382 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !39
  %383 = insertelement <2 x i32> %382, i32 %extelt.offset8, i64 1, !dbg !39
  %384 = trunc <2 x i32> %383 to <2 x i16>, !dbg !39
  %385 = bitcast <2 x i16> %384 to <2 x half>, !dbg !39
  %386 = fpext <2 x half> %385 to <2 x float>, !dbg !53
  %387 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !54
  %388 = insertelement <2 x float> %387, float %.0.i17, i64 1, !dbg !54
  %389 = fmul <2 x float> %376, %388, !dbg !54
  %390 = fmul <2 x float> %389, %386, !dbg !55
  %391 = fadd <2 x float> %390, %381, !dbg !56
  %392 = extractelement <2 x float> %391, i64 0, !dbg !57
  %393 = fsub float 0.000000e+00, %392, !dbg !57
  %394 = extractelement <2 x float> %391, i64 1, !dbg !57
  %395 = fsub float 0.000000e+00, %394, !dbg !57
  %396 = fmul float %393, 0x3FF7154760000000, !dbg !61
  %397 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %396) #5, !dbg !61
  %398 = fmul float %395, 0x3FF7154760000000, !dbg !61
  %399 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %398) #5, !dbg !61
  %400 = fadd float %397, 1.000000e+00, !dbg !62
  %401 = fadd float %399, 1.000000e+00, !dbg !62
  %402 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %372) #5, !dbg !61
  %403 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %373) #5, !dbg !61
  %404 = fadd float %402, 1.000000e+00, !dbg !62
  %405 = fadd float %403, 1.000000e+00, !dbg !62
  %406 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %348) #5, !dbg !61
  %407 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %349) #5, !dbg !61
  %408 = fadd float %406, 1.000000e+00, !dbg !62
  %409 = fadd float %407, 1.000000e+00, !dbg !62
  %410 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %324) #5, !dbg !61
  %411 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %325) #5, !dbg !61
  %412 = fadd float %410, 1.000000e+00, !dbg !62
  %413 = fadd float %411, 1.000000e+00, !dbg !62
  %414 = shufflevector <8 x half> %158, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !50
  %415 = fpext <2 x half> %414 to <2 x float>, !dbg !50
  %416 = fsub <2 x float> %415, %267, !dbg !51
  %417 = fmul <2 x float> %416, %316, !dbg !54
  %418 = fmul <2 x float> %417, %314, !dbg !55
  %419 = fadd <2 x float> %418, %309, !dbg !56
  %420 = extractelement <2 x float> %419, i64 0, !dbg !57
  %421 = fsub float 0.000000e+00, %420, !dbg !57
  %422 = extractelement <2 x float> %419, i64 1, !dbg !57
  %423 = fsub float 0.000000e+00, %422, !dbg !57
  %424 = fmul float %421, 0x3FF7154760000000, !dbg !61
  %425 = fmul float %423, 0x3FF7154760000000, !dbg !61
  %426 = shufflevector <8 x half> %158, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !50
  %427 = fpext <2 x half> %426 to <2 x float>, !dbg !50
  %428 = fsub <2 x float> %427, %270, !dbg !51
  %429 = fmul <2 x float> %428, %340, !dbg !54
  %430 = fmul <2 x float> %429, %338, !dbg !55
  %431 = fadd <2 x float> %430, %333, !dbg !56
  %432 = extractelement <2 x float> %431, i64 0, !dbg !57
  %433 = fsub float 0.000000e+00, %432, !dbg !57
  %434 = extractelement <2 x float> %431, i64 1, !dbg !57
  %435 = fsub float 0.000000e+00, %434, !dbg !57
  %436 = fmul float %433, 0x3FF7154760000000, !dbg !61
  %437 = fmul float %435, 0x3FF7154760000000, !dbg !61
  %438 = shufflevector <8 x half> %158, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !50
  %439 = fpext <2 x half> %438 to <2 x float>, !dbg !50
  %440 = fsub <2 x float> %439, %273, !dbg !51
  %441 = fmul <2 x float> %440, %364, !dbg !54
  %442 = fmul <2 x float> %441, %362, !dbg !55
  %443 = fadd <2 x float> %442, %357, !dbg !56
  %444 = extractelement <2 x float> %443, i64 0, !dbg !57
  %445 = fsub float 0.000000e+00, %444, !dbg !57
  %446 = extractelement <2 x float> %443, i64 1, !dbg !57
  %447 = fsub float 0.000000e+00, %446, !dbg !57
  %448 = fmul float %445, 0x3FF7154760000000, !dbg !61
  %449 = fmul float %447, 0x3FF7154760000000, !dbg !61
  %450 = shufflevector <8 x half> %158, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !50
  %451 = fpext <2 x half> %450 to <2 x float>, !dbg !50
  %452 = fsub <2 x float> %451, %276, !dbg !51
  %453 = fmul <2 x float> %452, %388, !dbg !54
  %454 = fmul <2 x float> %453, %386, !dbg !55
  %455 = fadd <2 x float> %454, %381, !dbg !56
  %456 = extractelement <2 x float> %455, i64 0, !dbg !57
  %457 = fsub float 0.000000e+00, %456, !dbg !57
  %458 = extractelement <2 x float> %455, i64 1, !dbg !57
  %459 = fsub float 0.000000e+00, %458, !dbg !57
  %460 = fmul float %457, 0x3FF7154760000000, !dbg !61
  %461 = fmul float %459, 0x3FF7154760000000, !dbg !61
  %462 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %460) #5, !dbg !61
  %463 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %461) #5, !dbg !61
  %464 = fadd float %462, 1.000000e+00, !dbg !62
  %465 = fadd float %463, 1.000000e+00, !dbg !62
  %466 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %448) #5, !dbg !61
  %467 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %449) #5, !dbg !61
  %468 = fadd float %466, 1.000000e+00, !dbg !62
  %469 = fadd float %467, 1.000000e+00, !dbg !62
  %470 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %436) #5, !dbg !61
  %471 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %437) #5, !dbg !61
  %472 = fadd float %470, 1.000000e+00, !dbg !62
  %473 = fadd float %471, 1.000000e+00, !dbg !62
  %474 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %424) #5, !dbg !61
  %475 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %425) #5, !dbg !61
  %476 = fadd float %474, 1.000000e+00, !dbg !62
  %477 = fadd float %475, 1.000000e+00, !dbg !62
  %478 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %400) #5, !dbg !63
  %479 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %401) #5, !dbg !63
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %404) #5, !dbg !63
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %405) #5, !dbg !63
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %408) #5, !dbg !63
  %483 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %409) #5, !dbg !63
  %484 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %412) #5, !dbg !63
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %413) #5, !dbg !63
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %464) #5, !dbg !63
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %465) #5, !dbg !63
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %468) #5, !dbg !63
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %469) #5, !dbg !63
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %472) #5, !dbg !63
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %473) #5, !dbg !63
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %476) #5, !dbg !63
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %477) #5, !dbg !63
  %494 = insertelement <2 x float> poison, float %478, i64 0, !dbg !64
  %495 = insertelement <2 x float> %494, float %479, i64 1, !dbg !64
  %496 = fmul <2 x float> %391, %495, !dbg !64
  %497 = insertelement <2 x float> poison, float %480, i64 0, !dbg !64
  %498 = insertelement <2 x float> %497, float %481, i64 1, !dbg !64
  %499 = fmul <2 x float> %367, %498, !dbg !64
  %500 = insertelement <2 x float> poison, float %482, i64 0, !dbg !64
  %501 = insertelement <2 x float> %500, float %483, i64 1, !dbg !64
  %502 = fmul <2 x float> %343, %501, !dbg !64
  %503 = insertelement <2 x float> poison, float %484, i64 0, !dbg !64
  %504 = insertelement <2 x float> %503, float %485, i64 1, !dbg !64
  %505 = fmul <2 x float> %319, %504, !dbg !64
  %506 = insertelement <2 x float> poison, float %486, i64 0, !dbg !64
  %507 = insertelement <2 x float> %506, float %487, i64 1, !dbg !64
  %508 = fmul <2 x float> %455, %507, !dbg !64
  %509 = insertelement <2 x float> poison, float %488, i64 0, !dbg !64
  %510 = insertelement <2 x float> %509, float %489, i64 1, !dbg !64
  %511 = fmul <2 x float> %443, %510, !dbg !64
  %512 = insertelement <2 x float> poison, float %490, i64 0, !dbg !64
  %513 = insertelement <2 x float> %512, float %491, i64 1, !dbg !64
  %514 = fmul <2 x float> %431, %513, !dbg !64
  %515 = insertelement <2 x float> poison, float %492, i64 0, !dbg !64
  %516 = insertelement <2 x float> %515, float %493, i64 1, !dbg !64
  %517 = fmul <2 x float> %419, %516, !dbg !64
  %518 = fptrunc <2 x float> %496 to <2 x half>, !dbg !30
  %519 = fptrunc <2 x float> %499 to <2 x half>, !dbg !30
  %520 = fptrunc <2 x float> %502 to <2 x half>, !dbg !30
  %521 = fptrunc <2 x float> %505 to <2 x half>, !dbg !30
  %522 = fptrunc <2 x float> %508 to <2 x half>, !dbg !30
  %523 = fptrunc <2 x float> %511 to <2 x half>, !dbg !30
  %524 = fptrunc <2 x float> %514 to <2 x half>, !dbg !30
  %525 = fptrunc <2 x float> %517 to <2 x half>, !dbg !30
  %526 = bitcast <2 x half> %518 to i32, !dbg !30
  %527 = bitcast <2 x half> %519 to i32, !dbg !30
  %528 = bitcast <2 x half> %520 to i32, !dbg !30
  %529 = bitcast <2 x half> %521 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %526, i32 %527, i32 %528, i32 %529, ptr addrspace(1) %299, i1 %290) #5, !dbg !30
  %530 = bitcast <2 x half> %522 to i32, !dbg !30
  %531 = bitcast <2 x half> %523 to i32, !dbg !30
  %532 = bitcast <2 x half> %524 to i32, !dbg !30
  %533 = bitcast <2 x half> %525 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %530, i32 %531, i32 %532, i32 %533, ptr addrspace(1) %301, i1 %287) #5, !dbg !30
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cqb32uiw36vwnyvtgujzwoc6yznuefj5hj5slb6u5za62hz3c3bq.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/qb")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7", linkageName: "triton__0d1d2d3d4d5d6de7", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 44, scope: !7)
!11 = !DILocation(line: 27, column: 44, scope: !7)
!12 = !DILocation(line: 23, column: 28, scope: !7)
!13 = !DILocation(line: 23, column: 48, scope: !7)
!14 = !DILocation(line: 23, column: 53, scope: !7)
!15 = !DILocation(line: 23, column: 34, scope: !7)
!16 = !DILocation(line: 23, column: 58, scope: !7)
!17 = !DILocation(line: 24, column: 23, scope: !7)
!18 = !DILocation(line: 25, column: 21, scope: !7)
!19 = !DILocation(line: 26, column: 28, scope: !7)
!20 = !DILocation(line: 26, column: 33, scope: !7)
!21 = !DILocation(line: 27, column: 23, scope: !7)
!22 = !DILocation(line: 28, column: 21, scope: !7)
!23 = !DILocation(line: 32, column: 20, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 41, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 47, scope: !7)
!30 = !DILocation(line: 53, column: 62, scope: !7)
!31 = !DILocation(line: 34, column: 34, scope: !7)
!32 = !DILocation(line: 34, column: 47, scope: !7)
!33 = !DILocation(line: 34, column: 41, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 53, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 53, scope: !7)
!38 = !DILocation(line: 36, column: 31, scope: !7)
!39 = !DILocation(line: 36, column: 36, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 36, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 27, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 49, scope: !7)
!48 = !DILocation(line: 53, column: 42, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 33, column: 95, scope: !7)
!51 = !DILocation(line: 39, column: 18, scope: !7)
!52 = !DILocation(line: 37, column: 76, scope: !7)
!53 = !DILocation(line: 36, column: 76, scope: !7)
!54 = !DILocation(line: 45, column: 19, scope: !7)
!55 = !DILocation(line: 47, column: 20, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 27, column: 30, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!60 = !DILocation(line: 50, column: 23, scope: !58)
!61 = !DILocation(line: 27, column: 29, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 27, column: 20, scope: !58, inlinedAt: !60)
!63 = !DILocation(line: 27, column: 16, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 51, column: 20, scope: !7)
!65 = !DILocation(line: 53, column: 4, scope: !7)
