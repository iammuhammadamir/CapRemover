; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = lshr i32 %7, 3, !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %7, 6, !dbg !8
  %11 = and i32 %10, 3, !dbg !8
  %12 = or i32 %11, 4, !dbg !8
  %13 = or i32 %11, 8, !dbg !8
  %14 = or i32 %11, 12, !dbg !8
  %15 = or i32 %11, 16, !dbg !8
  %16 = or i32 %11, 20, !dbg !8
  %17 = or i32 %11, 24, !dbg !8
  %18 = or i32 %11, 28, !dbg !8
  %19 = shl i32 %7, 3, !dbg !9
  %20 = and i32 %19, 56, !dbg !9
  %21 = and i32 %7, 63, !dbg !9
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %24 = add i32 %23, 1, !dbg !12
  %25 = shl i32 %22, 6, !dbg !13
  %26 = mul i32 %25, %24, !dbg !14
  %27 = or i32 %26, %9, !dbg !15
  %28 = or i32 %27, 32, !dbg !15
  %29 = or i32 %26, %11, !dbg !15
  %30 = or i32 %26, %12, !dbg !15
  %31 = or i32 %26, %13, !dbg !15
  %32 = or i32 %26, %14, !dbg !15
  %33 = or i32 %26, %15, !dbg !15
  %34 = or i32 %26, %16, !dbg !15
  %35 = or i32 %26, %17, !dbg !15
  %36 = or i32 %26, %18, !dbg !15
  %37 = or i32 %29, 32, !dbg !15
  %38 = or i32 %29, 36, !dbg !15
  %39 = or i32 %29, 40, !dbg !15
  %40 = or i32 %29, 44, !dbg !15
  %41 = or i32 %29, 48, !dbg !15
  %42 = or i32 %29, 52, !dbg !15
  %43 = or i32 %29, 56, !dbg !15
  %44 = or i32 %29, 60, !dbg !15
  %45 = icmp slt i32 %27, 14850, !dbg !16
  %46 = icmp slt i32 %28, 14850, !dbg !16
  %47 = icmp slt i32 %29, 14850, !dbg !16
  %48 = icmp slt i32 %30, 14850, !dbg !16
  %49 = icmp slt i32 %31, 14850, !dbg !16
  %50 = icmp slt i32 %32, 14850, !dbg !16
  %51 = icmp slt i32 %33, 14850, !dbg !16
  %52 = icmp slt i32 %34, 14850, !dbg !16
  %53 = icmp slt i32 %35, 14850, !dbg !16
  %54 = icmp slt i32 %36, 14850, !dbg !16
  %55 = icmp slt i32 %37, 14850, !dbg !16
  %56 = icmp slt i32 %38, 14850, !dbg !16
  %57 = icmp slt i32 %39, 14850, !dbg !16
  %58 = icmp slt i32 %40, 14850, !dbg !16
  %59 = icmp slt i32 %41, 14850, !dbg !16
  %60 = icmp slt i32 %42, 14850, !dbg !16
  %61 = icmp slt i32 %43, 14850, !dbg !16
  %62 = icmp slt i32 %44, 14850, !dbg !16
  %63 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %64 = shl i32 %63, 6, !dbg !18
  %65 = or i32 %64, %20, !dbg !19
  %66 = or i32 %64, %21, !dbg !19
  %67 = icmp slt i32 %65, 320, !dbg !20
  %68 = icmp slt i32 %66, 320, !dbg !20
  %.frozen = freeze i32 %29
  %69 = sdiv i32 %.frozen, 675, !dbg !21
  %70 = mul i32 %69, 675
  %.decomposed = sub i32 %.frozen, %70
  %.frozen27 = freeze i32 %30
  %71 = sdiv i32 %.frozen27, 675, !dbg !21
  %72 = mul i32 %71, 675
  %.decomposed28 = sub i32 %.frozen27, %72
  %.frozen29 = freeze i32 %31
  %73 = sdiv i32 %.frozen29, 675, !dbg !21
  %74 = mul i32 %73, 675
  %.decomposed30 = sub i32 %.frozen29, %74
  %.frozen31 = freeze i32 %32
  %75 = sdiv i32 %.frozen31, 675, !dbg !21
  %76 = mul i32 %75, 675
  %.decomposed32 = sub i32 %.frozen31, %76
  %.frozen33 = freeze i32 %33
  %77 = sdiv i32 %.frozen33, 675, !dbg !21
  %78 = mul i32 %77, 675
  %.decomposed34 = sub i32 %.frozen33, %78
  %.frozen35 = freeze i32 %34
  %79 = sdiv i32 %.frozen35, 675, !dbg !21
  %80 = mul i32 %79, 675
  %.decomposed36 = sub i32 %.frozen35, %80
  %.frozen37 = freeze i32 %35
  %81 = sdiv i32 %.frozen37, 675, !dbg !21
  %82 = mul i32 %81, 675
  %.decomposed38 = sub i32 %.frozen37, %82
  %.frozen39 = freeze i32 %36
  %83 = sdiv i32 %.frozen39, 675, !dbg !21
  %84 = mul i32 %83, 675
  %.decomposed40 = sub i32 %.frozen39, %84
  %.frozen41 = freeze i32 %37
  %85 = sdiv i32 %.frozen41, 675, !dbg !21
  %86 = mul i32 %85, 675
  %.decomposed42 = sub i32 %.frozen41, %86
  %.frozen43 = freeze i32 %38
  %87 = sdiv i32 %.frozen43, 675, !dbg !21
  %88 = mul i32 %87, 675
  %.decomposed44 = sub i32 %.frozen43, %88
  %.frozen45 = freeze i32 %39
  %89 = sdiv i32 %.frozen45, 675, !dbg !21
  %90 = mul i32 %89, 675
  %.decomposed46 = sub i32 %.frozen45, %90
  %.frozen47 = freeze i32 %40
  %91 = sdiv i32 %.frozen47, 675, !dbg !21
  %92 = mul i32 %91, 675
  %.decomposed48 = sub i32 %.frozen47, %92
  %.frozen49 = freeze i32 %41
  %93 = sdiv i32 %.frozen49, 675, !dbg !21
  %94 = mul i32 %93, 675
  %.decomposed50 = sub i32 %.frozen49, %94
  %.frozen51 = freeze i32 %42
  %95 = sdiv i32 %.frozen51, 675, !dbg !21
  %96 = mul i32 %95, 675
  %.decomposed52 = sub i32 %.frozen51, %96
  %.frozen53 = freeze i32 %43
  %97 = sdiv i32 %.frozen53, 675, !dbg !21
  %98 = mul i32 %97, 675
  %.decomposed54 = sub i32 %.frozen53, %98
  %.frozen55 = freeze i32 %44
  %99 = sdiv i32 %.frozen55, 675, !dbg !21
  %100 = mul i32 %99, 675
  %.decomposed56 = sub i32 %.frozen55, %100
  %101 = mul i32 %27, 320, !dbg !22
  %102 = mul i32 %28, 320, !dbg !22
  %103 = add i32 %101, %65, !dbg !23
  %104 = add i32 %102, %65, !dbg !23
  %105 = sext i32 %103 to i64, !dbg !24
  %106 = getelementptr half, ptr addrspace(1) %0, i64 %105, !dbg !24
  %107 = sext i32 %104 to i64, !dbg !24
  %108 = getelementptr half, ptr addrspace(1) %0, i64 %107, !dbg !24
  %109 = and i1 %67, %45, !dbg !25
  %110 = and i1 %67, %46, !dbg !25
  %111 = and i1 %68, %47, !dbg !25
  %112 = and i1 %68, %48, !dbg !25
  %113 = and i1 %68, %49, !dbg !25
  %114 = and i1 %68, %50, !dbg !25
  %115 = and i1 %68, %51, !dbg !25
  %116 = and i1 %68, %52, !dbg !25
  %117 = and i1 %68, %53, !dbg !25
  %118 = and i1 %68, %54, !dbg !25
  %119 = and i1 %68, %55, !dbg !25
  %120 = and i1 %68, %56, !dbg !25
  %121 = and i1 %68, %57, !dbg !25
  %122 = and i1 %68, %58, !dbg !25
  %123 = and i1 %68, %59, !dbg !25
  %124 = and i1 %68, %60, !dbg !25
  %125 = and i1 %68, %61, !dbg !25
  %126 = and i1 %68, %62, !dbg !25
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %109) #2, !dbg !26
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !26
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %110) #2, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !26
  %137 = trunc i32 %133 to i16, !dbg !26
  %138 = bitcast i16 %137 to half, !dbg !26
  %139 = trunc i32 %134 to i16, !dbg !26
  %140 = bitcast i16 %139 to half, !dbg !26
  %141 = trunc i32 %135 to i16, !dbg !26
  %142 = bitcast i16 %141 to half, !dbg !26
  %143 = trunc i32 %136 to i16, !dbg !26
  %144 = bitcast i16 %143 to half, !dbg !26
  %145 = fpext half %138 to float, !dbg !27
  %146 = fpext half %140 to float, !dbg !27
  %147 = fpext half %142 to float, !dbg !27
  %148 = fpext half %144 to float, !dbg !27
  %149 = sext i32 %65 to i64, !dbg !28
  %150 = getelementptr half, ptr addrspace(1) %1, i64 %149, !dbg !28
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %67) #2, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !29
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !29
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !29
  %extelt.offset8 = lshr i32 %152, 16, !dbg !29
  %156 = trunc i32 %extelt.offset8 to i16, !dbg !29
  %157 = bitcast i16 %156 to half, !dbg !29
  %extelt.offset9 = lshr i32 %153, 16, !dbg !29
  %158 = trunc i32 %extelt.offset9 to i16, !dbg !29
  %159 = bitcast i16 %158 to half, !dbg !29
  %extelt.offset10 = lshr i32 %154, 16, !dbg !29
  %160 = trunc i32 %extelt.offset10 to i16, !dbg !29
  %161 = bitcast i16 %160 to half, !dbg !29
  %extelt.offset11 = lshr i32 %155, 16, !dbg !29
  %162 = trunc i32 %extelt.offset11 to i16, !dbg !29
  %163 = bitcast i16 %162 to half, !dbg !29
  %164 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !26
  %165 = insertelement <2 x i32> %164, i32 %152, i64 1, !dbg !26
  %166 = trunc <2 x i32> %165 to <2 x i16>, !dbg !26
  %167 = bitcast <2 x i16> %166 to <2 x half>, !dbg !26
  %168 = fpext <2 x half> %167 to <2 x float>, !dbg !27
  %169 = fpext half %157 to float, !dbg !30
  %170 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !26
  %171 = insertelement <2 x i32> %170, i32 %153, i64 1, !dbg !26
  %172 = trunc <2 x i32> %171 to <2 x i16>, !dbg !26
  %173 = bitcast <2 x i16> %172 to <2 x half>, !dbg !26
  %174 = fpext <2 x half> %173 to <2 x float>, !dbg !27
  %175 = fpext half %159 to float, !dbg !30
  %176 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !26
  %177 = insertelement <2 x i32> %176, i32 %154, i64 1, !dbg !26
  %178 = trunc <2 x i32> %177 to <2 x i16>, !dbg !26
  %179 = bitcast <2 x i16> %178 to <2 x half>, !dbg !26
  %180 = fpext <2 x half> %179 to <2 x float>, !dbg !27
  %181 = fpext half %161 to float, !dbg !30
  %182 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !26
  %183 = insertelement <2 x i32> %182, i32 %155, i64 1, !dbg !26
  %184 = trunc <2 x i32> %183 to <2 x i16>, !dbg !26
  %185 = bitcast <2 x i16> %184 to <2 x half>, !dbg !26
  %186 = fpext <2 x half> %185 to <2 x float>, !dbg !27
  %187 = fpext half %163 to float, !dbg !30
  %188 = getelementptr half, ptr addrspace(1) %2, i64 %105, !dbg !31
  %189 = getelementptr half, ptr addrspace(1) %2, i64 %107, !dbg !31
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %109) #2, !dbg !32
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !32
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !32
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !32
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !32
  %195 = trunc i32 %191 to i16, !dbg !32
  %196 = bitcast i16 %195 to half, !dbg !32
  %197 = trunc i32 %192 to i16, !dbg !32
  %198 = bitcast i16 %197 to half, !dbg !32
  %199 = trunc i32 %193 to i16, !dbg !32
  %200 = bitcast i16 %199 to half, !dbg !32
  %201 = trunc i32 %194 to i16, !dbg !32
  %202 = bitcast i16 %201 to half, !dbg !32
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %110) #2, !dbg !32
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !32
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !32
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !32
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !32
  %208 = trunc i32 %204 to i16, !dbg !32
  %209 = bitcast i16 %208 to half, !dbg !32
  %210 = trunc i32 %205 to i16, !dbg !32
  %211 = bitcast i16 %210 to half, !dbg !32
  %212 = trunc i32 %206 to i16, !dbg !32
  %213 = bitcast i16 %212 to half, !dbg !32
  %214 = trunc i32 %207 to i16, !dbg !32
  %215 = bitcast i16 %214 to half, !dbg !32
  %216 = fpext half %196 to float, !dbg !33
  %217 = fpext half %198 to float, !dbg !33
  %218 = fpext half %200 to float, !dbg !33
  %219 = fpext half %202 to float, !dbg !33
  %220 = fpext half %209 to float, !dbg !33
  %221 = fpext half %211 to float, !dbg !33
  %222 = fpext half %213 to float, !dbg !33
  %223 = fpext half %215 to float, !dbg !33
  %224 = extractelement <2 x float> %168, i64 0, !dbg !34
  %225 = extractelement <2 x float> %168, i64 1, !dbg !34
  %226 = fadd float %224, %225, !dbg !34
  %227 = extractelement <2 x float> %174, i64 0, !dbg !34
  %228 = extractelement <2 x float> %174, i64 1, !dbg !34
  %229 = fadd float %227, %228, !dbg !34
  %230 = extractelement <2 x float> %180, i64 0, !dbg !34
  %231 = extractelement <2 x float> %180, i64 1, !dbg !34
  %232 = fadd float %230, %231, !dbg !34
  %233 = extractelement <2 x float> %186, i64 0, !dbg !34
  %234 = extractelement <2 x float> %186, i64 1, !dbg !34
  %235 = fadd float %233, %234, !dbg !34
  %236 = fadd float %225, %145, !dbg !34
  %237 = fadd float %228, %146, !dbg !34
  %238 = fadd float %231, %147, !dbg !34
  %239 = fadd float %234, %148, !dbg !34
  %240 = fmul float %216, 1.250000e-01, !dbg !35
  %241 = insertelement <2 x i32> %164, i32 %191, i64 1, !dbg !26
  %242 = lshr <2 x i32> %241, <i32 16, i32 16>, !dbg !26
  %243 = trunc <2 x i32> %242 to <2 x i16>, !dbg !26
  %244 = bitcast <2 x i16> %243 to <2 x half>, !dbg !26
  %245 = fpext <2 x half> %244 to <2 x float>, !dbg !27
  %246 = fmul float %217, 1.250000e-01, !dbg !35
  %247 = insertelement <2 x i32> %170, i32 %192, i64 1, !dbg !26
  %248 = lshr <2 x i32> %247, <i32 16, i32 16>, !dbg !26
  %249 = trunc <2 x i32> %248 to <2 x i16>, !dbg !26
  %250 = bitcast <2 x i16> %249 to <2 x half>, !dbg !26
  %251 = fpext <2 x half> %250 to <2 x float>, !dbg !27
  %252 = fmul float %218, 1.250000e-01, !dbg !35
  %253 = insertelement <2 x i32> %176, i32 %193, i64 1, !dbg !26
  %254 = lshr <2 x i32> %253, <i32 16, i32 16>, !dbg !26
  %255 = trunc <2 x i32> %254 to <2 x i16>, !dbg !26
  %256 = bitcast <2 x i16> %255 to <2 x half>, !dbg !26
  %257 = fpext <2 x half> %256 to <2 x float>, !dbg !27
  %258 = fmul float %219, 1.250000e-01, !dbg !35
  %259 = insertelement <2 x i32> %182, i32 %194, i64 1, !dbg !26
  %260 = lshr <2 x i32> %259, <i32 16, i32 16>, !dbg !26
  %261 = trunc <2 x i32> %260 to <2 x i16>, !dbg !26
  %262 = bitcast <2 x i16> %261 to <2 x half>, !dbg !26
  %263 = fpext <2 x half> %262 to <2 x float>, !dbg !27
  %264 = fmul float %220, 1.250000e-01, !dbg !35
  %265 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !26
  %266 = insertelement <2 x i32> %265, i32 %204, i64 1, !dbg !26
  %267 = lshr <2 x i32> %266, <i32 16, i32 16>, !dbg !26
  %268 = trunc <2 x i32> %267 to <2 x i16>, !dbg !26
  %269 = bitcast <2 x i16> %268 to <2 x half>, !dbg !26
  %270 = fpext <2 x half> %269 to <2 x float>, !dbg !27
  %271 = fmul float %221, 1.250000e-01, !dbg !35
  %272 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !26
  %273 = insertelement <2 x i32> %272, i32 %205, i64 1, !dbg !26
  %274 = lshr <2 x i32> %273, <i32 16, i32 16>, !dbg !26
  %275 = trunc <2 x i32> %274 to <2 x i16>, !dbg !26
  %276 = bitcast <2 x i16> %275 to <2 x half>, !dbg !26
  %277 = fpext <2 x half> %276 to <2 x float>, !dbg !27
  %278 = fmul float %222, 1.250000e-01, !dbg !35
  %279 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !26
  %280 = insertelement <2 x i32> %279, i32 %206, i64 1, !dbg !26
  %281 = lshr <2 x i32> %280, <i32 16, i32 16>, !dbg !26
  %282 = trunc <2 x i32> %281 to <2 x i16>, !dbg !26
  %283 = bitcast <2 x i16> %282 to <2 x half>, !dbg !26
  %284 = fpext <2 x half> %283 to <2 x float>, !dbg !27
  %285 = fmul float %223, 1.250000e-01, !dbg !35
  %286 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !26
  %287 = insertelement <2 x i32> %286, i32 %207, i64 1, !dbg !26
  %288 = lshr <2 x i32> %287, <i32 16, i32 16>, !dbg !26
  %289 = trunc <2 x i32> %288 to <2 x i16>, !dbg !26
  %290 = bitcast <2 x i16> %289 to <2 x half>, !dbg !26
  %291 = fpext <2 x half> %290 to <2 x float>, !dbg !27
  %292 = fadd float %226, %240, !dbg !36
  %293 = extractelement <2 x float> %245, i64 0, !dbg !36
  %294 = fadd float %293, %169, !dbg !36
  %295 = extractelement <2 x float> %245, i64 1, !dbg !36
  %296 = fmul float %295, 1.250000e-01, !dbg !36
  %297 = fadd float %294, %296, !dbg !36
  %298 = fadd float %229, %246, !dbg !36
  %299 = extractelement <2 x float> %251, i64 0, !dbg !36
  %300 = fadd float %299, %175, !dbg !36
  %301 = extractelement <2 x float> %251, i64 1, !dbg !36
  %302 = fmul float %301, 1.250000e-01, !dbg !36
  %303 = fadd float %300, %302, !dbg !36
  %304 = fadd float %232, %252, !dbg !36
  %305 = extractelement <2 x float> %257, i64 0, !dbg !36
  %306 = fadd float %305, %181, !dbg !36
  %307 = extractelement <2 x float> %257, i64 1, !dbg !36
  %308 = fmul float %307, 1.250000e-01, !dbg !36
  %309 = fadd float %306, %308, !dbg !36
  %310 = fadd float %235, %258, !dbg !36
  %311 = extractelement <2 x float> %263, i64 0, !dbg !36
  %312 = fadd float %311, %187, !dbg !36
  %313 = extractelement <2 x float> %263, i64 1, !dbg !36
  %314 = fmul float %313, 1.250000e-01, !dbg !36
  %315 = fadd float %312, %314, !dbg !36
  %316 = fadd float %236, %264, !dbg !36
  %317 = extractelement <2 x float> %270, i64 0, !dbg !36
  %318 = fadd float %317, %169, !dbg !36
  %319 = extractelement <2 x float> %270, i64 1, !dbg !36
  %320 = fmul float %319, 1.250000e-01, !dbg !36
  %321 = fadd float %318, %320, !dbg !36
  %322 = fadd float %237, %271, !dbg !36
  %323 = extractelement <2 x float> %277, i64 0, !dbg !36
  %324 = fadd float %323, %175, !dbg !36
  %325 = extractelement <2 x float> %277, i64 1, !dbg !36
  %326 = fmul float %325, 1.250000e-01, !dbg !36
  %327 = fadd float %324, %326, !dbg !36
  %328 = fadd float %238, %278, !dbg !36
  %329 = extractelement <2 x float> %284, i64 0, !dbg !36
  %330 = fadd float %329, %181, !dbg !36
  %331 = extractelement <2 x float> %284, i64 1, !dbg !36
  %332 = fmul float %331, 1.250000e-01, !dbg !36
  %333 = fadd float %330, %332, !dbg !36
  %334 = fadd float %239, %285, !dbg !36
  %335 = extractelement <2 x float> %291, i64 0, !dbg !36
  %336 = fadd float %335, %187, !dbg !36
  %337 = extractelement <2 x float> %291, i64 1, !dbg !36
  %338 = fmul float %337, 1.250000e-01, !dbg !36
  %339 = fadd float %336, %338, !dbg !36
  %340 = mul i32 %66, 675, !dbg !37
  %341 = add i32 %.decomposed, %340, !dbg !38
  %342 = add i32 %.decomposed28, %340, !dbg !38
  %343 = add i32 %.decomposed30, %340, !dbg !38
  %344 = add i32 %.decomposed32, %340, !dbg !38
  %345 = add i32 %.decomposed34, %340, !dbg !38
  %346 = add i32 %.decomposed36, %340, !dbg !38
  %347 = add i32 %.decomposed38, %340, !dbg !38
  %348 = add i32 %.decomposed40, %340, !dbg !38
  %349 = add i32 %.decomposed42, %340, !dbg !38
  %350 = add i32 %.decomposed44, %340, !dbg !38
  %351 = add i32 %.decomposed46, %340, !dbg !38
  %352 = add i32 %.decomposed48, %340, !dbg !38
  %353 = add i32 %.decomposed50, %340, !dbg !38
  %354 = add i32 %.decomposed52, %340, !dbg !38
  %355 = add i32 %.decomposed54, %340, !dbg !38
  %356 = add i32 %.decomposed56, %340, !dbg !38
  %357 = mul i32 %69, 216000, !dbg !39
  %358 = mul i32 %71, 216000, !dbg !39
  %359 = mul i32 %73, 216000, !dbg !39
  %360 = mul i32 %75, 216000, !dbg !39
  %361 = mul i32 %77, 216000, !dbg !39
  %362 = mul i32 %79, 216000, !dbg !39
  %363 = mul i32 %81, 216000, !dbg !39
  %364 = mul i32 %83, 216000, !dbg !39
  %365 = mul i32 %85, 216000, !dbg !39
  %366 = mul i32 %87, 216000, !dbg !39
  %367 = mul i32 %89, 216000, !dbg !39
  %368 = mul i32 %91, 216000, !dbg !39
  %369 = mul i32 %93, 216000, !dbg !39
  %370 = mul i32 %95, 216000, !dbg !39
  %371 = mul i32 %97, 216000, !dbg !39
  %372 = mul i32 %99, 216000, !dbg !39
  %373 = add i32 %341, %357, !dbg !40
  %374 = add i32 %342, %358, !dbg !40
  %375 = add i32 %343, %359, !dbg !40
  %376 = add i32 %344, %360, !dbg !40
  %377 = add i32 %345, %361, !dbg !40
  %378 = add i32 %346, %362, !dbg !40
  %379 = add i32 %347, %363, !dbg !40
  %380 = add i32 %348, %364, !dbg !40
  %381 = add i32 %349, %365, !dbg !40
  %382 = add i32 %350, %366, !dbg !40
  %383 = add i32 %351, %367, !dbg !40
  %384 = add i32 %352, %368, !dbg !40
  %385 = add i32 %353, %369, !dbg !40
  %386 = add i32 %354, %370, !dbg !40
  %387 = add i32 %355, %371, !dbg !40
  %388 = add i32 %356, %372, !dbg !40
  %389 = sext i32 %373 to i64, !dbg !41
  %390 = getelementptr half, ptr addrspace(1) %3, i64 %389, !dbg !41
  %391 = sext i32 %374 to i64, !dbg !41
  %392 = getelementptr half, ptr addrspace(1) %3, i64 %391, !dbg !41
  %393 = sext i32 %375 to i64, !dbg !41
  %394 = getelementptr half, ptr addrspace(1) %3, i64 %393, !dbg !41
  %395 = sext i32 %376 to i64, !dbg !41
  %396 = getelementptr half, ptr addrspace(1) %3, i64 %395, !dbg !41
  %397 = sext i32 %377 to i64, !dbg !41
  %398 = getelementptr half, ptr addrspace(1) %3, i64 %397, !dbg !41
  %399 = sext i32 %378 to i64, !dbg !41
  %400 = getelementptr half, ptr addrspace(1) %3, i64 %399, !dbg !41
  %401 = sext i32 %379 to i64, !dbg !41
  %402 = getelementptr half, ptr addrspace(1) %3, i64 %401, !dbg !41
  %403 = sext i32 %380 to i64, !dbg !41
  %404 = getelementptr half, ptr addrspace(1) %3, i64 %403, !dbg !41
  %405 = sext i32 %381 to i64, !dbg !41
  %406 = getelementptr half, ptr addrspace(1) %3, i64 %405, !dbg !41
  %407 = sext i32 %382 to i64, !dbg !41
  %408 = getelementptr half, ptr addrspace(1) %3, i64 %407, !dbg !41
  %409 = sext i32 %383 to i64, !dbg !41
  %410 = getelementptr half, ptr addrspace(1) %3, i64 %409, !dbg !41
  %411 = sext i32 %384 to i64, !dbg !41
  %412 = getelementptr half, ptr addrspace(1) %3, i64 %411, !dbg !41
  %413 = sext i32 %385 to i64, !dbg !41
  %414 = getelementptr half, ptr addrspace(1) %3, i64 %413, !dbg !41
  %415 = sext i32 %386 to i64, !dbg !41
  %416 = getelementptr half, ptr addrspace(1) %3, i64 %415, !dbg !41
  %417 = sext i32 %387 to i64, !dbg !41
  %418 = getelementptr half, ptr addrspace(1) %3, i64 %417, !dbg !41
  %419 = sext i32 %388 to i64, !dbg !41
  %420 = getelementptr half, ptr addrspace(1) %3, i64 %419, !dbg !41
  %421 = fptrunc float %292 to half, !dbg !42
  %422 = fptrunc float %297 to half, !dbg !42
  %423 = fptrunc float %298 to half, !dbg !42
  %424 = fptrunc float %303 to half, !dbg !42
  %425 = fptrunc float %304 to half, !dbg !42
  %426 = fptrunc float %309 to half, !dbg !42
  %427 = fptrunc float %310 to half, !dbg !42
  %428 = fptrunc float %315 to half, !dbg !42
  %429 = fptrunc float %316 to half, !dbg !42
  %430 = fptrunc float %321 to half, !dbg !42
  %431 = fptrunc float %322 to half, !dbg !42
  %432 = fptrunc float %327 to half, !dbg !42
  %433 = fptrunc float %328 to half, !dbg !42
  %434 = fptrunc float %333 to half, !dbg !42
  %435 = fptrunc float %334 to half, !dbg !42
  %436 = fptrunc float %339 to half, !dbg !42
  %437 = mul nuw nsw i32 %9, 65, !dbg !42
  %438 = add nuw nsw i32 %437, %20, !dbg !42
  %439 = zext nneg i32 %438 to i64, !dbg !42
  %440 = getelementptr half, ptr addrspace(3) @global_smem, i64 %439, !dbg !42
  %441 = insertelement <1 x half> undef, half %421, i64 0, !dbg !42
  store <1 x half> %441, ptr addrspace(3) %440, align 2, !dbg !42
  %442 = or i32 %20, 1, !dbg !42
  %443 = add nuw nsw i32 %442, %437, !dbg !42
  %444 = zext nneg i32 %443 to i64, !dbg !42
  %445 = getelementptr half, ptr addrspace(3) @global_smem, i64 %444, !dbg !42
  %446 = insertelement <1 x half> undef, half %422, i64 0, !dbg !42
  store <1 x half> %446, ptr addrspace(3) %445, align 2, !dbg !42
  %447 = or i32 %20, 2, !dbg !42
  %448 = add nuw nsw i32 %447, %437, !dbg !42
  %449 = zext nneg i32 %448 to i64, !dbg !42
  %450 = getelementptr half, ptr addrspace(3) @global_smem, i64 %449, !dbg !42
  %451 = insertelement <1 x half> undef, half %423, i64 0, !dbg !42
  store <1 x half> %451, ptr addrspace(3) %450, align 2, !dbg !42
  %452 = or i32 %20, 3, !dbg !42
  %453 = add nuw nsw i32 %452, %437, !dbg !42
  %454 = zext nneg i32 %453 to i64, !dbg !42
  %455 = getelementptr half, ptr addrspace(3) @global_smem, i64 %454, !dbg !42
  %456 = insertelement <1 x half> undef, half %424, i64 0, !dbg !42
  store <1 x half> %456, ptr addrspace(3) %455, align 2, !dbg !42
  %457 = or i32 %20, 4, !dbg !42
  %458 = add nuw nsw i32 %457, %437, !dbg !42
  %459 = zext nneg i32 %458 to i64, !dbg !42
  %460 = getelementptr half, ptr addrspace(3) @global_smem, i64 %459, !dbg !42
  %461 = insertelement <1 x half> undef, half %425, i64 0, !dbg !42
  store <1 x half> %461, ptr addrspace(3) %460, align 2, !dbg !42
  %462 = or i32 %20, 5, !dbg !42
  %463 = add nuw nsw i32 %462, %437, !dbg !42
  %464 = zext nneg i32 %463 to i64, !dbg !42
  %465 = getelementptr half, ptr addrspace(3) @global_smem, i64 %464, !dbg !42
  %466 = insertelement <1 x half> undef, half %426, i64 0, !dbg !42
  store <1 x half> %466, ptr addrspace(3) %465, align 2, !dbg !42
  %467 = or i32 %20, 6, !dbg !42
  %468 = add nuw nsw i32 %467, %437, !dbg !42
  %469 = zext nneg i32 %468 to i64, !dbg !42
  %470 = getelementptr half, ptr addrspace(3) @global_smem, i64 %469, !dbg !42
  %471 = insertelement <1 x half> undef, half %427, i64 0, !dbg !42
  store <1 x half> %471, ptr addrspace(3) %470, align 2, !dbg !42
  %472 = or i32 %20, 7, !dbg !42
  %473 = add nuw nsw i32 %472, %437, !dbg !42
  %474 = zext nneg i32 %473 to i64, !dbg !42
  %475 = getelementptr half, ptr addrspace(3) @global_smem, i64 %474, !dbg !42
  %476 = insertelement <1 x half> undef, half %428, i64 0, !dbg !42
  store <1 x half> %476, ptr addrspace(3) %475, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %477 = mul nuw nsw i32 %11, 65, !dbg !42
  %478 = add nuw nsw i32 %477, %21, !dbg !42
  %479 = zext nneg i32 %478 to i64, !dbg !42
  %480 = getelementptr half, ptr addrspace(3) @global_smem, i64 %479, !dbg !42
  %481 = load i16, ptr addrspace(3) %480, align 2, !dbg !42
  %482 = mul nuw nsw i32 %12, 65, !dbg !42
  %483 = add nuw nsw i32 %482, %21, !dbg !42
  %484 = zext nneg i32 %483 to i64, !dbg !42
  %485 = getelementptr half, ptr addrspace(3) @global_smem, i64 %484, !dbg !42
  %486 = load i16, ptr addrspace(3) %485, align 2, !dbg !42
  %487 = mul nuw nsw i32 %13, 65, !dbg !42
  %488 = add nuw nsw i32 %487, %21, !dbg !42
  %489 = zext nneg i32 %488 to i64, !dbg !42
  %490 = getelementptr half, ptr addrspace(3) @global_smem, i64 %489, !dbg !42
  %491 = load i16, ptr addrspace(3) %490, align 2, !dbg !42
  %492 = mul nuw nsw i32 %14, 65, !dbg !42
  %493 = add nuw nsw i32 %492, %21, !dbg !42
  %494 = zext nneg i32 %493 to i64, !dbg !42
  %495 = getelementptr half, ptr addrspace(3) @global_smem, i64 %494, !dbg !42
  %496 = load i16, ptr addrspace(3) %495, align 2, !dbg !42
  %497 = mul nuw nsw i32 %15, 65, !dbg !42
  %498 = add nuw nsw i32 %497, %21, !dbg !42
  %499 = zext nneg i32 %498 to i64, !dbg !42
  %500 = getelementptr half, ptr addrspace(3) @global_smem, i64 %499, !dbg !42
  %501 = load i16, ptr addrspace(3) %500, align 2, !dbg !42
  %502 = mul nuw nsw i32 %16, 65, !dbg !42
  %503 = add nuw nsw i32 %502, %21, !dbg !42
  %504 = zext nneg i32 %503 to i64, !dbg !42
  %505 = getelementptr half, ptr addrspace(3) @global_smem, i64 %504, !dbg !42
  %506 = load i16, ptr addrspace(3) %505, align 2, !dbg !42
  %507 = mul nuw nsw i32 %17, 65, !dbg !42
  %508 = add nuw nsw i32 %507, %21, !dbg !42
  %509 = zext nneg i32 %508 to i64, !dbg !42
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i64 %509, !dbg !42
  %511 = load i16, ptr addrspace(3) %510, align 2, !dbg !42
  %512 = mul nuw nsw i32 %18, 65, !dbg !42
  %513 = add nuw nsw i32 %512, %21, !dbg !42
  %514 = zext nneg i32 %513 to i64, !dbg !42
  %515 = getelementptr half, ptr addrspace(3) @global_smem, i64 %514, !dbg !42
  %516 = load i16, ptr addrspace(3) %515, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %517 = insertelement <1 x half> undef, half %429, i64 0, !dbg !42
  store <1 x half> %517, ptr addrspace(3) %440, align 2, !dbg !42
  %518 = insertelement <1 x half> undef, half %430, i64 0, !dbg !42
  store <1 x half> %518, ptr addrspace(3) %445, align 2, !dbg !42
  %519 = insertelement <1 x half> undef, half %431, i64 0, !dbg !42
  store <1 x half> %519, ptr addrspace(3) %450, align 2, !dbg !42
  %520 = insertelement <1 x half> undef, half %432, i64 0, !dbg !42
  store <1 x half> %520, ptr addrspace(3) %455, align 2, !dbg !42
  %521 = insertelement <1 x half> undef, half %433, i64 0, !dbg !42
  store <1 x half> %521, ptr addrspace(3) %460, align 2, !dbg !42
  %522 = insertelement <1 x half> undef, half %434, i64 0, !dbg !42
  store <1 x half> %522, ptr addrspace(3) %465, align 2, !dbg !42
  %523 = insertelement <1 x half> undef, half %435, i64 0, !dbg !42
  store <1 x half> %523, ptr addrspace(3) %470, align 2, !dbg !42
  %524 = insertelement <1 x half> undef, half %436, i64 0, !dbg !42
  store <1 x half> %524, ptr addrspace(3) %475, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %525 = load i16, ptr addrspace(3) %480, align 2, !dbg !42
  %526 = load i16, ptr addrspace(3) %485, align 2, !dbg !42
  %527 = load i16, ptr addrspace(3) %490, align 2, !dbg !42
  %528 = load i16, ptr addrspace(3) %495, align 2, !dbg !42
  %529 = load i16, ptr addrspace(3) %500, align 2, !dbg !42
  %530 = load i16, ptr addrspace(3) %505, align 2, !dbg !42
  %531 = load i16, ptr addrspace(3) %510, align 2, !dbg !42
  %532 = load i16, ptr addrspace(3) %515, align 2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %481, ptr addrspace(1) %390, i1 %111) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %486, ptr addrspace(1) %392, i1 %112) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %491, ptr addrspace(1) %394, i1 %113) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %496, ptr addrspace(1) %396, i1 %114) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %501, ptr addrspace(1) %398, i1 %115) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %506, ptr addrspace(1) %400, i1 %116) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %511, ptr addrspace(1) %402, i1 %117) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %516, ptr addrspace(1) %404, i1 %118) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %525, ptr addrspace(1) %406, i1 %119) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %526, ptr addrspace(1) %408, i1 %120) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %527, ptr addrspace(1) %410, i1 %121) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %528, ptr addrspace(1) %412, i1 %122) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %529, ptr addrspace(1) %414, i1 %123) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %530, ptr addrspace(1) %416, i1 %124) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %531, ptr addrspace(1) %418, i1 %125) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %532, ptr addrspace(1) %420, i1 %126) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cflmorxwram7b53hs73bzvriztaxm7ly3y2s7goaejppuevdgnlk.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/fl")
!3 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 40, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 54, scope: !5)
!26 = !DILocation(line: 33, column: 46, scope: !5)
!27 = !DILocation(line: 33, column: 94, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 34, column: 35, scope: !5)
!30 = !DILocation(line: 34, column: 75, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 35, column: 94, scope: !5)
!34 = !DILocation(line: 36, column: 18, scope: !5)
!35 = !DILocation(line: 38, column: 18, scope: !5)
!36 = !DILocation(line: 39, column: 18, scope: !5)
!37 = !DILocation(line: 40, column: 35, scope: !5)
!38 = !DILocation(line: 40, column: 31, scope: !5)
!39 = !DILocation(line: 40, column: 49, scope: !5)
!40 = !DILocation(line: 40, column: 42, scope: !5)
!41 = !DILocation(line: 40, column: 25, scope: !5)
!42 = !DILocation(line: 40, column: 61, scope: !5)
!43 = !DILocation(line: 40, column: 4, scope: !5)
