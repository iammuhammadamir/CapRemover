; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3de4e(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %6, 255, !dbg !8
  %7 = shl nuw nsw i32 %urem, 3, !dbg !8
  %8 = or i32 %urem, 256, !dbg !8
  %9 = or i32 %urem, 512, !dbg !8
  %10 = or i32 %urem, 768, !dbg !8
  %11 = or i32 %urem, 1024, !dbg !8
  %12 = or i32 %urem, 1280, !dbg !8
  %13 = or i32 %urem, 1536, !dbg !8
  %14 = or i32 %urem, 1792, !dbg !8
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %16 = icmp slt i32 %15, 704, !dbg !10
  %17 = mul i32 %15, 27000, !dbg !11
  %18 = zext nneg i32 %urem to i64
  %19 = getelementptr float, ptr addrspace(3) @global_smem, i64 %18
  %20 = zext nneg i32 %8 to i64
  %21 = getelementptr float, ptr addrspace(3) @global_smem, i64 %20
  %22 = zext nneg i32 %9 to i64
  %23 = getelementptr float, ptr addrspace(3) @global_smem, i64 %22
  %24 = zext nneg i32 %10 to i64
  %25 = getelementptr float, ptr addrspace(3) @global_smem, i64 %24
  %26 = zext nneg i32 %11 to i64
  %27 = getelementptr float, ptr addrspace(3) @global_smem, i64 %26
  %28 = zext nneg i32 %12 to i64
  %29 = getelementptr float, ptr addrspace(3) @global_smem, i64 %28
  %30 = zext nneg i32 %13 to i64
  %31 = getelementptr float, ptr addrspace(3) @global_smem, i64 %30
  %32 = zext nneg i32 %14 to i64
  %33 = getelementptr float, ptr addrspace(3) @global_smem, i64 %32
  %34 = zext nneg i32 %7 to i64
  %35 = getelementptr float, ptr addrspace(3) @global_smem, i64 %34
  %36 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 1
  %37 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 2
  %38 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 3
  %39 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 4
  %40 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 5
  %41 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 6
  %42 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 7
  br label %43, !dbg !12

43:                                               ; preds = %5, %._crit_edge
  %44 = phi float [ 0.000000e+00, %5 ], [ %224, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %5 ], [ %225, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %5 ], [ %226, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %5 ], [ %227, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %5 ], [ %228, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %5 ], [ %229, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %5 ], [ %230, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %5 ], [ %231, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %5 ], [ %216, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %5 ], [ %217, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %5 ], [ %218, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %5 ], [ %219, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %5 ], [ %220, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %5 ], [ %221, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %5 ], [ %222, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %5 ], [ %223, %._crit_edge ]
  %60 = phi i32 [ 0, %5 ], [ %232, %._crit_edge ]
  %61 = phi <8 x float> [ zeroinitializer, %5 ], [ %215, %._crit_edge ]
  %62 = or i32 %60, %7, !dbg !13
  %63 = or i32 %60, %8, !dbg !13
  %64 = or i32 %60, %9, !dbg !13
  %65 = or i32 %60, %10, !dbg !13
  %66 = or i32 %60, %11, !dbg !13
  %67 = or i32 %60, %12, !dbg !13
  %68 = or i32 %60, %13, !dbg !13
  %69 = or i32 %60, %14, !dbg !13
  %70 = icmp ult i32 %62, 27000, !dbg !14
  %71 = icmp ult i32 %63, 27000, !dbg !14
  %72 = icmp ult i32 %64, 27000, !dbg !14
  %73 = icmp ult i32 %65, 27000, !dbg !14
  %74 = icmp ult i32 %66, 27000, !dbg !14
  %75 = icmp ult i32 %67, 27000, !dbg !14
  %76 = icmp ult i32 %68, 27000, !dbg !14
  %77 = icmp ult i32 %69, 27000, !dbg !14
  %78 = add i32 %62, %17, !dbg !15
  %79 = sext i32 %78 to i64, !dbg !16
  %80 = getelementptr half, ptr addrspace(1) %0, i64 %79, !dbg !16
  %81 = and i1 %16, %70, !dbg !17
  %82 = and i1 %16, %71, !dbg !17
  %83 = and i1 %16, %72, !dbg !17
  %84 = and i1 %16, %73, !dbg !17
  %85 = and i1 %16, %74, !dbg !17
  %86 = and i1 %16, %75, !dbg !17
  %87 = and i1 %16, %76, !dbg !17
  %88 = and i1 %16, %77, !dbg !17
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #3, !dbg !18
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !18
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !18
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !18
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !18
  %extelt.offset = lshr i32 %90, 16, !dbg !18
  %extelt.offset1 = lshr i32 %91, 16, !dbg !18
  %extelt.offset2 = lshr i32 %92, 16, !dbg !18
  %extelt.offset3 = lshr i32 %93, 16, !dbg !18
  %94 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !18
  %95 = insertelement <8 x i32> %94, i32 %extelt.offset, i64 1, !dbg !18
  %96 = insertelement <8 x i32> %95, i32 %91, i64 2, !dbg !18
  %97 = insertelement <8 x i32> %96, i32 %extelt.offset1, i64 3, !dbg !18
  %98 = insertelement <8 x i32> %97, i32 %92, i64 4, !dbg !18
  %99 = insertelement <8 x i32> %98, i32 %extelt.offset2, i64 5, !dbg !18
  %100 = insertelement <8 x i32> %99, i32 %93, i64 6, !dbg !18
  %101 = insertelement <8 x i32> %100, i32 %extelt.offset3, i64 7, !dbg !18
  %102 = trunc <8 x i32> %101 to <8 x i16>, !dbg !18
  %103 = bitcast <8 x i16> %102 to <8 x half>, !dbg !18
  %104 = fpext <8 x half> %103 to <8 x float>, !dbg !19
  %105 = icmp eq i32 %60, 0, !dbg !20
  br i1 %105, label %._crit_edge, label %106, !dbg !21

106:                                              ; preds = %43
  %107 = fsub <8 x float> %104, %61, !dbg !25
  %108 = extractelement <8 x float> %107, i64 0, !dbg !25
  %109 = fsub <8 x float> %104, %61, !dbg !25
  %110 = extractelement <8 x float> %109, i64 1, !dbg !25
  %111 = fsub <8 x float> %104, %61, !dbg !25
  %112 = extractelement <8 x float> %111, i64 2, !dbg !25
  %113 = fsub <8 x float> %104, %61, !dbg !25
  %114 = extractelement <8 x float> %113, i64 3, !dbg !25
  %115 = fsub <8 x float> %104, %61, !dbg !25
  %116 = extractelement <8 x float> %115, i64 4, !dbg !25
  %117 = fsub <8 x float> %104, %61, !dbg !25
  %118 = extractelement <8 x float> %117, i64 5, !dbg !25
  %119 = fsub <8 x float> %104, %61, !dbg !25
  %120 = extractelement <8 x float> %119, i64 6, !dbg !25
  %121 = fsub <8 x float> %104, %61, !dbg !25
  %122 = extractelement <8 x float> %121, i64 7, !dbg !25
  %123 = fadd float %44, 1.000000e+00, !dbg !26
  %124 = fadd float %45, 1.000000e+00, !dbg !26
  %125 = fadd float %46, 1.000000e+00, !dbg !26
  %126 = fadd float %47, 1.000000e+00, !dbg !26
  %127 = fadd float %48, 1.000000e+00, !dbg !26
  %128 = fadd float %49, 1.000000e+00, !dbg !26
  %129 = fadd float %50, 1.000000e+00, !dbg !26
  %130 = fadd float %51, 1.000000e+00, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %131 = insertelement <1 x float> undef, float %123, i64 0, !dbg !26
  store <1 x float> %131, ptr addrspace(3) %19, align 4, !dbg !26
  %132 = insertelement <1 x float> undef, float %124, i64 0, !dbg !26
  store <1 x float> %132, ptr addrspace(3) %21, align 4, !dbg !26
  %133 = insertelement <1 x float> undef, float %125, i64 0, !dbg !26
  store <1 x float> %133, ptr addrspace(3) %23, align 4, !dbg !26
  %134 = insertelement <1 x float> undef, float %126, i64 0, !dbg !26
  store <1 x float> %134, ptr addrspace(3) %25, align 4, !dbg !26
  %135 = insertelement <1 x float> undef, float %127, i64 0, !dbg !26
  store <1 x float> %135, ptr addrspace(3) %27, align 4, !dbg !26
  %136 = insertelement <1 x float> undef, float %128, i64 0, !dbg !26
  store <1 x float> %136, ptr addrspace(3) %29, align 4, !dbg !26
  %137 = insertelement <1 x float> undef, float %129, i64 0, !dbg !26
  store <1 x float> %137, ptr addrspace(3) %31, align 4, !dbg !26
  %138 = insertelement <1 x float> undef, float %130, i64 0, !dbg !26
  store <1 x float> %138, ptr addrspace(3) %33, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %139 = load float, ptr addrspace(3) %35, align 32, !dbg !26
  %140 = load float, ptr addrspace(3) %36, align 4, !dbg !26
  %141 = load float, ptr addrspace(3) %37, align 8, !dbg !26
  %142 = load float, ptr addrspace(3) %38, align 4, !dbg !26
  %143 = load float, ptr addrspace(3) %39, align 16, !dbg !26
  %144 = load float, ptr addrspace(3) %40, align 4, !dbg !26
  %145 = load float, ptr addrspace(3) %41, align 8, !dbg !26
  %146 = load float, ptr addrspace(3) %42, align 4, !dbg !26
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %139) #3, !dbg !27
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %140) #3, !dbg !27
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %141) #3, !dbg !27
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %142) #3, !dbg !27
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %143) #3, !dbg !27
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %144) #3, !dbg !27
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %145) #3, !dbg !27
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %146) #3, !dbg !27
  %155 = insertelement <8 x float> poison, float %147, i64 0, !dbg !28
  %156 = insertelement <8 x float> %155, float %148, i64 1, !dbg !28
  %157 = insertelement <8 x float> %156, float %149, i64 2, !dbg !28
  %158 = insertelement <8 x float> %157, float %150, i64 3, !dbg !28
  %159 = insertelement <8 x float> %158, float %151, i64 4, !dbg !28
  %160 = insertelement <8 x float> %159, float %152, i64 5, !dbg !28
  %161 = insertelement <8 x float> %160, float %153, i64 6, !dbg !28
  %162 = insertelement <8 x float> %161, float %154, i64 7, !dbg !28
  %163 = fadd <8 x float> %61, %162, !dbg !28
  %164 = fsub <8 x float> %104, %163, !dbg !29
  %165 = fsub <8 x float> %104, %163, !dbg !29
  %166 = fsub <8 x float> %104, %163, !dbg !29
  %167 = fsub <8 x float> %104, %163, !dbg !29
  %168 = fsub <8 x float> %104, %163, !dbg !29
  %169 = fsub <8 x float> %104, %163, !dbg !29
  %170 = fsub <8 x float> %104, %163, !dbg !29
  %171 = fsub <8 x float> %104, %163, !dbg !29
  %172 = fmul <8 x float> %107, %164, !dbg !30
  %173 = extractelement <8 x float> %172, i64 0, !dbg !30
  %174 = fmul <8 x float> %109, %165, !dbg !30
  %175 = extractelement <8 x float> %174, i64 1, !dbg !30
  %176 = fmul <8 x float> %111, %166, !dbg !30
  %177 = extractelement <8 x float> %176, i64 2, !dbg !30
  %178 = fmul <8 x float> %113, %167, !dbg !30
  %179 = extractelement <8 x float> %178, i64 3, !dbg !30
  %180 = fmul <8 x float> %115, %168, !dbg !30
  %181 = extractelement <8 x float> %180, i64 4, !dbg !30
  %182 = fmul <8 x float> %117, %169, !dbg !30
  %183 = extractelement <8 x float> %182, i64 5, !dbg !30
  %184 = fmul <8 x float> %119, %170, !dbg !30
  %185 = extractelement <8 x float> %184, i64 6, !dbg !30
  %186 = fmul <8 x float> %121, %171, !dbg !30
  %187 = extractelement <8 x float> %186, i64 7, !dbg !30
  %188 = fadd float %52, %173, !dbg !31
  %189 = fadd float %53, %175, !dbg !31
  %190 = fadd float %54, %177, !dbg !31
  %191 = fadd float %55, %179, !dbg !31
  %192 = fadd float %56, %181, !dbg !31
  %193 = fadd float %57, %183, !dbg !31
  %194 = fadd float %58, %185, !dbg !31
  %195 = fadd float %59, %187, !dbg !31
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %43, %106
  %196 = phi float [ %123, %106 ], [ 1.000000e+00, %43 ]
  %197 = phi float [ %124, %106 ], [ 1.000000e+00, %43 ]
  %198 = phi float [ %125, %106 ], [ 1.000000e+00, %43 ]
  %199 = phi float [ %126, %106 ], [ 1.000000e+00, %43 ]
  %200 = phi float [ %127, %106 ], [ 1.000000e+00, %43 ]
  %201 = phi float [ %128, %106 ], [ 1.000000e+00, %43 ]
  %202 = phi float [ %129, %106 ], [ 1.000000e+00, %43 ]
  %203 = phi float [ %130, %106 ], [ 1.000000e+00, %43 ]
  %204 = phi float [ %188, %106 ], [ 0.000000e+00, %43 ]
  %205 = phi float [ %189, %106 ], [ 0.000000e+00, %43 ]
  %206 = phi float [ %190, %106 ], [ 0.000000e+00, %43 ]
  %207 = phi float [ %191, %106 ], [ 0.000000e+00, %43 ]
  %208 = phi float [ %192, %106 ], [ 0.000000e+00, %43 ]
  %209 = phi float [ %193, %106 ], [ 0.000000e+00, %43 ]
  %210 = phi float [ %194, %106 ], [ 0.000000e+00, %43 ]
  %211 = phi float [ %195, %106 ], [ 0.000000e+00, %43 ]
  %212 = phi <8 x float> [ %163, %106 ], [ %104, %43 ]
  %213 = insertelement <8 x i1> poison, i1 %81, i64 0, !dbg !32
  %214 = shufflevector <8 x i1> %213, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !32
  %215 = select <8 x i1> %214, <8 x float> %212, <8 x float> %61, !dbg !32
  %216 = select i1 %81, float %204, float %52, !dbg !33
  %217 = select i1 %81, float %205, float %53, !dbg !33
  %218 = select i1 %81, float %206, float %54, !dbg !33
  %219 = select i1 %81, float %207, float %55, !dbg !33
  %220 = select i1 %81, float %208, float %56, !dbg !33
  %221 = select i1 %81, float %209, float %57, !dbg !33
  %222 = select i1 %81, float %210, float %58, !dbg !33
  %223 = select i1 %81, float %211, float %59, !dbg !33
  %224 = select i1 %16, float %196, float %44, !dbg !34
  %225 = select i1 %82, float %197, float %45, !dbg !34
  %226 = select i1 %83, float %198, float %46, !dbg !34
  %227 = select i1 %84, float %199, float %47, !dbg !34
  %228 = select i1 %85, float %200, float %48, !dbg !34
  %229 = select i1 %86, float %201, float %49, !dbg !34
  %230 = select i1 %87, float %202, float %50, !dbg !34
  %231 = select i1 %88, float %203, float %51, !dbg !34
  %232 = add nuw nsw i32 %60, 2048, !dbg !12
  %233 = icmp ult i32 %60, 24952, !dbg !12
  br i1 %233, label %43, label %234, !dbg !12

234:                                              ; preds = %._crit_edge
  %235 = lshr i32 %6, 5, !dbg !8
  %236 = and i32 %235, 7, !dbg !8
  %237 = and i32 %6, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !12
  %238 = insertelement <1 x float> undef, float %224, i64 0, !dbg !12
  store <1 x float> %238, ptr addrspace(3) %19, align 4, !dbg !12
  %239 = insertelement <1 x float> undef, float %225, i64 0, !dbg !12
  store <1 x float> %239, ptr addrspace(3) %21, align 4, !dbg !12
  %240 = insertelement <1 x float> undef, float %226, i64 0, !dbg !12
  store <1 x float> %240, ptr addrspace(3) %23, align 4, !dbg !12
  %241 = insertelement <1 x float> undef, float %227, i64 0, !dbg !12
  store <1 x float> %241, ptr addrspace(3) %25, align 4, !dbg !12
  %242 = insertelement <1 x float> undef, float %228, i64 0, !dbg !12
  store <1 x float> %242, ptr addrspace(3) %27, align 4, !dbg !12
  %243 = insertelement <1 x float> undef, float %229, i64 0, !dbg !12
  store <1 x float> %243, ptr addrspace(3) %29, align 4, !dbg !12
  %244 = insertelement <1 x float> undef, float %230, i64 0, !dbg !12
  store <1 x float> %244, ptr addrspace(3) %31, align 4, !dbg !12
  %245 = insertelement <1 x float> undef, float %231, i64 0, !dbg !12
  store <1 x float> %245, ptr addrspace(3) %33, align 4, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !12
  %246 = load float, ptr addrspace(3) %35, align 32, !dbg !12
  %247 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 1, !dbg !12
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !12
  %249 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 2, !dbg !12
  %250 = load float, ptr addrspace(3) %249, align 8, !dbg !12
  %251 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 3, !dbg !12
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !12
  %253 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 4, !dbg !12
  %254 = load float, ptr addrspace(3) %253, align 16, !dbg !12
  %255 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 5, !dbg !12
  %256 = load float, ptr addrspace(3) %255, align 4, !dbg !12
  %257 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 6, !dbg !12
  %258 = load float, ptr addrspace(3) %257, align 8, !dbg !12
  %259 = getelementptr inbounds <8 x float>, ptr addrspace(3) %35, i64 0, i64 7, !dbg !12
  %260 = load float, ptr addrspace(3) %259, align 4, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %261 = extractelement <8 x float> %215, i64 0, !dbg !37
  %262 = extractelement <8 x float> %215, i64 1, !dbg !37
  %263 = fsub float %262, %261, !dbg !37
  %264 = fadd float %246, %248, !dbg !41
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !42
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %264) #3, !dbg !43
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !44
  %268 = fmul float %263, %267, !dbg !45
  %269 = fadd float %261, %268, !dbg !46
  %270 = fadd float %216, %217, !dbg !47
  %271 = fmul float %263, %263, !dbg !48
  %272 = fmul float %271, %246, !dbg !49
  %273 = fmul float %272, %267, !dbg !50
  %274 = fadd float %270, %273, !dbg !51
  %275 = extractelement <8 x float> %215, i64 2, !dbg !37
  %276 = fsub float %275, %269, !dbg !37
  %277 = fadd float %250, %264, !dbg !41
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !42
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %277) #3, !dbg !43
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !44
  %281 = fmul float %280, %276, !dbg !45
  %282 = fadd float %269, %281, !dbg !46
  %283 = fadd float %218, %274, !dbg !47
  %284 = fmul float %276, %276, !dbg !48
  %285 = fmul float %264, %284, !dbg !49
  %286 = fmul float %280, %285, !dbg !50
  %287 = fadd float %283, %286, !dbg !51
  %288 = extractelement <8 x float> %215, i64 3, !dbg !37
  %289 = fsub float %288, %282, !dbg !37
  %290 = fadd float %252, %277, !dbg !41
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !42
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float %290) #3, !dbg !43
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !44
  %294 = fmul float %293, %289, !dbg !45
  %295 = fadd float %282, %294, !dbg !46
  %296 = fadd float %219, %287, !dbg !47
  %297 = fmul float %289, %289, !dbg !48
  %298 = fmul float %277, %297, !dbg !49
  %299 = fmul float %293, %298, !dbg !50
  %300 = fadd float %296, %299, !dbg !51
  %301 = extractelement <8 x float> %215, i64 4, !dbg !37
  %302 = fsub float %301, %295, !dbg !37
  %303 = fadd float %254, %290, !dbg !41
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !42
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %303) #3, !dbg !43
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !44
  %307 = fmul float %306, %302, !dbg !45
  %308 = fadd float %295, %307, !dbg !46
  %309 = fadd float %220, %300, !dbg !47
  %310 = fmul float %302, %302, !dbg !48
  %311 = fmul float %290, %310, !dbg !49
  %312 = fmul float %306, %311, !dbg !50
  %313 = fadd float %309, %312, !dbg !51
  %314 = extractelement <8 x float> %215, i64 5, !dbg !37
  %315 = fsub float %314, %308, !dbg !37
  %316 = fadd float %256, %303, !dbg !41
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !42
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %316) #3, !dbg !43
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !44
  %320 = fmul float %319, %315, !dbg !45
  %321 = fadd float %308, %320, !dbg !46
  %322 = fadd float %221, %313, !dbg !47
  %323 = fmul float %315, %315, !dbg !48
  %324 = fmul float %303, %323, !dbg !49
  %325 = fmul float %319, %324, !dbg !50
  %326 = fadd float %322, %325, !dbg !51
  %327 = extractelement <8 x float> %215, i64 6, !dbg !37
  %328 = fsub float %327, %321, !dbg !37
  %329 = fadd float %258, %316, !dbg !41
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !42
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %258, float %329) #3, !dbg !43
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !44
  %333 = fmul float %332, %328, !dbg !45
  %334 = fadd float %321, %333, !dbg !46
  %335 = fadd float %222, %326, !dbg !47
  %336 = fmul float %328, %328, !dbg !48
  %337 = fmul float %316, %336, !dbg !49
  %338 = fmul float %332, %337, !dbg !50
  %339 = fadd float %335, %338, !dbg !51
  %340 = extractelement <8 x float> %215, i64 7, !dbg !37
  %341 = fsub float %340, %334, !dbg !37
  %342 = fadd float %260, %329, !dbg !41
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !42
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float %342) #3, !dbg !43
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !44
  %346 = fmul float %345, %341, !dbg !45
  %347 = fadd float %334, %346, !dbg !46
  %348 = fadd float %223, %339, !dbg !47
  %349 = fmul float %341, %341, !dbg !48
  %350 = fmul float %329, %349, !dbg !49
  %351 = fmul float %345, %350, !dbg !50
  %352 = fadd float %348, %351, !dbg !51
  %353 = bitcast float %347 to i32, !dbg !35
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 16, i32 31), !dbg !35
  %355 = bitcast i32 %354 to float, !dbg !35
  %356 = bitcast float %352 to i32, !dbg !35
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 16, i32 31), !dbg !35
  %358 = bitcast i32 %357 to float, !dbg !35
  %359 = bitcast float %342 to i32, !dbg !35
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 16, i32 31), !dbg !35
  %361 = bitcast i32 %360 to float, !dbg !35
  %362 = fsub float %355, %347, !dbg !37
  %363 = fadd float %342, %361, !dbg !41
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !42
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #3, !dbg !43
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !44
  %367 = fmul float %366, %362, !dbg !45
  %368 = fadd float %347, %367, !dbg !46
  %369 = fadd float %352, %358, !dbg !47
  %370 = fmul float %362, %362, !dbg !48
  %371 = fmul float %342, %370, !dbg !49
  %372 = fmul float %366, %371, !dbg !50
  %373 = fadd float %369, %372, !dbg !51
  %374 = bitcast float %368 to i32, !dbg !35
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 8, i32 31), !dbg !35
  %376 = bitcast i32 %375 to float, !dbg !35
  %377 = bitcast float %373 to i32, !dbg !35
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 8, i32 31), !dbg !35
  %379 = bitcast i32 %378 to float, !dbg !35
  %380 = bitcast float %363 to i32, !dbg !35
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 8, i32 31), !dbg !35
  %382 = bitcast i32 %381 to float, !dbg !35
  %383 = fsub float %376, %368, !dbg !37
  %384 = fadd float %363, %382, !dbg !41
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !42
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %384) #3, !dbg !43
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !44
  %388 = fmul float %387, %383, !dbg !45
  %389 = fadd float %368, %388, !dbg !46
  %390 = fadd float %373, %379, !dbg !47
  %391 = fmul float %383, %383, !dbg !48
  %392 = fmul float %363, %391, !dbg !49
  %393 = fmul float %387, %392, !dbg !50
  %394 = fadd float %390, %393, !dbg !51
  %395 = bitcast float %389 to i32, !dbg !35
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 4, i32 31), !dbg !35
  %397 = bitcast i32 %396 to float, !dbg !35
  %398 = bitcast float %394 to i32, !dbg !35
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 4, i32 31), !dbg !35
  %400 = bitcast i32 %399 to float, !dbg !35
  %401 = bitcast float %384 to i32, !dbg !35
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 4, i32 31), !dbg !35
  %403 = bitcast i32 %402 to float, !dbg !35
  %404 = fsub float %397, %389, !dbg !37
  %405 = fadd float %384, %403, !dbg !41
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !42
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %405) #3, !dbg !43
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !44
  %409 = fmul float %408, %404, !dbg !45
  %410 = fadd float %389, %409, !dbg !46
  %411 = fadd float %394, %400, !dbg !47
  %412 = fmul float %404, %404, !dbg !48
  %413 = fmul float %384, %412, !dbg !49
  %414 = fmul float %408, %413, !dbg !50
  %415 = fadd float %411, %414, !dbg !51
  %416 = bitcast float %410 to i32, !dbg !35
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 2, i32 31), !dbg !35
  %418 = bitcast i32 %417 to float, !dbg !35
  %419 = bitcast float %415 to i32, !dbg !35
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !35
  %421 = bitcast i32 %420 to float, !dbg !35
  %422 = bitcast float %405 to i32, !dbg !35
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !35
  %424 = bitcast i32 %423 to float, !dbg !35
  %425 = fsub float %418, %410, !dbg !37
  %426 = fadd float %405, %424, !dbg !41
  %427 = fcmp oeq float %426, 0.000000e+00, !dbg !42
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %426) #3, !dbg !43
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !44
  %430 = fmul float %429, %425, !dbg !45
  %431 = fadd float %410, %430, !dbg !46
  %432 = fadd float %415, %421, !dbg !47
  %433 = fmul float %425, %425, !dbg !48
  %434 = fmul float %405, %433, !dbg !49
  %435 = fmul float %429, %434, !dbg !50
  %436 = fadd float %432, %435, !dbg !51
  %437 = bitcast float %431 to i32, !dbg !35
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 1, i32 31), !dbg !35
  %439 = bitcast i32 %438 to float, !dbg !35
  %440 = bitcast float %436 to i32, !dbg !35
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !35
  %442 = bitcast i32 %441 to float, !dbg !35
  %443 = bitcast float %426 to i32, !dbg !35
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !35
  %445 = bitcast i32 %444 to float, !dbg !35
  %446 = fsub float %439, %431, !dbg !37
  %447 = fadd float %426, %445, !dbg !41
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !42
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %445, float %447) #3, !dbg !43
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !44
  %451 = fmul float %450, %446, !dbg !45
  %452 = fadd float %431, %451, !dbg !46
  %453 = fadd float %436, %442, !dbg !47
  %454 = fmul float %446, %446, !dbg !48
  %455 = fmul float %426, %454, !dbg !49
  %456 = fmul float %450, %455, !dbg !50
  %457 = fadd float %453, %456, !dbg !51
  %458 = icmp eq i32 %237, 0, !dbg !35
  %459 = zext nneg i32 %236 to i64, !dbg !35
  %460 = getelementptr float, ptr addrspace(3) @global_smem, i64 %459, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, float %452, i1 %458) #3, !dbg !35
  %461 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %459, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, float %457, i1 %458) #3, !dbg !35
  %462 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %459, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, float %447, i1 %458) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %463 = icmp slt i32 %6, 8, !dbg !35
  %464 = sext i32 %6 to i64, !dbg !35
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i64 %464, !dbg !35
  %466 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %465, i1 %463) #3, !dbg !35
  %467 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %464, !dbg !35
  %468 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %467, i1 %463) #3, !dbg !35
  %469 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %464, !dbg !35
  %470 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %469, i1 %463) #3, !dbg !35
  %471 = bitcast float %466 to i32, !dbg !35
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 4, i32 31), !dbg !35
  %473 = bitcast i32 %472 to float, !dbg !35
  %474 = bitcast float %468 to i32, !dbg !35
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 4, i32 31), !dbg !35
  %476 = bitcast i32 %475 to float, !dbg !35
  %477 = bitcast float %470 to i32, !dbg !35
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 4, i32 31), !dbg !35
  %479 = bitcast i32 %478 to float, !dbg !35
  %480 = fsub float %473, %466, !dbg !37
  %481 = fadd float %470, %479, !dbg !41
  %482 = fcmp oeq float %481, 0.000000e+00, !dbg !42
  %483 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %479, float %481) #3, !dbg !43
  %484 = select i1 %482, float 0.000000e+00, float %483, !dbg !44
  %485 = fmul float %480, %484, !dbg !45
  %486 = fadd float %466, %485, !dbg !46
  %487 = fadd float %468, %476, !dbg !47
  %488 = fmul float %480, %480, !dbg !48
  %489 = fmul float %470, %488, !dbg !49
  %490 = fmul float %489, %484, !dbg !50
  %491 = fadd float %487, %490, !dbg !51
  %492 = bitcast float %486 to i32, !dbg !35
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 2, i32 31), !dbg !35
  %494 = bitcast i32 %493 to float, !dbg !35
  %495 = bitcast float %491 to i32, !dbg !35
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 2, i32 31), !dbg !35
  %497 = bitcast i32 %496 to float, !dbg !35
  %498 = bitcast float %481 to i32, !dbg !35
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 2, i32 31), !dbg !35
  %500 = bitcast i32 %499 to float, !dbg !35
  %501 = fsub float %494, %486, !dbg !37
  %502 = fadd float %481, %500, !dbg !41
  %503 = fcmp oeq float %502, 0.000000e+00, !dbg !42
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %500, float %502) #3, !dbg !43
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !44
  %506 = fmul float %501, %505, !dbg !45
  %507 = fadd float %486, %506, !dbg !46
  %508 = fadd float %491, %497, !dbg !47
  %509 = fmul float %501, %501, !dbg !48
  %510 = fmul float %481, %509, !dbg !49
  %511 = fmul float %505, %510, !dbg !50
  %512 = fadd float %508, %511, !dbg !51
  %513 = bitcast float %507 to i32, !dbg !35
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 1, i32 31), !dbg !35
  %515 = bitcast i32 %514 to float, !dbg !35
  %516 = bitcast float %512 to i32, !dbg !35
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 1, i32 31), !dbg !35
  %518 = bitcast i32 %517 to float, !dbg !35
  %519 = bitcast float %502 to i32, !dbg !35
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 1, i32 31), !dbg !35
  %521 = bitcast i32 %520 to float, !dbg !35
  %522 = fsub float %515, %507, !dbg !37
  %523 = fadd float %502, %521, !dbg !41
  %524 = fcmp oeq float %523, 0.000000e+00, !dbg !42
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %521, float %523) #3, !dbg !43
  %526 = select i1 %524, float 0.000000e+00, float %525, !dbg !44
  %527 = fmul float %522, %526, !dbg !45
  %528 = fadd float %507, %527, !dbg !46
  %529 = fadd float %512, %518, !dbg !47
  %530 = fmul float %522, %522, !dbg !48
  %531 = fmul float %502, %530, !dbg !49
  %532 = fmul float %526, %531, !dbg !50
  %533 = fadd float %529, %532, !dbg !51
  %534 = and i32 %6, 7, !dbg !35
  %535 = icmp eq i32 %534, 0, !dbg !35
  %536 = and i1 %463, %535, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, float %528, i1 %536) #3, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, float %533, i1 %536) #3, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, float %523, i1 %536) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %537 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !35
  %538 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %539 = insertelement <1 x float> undef, float %537, i64 0, !dbg !52
  store <1 x float> %539, ptr addrspace(3) @global_smem, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %540 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %541 = insertelement <1 x float> undef, float %538, i64 0, !dbg !53
  store <1 x float> %541, ptr addrspace(3) @global_smem, align 4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %542 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !53
  %543 = sext i32 %15 to i64, !dbg !54
  %544 = getelementptr float, ptr addrspace(1) %1, i64 %543, !dbg !54
  %545 = icmp eq i32 %urem, 0, !dbg !55
  %546 = and i1 %545, %16, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %540, ptr addrspace(1) %544, i1 %546) #3, !dbg !55
  %547 = getelementptr float, ptr addrspace(1) %2, i64 %543, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %542, ptr addrspace(1) %547, i1 %546) #3, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cblpdadv7pbfw2grld5ck2igdgqqlqqswsnfc7g2hk6mobgptk7x.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/bl")
!3 = !{ptr @triton__0d1d2d3de4e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3de4e, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3de4e", linkageName: "triton__0d1d2d3de4e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 33, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 35, column: 46, scope: !5)
!12 = !DILocation(line: 31, column: 36, scope: !5)
!13 = !DILocation(line: 32, column: 27, scope: !5)
!14 = !DILocation(line: 33, column: 25, scope: !5)
!15 = !DILocation(line: 35, column: 40, scope: !5)
!16 = !DILocation(line: 35, column: 34, scope: !5)
!17 = !DILocation(line: 35, column: 60, scope: !5)
!18 = !DILocation(line: 35, column: 52, scope: !5)
!19 = !DILocation(line: 35, column: 112, scope: !5)
!20 = !DILocation(line: 39, column: 62, scope: !5)
!21 = !DILocation(line: 105, column: 7, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !5, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!24 = !DILocation(line: 39, column: 51, scope: !22)
!25 = !DILocation(line: 110, column: 24, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 111, column: 30, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 112, column: 34, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 112, column: 26, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 113, column: 39, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 113, column: 31, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 113, column: 22, scope: !22, inlinedAt: !24)
!32 = !DILocation(line: 41, column: 60, scope: !5)
!33 = !DILocation(line: 42, column: 56, scope: !5)
!34 = !DILocation(line: 43, column: 64, scope: !5)
!35 = !DILocation(line: 131, column: 46, scope: !22, inlinedAt: !36)
!36 = !DILocation(line: 45, column: 41, scope: !22)
!37 = !DILocation(line: 119, column: 21, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!39 = !DILocation(line: 131, column: 46, scope: !38, inlinedAt: !40)
!40 = !DILocation(line: 45, column: 41, scope: !38)
!41 = !DILocation(line: 120, column: 28, scope: !38, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 39, scope: !38, inlinedAt: !39)
!43 = !DILocation(line: 121, column: 60, scope: !38, inlinedAt: !39)
!44 = !DILocation(line: 121, column: 49, scope: !38, inlinedAt: !39)
!45 = !DILocation(line: 123, column: 25, scope: !38, inlinedAt: !39)
!46 = !DILocation(line: 123, column: 17, scope: !38, inlinedAt: !39)
!47 = !DILocation(line: 124, column: 15, scope: !38, inlinedAt: !39)
!48 = !DILocation(line: 124, column: 30, scope: !38, inlinedAt: !39)
!49 = !DILocation(line: 124, column: 38, scope: !38, inlinedAt: !39)
!50 = !DILocation(line: 124, column: 49, scope: !38, inlinedAt: !39)
!51 = !DILocation(line: 124, column: 22, scope: !38, inlinedAt: !39)
!52 = !DILocation(line: 47, column: 20, scope: !5)
!53 = !DILocation(line: 48, column: 20, scope: !5)
!54 = !DILocation(line: 50, column: 25, scope: !5)
!55 = !DILocation(line: 50, column: 36, scope: !5)
!56 = !DILocation(line: 51, column: 25, scope: !5)
!57 = !DILocation(line: 51, column: 36, scope: !5)
!58 = !DILocation(line: 51, column: 4, scope: !5)
