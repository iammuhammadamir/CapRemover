; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d89de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = and i32 %11, 31, !dbg !10
  %13 = lshr i32 %11, 5, !dbg !10
  %14 = and i32 %13, 7, !dbg !10
  %urem = shl i32 %11, 2, !dbg !10
  %15 = and i32 %urem, 1020, !dbg !10
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %17 = icmp slt i32 %16, %8, !dbg !12
  %18 = icmp ult i32 %15, 640, !dbg !13
  %19 = srem i32 %16, 22, !dbg !14
  %20 = mul i32 %16, 640, !dbg !15
  %21 = add i32 %20, %15, !dbg !16
  %22 = sext i32 %21 to i64, !dbg !17
  %23 = getelementptr half, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = and i1 %18, %17, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !19
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %extelt.offset = lshr i32 %26, 16, !dbg !19
  %extelt.offset1 = lshr i32 %27, 16, !dbg !19
  %28 = zext nneg i32 %15 to i64, !dbg !20
  %29 = getelementptr half, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #6, !dbg !21
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %extelt.offset2 = lshr i32 %31, 16, !dbg !21
  %extelt.offset3 = lshr i32 %32, 16, !dbg !21
  %33 = getelementptr half, ptr addrspace(1) %2, i64 %22, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !23
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %extelt.offset4 = lshr i32 %35, 16, !dbg !23
  %extelt.offset5 = lshr i32 %36, 16, !dbg !23
  %37 = getelementptr half, ptr addrspace(1) %3, i64 %28, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #6, !dbg !25
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %extelt.offset6 = lshr i32 %39, 16, !dbg !25
  %extelt.offset7 = lshr i32 %40, 16, !dbg !25
  %41 = getelementptr half, ptr addrspace(1) %4, i64 %28, !dbg !26
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #6, !dbg !27
  %43 = getelementptr half, ptr addrspace(1) %5, i64 %28, !dbg !28
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #6, !dbg !29
  %45 = mul nsw i32 %19, 640, !dbg !30
  %46 = add nsw i32 %45, %15, !dbg !31
  %47 = sext i32 %46 to i64, !dbg !32
  %48 = getelementptr half, ptr addrspace(1) %6, i64 %47, !dbg !32
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !33
  %50 = icmp eq i32 %12, 0, !dbg !34
  %51 = zext nneg i32 %14 to i64, !dbg !34
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !34
  %53 = icmp slt i32 %11, 8, !dbg !34
  %54 = sext i32 %11 to i64, !dbg !34
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !34
  %56 = and i32 %11, 7, !dbg !34
  %57 = icmp eq i32 %56, 0, !dbg !34
  %58 = and i1 %53, %57, !dbg !34
  %59 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %60 = insertelement <2 x i32> %59, i32 %extelt.offset1, i64 1, !dbg !19
  %61 = trunc <2 x i32> %60 to <2 x i16>, !dbg !19
  %62 = bitcast <2 x i16> %61 to <2 x half>, !dbg !19
  %63 = fpext <2 x half> %62 to <2 x float>, !dbg !38
  %64 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !21
  %65 = insertelement <2 x i32> %64, i32 %extelt.offset3, i64 1, !dbg !21
  %66 = trunc <2 x i32> %65 to <2 x i16>, !dbg !21
  %67 = bitcast <2 x i16> %66 to <2 x half>, !dbg !21
  %68 = fpext <2 x half> %67 to <2 x float>, !dbg !39
  %69 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !23
  %70 = insertelement <2 x i32> %69, i32 %extelt.offset5, i64 1, !dbg !23
  %71 = trunc <2 x i32> %70 to <2 x i16>, !dbg !23
  %72 = bitcast <2 x i16> %71 to <2 x half>, !dbg !23
  %73 = fpext <2 x half> %72 to <2 x float>, !dbg !40
  %74 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !25
  %75 = insertelement <2 x i32> %74, i32 %extelt.offset7, i64 1, !dbg !25
  %76 = trunc <2 x i32> %75 to <2 x i16>, !dbg !25
  %77 = bitcast <2 x i16> %76 to <2 x half>, !dbg !25
  %78 = fpext <2 x half> %77 to <2 x float>, !dbg !41
  %79 = fadd <2 x float> %63, %68, !dbg !42
  %80 = fadd <2 x float> %73, %78, !dbg !43
  %81 = fadd <2 x float> %79, %80, !dbg !44
  %82 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %83 = insertelement <2 x i32> %82, i32 %extelt.offset, i64 1, !dbg !19
  %84 = trunc <2 x i32> %83 to <2 x i16>, !dbg !19
  %85 = bitcast <2 x i16> %84 to <2 x half>, !dbg !19
  %86 = fpext <2 x half> %85 to <2 x float>, !dbg !38
  %87 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !21
  %88 = insertelement <2 x i32> %87, i32 %extelt.offset2, i64 1, !dbg !21
  %89 = trunc <2 x i32> %88 to <2 x i16>, !dbg !21
  %90 = bitcast <2 x i16> %89 to <2 x half>, !dbg !21
  %91 = fpext <2 x half> %90 to <2 x float>, !dbg !39
  %92 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %93 = insertelement <2 x i32> %92, i32 %extelt.offset4, i64 1, !dbg !23
  %94 = trunc <2 x i32> %93 to <2 x i16>, !dbg !23
  %95 = bitcast <2 x i16> %94 to <2 x half>, !dbg !23
  %96 = fpext <2 x half> %95 to <2 x float>, !dbg !40
  %97 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !25
  %98 = insertelement <2 x i32> %97, i32 %extelt.offset6, i64 1, !dbg !25
  %99 = trunc <2 x i32> %98 to <2 x i16>, !dbg !25
  %100 = bitcast <2 x i16> %99 to <2 x half>, !dbg !25
  %101 = fpext <2 x half> %100 to <2 x float>, !dbg !41
  %102 = fadd <2 x float> %86, %91, !dbg !42
  %103 = fadd <2 x float> %96, %101, !dbg !43
  %104 = fadd <2 x float> %102, %103, !dbg !44
  %shift = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %105 = fadd <2 x float> %104, %shift, !dbg !45
  %106 = fadd <2 x float> %81, %105, !dbg !45
  %shift14 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %107 = fadd <2 x float> %shift14, %106, !dbg !45
  %108 = extractelement <2 x float> %107, i64 0, !dbg !45
  %109 = select i1 %24, float %108, float 0.000000e+00, !dbg !45
  %110 = bitcast float %109 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %109, %112, !dbg !45
  %114 = bitcast float %113 to i32, !dbg !34
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = fadd float %113, %116, !dbg !45
  %118 = bitcast float %117 to i32, !dbg !34
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = fadd float %117, %120, !dbg !45
  %122 = bitcast float %121 to i32, !dbg !34
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !34
  %124 = bitcast i32 %123 to float, !dbg !34
  %125 = fadd float %121, %124, !dbg !45
  %126 = bitcast float %125 to i32, !dbg !34
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !34
  %128 = bitcast i32 %127 to float, !dbg !34
  %129 = fadd float %125, %128, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, float %129, i1 %50) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %130 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #6, !dbg !34
  %131 = bitcast float %130 to i32, !dbg !34
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = fadd float %130, %133, !dbg !45
  %135 = bitcast float %134 to i32, !dbg !34
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !34
  %137 = bitcast i32 %136 to float, !dbg !34
  %138 = fadd float %134, %137, !dbg !45
  %139 = bitcast float %138 to i32, !dbg !34
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = fadd float %138, %141, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, float %142, i1 %58) #6, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %143 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !34
  %144 = fadd float %143, 0.000000e+00, !dbg !49
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 6.400000e+02) #6, !dbg !53
  %146 = insertelement <2 x float> poison, float %145, i64 0, !dbg !54
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %148 = fsub <2 x float> %104, %147, !dbg !54
  %149 = fsub <2 x float> %81, %147, !dbg !54
  %150 = fmul <2 x float> %148, %148, !dbg !55
  %151 = fmul <2 x float> %149, %149, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %shift15 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %152 = fadd <2 x float> %150, %shift15, !dbg !58
  %153 = fadd <2 x float> %151, %152, !dbg !58
  %shift16 = shufflevector <2 x float> %151, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %154 = fadd <2 x float> %shift16, %153, !dbg !58
  %155 = extractelement <2 x float> %154, i64 0, !dbg !58
  %156 = select i1 %24, float %155, float 0.000000e+00, !dbg !58
  %157 = bitcast float %156 to i32, !dbg !56
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 16, i32 31), !dbg !56
  %159 = bitcast i32 %158 to float, !dbg !56
  %160 = fadd float %156, %159, !dbg !58
  %161 = bitcast float %160 to i32, !dbg !56
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !56
  %163 = bitcast i32 %162 to float, !dbg !56
  %164 = fadd float %160, %163, !dbg !58
  %165 = bitcast float %164 to i32, !dbg !56
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !56
  %167 = bitcast i32 %166 to float, !dbg !56
  %168 = fadd float %164, %167, !dbg !58
  %169 = bitcast float %168 to i32, !dbg !56
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !56
  %171 = bitcast i32 %170 to float, !dbg !56
  %172 = fadd float %168, %171, !dbg !58
  %173 = bitcast float %172 to i32, !dbg !56
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !56
  %175 = bitcast i32 %174 to float, !dbg !56
  %176 = fadd float %172, %175, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, float %176, i1 %50) #6, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %177 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #6, !dbg !56
  %178 = bitcast float %177 to i32, !dbg !56
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 4, i32 31), !dbg !56
  %180 = bitcast i32 %179 to float, !dbg !56
  %181 = fadd float %177, %180, !dbg !58
  %182 = bitcast float %181 to i32, !dbg !56
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !56
  %184 = bitcast i32 %183 to float, !dbg !56
  %185 = fadd float %181, %184, !dbg !58
  %186 = bitcast float %185 to i32, !dbg !56
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !56
  %188 = bitcast i32 %187 to float, !dbg !56
  %189 = fadd float %185, %188, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, float %189, i1 %58) #6, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %190 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !56
  %191 = fadd float %190, 0.000000e+00, !dbg !61
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float 6.400000e+02) #6, !dbg !63
  %193 = fadd float %192, 0x3EE4F8B580000000, !dbg !64
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !65
  %.not.i = icmp eq i32 %194, 0, !dbg !65
  br i1 %.not.i, label %197, label %195, !dbg !65

195:                                              ; preds = %10
  %196 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

197:                                              ; preds = %10
  %198 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

__nv_rsqrtf.exit:                                 ; preds = %195, %197
  %.0.i = phi float [ %196, %195 ], [ %198, %197 ], !dbg !65
  %199 = extractvalue { i32, i32 } %49, 1, !dbg !33
  %extelt.offset13 = lshr i32 %199, 16, !dbg !33
  %200 = extractvalue { i32, i32 } %49, 0, !dbg !33
  %extelt.offset12 = lshr i32 %200, 16, !dbg !33
  %201 = extractvalue { i32, i32 } %44, 1, !dbg !29
  %extelt.offset11 = lshr i32 %201, 16, !dbg !29
  %202 = extractvalue { i32, i32 } %44, 0, !dbg !29
  %extelt.offset10 = lshr i32 %202, 16, !dbg !29
  %203 = extractvalue { i32, i32 } %42, 1, !dbg !27
  %extelt.offset9 = lshr i32 %203, 16, !dbg !27
  %204 = extractvalue { i32, i32 } %42, 0, !dbg !27
  %extelt.offset8 = lshr i32 %204, 16, !dbg !27
  %205 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !66
  %206 = shufflevector <2 x float> %205, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !66
  %207 = fmul <2 x float> %148, %206, !dbg !66
  %208 = fmul <2 x float> %149, %206, !dbg !66
  %209 = getelementptr half, ptr addrspace(1) %7, i64 %22, !dbg !67
  %210 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !33
  %211 = insertelement <2 x i32> %210, i32 %extelt.offset12, i64 1, !dbg !33
  %212 = trunc <2 x i32> %211 to <2 x i16>, !dbg !33
  %213 = bitcast <2 x i16> %212 to <2 x half>, !dbg !33
  %214 = fpext <2 x half> %213 to <2 x float>, !dbg !68
  %215 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !29
  %216 = insertelement <2 x i32> %215, i32 %extelt.offset10, i64 1, !dbg !29
  %217 = trunc <2 x i32> %216 to <2 x i16>, !dbg !29
  %218 = bitcast <2 x i16> %217 to <2 x half>, !dbg !29
  %219 = fpext <2 x half> %218 to <2 x float>, !dbg !69
  %220 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !27
  %221 = insertelement <2 x i32> %220, i32 %extelt.offset8, i64 1, !dbg !27
  %222 = trunc <2 x i32> %221 to <2 x i16>, !dbg !27
  %223 = bitcast <2 x i16> %222 to <2 x half>, !dbg !27
  %224 = fpext <2 x half> %223 to <2 x float>, !dbg !70
  %225 = fmul <2 x float> %207, %224, !dbg !71
  %226 = fadd <2 x float> %225, %219, !dbg !72
  %227 = fadd <2 x float> %226, %214, !dbg !73
  %228 = fptrunc <2 x float> %227 to <2 x half>, !dbg !74
  %229 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !33
  %230 = insertelement <2 x i32> %229, i32 %extelt.offset13, i64 1, !dbg !33
  %231 = trunc <2 x i32> %230 to <2 x i16>, !dbg !33
  %232 = bitcast <2 x i16> %231 to <2 x half>, !dbg !33
  %233 = fpext <2 x half> %232 to <2 x float>, !dbg !68
  %234 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !29
  %235 = insertelement <2 x i32> %234, i32 %extelt.offset11, i64 1, !dbg !29
  %236 = trunc <2 x i32> %235 to <2 x i16>, !dbg !29
  %237 = bitcast <2 x i16> %236 to <2 x half>, !dbg !29
  %238 = fpext <2 x half> %237 to <2 x float>, !dbg !69
  %239 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !27
  %240 = insertelement <2 x i32> %239, i32 %extelt.offset9, i64 1, !dbg !27
  %241 = trunc <2 x i32> %240 to <2 x i16>, !dbg !27
  %242 = bitcast <2 x i16> %241 to <2 x half>, !dbg !27
  %243 = fpext <2 x half> %242 to <2 x float>, !dbg !70
  %244 = fmul <2 x float> %208, %243, !dbg !71
  %245 = fadd <2 x float> %244, %238, !dbg !72
  %246 = fadd <2 x float> %245, %233, !dbg !73
  %247 = fptrunc <2 x float> %246 to <2 x half>, !dbg !74
  %248 = bitcast <2 x half> %228 to i32, !dbg !74
  %249 = bitcast <2 x half> %247 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %248, i32 %249, ptr addrspace(1) %209, i1 %24) #6, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c3stchpxlwgvyradkxzw3jd4wieyquy4if4lwijlsrscrannlw6a.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/3s")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d89de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89de", linkageName: "triton__0d1d2d3d4d5d6d7d89de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 24, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 21, scope: !7)
!13 = !DILocation(line: 29, column: 21, scope: !7)
!14 = !DILocation(line: 32, column: 18, scope: !7)
!15 = !DILocation(line: 33, column: 40, scope: !7)
!16 = !DILocation(line: 33, column: 36, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 54, scope: !7)
!19 = !DILocation(line: 33, column: 46, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 46, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 41, scope: !7)
!31 = !DILocation(line: 39, column: 37, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 47, scope: !7)
!34 = !DILocation(line: 243, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!37 = !DILocation(line: 50, column: 59, scope: !35)
!38 = !DILocation(line: 33, column: 75, scope: !7)
!39 = !DILocation(line: 34, column: 86, scope: !7)
!40 = !DILocation(line: 35, column: 75, scope: !7)
!41 = !DILocation(line: 36, column: 86, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 233, column: 15, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!47 = !DILocation(line: 243, column: 36, scope: !46, inlinedAt: !48)
!48 = !DILocation(line: 50, column: 59, scope: !46)
!49 = !DILocation(line: 17, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!52 = !DILocation(line: 50, column: 45, scope: !50)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 243, column: 36, scope: !35, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 59, scope: !35)
!58 = !DILocation(line: 233, column: 15, scope: !46, inlinedAt: !59)
!59 = !DILocation(line: 243, column: 36, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 59, scope: !46)
!61 = !DILocation(line: 17, column: 15, scope: !50, inlinedAt: !62)
!62 = !DILocation(line: 58, column: 45, scope: !50)
!63 = !DILocation(line: 61, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 28, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 25, scope: !7)
!68 = !DILocation(line: 39, column: 106, scope: !7)
!69 = !DILocation(line: 38, column: 87, scope: !7)
!70 = !DILocation(line: 37, column: 87, scope: !7)
!71 = !DILocation(line: 67, column: 20, scope: !7)
!72 = !DILocation(line: 69, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 48, scope: !7)
!75 = !DILocation(line: 72, column: 4, scope: !7)
