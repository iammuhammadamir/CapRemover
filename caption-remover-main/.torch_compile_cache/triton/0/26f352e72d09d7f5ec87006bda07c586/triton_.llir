; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = shl i32 %8, 2, !dbg !8
  %10 = and i32 %9, 508, !dbg !8
  %11 = or i32 %10, 1, !dbg !8
  %12 = or i32 %10, 2, !dbg !8
  %13 = or i32 %10, 3, !dbg !8
  %14 = or i32 %10, 513, !dbg !8
  %15 = or i32 %10, 514, !dbg !8
  %16 = or i32 %10, 515, !dbg !8
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !9
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #1, !dbg !10
  %19 = add i32 %18, 1, !dbg !11
  %20 = mul i32 %19, %17, !dbg !12
  %21 = icmp slt i32 %20, 7040, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %23 = shl i32 %22, 10, !dbg !15
  %24 = or i32 %23, %10, !dbg !16
  %25 = or i32 %23, %11, !dbg !16
  %26 = or i32 %23, %12, !dbg !16
  %27 = or i32 %23, %13, !dbg !16
  %28 = or i32 %24, 512, !dbg !16
  %29 = or i32 %23, %14, !dbg !16
  %30 = or i32 %23, %15, !dbg !16
  %31 = or i32 %23, %16, !dbg !16
  %32 = icmp slt i32 %24, 2700, !dbg !17
  %33 = icmp slt i32 %28, 2700, !dbg !17
  %.frozen = freeze i32 %20
  %34 = sdiv i32 %.frozen, 320, !dbg !18
  %35 = mul i32 %34, 320
  %.decomposed = sub i32 %.frozen, %35
  %36 = mul i32 %20, 2700, !dbg !19
  %37 = add i32 %24, %36, !dbg !20
  %38 = add i32 %36, %28, !dbg !20
  %39 = sext i32 %37 to i64, !dbg !21
  %40 = getelementptr half, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %38 to i64, !dbg !21
  %42 = getelementptr half, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = and i1 %21, %32, !dbg !22
  %44 = and i1 %33, %21, !dbg !22
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #1, !dbg !23
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !23
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !23
  %extelt.offset = lshr i32 %46, 16, !dbg !23
  %extelt.offset1 = lshr i32 %47, 16, !dbg !23
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #1, !dbg !23
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !23
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !23
  %extelt.offset2 = lshr i32 %49, 16, !dbg !23
  %extelt.offset3 = lshr i32 %50, 16, !dbg !23
  %51 = mul i32 %24, 320, !dbg !24
  %52 = mul i32 %25, 320, !dbg !24
  %53 = mul i32 %26, 320, !dbg !24
  %54 = mul i32 %27, 320, !dbg !24
  %55 = mul i32 %28, 320, !dbg !24
  %56 = mul i32 %29, 320, !dbg !24
  %57 = mul i32 %30, 320, !dbg !24
  %58 = mul i32 %31, 320, !dbg !24
  %59 = mul i32 %34, 864000, !dbg !25
  %60 = add i32 %59, %.decomposed, !dbg !26
  %61 = add i32 %60, %51, !dbg !27
  %62 = add i32 %60, %52, !dbg !27
  %63 = add i32 %60, %53, !dbg !27
  %64 = add i32 %60, %54, !dbg !27
  %65 = add i32 %60, %55, !dbg !27
  %66 = add i32 %60, %56, !dbg !27
  %67 = add i32 %60, %57, !dbg !27
  %68 = add i32 %60, %58, !dbg !27
  %69 = sext i32 %61 to i64, !dbg !28
  %70 = getelementptr half, ptr addrspace(1) %1, i64 %69, !dbg !28
  %71 = sext i32 %62 to i64, !dbg !28
  %72 = getelementptr half, ptr addrspace(1) %1, i64 %71, !dbg !28
  %73 = sext i32 %63 to i64, !dbg !28
  %74 = getelementptr half, ptr addrspace(1) %1, i64 %73, !dbg !28
  %75 = sext i32 %64 to i64, !dbg !28
  %76 = getelementptr half, ptr addrspace(1) %1, i64 %75, !dbg !28
  %77 = sext i32 %65 to i64, !dbg !28
  %78 = getelementptr half, ptr addrspace(1) %1, i64 %77, !dbg !28
  %79 = sext i32 %66 to i64, !dbg !28
  %80 = getelementptr half, ptr addrspace(1) %1, i64 %79, !dbg !28
  %81 = sext i32 %67 to i64, !dbg !28
  %82 = getelementptr half, ptr addrspace(1) %1, i64 %81, !dbg !28
  %83 = sext i32 %68 to i64, !dbg !28
  %84 = getelementptr half, ptr addrspace(1) %1, i64 %83, !dbg !28
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %70, i1 %43) #1, !dbg !29
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %43) #1, !dbg !29
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %43) #1, !dbg !29
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %76, i1 %43) #1, !dbg !29
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %44) #1, !dbg !29
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %80, i1 %44) #1, !dbg !29
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %82, i1 %44) #1, !dbg !29
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %84, i1 %44) #1, !dbg !29
  %93 = sext i32 %.decomposed to i64, !dbg !30
  %94 = getelementptr half, ptr addrspace(1) %2, i64 %93, !dbg !30
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !31
  %96 = bitcast i16 %95 to half, !dbg !31
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !31
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !31
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !31
  %100 = fpext half %96 to float, !dbg !32
  %101 = getelementptr half, ptr addrspace(1) %3, i64 %69, !dbg !33
  %102 = getelementptr half, ptr addrspace(1) %3, i64 %71, !dbg !33
  %103 = getelementptr half, ptr addrspace(1) %3, i64 %73, !dbg !33
  %104 = getelementptr half, ptr addrspace(1) %3, i64 %75, !dbg !33
  %105 = getelementptr half, ptr addrspace(1) %3, i64 %77, !dbg !33
  %106 = getelementptr half, ptr addrspace(1) %3, i64 %79, !dbg !33
  %107 = getelementptr half, ptr addrspace(1) %3, i64 %81, !dbg !33
  %108 = getelementptr half, ptr addrspace(1) %3, i64 %83, !dbg !33
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %101, i1 %43) #1, !dbg !34
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %102, i1 %43) #1, !dbg !34
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %103, i1 %43) #1, !dbg !34
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %104, i1 %43) #1, !dbg !34
  %113 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %105, i1 %44) #1, !dbg !34
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %106, i1 %44) #1, !dbg !34
  %115 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %107, i1 %44) #1, !dbg !34
  %116 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %108, i1 %44) #1, !dbg !34
  %117 = getelementptr half, ptr addrspace(1) %4, i64 %39, !dbg !35
  %118 = getelementptr half, ptr addrspace(1) %4, i64 %41, !dbg !35
  %119 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !23
  %120 = insertelement <2 x i32> %119, i32 %extelt.offset, i64 1, !dbg !23
  %121 = trunc <2 x i32> %120 to <2 x i16>, !dbg !23
  %122 = bitcast <2 x i16> %121 to <2 x half>, !dbg !23
  %123 = fpext <2 x half> %122 to <2 x float>, !dbg !36
  %124 = insertelement <2 x i16> poison, i16 %85, i64 0, !dbg !29
  %125 = insertelement <2 x i16> %124, i16 %86, i64 1, !dbg !29
  %126 = bitcast <2 x i16> %125 to <2 x half>, !dbg !29
  %127 = fpext <2 x half> %126 to <2 x float>, !dbg !37
  %128 = insertelement <2 x i16> poison, i16 %109, i64 0, !dbg !34
  %129 = insertelement <2 x i16> %128, i16 %110, i64 1, !dbg !34
  %130 = bitcast <2 x i16> %129 to <2 x half>, !dbg !34
  %131 = fpext <2 x half> %130 to <2 x float>, !dbg !38
  %132 = insertelement <2 x float> poison, float %100, i64 0, !dbg !39
  %133 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !39
  %134 = fadd <2 x float> %133, %127, !dbg !39
  %135 = fmul <2 x float> %131, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %136 = fadd <2 x float> %134, %135, !dbg !41
  %137 = fadd <2 x float> %136, %123, !dbg !42
  %138 = fptrunc <2 x float> %137 to <2 x half>, !dbg !43
  %139 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !23
  %140 = insertelement <2 x i32> %139, i32 %extelt.offset1, i64 1, !dbg !23
  %141 = trunc <2 x i32> %140 to <2 x i16>, !dbg !23
  %142 = bitcast <2 x i16> %141 to <2 x half>, !dbg !23
  %143 = fpext <2 x half> %142 to <2 x float>, !dbg !36
  %144 = insertelement <2 x i16> poison, i16 %87, i64 0, !dbg !29
  %145 = insertelement <2 x i16> %144, i16 %88, i64 1, !dbg !29
  %146 = bitcast <2 x i16> %145 to <2 x half>, !dbg !29
  %147 = fpext <2 x half> %146 to <2 x float>, !dbg !37
  %148 = insertelement <2 x i16> poison, i16 %111, i64 0, !dbg !34
  %149 = insertelement <2 x i16> %148, i16 %112, i64 1, !dbg !34
  %150 = bitcast <2 x i16> %149 to <2 x half>, !dbg !34
  %151 = fpext <2 x half> %150 to <2 x float>, !dbg !38
  %152 = fadd <2 x float> %133, %147, !dbg !39
  %153 = fmul <2 x float> %151, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %154 = fadd <2 x float> %152, %153, !dbg !41
  %155 = fadd <2 x float> %154, %143, !dbg !42
  %156 = fptrunc <2 x float> %155 to <2 x half>, !dbg !43
  %157 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !23
  %158 = insertelement <2 x i32> %157, i32 %extelt.offset2, i64 1, !dbg !23
  %159 = trunc <2 x i32> %158 to <2 x i16>, !dbg !23
  %160 = bitcast <2 x i16> %159 to <2 x half>, !dbg !23
  %161 = fpext <2 x half> %160 to <2 x float>, !dbg !36
  %162 = insertelement <2 x i16> poison, i16 %89, i64 0, !dbg !29
  %163 = insertelement <2 x i16> %162, i16 %90, i64 1, !dbg !29
  %164 = bitcast <2 x i16> %163 to <2 x half>, !dbg !29
  %165 = fpext <2 x half> %164 to <2 x float>, !dbg !37
  %166 = insertelement <2 x i16> poison, i16 %113, i64 0, !dbg !34
  %167 = insertelement <2 x i16> %166, i16 %114, i64 1, !dbg !34
  %168 = bitcast <2 x i16> %167 to <2 x half>, !dbg !34
  %169 = fpext <2 x half> %168 to <2 x float>, !dbg !38
  %170 = fadd <2 x float> %133, %165, !dbg !39
  %171 = fmul <2 x float> %169, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %172 = fadd <2 x float> %170, %171, !dbg !41
  %173 = fadd <2 x float> %172, %161, !dbg !42
  %174 = fptrunc <2 x float> %173 to <2 x half>, !dbg !43
  %175 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !23
  %176 = insertelement <2 x i32> %175, i32 %extelt.offset3, i64 1, !dbg !23
  %177 = trunc <2 x i32> %176 to <2 x i16>, !dbg !23
  %178 = bitcast <2 x i16> %177 to <2 x half>, !dbg !23
  %179 = fpext <2 x half> %178 to <2 x float>, !dbg !36
  %180 = insertelement <2 x i16> poison, i16 %91, i64 0, !dbg !29
  %181 = insertelement <2 x i16> %180, i16 %92, i64 1, !dbg !29
  %182 = bitcast <2 x i16> %181 to <2 x half>, !dbg !29
  %183 = fpext <2 x half> %182 to <2 x float>, !dbg !37
  %184 = insertelement <2 x i16> poison, i16 %115, i64 0, !dbg !34
  %185 = insertelement <2 x i16> %184, i16 %116, i64 1, !dbg !34
  %186 = bitcast <2 x i16> %185 to <2 x half>, !dbg !34
  %187 = fpext <2 x half> %186 to <2 x float>, !dbg !38
  %188 = fadd <2 x float> %133, %183, !dbg !39
  %189 = fmul <2 x float> %187, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %190 = fadd <2 x float> %188, %189, !dbg !41
  %191 = fadd <2 x float> %190, %179, !dbg !42
  %192 = fptrunc <2 x float> %191 to <2 x half>, !dbg !43
  %193 = bitcast <2 x half> %138 to i32, !dbg !43
  %194 = bitcast <2 x half> %156 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %193, i32 %194, ptr addrspace(1) %117, i1 %43) #1, !dbg !43
  %195 = bitcast <2 x half> %174 to i32, !dbg !43
  %196 = bitcast <2 x half> %192 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %195, i32 %196, ptr addrspace(1) %118, i1 %44) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvk77foil2cmgtxf3tky32mtvmynvcpxcyxs7fk4towlrhqtdrni.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/vk")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 27, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 25, column: 21, scope: !5)
!14 = !DILocation(line: 26, column: 28, scope: !5)
!15 = !DILocation(line: 26, column: 33, scope: !5)
!16 = !DILocation(line: 27, column: 23, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 32, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 41, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 30, scope: !5)
!22 = !DILocation(line: 33, column: 55, scope: !5)
!23 = !DILocation(line: 33, column: 47, scope: !5)
!24 = !DILocation(line: 34, column: 40, scope: !5)
!25 = !DILocation(line: 34, column: 54, scope: !5)
!26 = !DILocation(line: 34, column: 36, scope: !5)
!27 = !DILocation(line: 34, column: 47, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 34, column: 60, scope: !5)
!30 = !DILocation(line: 35, column: 30, scope: !5)
!31 = !DILocation(line: 35, column: 35, scope: !5)
!32 = !DILocation(line: 35, column: 75, scope: !5)
!33 = !DILocation(line: 36, column: 30, scope: !5)
!34 = !DILocation(line: 36, column: 60, scope: !5)
!35 = !DILocation(line: 44, column: 25, scope: !5)
!36 = !DILocation(line: 33, column: 95, scope: !5)
!37 = !DILocation(line: 34, column: 108, scope: !5)
!38 = !DILocation(line: 36, column: 108, scope: !5)
!39 = !DILocation(line: 37, column: 18, scope: !5)
!40 = !DILocation(line: 39, column: 18, scope: !5)
!41 = !DILocation(line: 40, column: 18, scope: !5)
!42 = !DILocation(line: 41, column: 18, scope: !5)
!43 = !DILocation(line: 44, column: 49, scope: !5)
!44 = !DILocation(line: 44, column: 4, scope: !5)
