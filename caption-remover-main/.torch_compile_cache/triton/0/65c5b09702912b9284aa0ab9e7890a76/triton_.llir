; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 127, !dbg !8
  %10 = shl nuw nsw i32 %9, 3, !dbg !8
  %11 = or i32 %9, 128, !dbg !8
  %12 = or i32 %9, 256, !dbg !8
  %13 = or i32 %9, 384, !dbg !8
  %14 = or i32 %9, 512, !dbg !8
  %15 = or i32 %9, 640, !dbg !8
  %16 = or i32 %9, 768, !dbg !8
  %17 = or i32 %9, 896, !dbg !8
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %20 = add i32 %19, 1, !dbg !11
  %21 = shl i32 %18, 10, !dbg !12
  %22 = mul i32 %21, %20, !dbg !13
  %23 = or i32 %22, %10, !dbg !14
  %24 = or i32 %22, %9, !dbg !14
  %25 = or i32 %22, %11, !dbg !14
  %26 = or i32 %22, %12, !dbg !14
  %27 = or i32 %22, %13, !dbg !14
  %28 = or i32 %22, %14, !dbg !14
  %29 = or i32 %22, %15, !dbg !14
  %30 = or i32 %22, %16, !dbg !14
  %31 = or i32 %22, %17, !dbg !14
  %32 = icmp slt i32 %23, 7040, !dbg !15
  %33 = icmp slt i32 %24, 7040, !dbg !15
  %34 = icmp slt i32 %25, 7040, !dbg !15
  %35 = icmp slt i32 %26, 7040, !dbg !15
  %36 = icmp slt i32 %27, 7040, !dbg !15
  %37 = icmp slt i32 %28, 7040, !dbg !15
  %38 = icmp slt i32 %29, 7040, !dbg !15
  %39 = icmp slt i32 %30, 7040, !dbg !15
  %40 = icmp slt i32 %31, 7040, !dbg !15
  %41 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !16
  %42 = icmp slt i32 %41, 2700, !dbg !17
  %.frozen = freeze i32 %23
  %43 = sdiv i32 %.frozen, 320, !dbg !18
  %44 = mul i32 %43, 320
  %.decomposed = sub i32 %.frozen, %44
  %45 = mul i32 %41, 320, !dbg !19
  %46 = add i32 %.decomposed, %45, !dbg !20
  %47 = mul i32 %43, 864000, !dbg !21
  %48 = add i32 %46, %47, !dbg !22
  %49 = sext i32 %48 to i64, !dbg !23
  %50 = getelementptr half, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = and i1 %42, %32, !dbg !24
  %52 = and i1 %42, %33, !dbg !24
  %53 = and i1 %42, %34, !dbg !24
  %54 = and i1 %42, %35, !dbg !24
  %55 = and i1 %42, %36, !dbg !24
  %56 = and i1 %42, %37, !dbg !24
  %57 = and i1 %42, %38, !dbg !24
  %58 = and i1 %42, %39, !dbg !24
  %59 = and i1 %42, %40, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %51) #2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = sext i32 %.decomposed to i64, !dbg !26
  %66 = getelementptr half, ptr addrspace(1) %1, i64 %65, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %32) #2, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !27
  %extelt.offset4 = lshr i32 %68, 16, !dbg !27
  %72 = trunc i32 %extelt.offset4 to i16, !dbg !27
  %73 = bitcast i16 %72 to half, !dbg !27
  %extelt.offset5 = lshr i32 %69, 16, !dbg !27
  %74 = trunc i32 %extelt.offset5 to i16, !dbg !27
  %75 = bitcast i16 %74 to half, !dbg !27
  %extelt.offset6 = lshr i32 %70, 16, !dbg !27
  %76 = trunc i32 %extelt.offset6 to i16, !dbg !27
  %77 = bitcast i16 %76 to half, !dbg !27
  %extelt.offset7 = lshr i32 %71, 16, !dbg !27
  %78 = trunc i32 %extelt.offset7 to i16, !dbg !27
  %79 = bitcast i16 %78 to half, !dbg !27
  %80 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !25
  %81 = insertelement <2 x i32> %80, i32 %68, i64 1, !dbg !25
  %82 = trunc <2 x i32> %81 to <2 x i16>, !dbg !25
  %83 = bitcast <2 x i16> %82 to <2 x half>, !dbg !25
  %84 = fpext <2 x half> %83 to <2 x float>, !dbg !28
  %85 = fpext half %73 to float, !dbg !29
  %86 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !25
  %87 = insertelement <2 x i32> %86, i32 %69, i64 1, !dbg !25
  %88 = trunc <2 x i32> %87 to <2 x i16>, !dbg !25
  %89 = bitcast <2 x i16> %88 to <2 x half>, !dbg !25
  %90 = fpext <2 x half> %89 to <2 x float>, !dbg !28
  %91 = fpext half %75 to float, !dbg !29
  %92 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !25
  %93 = insertelement <2 x i32> %92, i32 %70, i64 1, !dbg !25
  %94 = trunc <2 x i32> %93 to <2 x i16>, !dbg !25
  %95 = bitcast <2 x i16> %94 to <2 x half>, !dbg !25
  %96 = fpext <2 x half> %95 to <2 x float>, !dbg !28
  %97 = fpext half %77 to float, !dbg !29
  %98 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !25
  %99 = insertelement <2 x i32> %98, i32 %71, i64 1, !dbg !25
  %100 = trunc <2 x i32> %99 to <2 x i16>, !dbg !25
  %101 = bitcast <2 x i16> %100 to <2 x half>, !dbg !25
  %102 = fpext <2 x half> %101 to <2 x float>, !dbg !28
  %103 = fpext half %79 to float, !dbg !29
  %104 = getelementptr half, ptr addrspace(1) %2, i64 %49, !dbg !30
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %51) #2, !dbg !31
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !31
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !31
  %110 = trunc i32 %106 to i16, !dbg !31
  %111 = bitcast i16 %110 to half, !dbg !31
  %112 = trunc i32 %107 to i16, !dbg !31
  %113 = bitcast i16 %112 to half, !dbg !31
  %114 = trunc i32 %108 to i16, !dbg !31
  %115 = bitcast i16 %114 to half, !dbg !31
  %116 = trunc i32 %109 to i16, !dbg !31
  %117 = bitcast i16 %116 to half, !dbg !31
  %118 = fpext half %111 to float, !dbg !32
  %119 = fpext half %113 to float, !dbg !32
  %120 = fpext half %115 to float, !dbg !32
  %121 = fpext half %117 to float, !dbg !32
  %122 = mul i32 %24, 2700, !dbg !33
  %123 = mul i32 %25, 2700, !dbg !33
  %124 = mul i32 %26, 2700, !dbg !33
  %125 = mul i32 %27, 2700, !dbg !33
  %126 = mul i32 %28, 2700, !dbg !33
  %127 = mul i32 %29, 2700, !dbg !33
  %128 = mul i32 %30, 2700, !dbg !33
  %129 = mul i32 %31, 2700, !dbg !33
  %130 = add i32 %122, %41, !dbg !34
  %131 = add i32 %123, %41, !dbg !34
  %132 = add i32 %124, %41, !dbg !34
  %133 = add i32 %125, %41, !dbg !34
  %134 = add i32 %126, %41, !dbg !34
  %135 = add i32 %127, %41, !dbg !34
  %136 = add i32 %128, %41, !dbg !34
  %137 = add i32 %129, %41, !dbg !34
  %138 = sext i32 %130 to i64, !dbg !35
  %139 = getelementptr half, ptr addrspace(1) %3, i64 %138, !dbg !35
  %140 = sext i32 %131 to i64, !dbg !35
  %141 = getelementptr half, ptr addrspace(1) %3, i64 %140, !dbg !35
  %142 = sext i32 %132 to i64, !dbg !35
  %143 = getelementptr half, ptr addrspace(1) %3, i64 %142, !dbg !35
  %144 = sext i32 %133 to i64, !dbg !35
  %145 = getelementptr half, ptr addrspace(1) %3, i64 %144, !dbg !35
  %146 = sext i32 %134 to i64, !dbg !35
  %147 = getelementptr half, ptr addrspace(1) %3, i64 %146, !dbg !35
  %148 = sext i32 %135 to i64, !dbg !35
  %149 = getelementptr half, ptr addrspace(1) %3, i64 %148, !dbg !35
  %150 = sext i32 %136 to i64, !dbg !35
  %151 = getelementptr half, ptr addrspace(1) %3, i64 %150, !dbg !35
  %152 = sext i32 %137 to i64, !dbg !35
  %153 = getelementptr half, ptr addrspace(1) %3, i64 %152, !dbg !35
  %154 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %139, i1 %52) #2, !dbg !36
  %155 = bitcast i16 %154 to half, !dbg !36
  %156 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %141, i1 %53) #2, !dbg !36
  %157 = bitcast i16 %156 to half, !dbg !36
  %158 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %143, i1 %54) #2, !dbg !36
  %159 = bitcast i16 %158 to half, !dbg !36
  %160 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %145, i1 %55) #2, !dbg !36
  %161 = bitcast i16 %160 to half, !dbg !36
  %162 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %147, i1 %56) #2, !dbg !36
  %163 = bitcast i16 %162 to half, !dbg !36
  %164 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %149, i1 %57) #2, !dbg !36
  %165 = bitcast i16 %164 to half, !dbg !36
  %166 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %151, i1 %58) #2, !dbg !36
  %167 = bitcast i16 %166 to half, !dbg !36
  %168 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %153, i1 %59) #2, !dbg !36
  %169 = bitcast i16 %168 to half, !dbg !36
  %170 = fpext half %155 to float, !dbg !37
  %171 = fpext half %157 to float, !dbg !37
  %172 = fpext half %159 to float, !dbg !37
  %173 = fpext half %161 to float, !dbg !37
  %174 = fpext half %163 to float, !dbg !37
  %175 = fpext half %165 to float, !dbg !37
  %176 = fpext half %167 to float, !dbg !37
  %177 = fpext half %169 to float, !dbg !37
  %shift = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %178 = fadd <2 x float> %shift, %84, !dbg !38
  %179 = extractelement <2 x float> %178, i64 0, !dbg !38
  %shift12 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %180 = fadd <2 x float> %shift12, %90, !dbg !38
  %181 = extractelement <2 x float> %180, i64 0, !dbg !38
  %shift13 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %182 = fadd <2 x float> %shift13, %96, !dbg !38
  %183 = extractelement <2 x float> %182, i64 0, !dbg !38
  %shift14 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %184 = fadd <2 x float> %shift14, %102, !dbg !38
  %185 = extractelement <2 x float> %184, i64 0, !dbg !38
  %186 = fmul float %118, 1.250000e-01, !dbg !39
  %187 = insertelement <2 x i32> %80, i32 %106, i64 1, !dbg !25
  %188 = lshr <2 x i32> %187, <i32 16, i32 16>, !dbg !25
  %189 = trunc <2 x i32> %188 to <2 x i16>, !dbg !25
  %190 = bitcast <2 x i16> %189 to <2 x half>, !dbg !25
  %191 = fpext <2 x half> %190 to <2 x float>, !dbg !28
  %192 = fmul float %119, 1.250000e-01, !dbg !39
  %193 = insertelement <2 x i32> %86, i32 %107, i64 1, !dbg !25
  %194 = lshr <2 x i32> %193, <i32 16, i32 16>, !dbg !25
  %195 = trunc <2 x i32> %194 to <2 x i16>, !dbg !25
  %196 = bitcast <2 x i16> %195 to <2 x half>, !dbg !25
  %197 = fpext <2 x half> %196 to <2 x float>, !dbg !28
  %198 = fmul float %120, 1.250000e-01, !dbg !39
  %199 = insertelement <2 x i32> %92, i32 %108, i64 1, !dbg !25
  %200 = lshr <2 x i32> %199, <i32 16, i32 16>, !dbg !25
  %201 = trunc <2 x i32> %200 to <2 x i16>, !dbg !25
  %202 = bitcast <2 x i16> %201 to <2 x half>, !dbg !25
  %203 = fpext <2 x half> %202 to <2 x float>, !dbg !28
  %204 = fmul float %121, 1.250000e-01, !dbg !39
  %205 = insertelement <2 x i32> %98, i32 %109, i64 1, !dbg !25
  %206 = lshr <2 x i32> %205, <i32 16, i32 16>, !dbg !25
  %207 = trunc <2 x i32> %206 to <2 x i16>, !dbg !25
  %208 = bitcast <2 x i16> %207 to <2 x half>, !dbg !25
  %209 = fpext <2 x half> %208 to <2 x float>, !dbg !28
  %210 = fadd float %179, %186, !dbg !40
  %211 = extractelement <2 x float> %191, i64 0, !dbg !40
  %212 = fadd float %211, %85, !dbg !40
  %213 = extractelement <2 x float> %191, i64 1, !dbg !40
  %214 = fmul float %213, 1.250000e-01, !dbg !40
  %215 = fadd float %212, %214, !dbg !40
  %216 = fadd float %181, %192, !dbg !40
  %217 = extractelement <2 x float> %197, i64 0, !dbg !40
  %218 = fadd float %217, %91, !dbg !40
  %219 = extractelement <2 x float> %197, i64 1, !dbg !40
  %220 = fmul float %219, 1.250000e-01, !dbg !40
  %221 = fadd float %218, %220, !dbg !40
  %222 = fadd float %183, %198, !dbg !40
  %223 = extractelement <2 x float> %203, i64 0, !dbg !40
  %224 = fadd float %223, %97, !dbg !40
  %225 = extractelement <2 x float> %203, i64 1, !dbg !40
  %226 = fmul float %225, 1.250000e-01, !dbg !40
  %227 = fadd float %224, %226, !dbg !40
  %228 = fadd float %185, %204, !dbg !40
  %229 = extractelement <2 x float> %209, i64 0, !dbg !40
  %230 = fadd float %229, %103, !dbg !40
  %231 = extractelement <2 x float> %209, i64 1, !dbg !40
  %232 = fmul float %231, 1.250000e-01, !dbg !40
  %233 = fadd float %230, %232, !dbg !40
  %234 = shl nuw nsw i32 %9, 4, !dbg !40
  %235 = zext nneg i32 %234 to i64, !dbg !40
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i64 %235, !dbg !40
  %237 = insertelement <1 x float> undef, float %210, i64 0, !dbg !40
  store <1 x float> %237, ptr addrspace(3) %236, align 4, !dbg !40
  %238 = or i32 %234, 2, !dbg !40
  %239 = zext nneg i32 %238 to i64, !dbg !40
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i64 %239, !dbg !40
  %241 = insertelement <1 x float> undef, float %215, i64 0, !dbg !40
  store <1 x float> %241, ptr addrspace(3) %240, align 4, !dbg !40
  %242 = or i32 %234, 4, !dbg !40
  %243 = zext nneg i32 %242 to i64, !dbg !40
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i64 %243, !dbg !40
  %245 = insertelement <1 x float> undef, float %216, i64 0, !dbg !40
  store <1 x float> %245, ptr addrspace(3) %244, align 4, !dbg !40
  %246 = or i32 %234, 6, !dbg !40
  %247 = zext nneg i32 %246 to i64, !dbg !40
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !40
  %249 = insertelement <1 x float> undef, float %221, i64 0, !dbg !40
  store <1 x float> %249, ptr addrspace(3) %248, align 4, !dbg !40
  %250 = or i32 %234, 8, !dbg !40
  %251 = zext nneg i32 %250 to i64, !dbg !40
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i64 %251, !dbg !40
  %253 = insertelement <1 x float> undef, float %222, i64 0, !dbg !40
  store <1 x float> %253, ptr addrspace(3) %252, align 4, !dbg !40
  %254 = or i32 %234, 10, !dbg !40
  %255 = zext nneg i32 %254 to i64, !dbg !40
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i64 %255, !dbg !40
  %257 = insertelement <1 x float> undef, float %227, i64 0, !dbg !40
  store <1 x float> %257, ptr addrspace(3) %256, align 4, !dbg !40
  %258 = or i32 %234, 12, !dbg !40
  %259 = zext nneg i32 %258 to i64, !dbg !40
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !40
  %261 = insertelement <1 x float> undef, float %228, i64 0, !dbg !40
  store <1 x float> %261, ptr addrspace(3) %260, align 4, !dbg !40
  %262 = or i32 %234, 14, !dbg !40
  %263 = zext nneg i32 %262 to i64, !dbg !40
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i64 %263, !dbg !40
  %265 = insertelement <1 x float> undef, float %233, i64 0, !dbg !40
  store <1 x float> %265, ptr addrspace(3) %264, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %266 = shl nuw nsw i32 %9, 1, !dbg !40
  %267 = zext nneg i32 %266 to i64, !dbg !40
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i64 %267, !dbg !40
  %269 = load float, ptr addrspace(3) %268, align 4, !dbg !40
  %270 = shl nuw nsw i32 %11, 1, !dbg !40
  %271 = zext nneg i32 %270 to i64, !dbg !40
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i64 %271, !dbg !40
  %273 = load float, ptr addrspace(3) %272, align 4, !dbg !40
  %274 = shl nuw nsw i32 %12, 1, !dbg !40
  %275 = zext nneg i32 %274 to i64, !dbg !40
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i64 %275, !dbg !40
  %277 = load float, ptr addrspace(3) %276, align 4, !dbg !40
  %278 = shl nuw nsw i32 %13, 1, !dbg !40
  %279 = zext nneg i32 %278 to i64, !dbg !40
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i64 %279, !dbg !40
  %281 = load float, ptr addrspace(3) %280, align 4, !dbg !40
  %282 = shl nuw nsw i32 %14, 1, !dbg !40
  %283 = zext nneg i32 %282 to i64, !dbg !40
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i64 %283, !dbg !40
  %285 = load float, ptr addrspace(3) %284, align 4, !dbg !40
  %286 = shl nuw nsw i32 %15, 1, !dbg !40
  %287 = zext nneg i32 %286 to i64, !dbg !40
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i64 %287, !dbg !40
  %289 = load float, ptr addrspace(3) %288, align 4, !dbg !40
  %290 = shl nuw nsw i32 %16, 1, !dbg !40
  %291 = zext nneg i32 %290 to i64, !dbg !40
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i64 %291, !dbg !40
  %293 = load float, ptr addrspace(3) %292, align 4, !dbg !40
  %294 = shl nuw nsw i32 %17, 1, !dbg !40
  %295 = zext nneg i32 %294 to i64, !dbg !40
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i64 %295, !dbg !40
  %297 = load float, ptr addrspace(3) %296, align 4, !dbg !40
  %298 = fadd float %269, %170, !dbg !41
  %299 = fadd float %273, %171, !dbg !41
  %300 = fadd float %277, %172, !dbg !41
  %301 = fadd float %281, %173, !dbg !41
  %302 = fadd float %285, %174, !dbg !41
  %303 = fadd float %289, %175, !dbg !41
  %304 = fadd float %293, %176, !dbg !41
  %305 = fadd float %297, %177, !dbg !41
  %306 = getelementptr half, ptr addrspace(1) %4, i64 %138, !dbg !42
  %307 = getelementptr half, ptr addrspace(1) %4, i64 %140, !dbg !42
  %308 = getelementptr half, ptr addrspace(1) %4, i64 %142, !dbg !42
  %309 = getelementptr half, ptr addrspace(1) %4, i64 %144, !dbg !42
  %310 = getelementptr half, ptr addrspace(1) %4, i64 %146, !dbg !42
  %311 = getelementptr half, ptr addrspace(1) %4, i64 %148, !dbg !42
  %312 = getelementptr half, ptr addrspace(1) %4, i64 %150, !dbg !42
  %313 = getelementptr half, ptr addrspace(1) %4, i64 %152, !dbg !42
  %314 = fptrunc float %298 to half, !dbg !43
  %315 = fptrunc float %299 to half, !dbg !43
  %316 = fptrunc float %300 to half, !dbg !43
  %317 = fptrunc float %301 to half, !dbg !43
  %318 = fptrunc float %302 to half, !dbg !43
  %319 = fptrunc float %303 to half, !dbg !43
  %320 = fptrunc float %304 to half, !dbg !43
  %321 = fptrunc float %305 to half, !dbg !43
  %322 = bitcast half %314 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %322, ptr addrspace(1) %306, i1 %52) #2, !dbg !43
  %323 = bitcast half %315 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %323, ptr addrspace(1) %307, i1 %53) #2, !dbg !43
  %324 = bitcast half %316 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %324, ptr addrspace(1) %308, i1 %54) #2, !dbg !43
  %325 = bitcast half %317 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %325, ptr addrspace(1) %309, i1 %55) #2, !dbg !43
  %326 = bitcast half %318 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %326, ptr addrspace(1) %310, i1 %56) #2, !dbg !43
  %327 = bitcast half %319 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %327, ptr addrspace(1) %311, i1 %57) #2, !dbg !43
  %328 = bitcast half %320 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %328, ptr addrspace(1) %312, i1 %58) #2, !dbg !43
  %329 = bitcast half %321 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %329, ptr addrspace(1) %313, i1 %59) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cuwudlitabc4tos2oztf6jaxh24gzbno753bi6gidux5mkpnwqqu.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/uw")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 23, column: 58, scope: !5)
!14 = !DILocation(line: 24, column: 23, scope: !5)
!15 = !DILocation(line: 25, column: 21, scope: !5)
!16 = !DILocation(line: 26, column: 28, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 31, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 40, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 54, scope: !5)
!22 = !DILocation(line: 33, column: 47, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 68, scope: !5)
!25 = !DILocation(line: 33, column: 60, scope: !5)
!26 = !DILocation(line: 34, column: 30, scope: !5)
!27 = !DILocation(line: 34, column: 35, scope: !5)
!28 = !DILocation(line: 33, column: 108, scope: !5)
!29 = !DILocation(line: 34, column: 75, scope: !5)
!30 = !DILocation(line: 35, column: 30, scope: !5)
!31 = !DILocation(line: 35, column: 60, scope: !5)
!32 = !DILocation(line: 35, column: 108, scope: !5)
!33 = !DILocation(line: 36, column: 41, scope: !5)
!34 = !DILocation(line: 36, column: 36, scope: !5)
!35 = !DILocation(line: 36, column: 30, scope: !5)
!36 = !DILocation(line: 36, column: 47, scope: !5)
!37 = !DILocation(line: 36, column: 95, scope: !5)
!38 = !DILocation(line: 37, column: 18, scope: !5)
!39 = !DILocation(line: 39, column: 18, scope: !5)
!40 = !DILocation(line: 40, column: 18, scope: !5)
!41 = !DILocation(line: 41, column: 18, scope: !5)
!42 = !DILocation(line: 42, column: 25, scope: !5)
!43 = !DILocation(line: 42, column: 48, scope: !5)
!44 = !DILocation(line: 42, column: 4, scope: !5)
