; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d89101112de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %15 = lshr i32 %14, 3, !dbg !8
  %16 = and i32 %15, 31, !dbg !8
  %17 = lshr i32 %14, 6, !dbg !8
  %18 = and i32 %17, 3, !dbg !8
  %19 = or i32 %18, 4, !dbg !8
  %20 = or i32 %18, 8, !dbg !8
  %21 = or i32 %18, 12, !dbg !8
  %22 = or i32 %18, 16, !dbg !8
  %23 = or i32 %18, 20, !dbg !8
  %24 = or i32 %18, 24, !dbg !8
  %25 = or i32 %18, 28, !dbg !8
  %26 = shl i32 %14, 3, !dbg !9
  %27 = and i32 %26, 56, !dbg !9
  %28 = and i32 %14, 63, !dbg !9
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %31 = add i32 %30, 1, !dbg !12
  %32 = shl i32 %29, 6, !dbg !13
  %33 = mul i32 %32, %31, !dbg !14
  %34 = or i32 %33, %16, !dbg !15
  %35 = or i32 %34, 32, !dbg !15
  %36 = or i32 %33, %18, !dbg !15
  %37 = or i32 %33, %19, !dbg !15
  %38 = or i32 %33, %20, !dbg !15
  %39 = or i32 %33, %21, !dbg !15
  %40 = or i32 %33, %22, !dbg !15
  %41 = or i32 %33, %23, !dbg !15
  %42 = or i32 %33, %24, !dbg !15
  %43 = or i32 %33, %25, !dbg !15
  %44 = or i32 %36, 32, !dbg !15
  %45 = or i32 %36, 36, !dbg !15
  %46 = or i32 %36, 40, !dbg !15
  %47 = or i32 %36, 44, !dbg !15
  %48 = or i32 %36, 48, !dbg !15
  %49 = or i32 %36, 52, !dbg !15
  %50 = or i32 %36, 56, !dbg !15
  %51 = or i32 %36, 60, !dbg !15
  %52 = icmp slt i32 %34, %11, !dbg !16
  %53 = icmp slt i32 %35, %11, !dbg !16
  %54 = icmp slt i32 %36, %11, !dbg !16
  %55 = icmp slt i32 %37, %11, !dbg !16
  %56 = icmp slt i32 %38, %11, !dbg !16
  %57 = icmp slt i32 %39, %11, !dbg !16
  %58 = icmp slt i32 %40, %11, !dbg !16
  %59 = icmp slt i32 %41, %11, !dbg !16
  %60 = icmp slt i32 %42, %11, !dbg !16
  %61 = icmp slt i32 %43, %11, !dbg !16
  %62 = icmp slt i32 %44, %11, !dbg !16
  %63 = icmp slt i32 %45, %11, !dbg !16
  %64 = icmp slt i32 %46, %11, !dbg !16
  %65 = icmp slt i32 %47, %11, !dbg !16
  %66 = icmp slt i32 %48, %11, !dbg !16
  %67 = icmp slt i32 %49, %11, !dbg !16
  %68 = icmp slt i32 %50, %11, !dbg !16
  %69 = icmp slt i32 %51, %11, !dbg !16
  %70 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %71 = shl i32 %70, 6, !dbg !18
  %72 = or i32 %71, %27, !dbg !19
  %73 = or i32 %71, %28, !dbg !19
  %74 = icmp slt i32 %72, 320, !dbg !20
  %75 = icmp slt i32 %73, 320, !dbg !20
  %.frozen = freeze i32 %36
  %.frozen48 = freeze i32 %8
  %76 = sdiv i32 %.frozen, %.frozen48, !dbg !21
  %77 = mul i32 %76, %.frozen48
  %.decomposed = sub i32 %.frozen, %77
  %.frozen49 = freeze i32 %37
  %.frozen50 = freeze i32 %8
  %78 = sdiv i32 %.frozen49, %.frozen50, !dbg !21
  %79 = mul i32 %78, %.frozen50
  %.decomposed51 = sub i32 %.frozen49, %79
  %.frozen52 = freeze i32 %38
  %.frozen53 = freeze i32 %8
  %80 = sdiv i32 %.frozen52, %.frozen53, !dbg !21
  %81 = mul i32 %80, %.frozen53
  %.decomposed54 = sub i32 %.frozen52, %81
  %.frozen55 = freeze i32 %39
  %.frozen56 = freeze i32 %8
  %82 = sdiv i32 %.frozen55, %.frozen56, !dbg !21
  %83 = mul i32 %82, %.frozen56
  %.decomposed57 = sub i32 %.frozen55, %83
  %.frozen58 = freeze i32 %40
  %.frozen59 = freeze i32 %8
  %84 = sdiv i32 %.frozen58, %.frozen59, !dbg !21
  %85 = mul i32 %84, %.frozen59
  %.decomposed60 = sub i32 %.frozen58, %85
  %.frozen61 = freeze i32 %41
  %.frozen62 = freeze i32 %8
  %86 = sdiv i32 %.frozen61, %.frozen62, !dbg !21
  %87 = mul i32 %86, %.frozen62
  %.decomposed63 = sub i32 %.frozen61, %87
  %.frozen64 = freeze i32 %42
  %.frozen65 = freeze i32 %8
  %88 = sdiv i32 %.frozen64, %.frozen65, !dbg !21
  %89 = mul i32 %88, %.frozen65
  %.decomposed66 = sub i32 %.frozen64, %89
  %.frozen67 = freeze i32 %43
  %.frozen68 = freeze i32 %8
  %90 = sdiv i32 %.frozen67, %.frozen68, !dbg !21
  %91 = mul i32 %90, %.frozen68
  %.decomposed69 = sub i32 %.frozen67, %91
  %.frozen70 = freeze i32 %44
  %.frozen71 = freeze i32 %8
  %92 = sdiv i32 %.frozen70, %.frozen71, !dbg !21
  %93 = mul i32 %92, %.frozen71
  %.decomposed72 = sub i32 %.frozen70, %93
  %.frozen73 = freeze i32 %45
  %.frozen74 = freeze i32 %8
  %94 = sdiv i32 %.frozen73, %.frozen74, !dbg !21
  %95 = mul i32 %94, %.frozen74
  %.decomposed75 = sub i32 %.frozen73, %95
  %.frozen76 = freeze i32 %46
  %.frozen77 = freeze i32 %8
  %96 = sdiv i32 %.frozen76, %.frozen77, !dbg !21
  %97 = mul i32 %96, %.frozen77
  %.decomposed78 = sub i32 %.frozen76, %97
  %.frozen79 = freeze i32 %47
  %.frozen80 = freeze i32 %8
  %98 = sdiv i32 %.frozen79, %.frozen80, !dbg !21
  %99 = mul i32 %98, %.frozen80
  %.decomposed81 = sub i32 %.frozen79, %99
  %.frozen82 = freeze i32 %48
  %.frozen83 = freeze i32 %8
  %100 = sdiv i32 %.frozen82, %.frozen83, !dbg !21
  %101 = mul i32 %100, %.frozen83
  %.decomposed84 = sub i32 %.frozen82, %101
  %.frozen85 = freeze i32 %49
  %.frozen86 = freeze i32 %8
  %102 = sdiv i32 %.frozen85, %.frozen86, !dbg !21
  %103 = mul i32 %102, %.frozen86
  %.decomposed87 = sub i32 %.frozen85, %103
  %.frozen88 = freeze i32 %50
  %.frozen89 = freeze i32 %8
  %104 = sdiv i32 %.frozen88, %.frozen89, !dbg !21
  %105 = mul i32 %104, %.frozen89
  %.decomposed90 = sub i32 %.frozen88, %105
  %.frozen91 = freeze i32 %51
  %.frozen92 = freeze i32 %8
  %106 = sdiv i32 %.frozen91, %.frozen92, !dbg !21
  %107 = mul i32 %106, %.frozen92
  %.decomposed93 = sub i32 %.frozen91, %107
  %108 = mul i32 %34, 320, !dbg !22
  %109 = mul i32 %35, 320, !dbg !22
  %110 = add i32 %108, %72, !dbg !23
  %111 = add i32 %109, %72, !dbg !23
  %112 = sext i32 %110 to i64, !dbg !24
  %113 = getelementptr half, ptr addrspace(1) %0, i64 %112, !dbg !24
  %114 = sext i32 %111 to i64, !dbg !24
  %115 = getelementptr half, ptr addrspace(1) %0, i64 %114, !dbg !24
  %116 = and i1 %74, %52, !dbg !25
  %117 = and i1 %74, %53, !dbg !25
  %118 = and i1 %75, %54, !dbg !25
  %119 = and i1 %75, %55, !dbg !25
  %120 = and i1 %75, %56, !dbg !25
  %121 = and i1 %75, %57, !dbg !25
  %122 = and i1 %75, %58, !dbg !25
  %123 = and i1 %75, %59, !dbg !25
  %124 = and i1 %75, %60, !dbg !25
  %125 = and i1 %75, %61, !dbg !25
  %126 = and i1 %75, %62, !dbg !25
  %127 = and i1 %75, %63, !dbg !25
  %128 = and i1 %75, %64, !dbg !25
  %129 = and i1 %75, %65, !dbg !25
  %130 = and i1 %75, %66, !dbg !25
  %131 = and i1 %75, %67, !dbg !25
  %132 = and i1 %75, %68, !dbg !25
  %133 = and i1 %75, %69, !dbg !25
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %116) #2, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !26
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !26
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %117) #2, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !26
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !26
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !26
  %144 = sext i32 %72 to i64, !dbg !27
  %145 = getelementptr half, ptr addrspace(1) %1, i64 %144, !dbg !27
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %74) #2, !dbg !28
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !28
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !28
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !28
  %151 = getelementptr half, ptr addrspace(1) %2, i64 %112, !dbg !29
  %152 = getelementptr half, ptr addrspace(1) %2, i64 %114, !dbg !29
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %116) #2, !dbg !30
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !30
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !30
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %117) #2, !dbg !30
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !30
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !30
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !30
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !30
  %163 = getelementptr half, ptr addrspace(1) %3, i64 %112, !dbg !31
  %164 = getelementptr half, ptr addrspace(1) %3, i64 %114, !dbg !31
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %116) #2, !dbg !32
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !32
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !32
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !32
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %117) #2, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !32
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !32
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !32
  %175 = getelementptr half, ptr addrspace(1) %4, i64 %144, !dbg !33
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %74) #2, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !34
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !34
  %181 = getelementptr half, ptr addrspace(1) %5, i64 %112, !dbg !35
  %182 = getelementptr half, ptr addrspace(1) %5, i64 %114, !dbg !35
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %116) #2, !dbg !36
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !36
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %117) #2, !dbg !36
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !36
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !36
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !36
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !36
  %193 = getelementptr half, ptr addrspace(1) %6, i64 %112, !dbg !37
  %194 = getelementptr half, ptr addrspace(1) %6, i64 %114, !dbg !37
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %193, i1 %116) #2, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !38
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !38
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !38
  %200 = trunc i32 %196 to i16, !dbg !38
  %201 = bitcast i16 %200 to half, !dbg !38
  %extelt.offset40 = lshr i32 %196, 16, !dbg !38
  %202 = trunc i32 %extelt.offset40 to i16, !dbg !38
  %203 = bitcast i16 %202 to half, !dbg !38
  %204 = trunc i32 %197 to i16, !dbg !38
  %205 = bitcast i16 %204 to half, !dbg !38
  %extelt.offset41 = lshr i32 %197, 16, !dbg !38
  %206 = trunc i32 %extelt.offset41 to i16, !dbg !38
  %207 = bitcast i16 %206 to half, !dbg !38
  %208 = trunc i32 %198 to i16, !dbg !38
  %209 = bitcast i16 %208 to half, !dbg !38
  %extelt.offset42 = lshr i32 %198, 16, !dbg !38
  %210 = trunc i32 %extelt.offset42 to i16, !dbg !38
  %211 = bitcast i16 %210 to half, !dbg !38
  %212 = trunc i32 %199 to i16, !dbg !38
  %213 = bitcast i16 %212 to half, !dbg !38
  %extelt.offset43 = lshr i32 %199, 16, !dbg !38
  %214 = trunc i32 %extelt.offset43 to i16, !dbg !38
  %215 = bitcast i16 %214 to half, !dbg !38
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 %117) #2, !dbg !38
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !38
  %218 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !38
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !38
  %220 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !38
  %221 = trunc i32 %217 to i16, !dbg !38
  %222 = bitcast i16 %221 to half, !dbg !38
  %extelt.offset44 = lshr i32 %217, 16, !dbg !38
  %223 = trunc i32 %extelt.offset44 to i16, !dbg !38
  %224 = bitcast i16 %223 to half, !dbg !38
  %225 = trunc i32 %218 to i16, !dbg !38
  %226 = bitcast i16 %225 to half, !dbg !38
  %extelt.offset45 = lshr i32 %218, 16, !dbg !38
  %227 = trunc i32 %extelt.offset45 to i16, !dbg !38
  %228 = bitcast i16 %227 to half, !dbg !38
  %229 = trunc i32 %219 to i16, !dbg !38
  %230 = bitcast i16 %229 to half, !dbg !38
  %extelt.offset46 = lshr i32 %219, 16, !dbg !38
  %231 = trunc i32 %extelt.offset46 to i16, !dbg !38
  %232 = bitcast i16 %231 to half, !dbg !38
  %233 = trunc i32 %220 to i16, !dbg !38
  %234 = bitcast i16 %233 to half, !dbg !38
  %extelt.offset47 = lshr i32 %220, 16, !dbg !38
  %235 = trunc i32 %extelt.offset47 to i16, !dbg !38
  %236 = bitcast i16 %235 to half, !dbg !38
  %237 = fpext half %201 to float, !dbg !39
  %238 = fpext half %203 to float, !dbg !39
  %239 = fpext half %205 to float, !dbg !39
  %240 = fpext half %207 to float, !dbg !39
  %241 = fpext half %209 to float, !dbg !39
  %242 = fpext half %211 to float, !dbg !39
  %243 = fpext half %213 to float, !dbg !39
  %244 = fpext half %215 to float, !dbg !39
  %245 = fpext half %222 to float, !dbg !39
  %246 = fpext half %224 to float, !dbg !39
  %247 = fpext half %226 to float, !dbg !39
  %248 = fpext half %228 to float, !dbg !39
  %249 = fpext half %230 to float, !dbg !39
  %250 = fpext half %232 to float, !dbg !39
  %251 = fpext half %234 to float, !dbg !39
  %252 = fpext half %236 to float, !dbg !39
  %253 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !26
  %254 = insertelement <2 x i32> %253, i32 %166, i64 1, !dbg !26
  %255 = trunc <2 x i32> %254 to <2 x i16>, !dbg !26
  %256 = bitcast <2 x i16> %255 to <2 x half>, !dbg !26
  %257 = fpext <2 x half> %256 to <2 x float>, !dbg !40
  %258 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !28
  %259 = insertelement <2 x i32> %258, i32 %177, i64 1, !dbg !28
  %260 = trunc <2 x i32> %259 to <2 x i16>, !dbg !28
  %261 = bitcast <2 x i16> %260 to <2 x half>, !dbg !28
  %262 = fpext <2 x half> %261 to <2 x float>, !dbg !41
  %263 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !30
  %264 = insertelement <2 x i32> %263, i32 %184, i64 1, !dbg !30
  %265 = trunc <2 x i32> %264 to <2 x i16>, !dbg !30
  %266 = bitcast <2 x i16> %265 to <2 x half>, !dbg !30
  %267 = fpext <2 x half> %266 to <2 x float>, !dbg !42
  %268 = fadd <2 x float> %257, %262, !dbg !43
  %269 = fmul <2 x float> %267, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %270 = fadd <2 x float> %268, %269, !dbg !45
  %271 = lshr <2 x i32> %254, <i32 16, i32 16>, !dbg !26
  %272 = trunc <2 x i32> %271 to <2 x i16>, !dbg !26
  %273 = bitcast <2 x i16> %272 to <2 x half>, !dbg !26
  %274 = fpext <2 x half> %273 to <2 x float>, !dbg !40
  %275 = lshr <2 x i32> %259, <i32 16, i32 16>, !dbg !28
  %276 = trunc <2 x i32> %275 to <2 x i16>, !dbg !28
  %277 = bitcast <2 x i16> %276 to <2 x half>, !dbg !28
  %278 = fpext <2 x half> %277 to <2 x float>, !dbg !41
  %279 = lshr <2 x i32> %264, <i32 16, i32 16>, !dbg !30
  %280 = trunc <2 x i32> %279 to <2 x i16>, !dbg !30
  %281 = bitcast <2 x i16> %280 to <2 x half>, !dbg !30
  %282 = fpext <2 x half> %281 to <2 x float>, !dbg !42
  %283 = fadd <2 x float> %274, %278, !dbg !43
  %284 = fmul <2 x float> %282, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %285 = fadd <2 x float> %283, %284, !dbg !45
  %286 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !26
  %287 = insertelement <2 x i32> %286, i32 %167, i64 1, !dbg !26
  %288 = trunc <2 x i32> %287 to <2 x i16>, !dbg !26
  %289 = bitcast <2 x i16> %288 to <2 x half>, !dbg !26
  %290 = fpext <2 x half> %289 to <2 x float>, !dbg !40
  %291 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !28
  %292 = insertelement <2 x i32> %291, i32 %178, i64 1, !dbg !28
  %293 = trunc <2 x i32> %292 to <2 x i16>, !dbg !28
  %294 = bitcast <2 x i16> %293 to <2 x half>, !dbg !28
  %295 = fpext <2 x half> %294 to <2 x float>, !dbg !41
  %296 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !30
  %297 = insertelement <2 x i32> %296, i32 %185, i64 1, !dbg !30
  %298 = trunc <2 x i32> %297 to <2 x i16>, !dbg !30
  %299 = bitcast <2 x i16> %298 to <2 x half>, !dbg !30
  %300 = fpext <2 x half> %299 to <2 x float>, !dbg !42
  %301 = fadd <2 x float> %290, %295, !dbg !43
  %302 = fmul <2 x float> %300, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %303 = fadd <2 x float> %301, %302, !dbg !45
  %304 = lshr <2 x i32> %287, <i32 16, i32 16>, !dbg !26
  %305 = trunc <2 x i32> %304 to <2 x i16>, !dbg !26
  %306 = bitcast <2 x i16> %305 to <2 x half>, !dbg !26
  %307 = fpext <2 x half> %306 to <2 x float>, !dbg !40
  %308 = lshr <2 x i32> %292, <i32 16, i32 16>, !dbg !28
  %309 = trunc <2 x i32> %308 to <2 x i16>, !dbg !28
  %310 = bitcast <2 x i16> %309 to <2 x half>, !dbg !28
  %311 = fpext <2 x half> %310 to <2 x float>, !dbg !41
  %312 = lshr <2 x i32> %297, <i32 16, i32 16>, !dbg !30
  %313 = trunc <2 x i32> %312 to <2 x i16>, !dbg !30
  %314 = bitcast <2 x i16> %313 to <2 x half>, !dbg !30
  %315 = fpext <2 x half> %314 to <2 x float>, !dbg !42
  %316 = fadd <2 x float> %307, %311, !dbg !43
  %317 = fmul <2 x float> %315, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %318 = fadd <2 x float> %316, %317, !dbg !45
  %319 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !26
  %320 = insertelement <2 x i32> %319, i32 %168, i64 1, !dbg !26
  %321 = trunc <2 x i32> %320 to <2 x i16>, !dbg !26
  %322 = bitcast <2 x i16> %321 to <2 x half>, !dbg !26
  %323 = fpext <2 x half> %322 to <2 x float>, !dbg !40
  %324 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !28
  %325 = insertelement <2 x i32> %324, i32 %179, i64 1, !dbg !28
  %326 = trunc <2 x i32> %325 to <2 x i16>, !dbg !28
  %327 = bitcast <2 x i16> %326 to <2 x half>, !dbg !28
  %328 = fpext <2 x half> %327 to <2 x float>, !dbg !41
  %329 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !30
  %330 = insertelement <2 x i32> %329, i32 %186, i64 1, !dbg !30
  %331 = trunc <2 x i32> %330 to <2 x i16>, !dbg !30
  %332 = bitcast <2 x i16> %331 to <2 x half>, !dbg !30
  %333 = fpext <2 x half> %332 to <2 x float>, !dbg !42
  %334 = fadd <2 x float> %323, %328, !dbg !43
  %335 = fmul <2 x float> %333, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %336 = fadd <2 x float> %334, %335, !dbg !45
  %337 = lshr <2 x i32> %320, <i32 16, i32 16>, !dbg !26
  %338 = trunc <2 x i32> %337 to <2 x i16>, !dbg !26
  %339 = bitcast <2 x i16> %338 to <2 x half>, !dbg !26
  %340 = fpext <2 x half> %339 to <2 x float>, !dbg !40
  %341 = lshr <2 x i32> %325, <i32 16, i32 16>, !dbg !28
  %342 = trunc <2 x i32> %341 to <2 x i16>, !dbg !28
  %343 = bitcast <2 x i16> %342 to <2 x half>, !dbg !28
  %344 = fpext <2 x half> %343 to <2 x float>, !dbg !41
  %345 = lshr <2 x i32> %330, <i32 16, i32 16>, !dbg !30
  %346 = trunc <2 x i32> %345 to <2 x i16>, !dbg !30
  %347 = bitcast <2 x i16> %346 to <2 x half>, !dbg !30
  %348 = fpext <2 x half> %347 to <2 x float>, !dbg !42
  %349 = fadd <2 x float> %340, %344, !dbg !43
  %350 = fmul <2 x float> %348, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %351 = fadd <2 x float> %349, %350, !dbg !45
  %352 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !26
  %353 = insertelement <2 x i32> %352, i32 %169, i64 1, !dbg !26
  %354 = trunc <2 x i32> %353 to <2 x i16>, !dbg !26
  %355 = bitcast <2 x i16> %354 to <2 x half>, !dbg !26
  %356 = fpext <2 x half> %355 to <2 x float>, !dbg !40
  %357 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !28
  %358 = insertelement <2 x i32> %357, i32 %180, i64 1, !dbg !28
  %359 = trunc <2 x i32> %358 to <2 x i16>, !dbg !28
  %360 = bitcast <2 x i16> %359 to <2 x half>, !dbg !28
  %361 = fpext <2 x half> %360 to <2 x float>, !dbg !41
  %362 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !30
  %363 = insertelement <2 x i32> %362, i32 %187, i64 1, !dbg !30
  %364 = trunc <2 x i32> %363 to <2 x i16>, !dbg !30
  %365 = bitcast <2 x i16> %364 to <2 x half>, !dbg !30
  %366 = fpext <2 x half> %365 to <2 x float>, !dbg !42
  %367 = fadd <2 x float> %356, %361, !dbg !43
  %368 = fmul <2 x float> %366, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %369 = fadd <2 x float> %367, %368, !dbg !45
  %370 = lshr <2 x i32> %353, <i32 16, i32 16>, !dbg !26
  %371 = trunc <2 x i32> %370 to <2 x i16>, !dbg !26
  %372 = bitcast <2 x i16> %371 to <2 x half>, !dbg !26
  %373 = fpext <2 x half> %372 to <2 x float>, !dbg !40
  %374 = lshr <2 x i32> %358, <i32 16, i32 16>, !dbg !28
  %375 = trunc <2 x i32> %374 to <2 x i16>, !dbg !28
  %376 = bitcast <2 x i16> %375 to <2 x half>, !dbg !28
  %377 = fpext <2 x half> %376 to <2 x float>, !dbg !41
  %378 = lshr <2 x i32> %363, <i32 16, i32 16>, !dbg !30
  %379 = trunc <2 x i32> %378 to <2 x i16>, !dbg !30
  %380 = bitcast <2 x i16> %379 to <2 x half>, !dbg !30
  %381 = fpext <2 x half> %380 to <2 x float>, !dbg !42
  %382 = fadd <2 x float> %373, %377, !dbg !43
  %383 = fmul <2 x float> %381, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %384 = fadd <2 x float> %382, %383, !dbg !45
  %385 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !26
  %386 = insertelement <2 x i32> %385, i32 %171, i64 1, !dbg !26
  %387 = trunc <2 x i32> %386 to <2 x i16>, !dbg !26
  %388 = bitcast <2 x i16> %387 to <2 x half>, !dbg !26
  %389 = fpext <2 x half> %388 to <2 x float>, !dbg !40
  %390 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !30
  %391 = insertelement <2 x i32> %390, i32 %189, i64 1, !dbg !30
  %392 = trunc <2 x i32> %391 to <2 x i16>, !dbg !30
  %393 = bitcast <2 x i16> %392 to <2 x half>, !dbg !30
  %394 = fpext <2 x half> %393 to <2 x float>, !dbg !42
  %395 = fmul <2 x float> %394, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %396 = fadd <2 x float> %389, %262, !dbg !43
  %397 = fadd <2 x float> %396, %395, !dbg !45
  %398 = lshr <2 x i32> %386, <i32 16, i32 16>, !dbg !26
  %399 = trunc <2 x i32> %398 to <2 x i16>, !dbg !26
  %400 = bitcast <2 x i16> %399 to <2 x half>, !dbg !26
  %401 = fpext <2 x half> %400 to <2 x float>, !dbg !40
  %402 = lshr <2 x i32> %391, <i32 16, i32 16>, !dbg !30
  %403 = trunc <2 x i32> %402 to <2 x i16>, !dbg !30
  %404 = bitcast <2 x i16> %403 to <2 x half>, !dbg !30
  %405 = fpext <2 x half> %404 to <2 x float>, !dbg !42
  %406 = fmul <2 x float> %405, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %407 = fadd <2 x float> %401, %278, !dbg !43
  %408 = fadd <2 x float> %407, %406, !dbg !45
  %409 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !26
  %410 = insertelement <2 x i32> %409, i32 %172, i64 1, !dbg !26
  %411 = trunc <2 x i32> %410 to <2 x i16>, !dbg !26
  %412 = bitcast <2 x i16> %411 to <2 x half>, !dbg !26
  %413 = fpext <2 x half> %412 to <2 x float>, !dbg !40
  %414 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !30
  %415 = insertelement <2 x i32> %414, i32 %190, i64 1, !dbg !30
  %416 = trunc <2 x i32> %415 to <2 x i16>, !dbg !30
  %417 = bitcast <2 x i16> %416 to <2 x half>, !dbg !30
  %418 = fpext <2 x half> %417 to <2 x float>, !dbg !42
  %419 = fmul <2 x float> %418, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %420 = fadd <2 x float> %413, %295, !dbg !43
  %421 = fadd <2 x float> %420, %419, !dbg !45
  %422 = lshr <2 x i32> %410, <i32 16, i32 16>, !dbg !26
  %423 = trunc <2 x i32> %422 to <2 x i16>, !dbg !26
  %424 = bitcast <2 x i16> %423 to <2 x half>, !dbg !26
  %425 = fpext <2 x half> %424 to <2 x float>, !dbg !40
  %426 = lshr <2 x i32> %415, <i32 16, i32 16>, !dbg !30
  %427 = trunc <2 x i32> %426 to <2 x i16>, !dbg !30
  %428 = bitcast <2 x i16> %427 to <2 x half>, !dbg !30
  %429 = fpext <2 x half> %428 to <2 x float>, !dbg !42
  %430 = fmul <2 x float> %429, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %431 = fadd <2 x float> %425, %311, !dbg !43
  %432 = fadd <2 x float> %431, %430, !dbg !45
  %433 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !26
  %434 = insertelement <2 x i32> %433, i32 %173, i64 1, !dbg !26
  %435 = trunc <2 x i32> %434 to <2 x i16>, !dbg !26
  %436 = bitcast <2 x i16> %435 to <2 x half>, !dbg !26
  %437 = fpext <2 x half> %436 to <2 x float>, !dbg !40
  %438 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !30
  %439 = insertelement <2 x i32> %438, i32 %191, i64 1, !dbg !30
  %440 = trunc <2 x i32> %439 to <2 x i16>, !dbg !30
  %441 = bitcast <2 x i16> %440 to <2 x half>, !dbg !30
  %442 = fpext <2 x half> %441 to <2 x float>, !dbg !42
  %443 = fmul <2 x float> %442, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %444 = fadd <2 x float> %437, %328, !dbg !43
  %445 = fadd <2 x float> %444, %443, !dbg !45
  %446 = lshr <2 x i32> %434, <i32 16, i32 16>, !dbg !26
  %447 = trunc <2 x i32> %446 to <2 x i16>, !dbg !26
  %448 = bitcast <2 x i16> %447 to <2 x half>, !dbg !26
  %449 = fpext <2 x half> %448 to <2 x float>, !dbg !40
  %450 = lshr <2 x i32> %439, <i32 16, i32 16>, !dbg !30
  %451 = trunc <2 x i32> %450 to <2 x i16>, !dbg !30
  %452 = bitcast <2 x i16> %451 to <2 x half>, !dbg !30
  %453 = fpext <2 x half> %452 to <2 x float>, !dbg !42
  %454 = fmul <2 x float> %453, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %455 = fadd <2 x float> %449, %344, !dbg !43
  %456 = fadd <2 x float> %455, %454, !dbg !45
  %457 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !26
  %458 = insertelement <2 x i32> %457, i32 %174, i64 1, !dbg !26
  %459 = trunc <2 x i32> %458 to <2 x i16>, !dbg !26
  %460 = bitcast <2 x i16> %459 to <2 x half>, !dbg !26
  %461 = fpext <2 x half> %460 to <2 x float>, !dbg !40
  %462 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !30
  %463 = insertelement <2 x i32> %462, i32 %192, i64 1, !dbg !30
  %464 = trunc <2 x i32> %463 to <2 x i16>, !dbg !30
  %465 = bitcast <2 x i16> %464 to <2 x half>, !dbg !30
  %466 = fpext <2 x half> %465 to <2 x float>, !dbg !42
  %467 = fmul <2 x float> %466, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %468 = fadd <2 x float> %461, %361, !dbg !43
  %469 = fadd <2 x float> %468, %467, !dbg !45
  %470 = lshr <2 x i32> %458, <i32 16, i32 16>, !dbg !26
  %471 = trunc <2 x i32> %470 to <2 x i16>, !dbg !26
  %472 = bitcast <2 x i16> %471 to <2 x half>, !dbg !26
  %473 = fpext <2 x half> %472 to <2 x float>, !dbg !40
  %474 = lshr <2 x i32> %463, <i32 16, i32 16>, !dbg !30
  %475 = trunc <2 x i32> %474 to <2 x i16>, !dbg !30
  %476 = bitcast <2 x i16> %475 to <2 x half>, !dbg !30
  %477 = fpext <2 x half> %476 to <2 x float>, !dbg !42
  %478 = fmul <2 x float> %477, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %479 = fadd <2 x float> %473, %377, !dbg !43
  %480 = fadd <2 x float> %479, %478, !dbg !45
  %481 = extractelement <2 x float> %270, i64 1, !dbg !46
  %482 = fadd float %481, %237, !dbg !46
  %483 = extractelement <2 x float> %285, i64 1, !dbg !46
  %484 = fadd float %483, %238, !dbg !46
  %485 = extractelement <2 x float> %303, i64 1, !dbg !46
  %486 = fadd float %485, %239, !dbg !46
  %487 = extractelement <2 x float> %318, i64 1, !dbg !46
  %488 = fadd float %487, %240, !dbg !46
  %489 = extractelement <2 x float> %336, i64 1, !dbg !46
  %490 = fadd float %489, %241, !dbg !46
  %491 = extractelement <2 x float> %351, i64 1, !dbg !46
  %492 = fadd float %491, %242, !dbg !46
  %493 = extractelement <2 x float> %369, i64 1, !dbg !46
  %494 = fadd float %493, %243, !dbg !46
  %495 = extractelement <2 x float> %384, i64 1, !dbg !46
  %496 = fadd float %495, %244, !dbg !46
  %497 = extractelement <2 x float> %397, i64 1, !dbg !46
  %498 = fadd float %497, %245, !dbg !46
  %499 = extractelement <2 x float> %408, i64 1, !dbg !46
  %500 = fadd float %499, %246, !dbg !46
  %501 = extractelement <2 x float> %421, i64 1, !dbg !46
  %502 = fadd float %501, %247, !dbg !46
  %503 = extractelement <2 x float> %432, i64 1, !dbg !46
  %504 = fadd float %503, %248, !dbg !46
  %505 = extractelement <2 x float> %445, i64 1, !dbg !46
  %506 = fadd float %505, %249, !dbg !46
  %507 = extractelement <2 x float> %456, i64 1, !dbg !46
  %508 = fadd float %507, %250, !dbg !46
  %509 = extractelement <2 x float> %469, i64 1, !dbg !46
  %510 = fadd float %509, %251, !dbg !46
  %511 = extractelement <2 x float> %480, i64 1, !dbg !46
  %512 = fadd float %511, %252, !dbg !46
  %513 = extractelement <2 x float> %270, i64 0, !dbg !47
  %514 = fadd float %513, %482, !dbg !47
  %515 = extractelement <2 x float> %285, i64 0, !dbg !47
  %516 = fadd float %515, %484, !dbg !47
  %517 = extractelement <2 x float> %303, i64 0, !dbg !47
  %518 = fadd float %517, %486, !dbg !47
  %519 = extractelement <2 x float> %318, i64 0, !dbg !47
  %520 = fadd float %519, %488, !dbg !47
  %521 = extractelement <2 x float> %336, i64 0, !dbg !47
  %522 = fadd float %521, %490, !dbg !47
  %523 = extractelement <2 x float> %351, i64 0, !dbg !47
  %524 = fadd float %523, %492, !dbg !47
  %525 = extractelement <2 x float> %369, i64 0, !dbg !47
  %526 = fadd float %525, %494, !dbg !47
  %527 = extractelement <2 x float> %384, i64 0, !dbg !47
  %528 = fadd float %527, %496, !dbg !47
  %529 = extractelement <2 x float> %397, i64 0, !dbg !47
  %530 = fadd float %529, %498, !dbg !47
  %531 = extractelement <2 x float> %408, i64 0, !dbg !47
  %532 = fadd float %531, %500, !dbg !47
  %533 = extractelement <2 x float> %421, i64 0, !dbg !47
  %534 = fadd float %533, %502, !dbg !47
  %535 = extractelement <2 x float> %432, i64 0, !dbg !47
  %536 = fadd float %535, %504, !dbg !47
  %537 = extractelement <2 x float> %445, i64 0, !dbg !47
  %538 = fadd float %537, %506, !dbg !47
  %539 = extractelement <2 x float> %456, i64 0, !dbg !47
  %540 = fadd float %539, %508, !dbg !47
  %541 = extractelement <2 x float> %469, i64 0, !dbg !47
  %542 = fadd float %541, %510, !dbg !47
  %543 = extractelement <2 x float> %480, i64 0, !dbg !47
  %544 = fadd float %543, %512, !dbg !47
  %545 = mul i32 %10, %9, !dbg !48
  %546 = mul i32 %545, %73, !dbg !49
  %547 = add i32 %546, %.decomposed, !dbg !50
  %548 = add i32 %546, %.decomposed51, !dbg !50
  %549 = add i32 %.decomposed54, %546, !dbg !50
  %550 = add i32 %.decomposed57, %546, !dbg !50
  %551 = add i32 %.decomposed60, %546, !dbg !50
  %552 = add i32 %.decomposed63, %546, !dbg !50
  %553 = add i32 %.decomposed66, %546, !dbg !50
  %554 = add i32 %.decomposed69, %546, !dbg !50
  %555 = add i32 %.decomposed72, %546, !dbg !50
  %556 = add i32 %.decomposed75, %546, !dbg !50
  %557 = add i32 %.decomposed78, %546, !dbg !50
  %558 = add i32 %.decomposed81, %546, !dbg !50
  %559 = add i32 %.decomposed84, %546, !dbg !50
  %560 = add i32 %.decomposed87, %546, !dbg !50
  %561 = add i32 %.decomposed90, %546, !dbg !50
  %562 = add i32 %.decomposed93, %546, !dbg !50
  %563 = mul i32 %545, 320, !dbg !51
  %564 = mul i32 %76, %563, !dbg !52
  %565 = mul i32 %78, %563, !dbg !52
  %566 = mul i32 %80, %563, !dbg !52
  %567 = mul i32 %82, %563, !dbg !52
  %568 = mul i32 %84, %563, !dbg !52
  %569 = mul i32 %86, %563, !dbg !52
  %570 = mul i32 %88, %563, !dbg !52
  %571 = mul i32 %90, %563, !dbg !52
  %572 = mul i32 %92, %563, !dbg !52
  %573 = mul i32 %94, %563, !dbg !52
  %574 = mul i32 %96, %563, !dbg !52
  %575 = mul i32 %98, %563, !dbg !52
  %576 = mul i32 %100, %563, !dbg !52
  %577 = mul i32 %102, %563, !dbg !52
  %578 = mul i32 %104, %563, !dbg !52
  %579 = mul i32 %106, %563, !dbg !52
  %580 = add i32 %547, %564, !dbg !53
  %581 = add i32 %548, %565, !dbg !53
  %582 = add i32 %549, %566, !dbg !53
  %583 = add i32 %550, %567, !dbg !53
  %584 = add i32 %551, %568, !dbg !53
  %585 = add i32 %552, %569, !dbg !53
  %586 = add i32 %553, %570, !dbg !53
  %587 = add i32 %554, %571, !dbg !53
  %588 = add i32 %555, %572, !dbg !53
  %589 = add i32 %556, %573, !dbg !53
  %590 = add i32 %557, %574, !dbg !53
  %591 = add i32 %558, %575, !dbg !53
  %592 = add i32 %559, %576, !dbg !53
  %593 = add i32 %560, %577, !dbg !53
  %594 = add i32 %561, %578, !dbg !53
  %595 = add i32 %562, %579, !dbg !53
  %596 = sext i32 %580 to i64, !dbg !54
  %597 = getelementptr half, ptr addrspace(1) %7, i64 %596, !dbg !54
  %598 = sext i32 %581 to i64, !dbg !54
  %599 = getelementptr half, ptr addrspace(1) %7, i64 %598, !dbg !54
  %600 = sext i32 %582 to i64, !dbg !54
  %601 = getelementptr half, ptr addrspace(1) %7, i64 %600, !dbg !54
  %602 = sext i32 %583 to i64, !dbg !54
  %603 = getelementptr half, ptr addrspace(1) %7, i64 %602, !dbg !54
  %604 = sext i32 %584 to i64, !dbg !54
  %605 = getelementptr half, ptr addrspace(1) %7, i64 %604, !dbg !54
  %606 = sext i32 %585 to i64, !dbg !54
  %607 = getelementptr half, ptr addrspace(1) %7, i64 %606, !dbg !54
  %608 = sext i32 %586 to i64, !dbg !54
  %609 = getelementptr half, ptr addrspace(1) %7, i64 %608, !dbg !54
  %610 = sext i32 %587 to i64, !dbg !54
  %611 = getelementptr half, ptr addrspace(1) %7, i64 %610, !dbg !54
  %612 = sext i32 %588 to i64, !dbg !54
  %613 = getelementptr half, ptr addrspace(1) %7, i64 %612, !dbg !54
  %614 = sext i32 %589 to i64, !dbg !54
  %615 = getelementptr half, ptr addrspace(1) %7, i64 %614, !dbg !54
  %616 = sext i32 %590 to i64, !dbg !54
  %617 = getelementptr half, ptr addrspace(1) %7, i64 %616, !dbg !54
  %618 = sext i32 %591 to i64, !dbg !54
  %619 = getelementptr half, ptr addrspace(1) %7, i64 %618, !dbg !54
  %620 = sext i32 %592 to i64, !dbg !54
  %621 = getelementptr half, ptr addrspace(1) %7, i64 %620, !dbg !54
  %622 = sext i32 %593 to i64, !dbg !54
  %623 = getelementptr half, ptr addrspace(1) %7, i64 %622, !dbg !54
  %624 = sext i32 %594 to i64, !dbg !54
  %625 = getelementptr half, ptr addrspace(1) %7, i64 %624, !dbg !54
  %626 = sext i32 %595 to i64, !dbg !54
  %627 = getelementptr half, ptr addrspace(1) %7, i64 %626, !dbg !54
  %628 = fptrunc float %514 to half, !dbg !55
  %629 = fptrunc float %516 to half, !dbg !55
  %630 = fptrunc float %518 to half, !dbg !55
  %631 = fptrunc float %520 to half, !dbg !55
  %632 = fptrunc float %522 to half, !dbg !55
  %633 = fptrunc float %524 to half, !dbg !55
  %634 = fptrunc float %526 to half, !dbg !55
  %635 = fptrunc float %528 to half, !dbg !55
  %636 = fptrunc float %530 to half, !dbg !55
  %637 = fptrunc float %532 to half, !dbg !55
  %638 = fptrunc float %534 to half, !dbg !55
  %639 = fptrunc float %536 to half, !dbg !55
  %640 = fptrunc float %538 to half, !dbg !55
  %641 = fptrunc float %540 to half, !dbg !55
  %642 = fptrunc float %542 to half, !dbg !55
  %643 = fptrunc float %544 to half, !dbg !55
  %644 = mul nuw nsw i32 %16, 65, !dbg !55
  %645 = add nuw nsw i32 %644, %27, !dbg !55
  %646 = zext nneg i32 %645 to i64, !dbg !55
  %647 = getelementptr half, ptr addrspace(3) @global_smem, i64 %646, !dbg !55
  %648 = insertelement <1 x half> undef, half %628, i64 0, !dbg !55
  store <1 x half> %648, ptr addrspace(3) %647, align 2, !dbg !55
  %649 = or i32 %27, 1, !dbg !55
  %650 = add nuw nsw i32 %649, %644, !dbg !55
  %651 = zext nneg i32 %650 to i64, !dbg !55
  %652 = getelementptr half, ptr addrspace(3) @global_smem, i64 %651, !dbg !55
  %653 = insertelement <1 x half> undef, half %629, i64 0, !dbg !55
  store <1 x half> %653, ptr addrspace(3) %652, align 2, !dbg !55
  %654 = or i32 %27, 2, !dbg !55
  %655 = add nuw nsw i32 %654, %644, !dbg !55
  %656 = zext nneg i32 %655 to i64, !dbg !55
  %657 = getelementptr half, ptr addrspace(3) @global_smem, i64 %656, !dbg !55
  %658 = insertelement <1 x half> undef, half %630, i64 0, !dbg !55
  store <1 x half> %658, ptr addrspace(3) %657, align 2, !dbg !55
  %659 = or i32 %27, 3, !dbg !55
  %660 = add nuw nsw i32 %659, %644, !dbg !55
  %661 = zext nneg i32 %660 to i64, !dbg !55
  %662 = getelementptr half, ptr addrspace(3) @global_smem, i64 %661, !dbg !55
  %663 = insertelement <1 x half> undef, half %631, i64 0, !dbg !55
  store <1 x half> %663, ptr addrspace(3) %662, align 2, !dbg !55
  %664 = or i32 %27, 4, !dbg !55
  %665 = add nuw nsw i32 %664, %644, !dbg !55
  %666 = zext nneg i32 %665 to i64, !dbg !55
  %667 = getelementptr half, ptr addrspace(3) @global_smem, i64 %666, !dbg !55
  %668 = insertelement <1 x half> undef, half %632, i64 0, !dbg !55
  store <1 x half> %668, ptr addrspace(3) %667, align 2, !dbg !55
  %669 = or i32 %27, 5, !dbg !55
  %670 = add nuw nsw i32 %669, %644, !dbg !55
  %671 = zext nneg i32 %670 to i64, !dbg !55
  %672 = getelementptr half, ptr addrspace(3) @global_smem, i64 %671, !dbg !55
  %673 = insertelement <1 x half> undef, half %633, i64 0, !dbg !55
  store <1 x half> %673, ptr addrspace(3) %672, align 2, !dbg !55
  %674 = or i32 %27, 6, !dbg !55
  %675 = add nuw nsw i32 %674, %644, !dbg !55
  %676 = zext nneg i32 %675 to i64, !dbg !55
  %677 = getelementptr half, ptr addrspace(3) @global_smem, i64 %676, !dbg !55
  %678 = insertelement <1 x half> undef, half %634, i64 0, !dbg !55
  store <1 x half> %678, ptr addrspace(3) %677, align 2, !dbg !55
  %679 = or i32 %27, 7, !dbg !55
  %680 = add nuw nsw i32 %679, %644, !dbg !55
  %681 = zext nneg i32 %680 to i64, !dbg !55
  %682 = getelementptr half, ptr addrspace(3) @global_smem, i64 %681, !dbg !55
  %683 = insertelement <1 x half> undef, half %635, i64 0, !dbg !55
  store <1 x half> %683, ptr addrspace(3) %682, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %684 = mul nuw nsw i32 %18, 65, !dbg !55
  %685 = add nuw nsw i32 %684, %28, !dbg !55
  %686 = zext nneg i32 %685 to i64, !dbg !55
  %687 = getelementptr half, ptr addrspace(3) @global_smem, i64 %686, !dbg !55
  %688 = load i16, ptr addrspace(3) %687, align 2, !dbg !55
  %689 = mul nuw nsw i32 %19, 65, !dbg !55
  %690 = add nuw nsw i32 %689, %28, !dbg !55
  %691 = zext nneg i32 %690 to i64, !dbg !55
  %692 = getelementptr half, ptr addrspace(3) @global_smem, i64 %691, !dbg !55
  %693 = load i16, ptr addrspace(3) %692, align 2, !dbg !55
  %694 = mul nuw nsw i32 %20, 65, !dbg !55
  %695 = add nuw nsw i32 %694, %28, !dbg !55
  %696 = zext nneg i32 %695 to i64, !dbg !55
  %697 = getelementptr half, ptr addrspace(3) @global_smem, i64 %696, !dbg !55
  %698 = load i16, ptr addrspace(3) %697, align 2, !dbg !55
  %699 = mul nuw nsw i32 %21, 65, !dbg !55
  %700 = add nuw nsw i32 %699, %28, !dbg !55
  %701 = zext nneg i32 %700 to i64, !dbg !55
  %702 = getelementptr half, ptr addrspace(3) @global_smem, i64 %701, !dbg !55
  %703 = load i16, ptr addrspace(3) %702, align 2, !dbg !55
  %704 = mul nuw nsw i32 %22, 65, !dbg !55
  %705 = add nuw nsw i32 %704, %28, !dbg !55
  %706 = zext nneg i32 %705 to i64, !dbg !55
  %707 = getelementptr half, ptr addrspace(3) @global_smem, i64 %706, !dbg !55
  %708 = load i16, ptr addrspace(3) %707, align 2, !dbg !55
  %709 = mul nuw nsw i32 %23, 65, !dbg !55
  %710 = add nuw nsw i32 %709, %28, !dbg !55
  %711 = zext nneg i32 %710 to i64, !dbg !55
  %712 = getelementptr half, ptr addrspace(3) @global_smem, i64 %711, !dbg !55
  %713 = load i16, ptr addrspace(3) %712, align 2, !dbg !55
  %714 = mul nuw nsw i32 %24, 65, !dbg !55
  %715 = add nuw nsw i32 %714, %28, !dbg !55
  %716 = zext nneg i32 %715 to i64, !dbg !55
  %717 = getelementptr half, ptr addrspace(3) @global_smem, i64 %716, !dbg !55
  %718 = load i16, ptr addrspace(3) %717, align 2, !dbg !55
  %719 = mul nuw nsw i32 %25, 65, !dbg !55
  %720 = add nuw nsw i32 %719, %28, !dbg !55
  %721 = zext nneg i32 %720 to i64, !dbg !55
  %722 = getelementptr half, ptr addrspace(3) @global_smem, i64 %721, !dbg !55
  %723 = load i16, ptr addrspace(3) %722, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %724 = insertelement <1 x half> undef, half %636, i64 0, !dbg !55
  store <1 x half> %724, ptr addrspace(3) %647, align 2, !dbg !55
  %725 = insertelement <1 x half> undef, half %637, i64 0, !dbg !55
  store <1 x half> %725, ptr addrspace(3) %652, align 2, !dbg !55
  %726 = insertelement <1 x half> undef, half %638, i64 0, !dbg !55
  store <1 x half> %726, ptr addrspace(3) %657, align 2, !dbg !55
  %727 = insertelement <1 x half> undef, half %639, i64 0, !dbg !55
  store <1 x half> %727, ptr addrspace(3) %662, align 2, !dbg !55
  %728 = insertelement <1 x half> undef, half %640, i64 0, !dbg !55
  store <1 x half> %728, ptr addrspace(3) %667, align 2, !dbg !55
  %729 = insertelement <1 x half> undef, half %641, i64 0, !dbg !55
  store <1 x half> %729, ptr addrspace(3) %672, align 2, !dbg !55
  %730 = insertelement <1 x half> undef, half %642, i64 0, !dbg !55
  store <1 x half> %730, ptr addrspace(3) %677, align 2, !dbg !55
  %731 = insertelement <1 x half> undef, half %643, i64 0, !dbg !55
  store <1 x half> %731, ptr addrspace(3) %682, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %732 = load i16, ptr addrspace(3) %687, align 2, !dbg !55
  %733 = load i16, ptr addrspace(3) %692, align 2, !dbg !55
  %734 = load i16, ptr addrspace(3) %697, align 2, !dbg !55
  %735 = load i16, ptr addrspace(3) %702, align 2, !dbg !55
  %736 = load i16, ptr addrspace(3) %707, align 2, !dbg !55
  %737 = load i16, ptr addrspace(3) %712, align 2, !dbg !55
  %738 = load i16, ptr addrspace(3) %717, align 2, !dbg !55
  %739 = load i16, ptr addrspace(3) %722, align 2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %688, ptr addrspace(1) %597, i1 %118) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %693, ptr addrspace(1) %599, i1 %119) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %698, ptr addrspace(1) %601, i1 %120) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %703, ptr addrspace(1) %603, i1 %121) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %708, ptr addrspace(1) %605, i1 %122) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %713, ptr addrspace(1) %607, i1 %123) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %718, ptr addrspace(1) %609, i1 %124) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %723, ptr addrspace(1) %611, i1 %125) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %732, ptr addrspace(1) %613, i1 %126) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %733, ptr addrspace(1) %615, i1 %127) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %734, ptr addrspace(1) %617, i1 %128) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %735, ptr addrspace(1) %619, i1 %129) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %736, ptr addrspace(1) %621, i1 %130) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %737, ptr addrspace(1) %623, i1 %131) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %738, ptr addrspace(1) %625, i1 %132) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %739, ptr addrspace(1) %627, i1 %133) #2, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cjqlvsnd5srvsisb5xahkilomuymdcyos2rtziv2oc6khxsqi43w.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/jq")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89101112de", linkageName: "triton__0d1d2d3d4d5d6d7d89101112de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 32, column: 40, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 54, scope: !5)
!26 = !DILocation(line: 32, column: 46, scope: !5)
!27 = !DILocation(line: 33, column: 30, scope: !5)
!28 = !DILocation(line: 33, column: 35, scope: !5)
!29 = !DILocation(line: 34, column: 30, scope: !5)
!30 = !DILocation(line: 34, column: 46, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 36, column: 30, scope: !5)
!34 = !DILocation(line: 36, column: 35, scope: !5)
!35 = !DILocation(line: 37, column: 31, scope: !5)
!36 = !DILocation(line: 37, column: 47, scope: !5)
!37 = !DILocation(line: 38, column: 31, scope: !5)
!38 = !DILocation(line: 38, column: 47, scope: !5)
!39 = !DILocation(line: 38, column: 95, scope: !5)
!40 = !DILocation(line: 32, column: 94, scope: !5)
!41 = !DILocation(line: 33, column: 75, scope: !5)
!42 = !DILocation(line: 34, column: 94, scope: !5)
!43 = !DILocation(line: 39, column: 18, scope: !5)
!44 = !DILocation(line: 41, column: 18, scope: !5)
!45 = !DILocation(line: 42, column: 18, scope: !5)
!46 = !DILocation(line: 48, column: 20, scope: !5)
!47 = !DILocation(line: 49, column: 19, scope: !5)
!48 = !DILocation(line: 50, column: 35, scope: !5)
!49 = !DILocation(line: 50, column: 39, scope: !5)
!50 = !DILocation(line: 50, column: 31, scope: !5)
!51 = !DILocation(line: 50, column: 54, scope: !5)
!52 = !DILocation(line: 50, column: 58, scope: !5)
!53 = !DILocation(line: 50, column: 46, scope: !5)
!54 = !DILocation(line: 50, column: 25, scope: !5)
!55 = !DILocation(line: 50, column: 71, scope: !5)
!56 = !DILocation(line: 50, column: 4, scope: !5)
