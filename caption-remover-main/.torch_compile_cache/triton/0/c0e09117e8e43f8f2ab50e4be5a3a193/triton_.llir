; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d345de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %8, 255, !dbg !8
  %9 = shl nuw nsw i32 %urem, 2, !dbg !8
  %10 = or i32 %urem, 256, !dbg !8
  %11 = or i32 %urem, 512, !dbg !8
  %12 = or i32 %urem, 768, !dbg !8
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %14 = icmp slt i32 %13, 704, !dbg !10
  %15 = mul i32 %3, 20, !dbg !11
  %16 = mul i32 %15, %4, !dbg !12
  %17 = mul i32 %16, %13, !dbg !13
  %18 = icmp sgt i32 %6, 0, !dbg !14
  %19 = zext nneg i32 %urem to i64
  br i1 %18, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !14

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre41 = zext nneg i32 %10 to i64, !dbg !14
  %.pre43 = zext nneg i32 %11 to i64, !dbg !14
  %.pre45 = zext nneg i32 %12 to i64, !dbg !14
  %.pre47 = zext nneg i32 %9 to i64, !dbg !14
  br label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19
  %21 = zext nneg i32 %10 to i64
  %22 = getelementptr float, ptr addrspace(3) @global_smem, i64 %21
  %23 = zext nneg i32 %11 to i64
  %24 = getelementptr float, ptr addrspace(3) @global_smem, i64 %23
  %25 = zext nneg i32 %12 to i64
  %26 = getelementptr float, ptr addrspace(3) @global_smem, i64 %25
  %27 = zext nneg i32 %9 to i64
  %28 = getelementptr float, ptr addrspace(3) @global_smem, i64 %27
  %29 = getelementptr inbounds <4 x float>, ptr addrspace(3) %28, i64 0, i64 1
  %30 = getelementptr inbounds <4 x float>, ptr addrspace(3) %28, i64 0, i64 2
  %31 = getelementptr inbounds <4 x float>, ptr addrspace(3) %28, i64 0, i64 3
  br label %32, !dbg !14

32:                                               ; preds = %.lr.ph, %._crit_edge16
  %33 = phi float [ 0.000000e+00, %.lr.ph ], [ %148, %._crit_edge16 ]
  %34 = phi float [ 0.000000e+00, %.lr.ph ], [ %149, %._crit_edge16 ]
  %35 = phi float [ 0.000000e+00, %.lr.ph ], [ %150, %._crit_edge16 ]
  %36 = phi float [ 0.000000e+00, %.lr.ph ], [ %151, %._crit_edge16 ]
  %37 = phi float [ 0.000000e+00, %.lr.ph ], [ %144, %._crit_edge16 ]
  %38 = phi float [ 0.000000e+00, %.lr.ph ], [ %145, %._crit_edge16 ]
  %39 = phi float [ 0.000000e+00, %.lr.ph ], [ %146, %._crit_edge16 ]
  %40 = phi float [ 0.000000e+00, %.lr.ph ], [ %147, %._crit_edge16 ]
  %41 = phi float [ 0.000000e+00, %.lr.ph ], [ %140, %._crit_edge16 ]
  %42 = phi float [ 0.000000e+00, %.lr.ph ], [ %141, %._crit_edge16 ]
  %43 = phi float [ 0.000000e+00, %.lr.ph ], [ %142, %._crit_edge16 ]
  %44 = phi float [ 0.000000e+00, %.lr.ph ], [ %143, %._crit_edge16 ]
  %45 = phi i32 [ 0, %.lr.ph ], [ %152, %._crit_edge16 ]
  %46 = or i32 %45, %9, !dbg !15
  %47 = or i32 %46, 1, !dbg !15
  %48 = or i32 %46, 2, !dbg !15
  %49 = or i32 %46, 3, !dbg !15
  %50 = or i32 %45, %urem, !dbg !15
  %51 = or i32 %45, %10, !dbg !15
  %52 = or i32 %45, %11, !dbg !15
  %53 = or i32 %45, %12, !dbg !15
  %54 = icmp slt i32 %46, %6, !dbg !16
  %55 = icmp slt i32 %47, %6, !dbg !16
  %56 = icmp slt i32 %48, %6, !dbg !16
  %57 = icmp slt i32 %49, %6, !dbg !16
  %58 = icmp slt i32 %50, %6, !dbg !16
  %59 = icmp slt i32 %51, %6, !dbg !16
  %60 = icmp slt i32 %52, %6, !dbg !16
  %61 = icmp slt i32 %53, %6, !dbg !16
  %62 = add i32 %46, %17, !dbg !17
  %63 = add i32 %47, %17, !dbg !17
  %64 = add i32 %48, %17, !dbg !17
  %65 = add i32 %49, %17, !dbg !17
  %66 = sext i32 %62 to i64, !dbg !18
  %67 = getelementptr half, ptr addrspace(1) %0, i64 %66, !dbg !18
  %68 = sext i32 %63 to i64, !dbg !18
  %69 = getelementptr half, ptr addrspace(1) %0, i64 %68, !dbg !18
  %70 = sext i32 %64 to i64, !dbg !18
  %71 = getelementptr half, ptr addrspace(1) %0, i64 %70, !dbg !18
  %72 = sext i32 %65 to i64, !dbg !18
  %73 = getelementptr half, ptr addrspace(1) %0, i64 %72, !dbg !18
  %74 = and i1 %14, %54, !dbg !19
  %75 = and i1 %14, %55, !dbg !19
  %76 = and i1 %14, %56, !dbg !19
  %77 = and i1 %14, %57, !dbg !19
  %78 = and i1 %14, %58, !dbg !19
  %79 = and i1 %14, %59, !dbg !19
  %80 = and i1 %14, %60, !dbg !19
  %81 = and i1 %14, %61, !dbg !19
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %67, i1 %74, i16 0, i1 %74) #3, !dbg !20
  %83 = bitcast i16 %82 to half, !dbg !20
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %69, i1 %75, i16 0, i1 %75) #3, !dbg !20
  %85 = bitcast i16 %84 to half, !dbg !20
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %71, i1 %76, i16 0, i1 %76) #3, !dbg !20
  %87 = bitcast i16 %86 to half, !dbg !20
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 %77, i16 0, i1 %77) #3, !dbg !20
  %89 = bitcast i16 %88 to half, !dbg !20
  %90 = fpext half %83 to float, !dbg !21
  %91 = fpext half %85 to float, !dbg !21
  %92 = fpext half %87 to float, !dbg !21
  %93 = fpext half %89 to float, !dbg !21
  %94 = icmp eq i32 %45, 0, !dbg !22
  br i1 %94, label %._crit_edge16, label %95, !dbg !23

95:                                               ; preds = %32
  %96 = fsub float %90, %41, !dbg !27
  %97 = fsub float %91, %42, !dbg !27
  %98 = fsub float %92, %43, !dbg !27
  %99 = fsub float %93, %44, !dbg !27
  %100 = fadd float %33, 1.000000e+00, !dbg !28
  %101 = fadd float %34, 1.000000e+00, !dbg !28
  %102 = fadd float %35, 1.000000e+00, !dbg !28
  %103 = fadd float %36, 1.000000e+00, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %104 = insertelement <1 x float> undef, float %100, i64 0, !dbg !28
  store <1 x float> %104, ptr addrspace(3) %20, align 4, !dbg !28
  %105 = insertelement <1 x float> undef, float %101, i64 0, !dbg !28
  store <1 x float> %105, ptr addrspace(3) %22, align 4, !dbg !28
  %106 = insertelement <1 x float> undef, float %102, i64 0, !dbg !28
  store <1 x float> %106, ptr addrspace(3) %24, align 4, !dbg !28
  %107 = insertelement <1 x float> undef, float %103, i64 0, !dbg !28
  store <1 x float> %107, ptr addrspace(3) %26, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %108 = load float, ptr addrspace(3) %28, align 16, !dbg !28
  %109 = load float, ptr addrspace(3) %29, align 4, !dbg !28
  %110 = load float, ptr addrspace(3) %30, align 8, !dbg !28
  %111 = load float, ptr addrspace(3) %31, align 4, !dbg !28
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %108) #3, !dbg !29
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %109) #3, !dbg !29
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %110) #3, !dbg !29
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %111) #3, !dbg !29
  %116 = fadd float %41, %112, !dbg !30
  %117 = fadd float %42, %113, !dbg !30
  %118 = fadd float %43, %114, !dbg !30
  %119 = fadd float %44, %115, !dbg !30
  %120 = fsub float %90, %116, !dbg !31
  %121 = fsub float %91, %117, !dbg !31
  %122 = fsub float %92, %118, !dbg !31
  %123 = fsub float %93, %119, !dbg !31
  %124 = fmul float %96, %120, !dbg !32
  %125 = fmul float %97, %121, !dbg !32
  %126 = fmul float %98, %122, !dbg !32
  %127 = fmul float %99, %123, !dbg !32
  %128 = fadd float %37, %124, !dbg !33
  %129 = fadd float %38, %125, !dbg !33
  %130 = fadd float %39, %126, !dbg !33
  %131 = fadd float %40, %127, !dbg !33
  br label %._crit_edge16, !dbg !23

._crit_edge16:                                    ; preds = %32, %95
  %132 = phi float [ %100, %95 ], [ 1.000000e+00, %32 ]
  %133 = phi float [ %101, %95 ], [ 1.000000e+00, %32 ]
  %134 = phi float [ %102, %95 ], [ 1.000000e+00, %32 ]
  %135 = phi float [ %103, %95 ], [ 1.000000e+00, %32 ]
  %136 = phi float [ %128, %95 ], [ 0.000000e+00, %32 ]
  %137 = phi float [ %129, %95 ], [ 0.000000e+00, %32 ]
  %138 = phi float [ %130, %95 ], [ 0.000000e+00, %32 ]
  %139 = phi float [ %131, %95 ], [ 0.000000e+00, %32 ]
  %.pn8 = phi float [ %116, %95 ], [ %90, %32 ]
  %.pn6 = phi float [ %117, %95 ], [ %91, %32 ]
  %.pn4 = phi float [ %118, %95 ], [ %92, %32 ]
  %.pn2 = phi float [ %119, %95 ], [ %93, %32 ]
  %140 = select i1 %74, float %.pn8, float %41, !dbg !34
  %141 = select i1 %75, float %.pn6, float %42, !dbg !34
  %142 = select i1 %76, float %.pn4, float %43, !dbg !34
  %143 = select i1 %77, float %.pn2, float %44, !dbg !34
  %144 = select i1 %74, float %136, float %37, !dbg !35
  %145 = select i1 %75, float %137, float %38, !dbg !35
  %146 = select i1 %76, float %138, float %39, !dbg !35
  %147 = select i1 %77, float %139, float %40, !dbg !35
  %148 = select i1 %78, float %132, float %33, !dbg !36
  %149 = select i1 %79, float %133, float %34, !dbg !36
  %150 = select i1 %80, float %134, float %35, !dbg !36
  %151 = select i1 %81, float %135, float %36, !dbg !36
  %152 = add i32 %45, 1024, !dbg !14
  %153 = icmp slt i32 %152, %6, !dbg !14
  br i1 %153, label %32, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %._crit_edge16, %.._crit_edge_crit_edge
  %.pre-phi48 = phi i64 [ %.pre47, %.._crit_edge_crit_edge ], [ %27, %._crit_edge16 ], !dbg !14
  %.pre-phi46 = phi i64 [ %.pre45, %.._crit_edge_crit_edge ], [ %25, %._crit_edge16 ], !dbg !14
  %.pre-phi44 = phi i64 [ %.pre43, %.._crit_edge_crit_edge ], [ %23, %._crit_edge16 ], !dbg !14
  %.pre-phi42 = phi i64 [ %.pre41, %.._crit_edge_crit_edge ], [ %21, %._crit_edge16 ], !dbg !14
  %154 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %140, %._crit_edge16 ]
  %155 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %141, %._crit_edge16 ]
  %156 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %142, %._crit_edge16 ]
  %157 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %143, %._crit_edge16 ]
  %158 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %144, %._crit_edge16 ]
  %159 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %145, %._crit_edge16 ]
  %160 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %146, %._crit_edge16 ]
  %161 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %147, %._crit_edge16 ]
  %162 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %148, %._crit_edge16 ]
  %163 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %149, %._crit_edge16 ]
  %164 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %150, %._crit_edge16 ]
  %165 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %151, %._crit_edge16 ]
  %166 = lshr i32 %8, 5, !dbg !8
  %167 = and i32 %166, 7, !dbg !8
  %168 = and i32 %8, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19, !dbg !14
  %170 = insertelement <1 x float> undef, float %162, i64 0, !dbg !14
  store <1 x float> %170, ptr addrspace(3) %169, align 4, !dbg !14
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi42, !dbg !14
  %172 = insertelement <1 x float> undef, float %163, i64 0, !dbg !14
  store <1 x float> %172, ptr addrspace(3) %171, align 4, !dbg !14
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi44, !dbg !14
  %174 = insertelement <1 x float> undef, float %164, i64 0, !dbg !14
  store <1 x float> %174, ptr addrspace(3) %173, align 4, !dbg !14
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi46, !dbg !14
  %176 = insertelement <1 x float> undef, float %165, i64 0, !dbg !14
  store <1 x float> %176, ptr addrspace(3) %175, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi48, !dbg !14
  %178 = load float, ptr addrspace(3) %177, align 16, !dbg !14
  %179 = getelementptr inbounds <4 x float>, ptr addrspace(3) %177, i64 0, i64 1, !dbg !14
  %180 = load float, ptr addrspace(3) %179, align 4, !dbg !14
  %181 = getelementptr inbounds <4 x float>, ptr addrspace(3) %177, i64 0, i64 2, !dbg !14
  %182 = load float, ptr addrspace(3) %181, align 8, !dbg !14
  %183 = getelementptr inbounds <4 x float>, ptr addrspace(3) %177, i64 0, i64 3, !dbg !14
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %185 = fsub float %155, %154, !dbg !39
  %186 = fadd float %178, %180, !dbg !43
  %187 = fcmp oeq float %186, 0.000000e+00, !dbg !44
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %186) #3, !dbg !45
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !46
  %190 = fmul float %185, %189, !dbg !47
  %191 = fadd float %154, %190, !dbg !48
  %192 = fadd float %158, %159, !dbg !49
  %193 = fmul float %185, %185, !dbg !50
  %194 = fmul float %193, %178, !dbg !51
  %195 = fmul float %194, %189, !dbg !52
  %196 = fadd float %192, %195, !dbg !53
  %197 = fsub float %156, %191, !dbg !39
  %198 = fadd float %182, %186, !dbg !43
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !44
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %198) #3, !dbg !45
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !46
  %202 = fmul float %201, %197, !dbg !47
  %203 = fadd float %191, %202, !dbg !48
  %204 = fadd float %160, %196, !dbg !49
  %205 = fmul float %197, %197, !dbg !50
  %206 = fmul float %186, %205, !dbg !51
  %207 = fmul float %201, %206, !dbg !52
  %208 = fadd float %204, %207, !dbg !53
  %209 = fsub float %157, %203, !dbg !39
  %210 = fadd float %184, %198, !dbg !43
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !44
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %210) #3, !dbg !45
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !46
  %214 = fmul float %213, %209, !dbg !47
  %215 = fadd float %203, %214, !dbg !48
  %216 = fadd float %161, %208, !dbg !49
  %217 = fmul float %209, %209, !dbg !50
  %218 = fmul float %198, %217, !dbg !51
  %219 = fmul float %213, %218, !dbg !52
  %220 = fadd float %216, %219, !dbg !53
  %221 = bitcast float %215 to i32, !dbg !37
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !37
  %223 = bitcast i32 %222 to float, !dbg !37
  %224 = bitcast float %220 to i32, !dbg !37
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !37
  %226 = bitcast i32 %225 to float, !dbg !37
  %227 = bitcast float %210 to i32, !dbg !37
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !37
  %229 = bitcast i32 %228 to float, !dbg !37
  %230 = fsub float %223, %215, !dbg !39
  %231 = fadd float %210, %229, !dbg !43
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !44
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %231) #3, !dbg !45
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !46
  %235 = fmul float %234, %230, !dbg !47
  %236 = fadd float %215, %235, !dbg !48
  %237 = fadd float %220, %226, !dbg !49
  %238 = fmul float %230, %230, !dbg !50
  %239 = fmul float %210, %238, !dbg !51
  %240 = fmul float %234, %239, !dbg !52
  %241 = fadd float %237, %240, !dbg !53
  %242 = bitcast float %236 to i32, !dbg !37
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !37
  %244 = bitcast i32 %243 to float, !dbg !37
  %245 = bitcast float %241 to i32, !dbg !37
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !37
  %247 = bitcast i32 %246 to float, !dbg !37
  %248 = bitcast float %231 to i32, !dbg !37
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !37
  %250 = bitcast i32 %249 to float, !dbg !37
  %251 = fsub float %244, %236, !dbg !39
  %252 = fadd float %231, %250, !dbg !43
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !44
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %252) #3, !dbg !45
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !46
  %256 = fmul float %255, %251, !dbg !47
  %257 = fadd float %236, %256, !dbg !48
  %258 = fadd float %241, %247, !dbg !49
  %259 = fmul float %251, %251, !dbg !50
  %260 = fmul float %231, %259, !dbg !51
  %261 = fmul float %255, %260, !dbg !52
  %262 = fadd float %258, %261, !dbg !53
  %263 = bitcast float %257 to i32, !dbg !37
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !37
  %265 = bitcast i32 %264 to float, !dbg !37
  %266 = bitcast float %262 to i32, !dbg !37
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !37
  %268 = bitcast i32 %267 to float, !dbg !37
  %269 = bitcast float %252 to i32, !dbg !37
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !37
  %271 = bitcast i32 %270 to float, !dbg !37
  %272 = fsub float %265, %257, !dbg !39
  %273 = fadd float %252, %271, !dbg !43
  %274 = fcmp oeq float %273, 0.000000e+00, !dbg !44
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float %273) #3, !dbg !45
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !46
  %277 = fmul float %272, %276, !dbg !47
  %278 = fadd float %257, %277, !dbg !48
  %279 = fadd float %262, %268, !dbg !49
  %280 = fmul float %272, %272, !dbg !50
  %281 = fmul float %252, %280, !dbg !51
  %282 = fmul float %276, %281, !dbg !52
  %283 = fadd float %279, %282, !dbg !53
  %284 = bitcast float %278 to i32, !dbg !37
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !37
  %286 = bitcast i32 %285 to float, !dbg !37
  %287 = bitcast float %283 to i32, !dbg !37
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !37
  %289 = bitcast i32 %288 to float, !dbg !37
  %290 = bitcast float %273 to i32, !dbg !37
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !37
  %292 = bitcast i32 %291 to float, !dbg !37
  %293 = fsub float %286, %278, !dbg !39
  %294 = fadd float %273, %292, !dbg !43
  %295 = fcmp oeq float %294, 0.000000e+00, !dbg !44
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %294) #3, !dbg !45
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !46
  %298 = fmul float %293, %297, !dbg !47
  %299 = fadd float %278, %298, !dbg !48
  %300 = fadd float %283, %289, !dbg !49
  %301 = fmul float %293, %293, !dbg !50
  %302 = fmul float %273, %301, !dbg !51
  %303 = fmul float %297, %302, !dbg !52
  %304 = fadd float %300, %303, !dbg !53
  %305 = bitcast float %299 to i32, !dbg !37
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !37
  %307 = bitcast i32 %306 to float, !dbg !37
  %308 = bitcast float %304 to i32, !dbg !37
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !37
  %310 = bitcast i32 %309 to float, !dbg !37
  %311 = bitcast float %294 to i32, !dbg !37
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !37
  %313 = bitcast i32 %312 to float, !dbg !37
  %314 = fsub float %307, %299, !dbg !39
  %315 = fadd float %294, %313, !dbg !43
  %316 = fcmp oeq float %315, 0.000000e+00, !dbg !44
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float %315) #3, !dbg !45
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !46
  %319 = fmul float %314, %318, !dbg !47
  %320 = fadd float %299, %319, !dbg !48
  %321 = fadd float %304, %310, !dbg !49
  %322 = fmul float %314, %314, !dbg !50
  %323 = fmul float %294, %322, !dbg !51
  %324 = fmul float %318, %323, !dbg !52
  %325 = fadd float %321, %324, !dbg !53
  %326 = icmp eq i32 %168, 0, !dbg !37
  %327 = zext nneg i32 %167 to i64, !dbg !37
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i64 %327, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, float %320, i1 %326) #3, !dbg !37
  %329 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %327, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, float %325, i1 %326) #3, !dbg !37
  %330 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %327, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, float %315, i1 %326) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %331 = icmp slt i32 %8, 8, !dbg !37
  %332 = sext i32 %8 to i64, !dbg !37
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !37
  %334 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %331) #3, !dbg !37
  %335 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %332, !dbg !37
  %336 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %335, i1 %331) #3, !dbg !37
  %337 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %332, !dbg !37
  %338 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %337, i1 %331) #3, !dbg !37
  %339 = bitcast float %334 to i32, !dbg !37
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !37
  %341 = bitcast i32 %340 to float, !dbg !37
  %342 = bitcast float %336 to i32, !dbg !37
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 4, i32 31), !dbg !37
  %344 = bitcast i32 %343 to float, !dbg !37
  %345 = bitcast float %338 to i32, !dbg !37
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 4, i32 31), !dbg !37
  %347 = bitcast i32 %346 to float, !dbg !37
  %348 = fsub float %341, %334, !dbg !39
  %349 = fadd float %338, %347, !dbg !43
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !44
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #3, !dbg !45
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !46
  %353 = fmul float %348, %352, !dbg !47
  %354 = fadd float %334, %353, !dbg !48
  %355 = fadd float %336, %344, !dbg !49
  %356 = fmul float %348, %348, !dbg !50
  %357 = fmul float %338, %356, !dbg !51
  %358 = fmul float %357, %352, !dbg !52
  %359 = fadd float %355, %358, !dbg !53
  %360 = bitcast float %354 to i32, !dbg !37
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 2, i32 31), !dbg !37
  %362 = bitcast i32 %361 to float, !dbg !37
  %363 = bitcast float %359 to i32, !dbg !37
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 2, i32 31), !dbg !37
  %365 = bitcast i32 %364 to float, !dbg !37
  %366 = bitcast float %349 to i32, !dbg !37
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 2, i32 31), !dbg !37
  %368 = bitcast i32 %367 to float, !dbg !37
  %369 = fsub float %362, %354, !dbg !39
  %370 = fadd float %349, %368, !dbg !43
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !44
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #3, !dbg !45
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !46
  %374 = fmul float %369, %373, !dbg !47
  %375 = fadd float %354, %374, !dbg !48
  %376 = fadd float %359, %365, !dbg !49
  %377 = fmul float %369, %369, !dbg !50
  %378 = fmul float %349, %377, !dbg !51
  %379 = fmul float %373, %378, !dbg !52
  %380 = fadd float %376, %379, !dbg !53
  %381 = bitcast float %375 to i32, !dbg !37
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !37
  %383 = bitcast i32 %382 to float, !dbg !37
  %384 = bitcast float %380 to i32, !dbg !37
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 1, i32 31), !dbg !37
  %386 = bitcast i32 %385 to float, !dbg !37
  %387 = bitcast float %370 to i32, !dbg !37
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !37
  %389 = bitcast i32 %388 to float, !dbg !37
  %390 = fsub float %383, %375, !dbg !39
  %391 = fadd float %370, %389, !dbg !43
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !44
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %391) #3, !dbg !45
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !46
  %395 = fmul float %390, %394, !dbg !47
  %396 = fadd float %375, %395, !dbg !48
  %397 = fadd float %380, %386, !dbg !49
  %398 = fmul float %390, %390, !dbg !50
  %399 = fmul float %370, %398, !dbg !51
  %400 = fmul float %394, %399, !dbg !52
  %401 = fadd float %397, %400, !dbg !53
  %402 = and i32 %8, 7, !dbg !37
  %403 = icmp eq i32 %402, 0, !dbg !37
  %404 = and i1 %331, %403, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, float %396, i1 %404) #3, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %401, i1 %404) #3, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, float %391, i1 %404) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %405 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !37
  %406 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %407 = insertelement <1 x float> undef, float %405, i64 0, !dbg !54
  store <1 x float> %407, ptr addrspace(3) @global_smem, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %408 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %409 = insertelement <1 x float> undef, float %406, i64 0, !dbg !55
  store <1 x float> %409, ptr addrspace(3) @global_smem, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %410 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !55
  %411 = sext i32 %13 to i64, !dbg !56
  %412 = getelementptr float, ptr addrspace(1) %1, i64 %411, !dbg !56
  %413 = icmp eq i32 %urem, 0, !dbg !57
  %414 = and i1 %413, %14, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %412, i1 %414) #3, !dbg !57
  %415 = getelementptr float, ptr addrspace(1) %2, i64 %411, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %410, ptr addrspace(1) %415, i1 %414) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cmuyetyonfmigo6jswrppxfsypbwipnhxy7jqpabxqhw2qnvzqlz.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/mu")
!3 = !{ptr @triton__0d1d2d345de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d345de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d345de6", linkageName: "triton__0d1d2d345de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 34, column: 43, scope: !5)
!12 = !DILocation(line: 34, column: 47, scope: !5)
!13 = !DILocation(line: 34, column: 51, scope: !5)
!14 = !DILocation(line: 30, column: 36, scope: !5)
!15 = !DILocation(line: 31, column: 27, scope: !5)
!16 = !DILocation(line: 32, column: 25, scope: !5)
!17 = !DILocation(line: 34, column: 40, scope: !5)
!18 = !DILocation(line: 34, column: 34, scope: !5)
!19 = !DILocation(line: 34, column: 65, scope: !5)
!20 = !DILocation(line: 34, column: 57, scope: !5)
!21 = !DILocation(line: 34, column: 117, scope: !5)
!22 = !DILocation(line: 38, column: 62, scope: !5)
!23 = !DILocation(line: 105, column: 7, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!26 = !DILocation(line: 38, column: 51, scope: !24)
!27 = !DILocation(line: 110, column: 24, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 111, column: 30, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 112, column: 34, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 112, column: 26, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 113, column: 39, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 113, column: 31, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 113, column: 22, scope: !24, inlinedAt: !26)
!34 = !DILocation(line: 40, column: 60, scope: !5)
!35 = !DILocation(line: 41, column: 56, scope: !5)
!36 = !DILocation(line: 42, column: 64, scope: !5)
!37 = !DILocation(line: 131, column: 46, scope: !24, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 41, scope: !24)
!39 = !DILocation(line: 119, column: 21, scope: !40, inlinedAt: !41)
!40 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!41 = !DILocation(line: 131, column: 46, scope: !40, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 41, scope: !40)
!43 = !DILocation(line: 120, column: 28, scope: !40, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 39, scope: !40, inlinedAt: !41)
!45 = !DILocation(line: 121, column: 60, scope: !40, inlinedAt: !41)
!46 = !DILocation(line: 121, column: 49, scope: !40, inlinedAt: !41)
!47 = !DILocation(line: 123, column: 25, scope: !40, inlinedAt: !41)
!48 = !DILocation(line: 123, column: 17, scope: !40, inlinedAt: !41)
!49 = !DILocation(line: 124, column: 15, scope: !40, inlinedAt: !41)
!50 = !DILocation(line: 124, column: 30, scope: !40, inlinedAt: !41)
!51 = !DILocation(line: 124, column: 38, scope: !40, inlinedAt: !41)
!52 = !DILocation(line: 124, column: 49, scope: !40, inlinedAt: !41)
!53 = !DILocation(line: 124, column: 22, scope: !40, inlinedAt: !41)
!54 = !DILocation(line: 46, column: 20, scope: !5)
!55 = !DILocation(line: 47, column: 20, scope: !5)
!56 = !DILocation(line: 49, column: 25, scope: !5)
!57 = !DILocation(line: 49, column: 36, scope: !5)
!58 = !DILocation(line: 50, column: 25, scope: !5)
!59 = !DILocation(line: 50, column: 36, scope: !5)
!60 = !DILocation(line: 50, column: 4, scope: !5)
