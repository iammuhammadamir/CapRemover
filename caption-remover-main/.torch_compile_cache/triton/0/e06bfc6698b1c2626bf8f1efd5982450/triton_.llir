; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 7, !dbg !8
  %11 = lshr i32 %8, 1, !dbg !8
  %12 = shl nuw nsw i32 %10, 4, !dbg !8
  %13 = or i32 %12, %11, !dbg !8
  %14 = lshr i32 %8, 4, !dbg !8
  %15 = shl nuw nsw i32 %10, 1, !dbg !8
  %16 = or i32 %15, %14, !dbg !8
  %17 = or i32 %16, 16, !dbg !8
  %18 = or i32 %16, 32, !dbg !8
  %19 = or i32 %16, 48, !dbg !8
  %20 = or i32 %16, 64, !dbg !8
  %21 = or i32 %16, 80, !dbg !8
  %22 = or i32 %16, 96, !dbg !8
  %23 = or i32 %16, 112, !dbg !8
  %24 = shl i32 %7, 3, !dbg !9
  %25 = and i32 %24, 8, !dbg !9
  %26 = and i32 %7, 15, !dbg !9
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %29 = add i32 %28, 1, !dbg !12
  %30 = shl i32 %27, 8, !dbg !13
  %31 = mul i32 %30, %29, !dbg !14
  %32 = or i32 %31, %13, !dbg !15
  %33 = or i32 %32, 128, !dbg !15
  %34 = or i32 %31, %16, !dbg !15
  %35 = or i32 %31, %17, !dbg !15
  %36 = or i32 %31, %18, !dbg !15
  %37 = or i32 %31, %19, !dbg !15
  %38 = or i32 %31, %20, !dbg !15
  %39 = or i32 %31, %21, !dbg !15
  %40 = or i32 %31, %22, !dbg !15
  %41 = or i32 %31, %23, !dbg !15
  %42 = or i32 %34, 128, !dbg !15
  %43 = or i32 %34, 144, !dbg !15
  %44 = or i32 %34, 160, !dbg !15
  %45 = or i32 %34, 176, !dbg !15
  %46 = or i32 %34, 192, !dbg !15
  %47 = or i32 %34, 208, !dbg !15
  %48 = or i32 %34, 224, !dbg !15
  %49 = or i32 %34, 240, !dbg !15
  %50 = icmp slt i32 %32, 14850, !dbg !16
  %51 = icmp slt i32 %33, 14850, !dbg !16
  %52 = icmp slt i32 %34, 14850, !dbg !16
  %53 = icmp slt i32 %35, 14850, !dbg !16
  %54 = icmp slt i32 %36, 14850, !dbg !16
  %55 = icmp slt i32 %37, 14850, !dbg !16
  %56 = icmp slt i32 %38, 14850, !dbg !16
  %57 = icmp slt i32 %39, 14850, !dbg !16
  %58 = icmp slt i32 %40, 14850, !dbg !16
  %59 = icmp slt i32 %41, 14850, !dbg !16
  %60 = icmp slt i32 %42, 14850, !dbg !16
  %61 = icmp slt i32 %43, 14850, !dbg !16
  %62 = icmp slt i32 %44, 14850, !dbg !16
  %63 = icmp slt i32 %45, 14850, !dbg !16
  %64 = icmp slt i32 %46, 14850, !dbg !16
  %65 = icmp slt i32 %47, 14850, !dbg !16
  %66 = icmp slt i32 %48, 14850, !dbg !16
  %67 = icmp slt i32 %49, 14850, !dbg !16
  %68 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %69 = shl i32 %68, 4, !dbg !18
  %70 = or i32 %69, %25, !dbg !19
  %71 = or i32 %69, %26, !dbg !19
  %72 = icmp slt i32 %70, 320, !dbg !20
  %73 = icmp slt i32 %71, 320, !dbg !20
  %.frozen = freeze i32 %34
  %74 = sdiv i32 %.frozen, 675, !dbg !21
  %75 = mul i32 %74, 675
  %.decomposed = sub i32 %.frozen, %75
  %.frozen27 = freeze i32 %35
  %76 = sdiv i32 %.frozen27, 675, !dbg !21
  %77 = mul i32 %76, 675
  %.decomposed28 = sub i32 %.frozen27, %77
  %.frozen29 = freeze i32 %36
  %78 = sdiv i32 %.frozen29, 675, !dbg !21
  %79 = mul i32 %78, 675
  %.decomposed30 = sub i32 %.frozen29, %79
  %.frozen31 = freeze i32 %37
  %80 = sdiv i32 %.frozen31, 675, !dbg !21
  %81 = mul i32 %80, 675
  %.decomposed32 = sub i32 %.frozen31, %81
  %.frozen33 = freeze i32 %38
  %82 = sdiv i32 %.frozen33, 675, !dbg !21
  %83 = mul i32 %82, 675
  %.decomposed34 = sub i32 %.frozen33, %83
  %.frozen35 = freeze i32 %39
  %84 = sdiv i32 %.frozen35, 675, !dbg !21
  %85 = mul i32 %84, 675
  %.decomposed36 = sub i32 %.frozen35, %85
  %.frozen37 = freeze i32 %40
  %86 = sdiv i32 %.frozen37, 675, !dbg !21
  %87 = mul i32 %86, 675
  %.decomposed38 = sub i32 %.frozen37, %87
  %.frozen39 = freeze i32 %41
  %88 = sdiv i32 %.frozen39, 675, !dbg !21
  %89 = mul i32 %88, 675
  %.decomposed40 = sub i32 %.frozen39, %89
  %.frozen41 = freeze i32 %42
  %90 = sdiv i32 %.frozen41, 675, !dbg !21
  %91 = mul i32 %90, 675
  %.decomposed42 = sub i32 %.frozen41, %91
  %.frozen43 = freeze i32 %43
  %92 = sdiv i32 %.frozen43, 675, !dbg !21
  %93 = mul i32 %92, 675
  %.decomposed44 = sub i32 %.frozen43, %93
  %.frozen45 = freeze i32 %44
  %94 = sdiv i32 %.frozen45, 675, !dbg !21
  %95 = mul i32 %94, 675
  %.decomposed46 = sub i32 %.frozen45, %95
  %.frozen47 = freeze i32 %45
  %96 = sdiv i32 %.frozen47, 675, !dbg !21
  %97 = mul i32 %96, 675
  %.decomposed48 = sub i32 %.frozen47, %97
  %.frozen49 = freeze i32 %46
  %98 = sdiv i32 %.frozen49, 675, !dbg !21
  %99 = mul i32 %98, 675
  %.decomposed50 = sub i32 %.frozen49, %99
  %.frozen51 = freeze i32 %47
  %100 = sdiv i32 %.frozen51, 675, !dbg !21
  %101 = mul i32 %100, 675
  %.decomposed52 = sub i32 %.frozen51, %101
  %.frozen53 = freeze i32 %48
  %102 = sdiv i32 %.frozen53, 675, !dbg !21
  %103 = mul i32 %102, 675
  %.decomposed54 = sub i32 %.frozen53, %103
  %.frozen55 = freeze i32 %49
  %104 = sdiv i32 %.frozen55, 675, !dbg !21
  %105 = mul i32 %104, 675
  %.decomposed56 = sub i32 %.frozen55, %105
  %106 = mul i32 %32, 320, !dbg !22
  %107 = mul i32 %33, 320, !dbg !22
  %108 = add i32 %106, %70, !dbg !23
  %109 = add i32 %107, %70, !dbg !23
  %110 = sext i32 %108 to i64, !dbg !24
  %111 = getelementptr half, ptr addrspace(1) %0, i64 %110, !dbg !24
  %112 = sext i32 %109 to i64, !dbg !24
  %113 = getelementptr half, ptr addrspace(1) %0, i64 %112, !dbg !24
  %114 = and i1 %72, %50, !dbg !25
  %115 = and i1 %72, %51, !dbg !25
  %116 = and i1 %73, %52, !dbg !25
  %117 = and i1 %73, %53, !dbg !25
  %118 = and i1 %73, %54, !dbg !25
  %119 = and i1 %73, %55, !dbg !25
  %120 = and i1 %73, %56, !dbg !25
  %121 = and i1 %73, %57, !dbg !25
  %122 = and i1 %73, %58, !dbg !25
  %123 = and i1 %73, %59, !dbg !25
  %124 = and i1 %73, %60, !dbg !25
  %125 = and i1 %73, %61, !dbg !25
  %126 = and i1 %73, %62, !dbg !25
  %127 = and i1 %73, %63, !dbg !25
  %128 = and i1 %73, %64, !dbg !25
  %129 = and i1 %73, %65, !dbg !25
  %130 = and i1 %73, %66, !dbg !25
  %131 = and i1 %73, %67, !dbg !25
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %114) #2, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !26
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %115) #2, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !26
  %142 = trunc i32 %138 to i16, !dbg !26
  %143 = bitcast i16 %142 to half, !dbg !26
  %144 = trunc i32 %139 to i16, !dbg !26
  %145 = bitcast i16 %144 to half, !dbg !26
  %146 = trunc i32 %140 to i16, !dbg !26
  %147 = bitcast i16 %146 to half, !dbg !26
  %148 = trunc i32 %141 to i16, !dbg !26
  %149 = bitcast i16 %148 to half, !dbg !26
  %150 = fpext half %143 to float, !dbg !27
  %151 = fpext half %145 to float, !dbg !27
  %152 = fpext half %147 to float, !dbg !27
  %153 = fpext half %149 to float, !dbg !27
  %154 = sext i32 %70 to i64, !dbg !28
  %155 = getelementptr half, ptr addrspace(1) %1, i64 %154, !dbg !28
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %72) #2, !dbg !29
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !29
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !29
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !29
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !29
  %extelt.offset8 = lshr i32 %157, 16, !dbg !29
  %161 = trunc i32 %extelt.offset8 to i16, !dbg !29
  %162 = bitcast i16 %161 to half, !dbg !29
  %extelt.offset9 = lshr i32 %158, 16, !dbg !29
  %163 = trunc i32 %extelt.offset9 to i16, !dbg !29
  %164 = bitcast i16 %163 to half, !dbg !29
  %extelt.offset10 = lshr i32 %159, 16, !dbg !29
  %165 = trunc i32 %extelt.offset10 to i16, !dbg !29
  %166 = bitcast i16 %165 to half, !dbg !29
  %extelt.offset11 = lshr i32 %160, 16, !dbg !29
  %167 = trunc i32 %extelt.offset11 to i16, !dbg !29
  %168 = bitcast i16 %167 to half, !dbg !29
  %169 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !26
  %170 = insertelement <2 x i32> %169, i32 %157, i64 1, !dbg !26
  %171 = trunc <2 x i32> %170 to <2 x i16>, !dbg !26
  %172 = bitcast <2 x i16> %171 to <2 x half>, !dbg !26
  %173 = fpext <2 x half> %172 to <2 x float>, !dbg !27
  %174 = fpext half %162 to float, !dbg !30
  %175 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !26
  %176 = insertelement <2 x i32> %175, i32 %158, i64 1, !dbg !26
  %177 = trunc <2 x i32> %176 to <2 x i16>, !dbg !26
  %178 = bitcast <2 x i16> %177 to <2 x half>, !dbg !26
  %179 = fpext <2 x half> %178 to <2 x float>, !dbg !27
  %180 = fpext half %164 to float, !dbg !30
  %181 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !26
  %182 = insertelement <2 x i32> %181, i32 %159, i64 1, !dbg !26
  %183 = trunc <2 x i32> %182 to <2 x i16>, !dbg !26
  %184 = bitcast <2 x i16> %183 to <2 x half>, !dbg !26
  %185 = fpext <2 x half> %184 to <2 x float>, !dbg !27
  %186 = fpext half %166 to float, !dbg !30
  %187 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !26
  %188 = insertelement <2 x i32> %187, i32 %160, i64 1, !dbg !26
  %189 = trunc <2 x i32> %188 to <2 x i16>, !dbg !26
  %190 = bitcast <2 x i16> %189 to <2 x half>, !dbg !26
  %191 = fpext <2 x half> %190 to <2 x float>, !dbg !27
  %192 = fpext half %168 to float, !dbg !30
  %193 = getelementptr half, ptr addrspace(1) %2, i64 %110, !dbg !31
  %194 = getelementptr half, ptr addrspace(1) %2, i64 %112, !dbg !31
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %193, i1 %114) #2, !dbg !32
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !32
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !32
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !32
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !32
  %200 = trunc i32 %196 to i16, !dbg !32
  %201 = bitcast i16 %200 to half, !dbg !32
  %202 = trunc i32 %197 to i16, !dbg !32
  %203 = bitcast i16 %202 to half, !dbg !32
  %204 = trunc i32 %198 to i16, !dbg !32
  %205 = bitcast i16 %204 to half, !dbg !32
  %206 = trunc i32 %199 to i16, !dbg !32
  %207 = bitcast i16 %206 to half, !dbg !32
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 %115) #2, !dbg !32
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !32
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !32
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !32
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !32
  %213 = trunc i32 %209 to i16, !dbg !32
  %214 = bitcast i16 %213 to half, !dbg !32
  %215 = trunc i32 %210 to i16, !dbg !32
  %216 = bitcast i16 %215 to half, !dbg !32
  %217 = trunc i32 %211 to i16, !dbg !32
  %218 = bitcast i16 %217 to half, !dbg !32
  %219 = trunc i32 %212 to i16, !dbg !32
  %220 = bitcast i16 %219 to half, !dbg !32
  %221 = fpext half %201 to float, !dbg !33
  %222 = fpext half %203 to float, !dbg !33
  %223 = fpext half %205 to float, !dbg !33
  %224 = fpext half %207 to float, !dbg !33
  %225 = fpext half %214 to float, !dbg !33
  %226 = fpext half %216 to float, !dbg !33
  %227 = fpext half %218 to float, !dbg !33
  %228 = fpext half %220 to float, !dbg !33
  %229 = extractelement <2 x float> %173, i64 0, !dbg !34
  %230 = extractelement <2 x float> %173, i64 1, !dbg !34
  %231 = fadd float %229, %230, !dbg !34
  %232 = extractelement <2 x float> %179, i64 0, !dbg !34
  %233 = extractelement <2 x float> %179, i64 1, !dbg !34
  %234 = fadd float %232, %233, !dbg !34
  %235 = extractelement <2 x float> %185, i64 0, !dbg !34
  %236 = extractelement <2 x float> %185, i64 1, !dbg !34
  %237 = fadd float %235, %236, !dbg !34
  %238 = extractelement <2 x float> %191, i64 0, !dbg !34
  %239 = extractelement <2 x float> %191, i64 1, !dbg !34
  %240 = fadd float %238, %239, !dbg !34
  %241 = fadd float %230, %150, !dbg !34
  %242 = fadd float %233, %151, !dbg !34
  %243 = fadd float %236, %152, !dbg !34
  %244 = fadd float %239, %153, !dbg !34
  %245 = fmul float %221, 1.250000e-01, !dbg !35
  %246 = insertelement <2 x i32> %169, i32 %196, i64 1, !dbg !26
  %247 = lshr <2 x i32> %246, <i32 16, i32 16>, !dbg !26
  %248 = trunc <2 x i32> %247 to <2 x i16>, !dbg !26
  %249 = bitcast <2 x i16> %248 to <2 x half>, !dbg !26
  %250 = fpext <2 x half> %249 to <2 x float>, !dbg !27
  %251 = fmul float %222, 1.250000e-01, !dbg !35
  %252 = insertelement <2 x i32> %175, i32 %197, i64 1, !dbg !26
  %253 = lshr <2 x i32> %252, <i32 16, i32 16>, !dbg !26
  %254 = trunc <2 x i32> %253 to <2 x i16>, !dbg !26
  %255 = bitcast <2 x i16> %254 to <2 x half>, !dbg !26
  %256 = fpext <2 x half> %255 to <2 x float>, !dbg !27
  %257 = fmul float %223, 1.250000e-01, !dbg !35
  %258 = insertelement <2 x i32> %181, i32 %198, i64 1, !dbg !26
  %259 = lshr <2 x i32> %258, <i32 16, i32 16>, !dbg !26
  %260 = trunc <2 x i32> %259 to <2 x i16>, !dbg !26
  %261 = bitcast <2 x i16> %260 to <2 x half>, !dbg !26
  %262 = fpext <2 x half> %261 to <2 x float>, !dbg !27
  %263 = fmul float %224, 1.250000e-01, !dbg !35
  %264 = insertelement <2 x i32> %187, i32 %199, i64 1, !dbg !26
  %265 = lshr <2 x i32> %264, <i32 16, i32 16>, !dbg !26
  %266 = trunc <2 x i32> %265 to <2 x i16>, !dbg !26
  %267 = bitcast <2 x i16> %266 to <2 x half>, !dbg !26
  %268 = fpext <2 x half> %267 to <2 x float>, !dbg !27
  %269 = fmul float %225, 1.250000e-01, !dbg !35
  %270 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !26
  %271 = insertelement <2 x i32> %270, i32 %209, i64 1, !dbg !26
  %272 = lshr <2 x i32> %271, <i32 16, i32 16>, !dbg !26
  %273 = trunc <2 x i32> %272 to <2 x i16>, !dbg !26
  %274 = bitcast <2 x i16> %273 to <2 x half>, !dbg !26
  %275 = fpext <2 x half> %274 to <2 x float>, !dbg !27
  %276 = fmul float %226, 1.250000e-01, !dbg !35
  %277 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !26
  %278 = insertelement <2 x i32> %277, i32 %210, i64 1, !dbg !26
  %279 = lshr <2 x i32> %278, <i32 16, i32 16>, !dbg !26
  %280 = trunc <2 x i32> %279 to <2 x i16>, !dbg !26
  %281 = bitcast <2 x i16> %280 to <2 x half>, !dbg !26
  %282 = fpext <2 x half> %281 to <2 x float>, !dbg !27
  %283 = fmul float %227, 1.250000e-01, !dbg !35
  %284 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !26
  %285 = insertelement <2 x i32> %284, i32 %211, i64 1, !dbg !26
  %286 = lshr <2 x i32> %285, <i32 16, i32 16>, !dbg !26
  %287 = trunc <2 x i32> %286 to <2 x i16>, !dbg !26
  %288 = bitcast <2 x i16> %287 to <2 x half>, !dbg !26
  %289 = fpext <2 x half> %288 to <2 x float>, !dbg !27
  %290 = fmul float %228, 1.250000e-01, !dbg !35
  %291 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !26
  %292 = insertelement <2 x i32> %291, i32 %212, i64 1, !dbg !26
  %293 = lshr <2 x i32> %292, <i32 16, i32 16>, !dbg !26
  %294 = trunc <2 x i32> %293 to <2 x i16>, !dbg !26
  %295 = bitcast <2 x i16> %294 to <2 x half>, !dbg !26
  %296 = fpext <2 x half> %295 to <2 x float>, !dbg !27
  %297 = fadd float %231, %245, !dbg !36
  %298 = extractelement <2 x float> %250, i64 0, !dbg !36
  %299 = fadd float %298, %174, !dbg !36
  %300 = extractelement <2 x float> %250, i64 1, !dbg !36
  %301 = fmul float %300, 1.250000e-01, !dbg !36
  %302 = fadd float %299, %301, !dbg !36
  %303 = fadd float %234, %251, !dbg !36
  %304 = extractelement <2 x float> %256, i64 0, !dbg !36
  %305 = fadd float %304, %180, !dbg !36
  %306 = extractelement <2 x float> %256, i64 1, !dbg !36
  %307 = fmul float %306, 1.250000e-01, !dbg !36
  %308 = fadd float %305, %307, !dbg !36
  %309 = fadd float %237, %257, !dbg !36
  %310 = extractelement <2 x float> %262, i64 0, !dbg !36
  %311 = fadd float %310, %186, !dbg !36
  %312 = extractelement <2 x float> %262, i64 1, !dbg !36
  %313 = fmul float %312, 1.250000e-01, !dbg !36
  %314 = fadd float %311, %313, !dbg !36
  %315 = fadd float %240, %263, !dbg !36
  %316 = extractelement <2 x float> %268, i64 0, !dbg !36
  %317 = fadd float %316, %192, !dbg !36
  %318 = extractelement <2 x float> %268, i64 1, !dbg !36
  %319 = fmul float %318, 1.250000e-01, !dbg !36
  %320 = fadd float %317, %319, !dbg !36
  %321 = fadd float %241, %269, !dbg !36
  %322 = extractelement <2 x float> %275, i64 0, !dbg !36
  %323 = fadd float %322, %174, !dbg !36
  %324 = extractelement <2 x float> %275, i64 1, !dbg !36
  %325 = fmul float %324, 1.250000e-01, !dbg !36
  %326 = fadd float %323, %325, !dbg !36
  %327 = fadd float %242, %276, !dbg !36
  %328 = extractelement <2 x float> %282, i64 0, !dbg !36
  %329 = fadd float %328, %180, !dbg !36
  %330 = extractelement <2 x float> %282, i64 1, !dbg !36
  %331 = fmul float %330, 1.250000e-01, !dbg !36
  %332 = fadd float %329, %331, !dbg !36
  %333 = fadd float %243, %283, !dbg !36
  %334 = extractelement <2 x float> %289, i64 0, !dbg !36
  %335 = fadd float %334, %186, !dbg !36
  %336 = extractelement <2 x float> %289, i64 1, !dbg !36
  %337 = fmul float %336, 1.250000e-01, !dbg !36
  %338 = fadd float %335, %337, !dbg !36
  %339 = fadd float %244, %290, !dbg !36
  %340 = extractelement <2 x float> %296, i64 0, !dbg !36
  %341 = fadd float %340, %192, !dbg !36
  %342 = extractelement <2 x float> %296, i64 1, !dbg !36
  %343 = fmul float %342, 1.250000e-01, !dbg !36
  %344 = fadd float %341, %343, !dbg !36
  %345 = mul i32 %71, 675, !dbg !37
  %346 = add i32 %.decomposed, %345, !dbg !38
  %347 = add i32 %.decomposed28, %345, !dbg !38
  %348 = add i32 %.decomposed30, %345, !dbg !38
  %349 = add i32 %.decomposed32, %345, !dbg !38
  %350 = add i32 %.decomposed34, %345, !dbg !38
  %351 = add i32 %.decomposed36, %345, !dbg !38
  %352 = add i32 %.decomposed38, %345, !dbg !38
  %353 = add i32 %.decomposed40, %345, !dbg !38
  %354 = add i32 %.decomposed42, %345, !dbg !38
  %355 = add i32 %.decomposed44, %345, !dbg !38
  %356 = add i32 %.decomposed46, %345, !dbg !38
  %357 = add i32 %.decomposed48, %345, !dbg !38
  %358 = add i32 %.decomposed50, %345, !dbg !38
  %359 = add i32 %.decomposed52, %345, !dbg !38
  %360 = add i32 %.decomposed54, %345, !dbg !38
  %361 = add i32 %.decomposed56, %345, !dbg !38
  %362 = mul i32 %74, 216000, !dbg !39
  %363 = mul i32 %76, 216000, !dbg !39
  %364 = mul i32 %78, 216000, !dbg !39
  %365 = mul i32 %80, 216000, !dbg !39
  %366 = mul i32 %82, 216000, !dbg !39
  %367 = mul i32 %84, 216000, !dbg !39
  %368 = mul i32 %86, 216000, !dbg !39
  %369 = mul i32 %88, 216000, !dbg !39
  %370 = mul i32 %90, 216000, !dbg !39
  %371 = mul i32 %92, 216000, !dbg !39
  %372 = mul i32 %94, 216000, !dbg !39
  %373 = mul i32 %96, 216000, !dbg !39
  %374 = mul i32 %98, 216000, !dbg !39
  %375 = mul i32 %100, 216000, !dbg !39
  %376 = mul i32 %102, 216000, !dbg !39
  %377 = mul i32 %104, 216000, !dbg !39
  %378 = add i32 %346, %362, !dbg !40
  %379 = add i32 %347, %363, !dbg !40
  %380 = add i32 %348, %364, !dbg !40
  %381 = add i32 %349, %365, !dbg !40
  %382 = add i32 %350, %366, !dbg !40
  %383 = add i32 %351, %367, !dbg !40
  %384 = add i32 %352, %368, !dbg !40
  %385 = add i32 %353, %369, !dbg !40
  %386 = add i32 %354, %370, !dbg !40
  %387 = add i32 %355, %371, !dbg !40
  %388 = add i32 %356, %372, !dbg !40
  %389 = add i32 %357, %373, !dbg !40
  %390 = add i32 %358, %374, !dbg !40
  %391 = add i32 %359, %375, !dbg !40
  %392 = add i32 %360, %376, !dbg !40
  %393 = add i32 %361, %377, !dbg !40
  %394 = sext i32 %378 to i64, !dbg !41
  %395 = getelementptr half, ptr addrspace(1) %3, i64 %394, !dbg !41
  %396 = sext i32 %379 to i64, !dbg !41
  %397 = getelementptr half, ptr addrspace(1) %3, i64 %396, !dbg !41
  %398 = sext i32 %380 to i64, !dbg !41
  %399 = getelementptr half, ptr addrspace(1) %3, i64 %398, !dbg !41
  %400 = sext i32 %381 to i64, !dbg !41
  %401 = getelementptr half, ptr addrspace(1) %3, i64 %400, !dbg !41
  %402 = sext i32 %382 to i64, !dbg !41
  %403 = getelementptr half, ptr addrspace(1) %3, i64 %402, !dbg !41
  %404 = sext i32 %383 to i64, !dbg !41
  %405 = getelementptr half, ptr addrspace(1) %3, i64 %404, !dbg !41
  %406 = sext i32 %384 to i64, !dbg !41
  %407 = getelementptr half, ptr addrspace(1) %3, i64 %406, !dbg !41
  %408 = sext i32 %385 to i64, !dbg !41
  %409 = getelementptr half, ptr addrspace(1) %3, i64 %408, !dbg !41
  %410 = sext i32 %386 to i64, !dbg !41
  %411 = getelementptr half, ptr addrspace(1) %3, i64 %410, !dbg !41
  %412 = sext i32 %387 to i64, !dbg !41
  %413 = getelementptr half, ptr addrspace(1) %3, i64 %412, !dbg !41
  %414 = sext i32 %388 to i64, !dbg !41
  %415 = getelementptr half, ptr addrspace(1) %3, i64 %414, !dbg !41
  %416 = sext i32 %389 to i64, !dbg !41
  %417 = getelementptr half, ptr addrspace(1) %3, i64 %416, !dbg !41
  %418 = sext i32 %390 to i64, !dbg !41
  %419 = getelementptr half, ptr addrspace(1) %3, i64 %418, !dbg !41
  %420 = sext i32 %391 to i64, !dbg !41
  %421 = getelementptr half, ptr addrspace(1) %3, i64 %420, !dbg !41
  %422 = sext i32 %392 to i64, !dbg !41
  %423 = getelementptr half, ptr addrspace(1) %3, i64 %422, !dbg !41
  %424 = sext i32 %393 to i64, !dbg !41
  %425 = getelementptr half, ptr addrspace(1) %3, i64 %424, !dbg !41
  %426 = fptrunc float %297 to half, !dbg !42
  %427 = fptrunc float %302 to half, !dbg !42
  %428 = fptrunc float %303 to half, !dbg !42
  %429 = fptrunc float %308 to half, !dbg !42
  %430 = fptrunc float %309 to half, !dbg !42
  %431 = fptrunc float %314 to half, !dbg !42
  %432 = fptrunc float %315 to half, !dbg !42
  %433 = fptrunc float %320 to half, !dbg !42
  %434 = fptrunc float %321 to half, !dbg !42
  %435 = fptrunc float %326 to half, !dbg !42
  %436 = fptrunc float %327 to half, !dbg !42
  %437 = fptrunc float %332 to half, !dbg !42
  %438 = fptrunc float %333 to half, !dbg !42
  %439 = fptrunc float %338 to half, !dbg !42
  %440 = fptrunc float %339 to half, !dbg !42
  %441 = fptrunc float %344 to half, !dbg !42
  %442 = mul nuw nsw i32 %13, 17, !dbg !42
  %443 = add nuw nsw i32 %442, %25, !dbg !42
  %444 = zext nneg i32 %443 to i64, !dbg !42
  %445 = getelementptr half, ptr addrspace(3) @global_smem, i64 %444, !dbg !42
  %446 = insertelement <1 x half> undef, half %426, i64 0, !dbg !42
  store <1 x half> %446, ptr addrspace(3) %445, align 2, !dbg !42
  %447 = or i32 %25, 1, !dbg !42
  %448 = add nuw nsw i32 %447, %442, !dbg !42
  %449 = zext nneg i32 %448 to i64, !dbg !42
  %450 = getelementptr half, ptr addrspace(3) @global_smem, i64 %449, !dbg !42
  %451 = insertelement <1 x half> undef, half %427, i64 0, !dbg !42
  store <1 x half> %451, ptr addrspace(3) %450, align 2, !dbg !42
  %452 = or i32 %25, 2, !dbg !42
  %453 = add nuw nsw i32 %452, %442, !dbg !42
  %454 = zext nneg i32 %453 to i64, !dbg !42
  %455 = getelementptr half, ptr addrspace(3) @global_smem, i64 %454, !dbg !42
  %456 = insertelement <1 x half> undef, half %428, i64 0, !dbg !42
  store <1 x half> %456, ptr addrspace(3) %455, align 2, !dbg !42
  %457 = or i32 %25, 3, !dbg !42
  %458 = add nuw nsw i32 %457, %442, !dbg !42
  %459 = zext nneg i32 %458 to i64, !dbg !42
  %460 = getelementptr half, ptr addrspace(3) @global_smem, i64 %459, !dbg !42
  %461 = insertelement <1 x half> undef, half %429, i64 0, !dbg !42
  store <1 x half> %461, ptr addrspace(3) %460, align 2, !dbg !42
  %462 = or i32 %25, 4, !dbg !42
  %463 = add nuw nsw i32 %462, %442, !dbg !42
  %464 = zext nneg i32 %463 to i64, !dbg !42
  %465 = getelementptr half, ptr addrspace(3) @global_smem, i64 %464, !dbg !42
  %466 = insertelement <1 x half> undef, half %430, i64 0, !dbg !42
  store <1 x half> %466, ptr addrspace(3) %465, align 2, !dbg !42
  %467 = or i32 %25, 5, !dbg !42
  %468 = add nuw nsw i32 %467, %442, !dbg !42
  %469 = zext nneg i32 %468 to i64, !dbg !42
  %470 = getelementptr half, ptr addrspace(3) @global_smem, i64 %469, !dbg !42
  %471 = insertelement <1 x half> undef, half %431, i64 0, !dbg !42
  store <1 x half> %471, ptr addrspace(3) %470, align 2, !dbg !42
  %472 = or i32 %25, 6, !dbg !42
  %473 = add nuw nsw i32 %472, %442, !dbg !42
  %474 = zext nneg i32 %473 to i64, !dbg !42
  %475 = getelementptr half, ptr addrspace(3) @global_smem, i64 %474, !dbg !42
  %476 = insertelement <1 x half> undef, half %432, i64 0, !dbg !42
  store <1 x half> %476, ptr addrspace(3) %475, align 2, !dbg !42
  %477 = or i32 %25, 7, !dbg !42
  %478 = add nuw nsw i32 %477, %442, !dbg !42
  %479 = zext nneg i32 %478 to i64, !dbg !42
  %480 = getelementptr half, ptr addrspace(3) @global_smem, i64 %479, !dbg !42
  %481 = insertelement <1 x half> undef, half %433, i64 0, !dbg !42
  store <1 x half> %481, ptr addrspace(3) %480, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %482 = mul nuw nsw i32 %16, 17, !dbg !42
  %483 = add nuw nsw i32 %482, %26, !dbg !42
  %484 = zext nneg i32 %483 to i64, !dbg !42
  %485 = getelementptr half, ptr addrspace(3) @global_smem, i64 %484, !dbg !42
  %486 = load i16, ptr addrspace(3) %485, align 2, !dbg !42
  %487 = mul nuw nsw i32 %17, 17, !dbg !42
  %488 = add nuw nsw i32 %487, %26, !dbg !42
  %489 = zext nneg i32 %488 to i64, !dbg !42
  %490 = getelementptr half, ptr addrspace(3) @global_smem, i64 %489, !dbg !42
  %491 = load i16, ptr addrspace(3) %490, align 2, !dbg !42
  %492 = mul nuw nsw i32 %18, 17, !dbg !42
  %493 = add nuw nsw i32 %492, %26, !dbg !42
  %494 = zext nneg i32 %493 to i64, !dbg !42
  %495 = getelementptr half, ptr addrspace(3) @global_smem, i64 %494, !dbg !42
  %496 = load i16, ptr addrspace(3) %495, align 2, !dbg !42
  %497 = mul nuw nsw i32 %19, 17, !dbg !42
  %498 = add nuw nsw i32 %497, %26, !dbg !42
  %499 = zext nneg i32 %498 to i64, !dbg !42
  %500 = getelementptr half, ptr addrspace(3) @global_smem, i64 %499, !dbg !42
  %501 = load i16, ptr addrspace(3) %500, align 2, !dbg !42
  %502 = mul nuw nsw i32 %20, 17, !dbg !42
  %503 = add nuw nsw i32 %502, %26, !dbg !42
  %504 = zext nneg i32 %503 to i64, !dbg !42
  %505 = getelementptr half, ptr addrspace(3) @global_smem, i64 %504, !dbg !42
  %506 = load i16, ptr addrspace(3) %505, align 2, !dbg !42
  %507 = mul nuw nsw i32 %21, 17, !dbg !42
  %508 = add nuw nsw i32 %507, %26, !dbg !42
  %509 = zext nneg i32 %508 to i64, !dbg !42
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i64 %509, !dbg !42
  %511 = load i16, ptr addrspace(3) %510, align 2, !dbg !42
  %512 = mul nuw nsw i32 %22, 17, !dbg !42
  %513 = add nuw nsw i32 %512, %26, !dbg !42
  %514 = zext nneg i32 %513 to i64, !dbg !42
  %515 = getelementptr half, ptr addrspace(3) @global_smem, i64 %514, !dbg !42
  %516 = load i16, ptr addrspace(3) %515, align 2, !dbg !42
  %517 = mul nuw nsw i32 %23, 17, !dbg !42
  %518 = add nuw nsw i32 %517, %26, !dbg !42
  %519 = zext nneg i32 %518 to i64, !dbg !42
  %520 = getelementptr half, ptr addrspace(3) @global_smem, i64 %519, !dbg !42
  %521 = load i16, ptr addrspace(3) %520, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %522 = insertelement <1 x half> undef, half %434, i64 0, !dbg !42
  store <1 x half> %522, ptr addrspace(3) %445, align 2, !dbg !42
  %523 = insertelement <1 x half> undef, half %435, i64 0, !dbg !42
  store <1 x half> %523, ptr addrspace(3) %450, align 2, !dbg !42
  %524 = insertelement <1 x half> undef, half %436, i64 0, !dbg !42
  store <1 x half> %524, ptr addrspace(3) %455, align 2, !dbg !42
  %525 = insertelement <1 x half> undef, half %437, i64 0, !dbg !42
  store <1 x half> %525, ptr addrspace(3) %460, align 2, !dbg !42
  %526 = insertelement <1 x half> undef, half %438, i64 0, !dbg !42
  store <1 x half> %526, ptr addrspace(3) %465, align 2, !dbg !42
  %527 = insertelement <1 x half> undef, half %439, i64 0, !dbg !42
  store <1 x half> %527, ptr addrspace(3) %470, align 2, !dbg !42
  %528 = insertelement <1 x half> undef, half %440, i64 0, !dbg !42
  store <1 x half> %528, ptr addrspace(3) %475, align 2, !dbg !42
  %529 = insertelement <1 x half> undef, half %441, i64 0, !dbg !42
  store <1 x half> %529, ptr addrspace(3) %480, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %530 = load i16, ptr addrspace(3) %485, align 2, !dbg !42
  %531 = load i16, ptr addrspace(3) %490, align 2, !dbg !42
  %532 = load i16, ptr addrspace(3) %495, align 2, !dbg !42
  %533 = load i16, ptr addrspace(3) %500, align 2, !dbg !42
  %534 = load i16, ptr addrspace(3) %505, align 2, !dbg !42
  %535 = load i16, ptr addrspace(3) %510, align 2, !dbg !42
  %536 = load i16, ptr addrspace(3) %515, align 2, !dbg !42
  %537 = load i16, ptr addrspace(3) %520, align 2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %486, ptr addrspace(1) %395, i1 %116) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %491, ptr addrspace(1) %397, i1 %117) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %496, ptr addrspace(1) %399, i1 %118) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %501, ptr addrspace(1) %401, i1 %119) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %506, ptr addrspace(1) %403, i1 %120) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %511, ptr addrspace(1) %405, i1 %121) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %516, ptr addrspace(1) %407, i1 %122) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %521, ptr addrspace(1) %409, i1 %123) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %530, ptr addrspace(1) %411, i1 %124) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %531, ptr addrspace(1) %413, i1 %125) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %532, ptr addrspace(1) %415, i1 %126) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %533, ptr addrspace(1) %417, i1 %127) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %534, ptr addrspace(1) %419, i1 %128) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %535, ptr addrspace(1) %421, i1 %129) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %536, ptr addrspace(1) %423, i1 %130) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %537, ptr addrspace(1) %425, i1 %131) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cflmorxwram7b53hs73bzvriztaxm7ly3y2s7goaejppuevdgnlk.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/fl")
!3 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 40, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 54, scope: !5)
!26 = !DILocation(line: 33, column: 46, scope: !5)
!27 = !DILocation(line: 33, column: 94, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 34, column: 35, scope: !5)
!30 = !DILocation(line: 34, column: 75, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 35, column: 94, scope: !5)
!34 = !DILocation(line: 36, column: 18, scope: !5)
!35 = !DILocation(line: 38, column: 18, scope: !5)
!36 = !DILocation(line: 39, column: 18, scope: !5)
!37 = !DILocation(line: 40, column: 35, scope: !5)
!38 = !DILocation(line: 40, column: 31, scope: !5)
!39 = !DILocation(line: 40, column: 49, scope: !5)
!40 = !DILocation(line: 40, column: 42, scope: !5)
!41 = !DILocation(line: 40, column: 25, scope: !5)
!42 = !DILocation(line: 40, column: 61, scope: !5)
!43 = !DILocation(line: 40, column: 4, scope: !5)
