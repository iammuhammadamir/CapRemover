; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = or i32 %8, 128, !dbg !8
  %10 = or i32 %8, 256, !dbg !8
  %11 = or i32 %8, 384, !dbg !8
  %12 = or i32 %8, 512, !dbg !8
  %13 = or i32 %8, 640, !dbg !8
  %14 = or i32 %8, 768, !dbg !8
  %15 = or i32 %8, 896, !dbg !8
  %16 = shl nuw nsw i32 %8, 3, !dbg !8
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %19 = add i32 %18, 1, !dbg !11
  %20 = shl i32 %17, 10, !dbg !12
  %21 = mul i32 %20, %19, !dbg !13
  %22 = or i32 %21, %8, !dbg !14
  %23 = or i32 %21, %9, !dbg !14
  %24 = or i32 %21, %10, !dbg !14
  %25 = or i32 %21, %11, !dbg !14
  %26 = or i32 %21, %12, !dbg !14
  %27 = or i32 %21, %13, !dbg !14
  %28 = or i32 %21, %14, !dbg !14
  %29 = or i32 %21, %15, !dbg !14
  %30 = or i32 %21, %16, !dbg !14
  %31 = icmp slt i32 %22, 4048, !dbg !15
  %32 = icmp slt i32 %23, 4048, !dbg !15
  %33 = icmp slt i32 %24, 4048, !dbg !15
  %34 = icmp slt i32 %25, 4048, !dbg !15
  %35 = icmp slt i32 %26, 4048, !dbg !15
  %36 = icmp slt i32 %27, 4048, !dbg !15
  %37 = icmp slt i32 %28, 4048, !dbg !15
  %38 = icmp slt i32 %29, 4048, !dbg !15
  %39 = icmp slt i32 %30, 4048, !dbg !15
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !16
  %41 = icmp slt i32 %40, 1280, !dbg !17
  %.frozen = freeze i32 %30
  %42 = sdiv i32 %.frozen, 184, !dbg !18
  %43 = mul i32 %42, 184
  %.decomposed = sub i32 %.frozen, %43
  %44 = mul i32 %22, 1280, !dbg !19
  %45 = mul i32 %23, 1280, !dbg !19
  %46 = mul i32 %24, 1280, !dbg !19
  %47 = mul i32 %25, 1280, !dbg !19
  %48 = mul i32 %26, 1280, !dbg !19
  %49 = mul i32 %27, 1280, !dbg !19
  %50 = mul i32 %28, 1280, !dbg !19
  %51 = mul i32 %29, 1280, !dbg !19
  %52 = add i32 %44, %40, !dbg !20
  %53 = add i32 %45, %40, !dbg !20
  %54 = add i32 %46, %40, !dbg !20
  %55 = add i32 %47, %40, !dbg !20
  %56 = add i32 %48, %40, !dbg !20
  %57 = add i32 %49, %40, !dbg !20
  %58 = add i32 %50, %40, !dbg !20
  %59 = add i32 %51, %40, !dbg !20
  %60 = sext i32 %52 to i64, !dbg !21
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !21
  %62 = sext i32 %53 to i64, !dbg !21
  %63 = getelementptr half, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = sext i32 %54 to i64, !dbg !21
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !21
  %66 = sext i32 %55 to i64, !dbg !21
  %67 = getelementptr half, ptr addrspace(1) %0, i64 %66, !dbg !21
  %68 = sext i32 %56 to i64, !dbg !21
  %69 = getelementptr half, ptr addrspace(1) %0, i64 %68, !dbg !21
  %70 = sext i32 %57 to i64, !dbg !21
  %71 = getelementptr half, ptr addrspace(1) %0, i64 %70, !dbg !21
  %72 = sext i32 %58 to i64, !dbg !21
  %73 = getelementptr half, ptr addrspace(1) %0, i64 %72, !dbg !21
  %74 = sext i32 %59 to i64, !dbg !21
  %75 = getelementptr half, ptr addrspace(1) %0, i64 %74, !dbg !21
  %76 = and i1 %41, %31, !dbg !22
  %77 = and i1 %41, %32, !dbg !22
  %78 = and i1 %41, %33, !dbg !22
  %79 = and i1 %41, %34, !dbg !22
  %80 = and i1 %41, %35, !dbg !22
  %81 = and i1 %41, %36, !dbg !22
  %82 = and i1 %41, %37, !dbg !22
  %83 = and i1 %41, %38, !dbg !22
  %84 = and i1 %41, %39, !dbg !22
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %61, i1 %76) #2, !dbg !23
  %86 = bitcast i16 %85 to half, !dbg !23
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %63, i1 %77) #2, !dbg !23
  %88 = bitcast i16 %87 to half, !dbg !23
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %78) #2, !dbg !23
  %90 = bitcast i16 %89 to half, !dbg !23
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %67, i1 %79) #2, !dbg !23
  %92 = bitcast i16 %91 to half, !dbg !23
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %69, i1 %80) #2, !dbg !23
  %94 = bitcast i16 %93 to half, !dbg !23
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %81) #2, !dbg !23
  %96 = bitcast i16 %95 to half, !dbg !23
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %82) #2, !dbg !23
  %98 = bitcast i16 %97 to half, !dbg !23
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %75, i1 %83) #2, !dbg !23
  %100 = bitcast i16 %99 to half, !dbg !23
  %101 = fpext half %86 to float, !dbg !24
  %102 = fpext half %88 to float, !dbg !24
  %103 = fpext half %90 to float, !dbg !24
  %104 = fpext half %92 to float, !dbg !24
  %105 = fpext half %94 to float, !dbg !24
  %106 = fpext half %96 to float, !dbg !24
  %107 = fpext half %98 to float, !dbg !24
  %108 = fpext half %100 to float, !dbg !24
  %109 = sext i32 %40 to i64, !dbg !25
  %110 = getelementptr half, ptr addrspace(1) %1, i64 %109, !dbg !25
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %110, i1 %41) #2, !dbg !26
  %112 = bitcast i16 %111 to half, !dbg !26
  %113 = fpext half %112 to float, !dbg !27
  %114 = getelementptr half, ptr addrspace(1) %2, i64 %60, !dbg !28
  %115 = getelementptr half, ptr addrspace(1) %2, i64 %62, !dbg !28
  %116 = getelementptr half, ptr addrspace(1) %2, i64 %64, !dbg !28
  %117 = getelementptr half, ptr addrspace(1) %2, i64 %66, !dbg !28
  %118 = getelementptr half, ptr addrspace(1) %2, i64 %68, !dbg !28
  %119 = getelementptr half, ptr addrspace(1) %2, i64 %70, !dbg !28
  %120 = getelementptr half, ptr addrspace(1) %2, i64 %72, !dbg !28
  %121 = getelementptr half, ptr addrspace(1) %2, i64 %74, !dbg !28
  %122 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %114, i1 %76) #2, !dbg !29
  %123 = bitcast i16 %122 to half, !dbg !29
  %124 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %115, i1 %77) #2, !dbg !29
  %125 = bitcast i16 %124 to half, !dbg !29
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %116, i1 %78) #2, !dbg !29
  %127 = bitcast i16 %126 to half, !dbg !29
  %128 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %117, i1 %79) #2, !dbg !29
  %129 = bitcast i16 %128 to half, !dbg !29
  %130 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %118, i1 %80) #2, !dbg !29
  %131 = bitcast i16 %130 to half, !dbg !29
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %119, i1 %81) #2, !dbg !29
  %133 = bitcast i16 %132 to half, !dbg !29
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %120, i1 %82) #2, !dbg !29
  %135 = bitcast i16 %134 to half, !dbg !29
  %136 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %121, i1 %83) #2, !dbg !29
  %137 = bitcast i16 %136 to half, !dbg !29
  %138 = fpext half %123 to float, !dbg !30
  %139 = fpext half %125 to float, !dbg !30
  %140 = fpext half %127 to float, !dbg !30
  %141 = fpext half %129 to float, !dbg !30
  %142 = fpext half %131 to float, !dbg !30
  %143 = fpext half %133 to float, !dbg !30
  %144 = fpext half %135 to float, !dbg !30
  %145 = fpext half %137 to float, !dbg !30
  %146 = fadd float %101, %113, !dbg !31
  %147 = fadd float %102, %113, !dbg !31
  %148 = fadd float %103, %113, !dbg !31
  %149 = fadd float %104, %113, !dbg !31
  %150 = fadd float %105, %113, !dbg !31
  %151 = fadd float %106, %113, !dbg !31
  %152 = fadd float %107, %113, !dbg !31
  %153 = fadd float %108, %113, !dbg !31
  %154 = fmul float %138, 1.250000e-01, !dbg !32
  %155 = fmul float %139, 1.250000e-01, !dbg !32
  %156 = fmul float %140, 1.250000e-01, !dbg !32
  %157 = fmul float %141, 1.250000e-01, !dbg !32
  %158 = fmul float %142, 1.250000e-01, !dbg !32
  %159 = fmul float %143, 1.250000e-01, !dbg !32
  %160 = fmul float %144, 1.250000e-01, !dbg !32
  %161 = fmul float %145, 1.250000e-01, !dbg !32
  %162 = fadd float %146, %154, !dbg !33
  %163 = fadd float %147, %155, !dbg !33
  %164 = fadd float %148, %156, !dbg !33
  %165 = fadd float %149, %157, !dbg !33
  %166 = fadd float %150, %158, !dbg !33
  %167 = fadd float %151, %159, !dbg !33
  %168 = fadd float %152, %160, !dbg !33
  %169 = fadd float %153, %161, !dbg !33
  %170 = mul i32 %40, 184, !dbg !34
  %171 = add i32 %.decomposed, %170, !dbg !35
  %172 = mul i32 %42, 235520, !dbg !36
  %173 = add i32 %171, %172, !dbg !37
  %174 = sext i32 %173 to i64, !dbg !38
  %175 = getelementptr half, ptr addrspace(1) %3, i64 %174, !dbg !38
  %176 = fptrunc float %162 to half, !dbg !39
  %177 = fptrunc float %163 to half, !dbg !39
  %178 = fptrunc float %164 to half, !dbg !39
  %179 = fptrunc float %165 to half, !dbg !39
  %180 = fptrunc float %166 to half, !dbg !39
  %181 = fptrunc float %167 to half, !dbg !39
  %182 = fptrunc float %168 to half, !dbg !39
  %183 = fptrunc float %169 to half, !dbg !39
  %184 = zext nneg i32 %8 to i64, !dbg !39
  %185 = getelementptr half, ptr addrspace(3) @global_smem, i64 %184, !dbg !39
  %186 = insertelement <1 x half> undef, half %176, i64 0, !dbg !39
  store <1 x half> %186, ptr addrspace(3) %185, align 2, !dbg !39
  %187 = zext nneg i32 %9 to i64, !dbg !39
  %188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %187, !dbg !39
  %189 = insertelement <1 x half> undef, half %177, i64 0, !dbg !39
  store <1 x half> %189, ptr addrspace(3) %188, align 2, !dbg !39
  %190 = zext nneg i32 %10 to i64, !dbg !39
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !39
  %192 = insertelement <1 x half> undef, half %178, i64 0, !dbg !39
  store <1 x half> %192, ptr addrspace(3) %191, align 2, !dbg !39
  %193 = zext nneg i32 %11 to i64, !dbg !39
  %194 = getelementptr half, ptr addrspace(3) @global_smem, i64 %193, !dbg !39
  %195 = insertelement <1 x half> undef, half %179, i64 0, !dbg !39
  store <1 x half> %195, ptr addrspace(3) %194, align 2, !dbg !39
  %196 = zext nneg i32 %12 to i64, !dbg !39
  %197 = getelementptr half, ptr addrspace(3) @global_smem, i64 %196, !dbg !39
  %198 = insertelement <1 x half> undef, half %180, i64 0, !dbg !39
  store <1 x half> %198, ptr addrspace(3) %197, align 2, !dbg !39
  %199 = zext nneg i32 %13 to i64, !dbg !39
  %200 = getelementptr half, ptr addrspace(3) @global_smem, i64 %199, !dbg !39
  %201 = insertelement <1 x half> undef, half %181, i64 0, !dbg !39
  store <1 x half> %201, ptr addrspace(3) %200, align 2, !dbg !39
  %202 = zext nneg i32 %14 to i64, !dbg !39
  %203 = getelementptr half, ptr addrspace(3) @global_smem, i64 %202, !dbg !39
  %204 = insertelement <1 x half> undef, half %182, i64 0, !dbg !39
  store <1 x half> %204, ptr addrspace(3) %203, align 2, !dbg !39
  %205 = zext nneg i32 %15 to i64, !dbg !39
  %206 = getelementptr half, ptr addrspace(3) @global_smem, i64 %205, !dbg !39
  %207 = insertelement <1 x half> undef, half %183, i64 0, !dbg !39
  store <1 x half> %207, ptr addrspace(3) %206, align 2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %208 = zext nneg i32 %16 to i64, !dbg !39
  %209 = getelementptr half, ptr addrspace(3) @global_smem, i64 %208, !dbg !39
  %.extract = load i32, ptr addrspace(3) %209, align 16, !dbg !39
  %210 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %209, i64 0, i64 1, !dbg !39
  %.extract2 = load i32, ptr addrspace(3) %210, align 4, !dbg !39
  %211 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %209, i64 0, i64 2, !dbg !39
  %.extract4 = load i32, ptr addrspace(3) %211, align 8, !dbg !39
  %212 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %209, i64 0, i64 3, !dbg !39
  %.extract6 = load i32, ptr addrspace(3) %212, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract2, i32 %.extract4, i32 %.extract6, ptr addrspace(1) %175, i1 %84) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chh7iszk6ffhaazzfhwqeazairgxtcdh6ogpnu4oipif47wazn2t.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hh")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 23, column: 58, scope: !5)
!14 = !DILocation(line: 24, column: 23, scope: !5)
!15 = !DILocation(line: 25, column: 21, scope: !5)
!16 = !DILocation(line: 26, column: 28, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 32, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 41, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 30, scope: !5)
!22 = !DILocation(line: 33, column: 55, scope: !5)
!23 = !DILocation(line: 33, column: 47, scope: !5)
!24 = !DILocation(line: 33, column: 95, scope: !5)
!25 = !DILocation(line: 34, column: 30, scope: !5)
!26 = !DILocation(line: 34, column: 35, scope: !5)
!27 = !DILocation(line: 34, column: 75, scope: !5)
!28 = !DILocation(line: 35, column: 30, scope: !5)
!29 = !DILocation(line: 35, column: 47, scope: !5)
!30 = !DILocation(line: 35, column: 95, scope: !5)
!31 = !DILocation(line: 36, column: 18, scope: !5)
!32 = !DILocation(line: 38, column: 18, scope: !5)
!33 = !DILocation(line: 39, column: 18, scope: !5)
!34 = !DILocation(line: 40, column: 35, scope: !5)
!35 = !DILocation(line: 40, column: 31, scope: !5)
!36 = !DILocation(line: 40, column: 49, scope: !5)
!37 = !DILocation(line: 40, column: 42, scope: !5)
!38 = !DILocation(line: 40, column: 25, scope: !5)
!39 = !DILocation(line: 40, column: 61, scope: !5)
!40 = !DILocation(line: 40, column: 4, scope: !5)
