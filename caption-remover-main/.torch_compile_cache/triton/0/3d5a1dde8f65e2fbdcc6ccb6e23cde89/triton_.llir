; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = and i32 %10, 7, !dbg !8
  %12 = lshr i32 %9, 3, !dbg !8
  %13 = shl nuw nsw i32 %11, 2, !dbg !8
  %14 = or i32 %13, %12, !dbg !8
  %15 = shl i32 %8, 2, !dbg !9
  %16 = and i32 %15, 28, !dbg !9
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 5, !dbg !11
  %19 = or i32 %18, %14, !dbg !12
  %20 = or i32 %18, %9, !dbg !12
  %21 = icmp slt i32 %19, 32, !dbg !13
  %22 = icmp slt i32 %20, 32, !dbg !13
  %23 = icmp ult i32 %16, 20, !dbg !14
  %24 = mul i32 %19, 20, !dbg !15
  %25 = add i32 %24, %16, !dbg !16
  %26 = sext i32 %25 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = and i1 %23, %21, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = bitcast i32 %33 to float, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = bitcast i32 %41 to float, !dbg !21
  %46 = bitcast i32 %42 to float, !dbg !21
  %47 = bitcast i32 %43 to float, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = select i1 %28, float %34, float 0.000000e+00, !dbg !24
  %59 = select i1 %28, float %35, float 0.000000e+00, !dbg !24
  %60 = select i1 %28, float %36, float 0.000000e+00, !dbg !24
  %61 = select i1 %28, float %37, float 0.000000e+00, !dbg !24
  %62 = select i1 %28, float %46, float 0.000000e+00, !dbg !25
  %63 = select i1 %28, float %47, float 0.000000e+00, !dbg !25
  %64 = select i1 %28, float %54, float 0.000000e+00, !dbg !26
  %65 = select i1 %28, float %55, float 0.000000e+00, !dbg !26
  %66 = select i1 %28, float %56, float 0.000000e+00, !dbg !26
  %67 = select i1 %28, float %57, float 0.000000e+00, !dbg !26
  %68 = fsub float %59, %58, !dbg !27
  %69 = fadd float %64, %65, !dbg !33
  %70 = fcmp oeq float %69, 0.000000e+00, !dbg !34
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %69) #3, !dbg !35
  %72 = select i1 %70, float 0.000000e+00, float %71, !dbg !36
  %73 = fmul float %68, %72, !dbg !37
  %74 = fadd float %58, %73, !dbg !38
  %75 = fadd float %44, %45, !dbg !39
  %76 = select i1 %28, float %75, float 0.000000e+00, !dbg !39
  %77 = fmul float %68, %68, !dbg !40
  %78 = fmul float %64, %77, !dbg !41
  %79 = fmul float %78, %72, !dbg !42
  %80 = fadd float %76, %79, !dbg !43
  %81 = fsub float %60, %74, !dbg !27
  %82 = fadd float %66, %69, !dbg !33
  %83 = fcmp oeq float %82, 0.000000e+00, !dbg !34
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %82) #3, !dbg !35
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !36
  %86 = fmul float %85, %81, !dbg !37
  %87 = fadd float %74, %86, !dbg !38
  %88 = fadd float %62, %80, !dbg !39
  %89 = fmul float %81, %81, !dbg !40
  %90 = fmul float %69, %89, !dbg !41
  %91 = fmul float %85, %90, !dbg !42
  %92 = fadd float %88, %91, !dbg !43
  %93 = fsub float %61, %87, !dbg !27
  %94 = fadd float %67, %82, !dbg !33
  %95 = fcmp oeq float %94, 0.000000e+00, !dbg !34
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %94) #3, !dbg !35
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !36
  %98 = fmul float %97, %93, !dbg !37
  %99 = fadd float %87, %98, !dbg !38
  %100 = fadd float %63, %92, !dbg !39
  %101 = fmul float %93, %93, !dbg !40
  %102 = fmul float %82, %101, !dbg !41
  %103 = fmul float %97, %102, !dbg !42
  %104 = fadd float %100, %103, !dbg !43
  %105 = bitcast float %99 to i32, !dbg !44
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !44
  %107 = bitcast i32 %106 to float, !dbg !44
  %108 = bitcast float %104 to i32, !dbg !44
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !44
  %110 = bitcast i32 %109 to float, !dbg !44
  %111 = bitcast float %94 to i32, !dbg !44
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !44
  %113 = bitcast i32 %112 to float, !dbg !44
  %114 = fsub float %107, %99, !dbg !27
  %115 = fadd float %94, %113, !dbg !33
  %116 = fcmp oeq float %115, 0.000000e+00, !dbg !34
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %115) #3, !dbg !35
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !36
  %119 = fmul float %118, %114, !dbg !37
  %120 = fadd float %99, %119, !dbg !38
  %121 = fadd float %104, %110, !dbg !39
  %122 = fmul float %114, %114, !dbg !40
  %123 = fmul float %94, %122, !dbg !41
  %124 = fmul float %118, %123, !dbg !42
  %125 = fadd float %121, %124, !dbg !43
  %126 = bitcast float %120 to i32, !dbg !44
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !44
  %128 = bitcast i32 %127 to float, !dbg !44
  %129 = bitcast float %125 to i32, !dbg !44
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !44
  %131 = bitcast i32 %130 to float, !dbg !44
  %132 = bitcast float %115 to i32, !dbg !44
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !44
  %134 = bitcast i32 %133 to float, !dbg !44
  %135 = fsub float %128, %120, !dbg !27
  %136 = fadd float %115, %134, !dbg !33
  %137 = fcmp oeq float %136, 0.000000e+00, !dbg !34
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %136) #3, !dbg !35
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !36
  %140 = fmul float %139, %135, !dbg !37
  %141 = fadd float %120, %140, !dbg !38
  %142 = fadd float %125, %131, !dbg !39
  %143 = fmul float %135, %135, !dbg !40
  %144 = fmul float %115, %143, !dbg !41
  %145 = fmul float %139, %144, !dbg !42
  %146 = fadd float %142, %145, !dbg !43
  %147 = bitcast float %141 to i32, !dbg !44
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !44
  %149 = bitcast i32 %148 to float, !dbg !44
  %150 = bitcast float %146 to i32, !dbg !44
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !44
  %152 = bitcast i32 %151 to float, !dbg !44
  %153 = bitcast float %136 to i32, !dbg !44
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !44
  %155 = bitcast i32 %154 to float, !dbg !44
  %156 = fsub float %149, %141, !dbg !27
  %157 = fadd float %136, %155, !dbg !33
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !34
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %157) #3, !dbg !35
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !36
  %161 = fmul float %160, %156, !dbg !37
  %162 = fadd float %141, %161, !dbg !38
  %163 = fadd float %146, %152, !dbg !39
  %164 = fmul float %156, %156, !dbg !40
  %165 = fmul float %136, %164, !dbg !41
  %166 = fmul float %160, %165, !dbg !42
  %167 = fadd float %163, %166, !dbg !43
  %168 = zext nneg i32 %14 to i64, !dbg !46
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i64 %168, !dbg !46
  %170 = insertelement <1 x float> undef, float %162, i64 0, !dbg !46
  store <1 x float> %170, ptr addrspace(3) %169, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %171 = zext nneg i32 %9 to i64, !dbg !46
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i64 %171, !dbg !46
  %173 = load i32, ptr addrspace(3) %172, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %174 = insertelement <1 x float> undef, float %167, i64 0, !dbg !47
  store <1 x float> %174, ptr addrspace(3) %169, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %175 = load i32, ptr addrspace(3) %172, align 4, !dbg !47
  %176 = sext i32 %20 to i64, !dbg !48
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %176, !dbg !48
  %178 = icmp eq i32 %11, 0, !dbg !49
  %179 = and i1 %178, %22, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %177, i1 %179) #3, !dbg !49
  %180 = getelementptr float, ptr addrspace(1) %4, i64 %176, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %180, i1 %179) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cyulatcju435c4mt4fqrcnddbaikk6e56onid6d5j4rqnat2pnlx.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/yu")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 34, scope: !5)
!10 = !DILocation(line: 24, column: 28, scope: !5)
!11 = !DILocation(line: 24, column: 33, scope: !5)
!12 = !DILocation(line: 25, column: 23, scope: !5)
!13 = !DILocation(line: 26, column: 21, scope: !5)
!14 = !DILocation(line: 29, column: 21, scope: !5)
!15 = !DILocation(line: 32, column: 39, scope: !5)
!16 = !DILocation(line: 32, column: 36, scope: !5)
!17 = !DILocation(line: 32, column: 30, scope: !5)
!18 = !DILocation(line: 32, column: 53, scope: !5)
!19 = !DILocation(line: 32, column: 45, scope: !5)
!20 = !DILocation(line: 33, column: 30, scope: !5)
!21 = !DILocation(line: 33, column: 45, scope: !5)
!22 = !DILocation(line: 34, column: 30, scope: !5)
!23 = !DILocation(line: 34, column: 45, scope: !5)
!24 = !DILocation(line: 38, column: 41, scope: !5)
!25 = !DILocation(line: 39, column: 41, scope: !5)
!26 = !DILocation(line: 40, column: 41, scope: !5)
!27 = !DILocation(line: 119, column: 21, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!30 = distinct !DILexicalBlockFile(scope: !5, file: !29, discriminator: 0)
!31 = !DILocation(line: 131, column: 46, scope: !28, inlinedAt: !32)
!32 = !DILocation(line: 41, column: 67, scope: !28)
!33 = !DILocation(line: 120, column: 28, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 39, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 121, column: 60, scope: !28, inlinedAt: !31)
!36 = !DILocation(line: 121, column: 49, scope: !28, inlinedAt: !31)
!37 = !DILocation(line: 123, column: 25, scope: !28, inlinedAt: !31)
!38 = !DILocation(line: 123, column: 17, scope: !28, inlinedAt: !31)
!39 = !DILocation(line: 124, column: 15, scope: !28, inlinedAt: !31)
!40 = !DILocation(line: 124, column: 30, scope: !28, inlinedAt: !31)
!41 = !DILocation(line: 124, column: 38, scope: !28, inlinedAt: !31)
!42 = !DILocation(line: 124, column: 49, scope: !28, inlinedAt: !31)
!43 = !DILocation(line: 124, column: 22, scope: !28, inlinedAt: !31)
!44 = !DILocation(line: 131, column: 46, scope: !30, inlinedAt: !45)
!45 = !DILocation(line: 41, column: 67, scope: !30)
!46 = !DILocation(line: 42, column: 18, scope: !5)
!47 = !DILocation(line: 43, column: 18, scope: !5)
!48 = !DILocation(line: 45, column: 25, scope: !5)
!49 = !DILocation(line: 45, column: 37, scope: !5)
!50 = !DILocation(line: 46, column: 25, scope: !5)
!51 = !DILocation(line: 46, column: 37, scope: !5)
!52 = !DILocation(line: 46, column: 4, scope: !5)
