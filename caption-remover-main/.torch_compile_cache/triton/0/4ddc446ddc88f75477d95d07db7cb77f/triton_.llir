; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = and i32 %11, 3, !dbg !10
  %13 = lshr i32 %10, 3, !dbg !10
  %14 = shl nuw nsw i32 %12, 2, !dbg !10
  %15 = or i32 %14, %13, !dbg !10
  %16 = or i32 %15, 16, !dbg !10
  %17 = shl i32 %9, 3, !dbg !10
  %18 = and i32 %17, 24, !dbg !10
  %19 = shl i32 %9, 2, !dbg !11
  %20 = and i32 %19, 28, !dbg !11
  %21 = lshr i32 %10, 2, !dbg !11
  %22 = shl nuw nsw i32 %12, 3, !dbg !11
  %23 = or i32 %22, %21, !dbg !11
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !12
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !13
  %26 = add i32 %25, 1, !dbg !14
  %27 = shl i32 %24, 5, !dbg !15
  %28 = mul i32 %27, %26, !dbg !16
  %29 = or i32 %28, %15, !dbg !17
  %30 = or i32 %28, %16, !dbg !17
  %31 = or i32 %28, %18, !dbg !17
  %32 = or i32 %31, 2, !dbg !17
  %33 = or i32 %31, 4, !dbg !17
  %34 = or i32 %31, 6, !dbg !17
  %35 = icmp slt i32 %29, 7040, !dbg !18
  %36 = icmp slt i32 %30, 7040, !dbg !18
  %37 = icmp slt i32 %31, 7040, !dbg !18
  %38 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !19
  %39 = shl i32 %38, 5, !dbg !20
  %40 = or i32 %39, %20, !dbg !21
  %41 = icmp slt i32 %40, 2700, !dbg !22
  %.frozen = freeze i32 %31
  %42 = sdiv i32 %.frozen, 320, !dbg !23
  %43 = mul i32 %42, 320
  %.decomposed = sub i32 %.frozen, %43
  %44 = srem i32 %32, 320, !dbg !24
  %45 = srem i32 %33, 320, !dbg !24
  %46 = srem i32 %34, 320, !dbg !24
  %47 = mul i32 %29, 2700, !dbg !25
  %48 = mul i32 %30, 2700, !dbg !25
  %49 = add i32 %47, %40, !dbg !26
  %50 = add i32 %48, %40, !dbg !26
  %51 = sext i32 %49 to i64, !dbg !27
  %52 = getelementptr half, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = sext i32 %50 to i64, !dbg !27
  %54 = getelementptr half, ptr addrspace(1) %0, i64 %53, !dbg !27
  %55 = and i1 %41, %35, !dbg !28
  %56 = and i1 %41, %36, !dbg !28
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %55) #5, !dbg !29
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !29
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !29
  %60 = trunc i32 %58 to i16, !dbg !29
  %extelt.offset = lshr i32 %58, 16, !dbg !29
  %61 = trunc i32 %extelt.offset to i16, !dbg !29
  %62 = trunc i32 %59 to i16, !dbg !29
  %extelt.offset1 = lshr i32 %59, 16, !dbg !29
  %63 = trunc i32 %extelt.offset1 to i16, !dbg !29
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %56) #5, !dbg !29
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !29
  %67 = trunc i32 %65 to i16, !dbg !29
  %extelt.offset2 = lshr i32 %65, 16, !dbg !29
  %68 = trunc i32 %extelt.offset2 to i16, !dbg !29
  %69 = trunc i32 %66 to i16, !dbg !29
  %extelt.offset3 = lshr i32 %66, 16, !dbg !29
  %70 = trunc i32 %extelt.offset3 to i16, !dbg !29
  %71 = mul nuw nsw i32 %20, 40, !dbg !30
  %72 = or i32 %15, %71, !dbg !30
  %73 = zext nneg i32 %72 to i64, !dbg !30
  %74 = getelementptr half, ptr addrspace(3) @global_smem, i64 %73, !dbg !30
  store i16 %60, ptr addrspace(3) %74, align 2, !dbg !30
  %75 = add nuw nsw i32 %71, 40, !dbg !30
  %76 = add nuw nsw i32 %75, %15, !dbg !30
  %77 = zext nneg i32 %76 to i64, !dbg !30
  %78 = getelementptr half, ptr addrspace(3) @global_smem, i64 %77, !dbg !30
  store i16 %61, ptr addrspace(3) %78, align 2, !dbg !30
  %79 = add nuw nsw i32 %71, 80, !dbg !30
  %80 = or i32 %79, %15, !dbg !30
  %81 = zext nneg i32 %80 to i64, !dbg !30
  %82 = getelementptr half, ptr addrspace(3) @global_smem, i64 %81, !dbg !30
  store i16 %62, ptr addrspace(3) %82, align 2, !dbg !30
  %83 = add nuw nsw i32 %71, 120, !dbg !30
  %84 = add nuw nsw i32 %83, %15, !dbg !30
  %85 = zext nneg i32 %84 to i64, !dbg !30
  %86 = getelementptr half, ptr addrspace(3) @global_smem, i64 %85, !dbg !30
  store i16 %63, ptr addrspace(3) %86, align 2, !dbg !30
  %87 = or i32 %16, %71, !dbg !30
  %88 = zext nneg i32 %87 to i64, !dbg !30
  %89 = getelementptr half, ptr addrspace(3) @global_smem, i64 %88, !dbg !30
  store i16 %67, ptr addrspace(3) %89, align 2, !dbg !30
  %90 = add nuw nsw i32 %16, %75, !dbg !30
  %91 = zext nneg i32 %90 to i64, !dbg !30
  %92 = getelementptr half, ptr addrspace(3) @global_smem, i64 %91, !dbg !30
  store i16 %68, ptr addrspace(3) %92, align 2, !dbg !30
  %93 = add nuw nsw i32 %16, %79, !dbg !30
  %94 = zext nneg i32 %93 to i64, !dbg !30
  %95 = getelementptr half, ptr addrspace(3) @global_smem, i64 %94, !dbg !30
  store i16 %69, ptr addrspace(3) %95, align 2, !dbg !30
  %96 = add nuw nsw i32 %16, %83, !dbg !30
  %97 = zext nneg i32 %96 to i64, !dbg !30
  %98 = getelementptr half, ptr addrspace(3) @global_smem, i64 %97, !dbg !30
  store i16 %70, ptr addrspace(3) %98, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %99 = mul nuw nsw i32 %23, 40, !dbg !30
  %100 = add nuw nsw i32 %99, %18, !dbg !30
  %101 = zext nneg i32 %100 to i64, !dbg !30
  %102 = getelementptr half, ptr addrspace(3) @global_smem, i64 %101, !dbg !30
  %103 = load <8 x half>, ptr addrspace(3) %102, align 16, !dbg !30
  %104 = shl nsw i32 %42, 5, !dbg !31
  %.lhs.trunc = trunc i32 %.decomposed to i16, !dbg !32
  %105 = sdiv i16 %.lhs.trunc, 10, !dbg !32
  %.sext = sext i16 %105 to i32, !dbg !32
  %.lhs.trunc33 = trunc i32 %44 to i16, !dbg !32
  %106 = sdiv i16 %.lhs.trunc33, 10, !dbg !32
  %.sext34 = sext i16 %106 to i32, !dbg !32
  %.lhs.trunc35 = trunc i32 %45 to i16, !dbg !32
  %107 = sdiv i16 %.lhs.trunc35, 10, !dbg !32
  %.sext36 = sext i16 %107 to i32, !dbg !32
  %.lhs.trunc37 = trunc i32 %46 to i16, !dbg !32
  %108 = sdiv i16 %.lhs.trunc37, 10, !dbg !32
  %.sext38 = sext i16 %108 to i32, !dbg !32
  %109 = add nsw i32 %104, %.sext, !dbg !33
  %110 = add nsw i32 %104, %.sext34, !dbg !33
  %111 = add nsw i32 %104, %.sext36, !dbg !33
  %112 = add nsw i32 %104, %.sext38, !dbg !33
  %113 = sext i32 %109 to i64, !dbg !34
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !34
  %115 = sext i32 %110 to i64, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !34
  %117 = sext i32 %111 to i64, !dbg !34
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !34
  %119 = sext i32 %112 to i64, !dbg !34
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !34
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %37) #5, !dbg !35
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %37) #5, !dbg !35
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %37) #5, !dbg !35
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %37) #5, !dbg !35
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %37) #5, !dbg !35
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %37) #5, !dbg !35
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %37) #5, !dbg !35
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %37) #5, !dbg !35
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !36
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !36
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !36
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !36
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %37) #5, !dbg !37
  %134 = bitcast i32 %133 to float, !dbg !37
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %37) #5, !dbg !37
  %136 = bitcast i32 %135 to float, !dbg !37
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %37) #5, !dbg !37
  %138 = bitcast i32 %137 to float, !dbg !37
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %37) #5, !dbg !37
  %140 = bitcast i32 %139 to float, !dbg !37
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %37) #5, !dbg !37
  %142 = bitcast i32 %141 to float, !dbg !37
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %37) #5, !dbg !37
  %144 = bitcast i32 %143 to float, !dbg !37
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %37) #5, !dbg !37
  %146 = bitcast i32 %145 to float, !dbg !37
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %37) #5, !dbg !37
  %148 = bitcast i32 %147 to float, !dbg !37
  %149 = sext i32 %.decomposed to i64, !dbg !38
  %150 = getelementptr half, ptr addrspace(1) %3, i64 %149, !dbg !38
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %37) #5, !dbg !39
  %152 = getelementptr half, ptr addrspace(1) %4, i64 %149, !dbg !40
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %37) #5, !dbg !41
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 2.700000e+04) #5, !dbg !42
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.700000e+04) #5, !dbg !42
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.700000e+04) #5, !dbg !42
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.700000e+04) #5, !dbg !42
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 2.700000e+04) #5, !dbg !42
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 2.700000e+04) #5, !dbg !42
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 2.700000e+04) #5, !dbg !42
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.700000e+04) #5, !dbg !42
  %162 = fadd float %154, 0x3EE4F8B580000000, !dbg !43
  %163 = fadd float %155, 0x3EE4F8B580000000, !dbg !43
  %164 = fadd float %156, 0x3EE4F8B580000000, !dbg !43
  %165 = fadd float %157, 0x3EE4F8B580000000, !dbg !43
  %166 = fadd float %158, 0x3EE4F8B580000000, !dbg !43
  %167 = fadd float %159, 0x3EE4F8B580000000, !dbg !43
  %168 = fadd float %160, 0x3EE4F8B580000000, !dbg !43
  %169 = fadd float %161, 0x3EE4F8B580000000, !dbg !43
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %170, 0, !dbg !44
  br i1 %.not.i, label %173, label %171, !dbg !44

171:                                              ; preds = %8
  %172 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

173:                                              ; preds = %8
  %174 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %171, %173
  %.0.i = phi float [ %172, %171 ], [ %174, %173 ], !dbg !44
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i12 = icmp eq i32 %175, 0, !dbg !44
  br i1 %.not.i12, label %178, label %176, !dbg !44

176:                                              ; preds = %__nv_rsqrtf.exit
  %177 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !44
  br label %__nv_rsqrtf.exit14, !dbg !44

178:                                              ; preds = %__nv_rsqrtf.exit
  %179 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !44
  br label %__nv_rsqrtf.exit14, !dbg !44

__nv_rsqrtf.exit14:                               ; preds = %176, %178
  %.0.i13 = phi float [ %177, %176 ], [ %179, %178 ], !dbg !44
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i15 = icmp eq i32 %180, 0, !dbg !44
  br i1 %.not.i15, label %183, label %181, !dbg !44

181:                                              ; preds = %__nv_rsqrtf.exit14
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %164), !dbg !44
  br label %__nv_rsqrtf.exit17, !dbg !44

183:                                              ; preds = %__nv_rsqrtf.exit14
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %164), !dbg !44
  br label %__nv_rsqrtf.exit17, !dbg !44

__nv_rsqrtf.exit17:                               ; preds = %181, %183
  %.0.i16 = phi float [ %182, %181 ], [ %184, %183 ], !dbg !44
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i18 = icmp eq i32 %185, 0, !dbg !44
  br i1 %.not.i18, label %188, label %186, !dbg !44

186:                                              ; preds = %__nv_rsqrtf.exit17
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !44
  br label %__nv_rsqrtf.exit20, !dbg !44

188:                                              ; preds = %__nv_rsqrtf.exit17
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !44
  br label %__nv_rsqrtf.exit20, !dbg !44

__nv_rsqrtf.exit20:                               ; preds = %186, %188
  %.0.i19 = phi float [ %187, %186 ], [ %189, %188 ], !dbg !44
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i21 = icmp eq i32 %190, 0, !dbg !44
  br i1 %.not.i21, label %193, label %191, !dbg !44

191:                                              ; preds = %__nv_rsqrtf.exit20
  %192 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !44
  br label %__nv_rsqrtf.exit23, !dbg !44

193:                                              ; preds = %__nv_rsqrtf.exit20
  %194 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !44
  br label %__nv_rsqrtf.exit23, !dbg !44

__nv_rsqrtf.exit23:                               ; preds = %191, %193
  %.0.i22 = phi float [ %192, %191 ], [ %194, %193 ], !dbg !44
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i24 = icmp eq i32 %195, 0, !dbg !44
  br i1 %.not.i24, label %198, label %196, !dbg !44

196:                                              ; preds = %__nv_rsqrtf.exit23
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !44
  br label %__nv_rsqrtf.exit26, !dbg !44

198:                                              ; preds = %__nv_rsqrtf.exit23
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !44
  br label %__nv_rsqrtf.exit26, !dbg !44

__nv_rsqrtf.exit26:                               ; preds = %196, %198
  %.0.i25 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !44
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i27 = icmp eq i32 %200, 0, !dbg !44
  br i1 %.not.i27, label %203, label %201, !dbg !44

201:                                              ; preds = %__nv_rsqrtf.exit26
  %202 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %168), !dbg !44
  br label %__nv_rsqrtf.exit29, !dbg !44

203:                                              ; preds = %__nv_rsqrtf.exit26
  %204 = tail call float @llvm.nvvm.rsqrt.approx.f(float %168), !dbg !44
  br label %__nv_rsqrtf.exit29, !dbg !44

__nv_rsqrtf.exit29:                               ; preds = %201, %203
  %.0.i28 = phi float [ %202, %201 ], [ %204, %203 ], !dbg !44
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i30 = icmp eq i32 %205, 0, !dbg !44
  br i1 %.not.i30, label %208, label %206, !dbg !44

206:                                              ; preds = %__nv_rsqrtf.exit29
  %207 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !44
  br label %__nv_rsqrtf.exit32, !dbg !44

208:                                              ; preds = %__nv_rsqrtf.exit29
  %209 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !44
  br label %__nv_rsqrtf.exit32, !dbg !44

__nv_rsqrtf.exit32:                               ; preds = %206, %208
  %.0.i31 = phi float [ %207, %206 ], [ %209, %208 ], !dbg !44
  %210 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !35
  %211 = insertelement <2 x i32> %210, i32 %128, i64 1, !dbg !35
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !35
  %213 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !35
  %214 = insertelement <2 x i32> %213, i32 %126, i64 1, !dbg !35
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !35
  %216 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !35
  %217 = insertelement <2 x i32> %216, i32 %124, i64 1, !dbg !35
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !35
  %219 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !35
  %220 = insertelement <2 x i32> %219, i32 %122, i64 1, !dbg !35
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !35
  %222 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !41
  %extelt.offset11 = lshr i32 %222, 16, !dbg !41
  %223 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !41
  %extelt.offset10 = lshr i32 %223, 16, !dbg !41
  %224 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !41
  %extelt.offset9 = lshr i32 %224, 16, !dbg !41
  %225 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !41
  %extelt.offset8 = lshr i32 %225, 16, !dbg !41
  %226 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !39
  %extelt.offset7 = lshr i32 %226, 16, !dbg !39
  %227 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !39
  %extelt.offset6 = lshr i32 %227, 16, !dbg !39
  %228 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !39
  %extelt.offset5 = lshr i32 %228, 16, !dbg !39
  %229 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !39
  %extelt.offset4 = lshr i32 %229, 16, !dbg !39
  %230 = or i32 %39, %23, !dbg !21
  %231 = icmp slt i32 %230, 2700, !dbg !22
  %232 = and i1 %231, %37, !dbg !28
  %233 = mul i32 %230, 320, !dbg !45
  %234 = add i32 %.decomposed, %233, !dbg !46
  %235 = mul i32 %42, 864000, !dbg !47
  %236 = add i32 %234, %235, !dbg !48
  %237 = sext i32 %236 to i64, !dbg !49
  %238 = getelementptr half, ptr addrspace(1) %5, i64 %237, !dbg !49
  %239 = shufflevector <8 x half> %103, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !50
  %240 = fpext <2 x half> %239 to <2 x float>, !dbg !50
  %241 = fsub <2 x float> %240, %212, !dbg !51
  %242 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !41
  %243 = insertelement <2 x i32> %242, i32 %extelt.offset11, i64 1, !dbg !41
  %244 = trunc <2 x i32> %243 to <2 x i16>, !dbg !41
  %245 = bitcast <2 x i16> %244 to <2 x half>, !dbg !41
  %246 = fpext <2 x half> %245 to <2 x float>, !dbg !52
  %247 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !39
  %248 = insertelement <2 x i32> %247, i32 %extelt.offset7, i64 1, !dbg !39
  %249 = trunc <2 x i32> %248 to <2 x i16>, !dbg !39
  %250 = bitcast <2 x i16> %249 to <2 x half>, !dbg !39
  %251 = fpext <2 x half> %250 to <2 x float>, !dbg !53
  %252 = insertelement <2 x float> poison, float %.0.i28, i64 0, !dbg !54
  %253 = insertelement <2 x float> %252, float %.0.i31, i64 1, !dbg !54
  %254 = fmul <2 x float> %241, %253, !dbg !54
  %255 = fmul <2 x float> %254, %251, !dbg !55
  %256 = fadd <2 x float> %255, %246, !dbg !56
  %257 = extractelement <2 x float> %256, i64 0, !dbg !57
  %258 = fsub float 0.000000e+00, %257, !dbg !57
  %259 = extractelement <2 x float> %256, i64 1, !dbg !57
  %260 = fsub float 0.000000e+00, %259, !dbg !57
  %261 = fmul float %258, 0x3FF7154760000000, !dbg !61
  %262 = fmul float %260, 0x3FF7154760000000, !dbg !61
  %263 = shufflevector <8 x half> %103, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !50
  %264 = fpext <2 x half> %263 to <2 x float>, !dbg !50
  %265 = fsub <2 x float> %264, %215, !dbg !51
  %266 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !41
  %267 = insertelement <2 x i32> %266, i32 %extelt.offset10, i64 1, !dbg !41
  %268 = trunc <2 x i32> %267 to <2 x i16>, !dbg !41
  %269 = bitcast <2 x i16> %268 to <2 x half>, !dbg !41
  %270 = fpext <2 x half> %269 to <2 x float>, !dbg !52
  %271 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !39
  %272 = insertelement <2 x i32> %271, i32 %extelt.offset6, i64 1, !dbg !39
  %273 = trunc <2 x i32> %272 to <2 x i16>, !dbg !39
  %274 = bitcast <2 x i16> %273 to <2 x half>, !dbg !39
  %275 = fpext <2 x half> %274 to <2 x float>, !dbg !53
  %276 = insertelement <2 x float> poison, float %.0.i22, i64 0, !dbg !54
  %277 = insertelement <2 x float> %276, float %.0.i25, i64 1, !dbg !54
  %278 = fmul <2 x float> %265, %277, !dbg !54
  %279 = fmul <2 x float> %278, %275, !dbg !55
  %280 = fadd <2 x float> %279, %270, !dbg !56
  %281 = extractelement <2 x float> %280, i64 0, !dbg !57
  %282 = fsub float 0.000000e+00, %281, !dbg !57
  %283 = extractelement <2 x float> %280, i64 1, !dbg !57
  %284 = fsub float 0.000000e+00, %283, !dbg !57
  %285 = fmul float %282, 0x3FF7154760000000, !dbg !61
  %286 = fmul float %284, 0x3FF7154760000000, !dbg !61
  %287 = shufflevector <8 x half> %103, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !50
  %288 = fpext <2 x half> %287 to <2 x float>, !dbg !50
  %289 = fsub <2 x float> %288, %218, !dbg !51
  %290 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !41
  %291 = insertelement <2 x i32> %290, i32 %extelt.offset9, i64 1, !dbg !41
  %292 = trunc <2 x i32> %291 to <2 x i16>, !dbg !41
  %293 = bitcast <2 x i16> %292 to <2 x half>, !dbg !41
  %294 = fpext <2 x half> %293 to <2 x float>, !dbg !52
  %295 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !39
  %296 = insertelement <2 x i32> %295, i32 %extelt.offset5, i64 1, !dbg !39
  %297 = trunc <2 x i32> %296 to <2 x i16>, !dbg !39
  %298 = bitcast <2 x i16> %297 to <2 x half>, !dbg !39
  %299 = fpext <2 x half> %298 to <2 x float>, !dbg !53
  %300 = insertelement <2 x float> poison, float %.0.i16, i64 0, !dbg !54
  %301 = insertelement <2 x float> %300, float %.0.i19, i64 1, !dbg !54
  %302 = fmul <2 x float> %289, %301, !dbg !54
  %303 = fmul <2 x float> %302, %299, !dbg !55
  %304 = fadd <2 x float> %303, %294, !dbg !56
  %305 = extractelement <2 x float> %304, i64 0, !dbg !57
  %306 = fsub float 0.000000e+00, %305, !dbg !57
  %307 = extractelement <2 x float> %304, i64 1, !dbg !57
  %308 = fsub float 0.000000e+00, %307, !dbg !57
  %309 = fmul float %306, 0x3FF7154760000000, !dbg !61
  %310 = fmul float %308, 0x3FF7154760000000, !dbg !61
  %311 = shufflevector <8 x half> %103, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !50
  %312 = fpext <2 x half> %311 to <2 x float>, !dbg !50
  %313 = fsub <2 x float> %312, %221, !dbg !51
  %314 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !41
  %315 = insertelement <2 x i32> %314, i32 %extelt.offset8, i64 1, !dbg !41
  %316 = trunc <2 x i32> %315 to <2 x i16>, !dbg !41
  %317 = bitcast <2 x i16> %316 to <2 x half>, !dbg !41
  %318 = fpext <2 x half> %317 to <2 x float>, !dbg !52
  %319 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !39
  %320 = insertelement <2 x i32> %319, i32 %extelt.offset4, i64 1, !dbg !39
  %321 = trunc <2 x i32> %320 to <2 x i16>, !dbg !39
  %322 = bitcast <2 x i16> %321 to <2 x half>, !dbg !39
  %323 = fpext <2 x half> %322 to <2 x float>, !dbg !53
  %324 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !54
  %325 = insertelement <2 x float> %324, float %.0.i13, i64 1, !dbg !54
  %326 = fmul <2 x float> %313, %325, !dbg !54
  %327 = fmul <2 x float> %326, %323, !dbg !55
  %328 = fadd <2 x float> %327, %318, !dbg !56
  %329 = extractelement <2 x float> %328, i64 0, !dbg !57
  %330 = fsub float 0.000000e+00, %329, !dbg !57
  %331 = extractelement <2 x float> %328, i64 1, !dbg !57
  %332 = fsub float 0.000000e+00, %331, !dbg !57
  %333 = fmul float %330, 0x3FF7154760000000, !dbg !61
  %334 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %333) #5, !dbg !61
  %335 = fmul float %332, 0x3FF7154760000000, !dbg !61
  %336 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %335) #5, !dbg !61
  %337 = fadd float %334, 1.000000e+00, !dbg !62
  %338 = fadd float %336, 1.000000e+00, !dbg !62
  %339 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %309) #5, !dbg !61
  %340 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %310) #5, !dbg !61
  %341 = fadd float %339, 1.000000e+00, !dbg !62
  %342 = fadd float %340, 1.000000e+00, !dbg !62
  %343 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %285) #5, !dbg !61
  %344 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %286) #5, !dbg !61
  %345 = fadd float %343, 1.000000e+00, !dbg !62
  %346 = fadd float %344, 1.000000e+00, !dbg !62
  %347 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %261) #5, !dbg !61
  %348 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %262) #5, !dbg !61
  %349 = fadd float %347, 1.000000e+00, !dbg !62
  %350 = fadd float %348, 1.000000e+00, !dbg !62
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %337) #5, !dbg !63
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %338) #5, !dbg !63
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %341) #5, !dbg !63
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %342) #5, !dbg !63
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %345) #5, !dbg !63
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %346) #5, !dbg !63
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %349) #5, !dbg !63
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %350) #5, !dbg !63
  %359 = insertelement <2 x float> poison, float %351, i64 0, !dbg !64
  %360 = insertelement <2 x float> %359, float %352, i64 1, !dbg !64
  %361 = fmul <2 x float> %328, %360, !dbg !64
  %362 = insertelement <2 x float> poison, float %353, i64 0, !dbg !64
  %363 = insertelement <2 x float> %362, float %354, i64 1, !dbg !64
  %364 = fmul <2 x float> %304, %363, !dbg !64
  %365 = insertelement <2 x float> poison, float %355, i64 0, !dbg !64
  %366 = insertelement <2 x float> %365, float %356, i64 1, !dbg !64
  %367 = fmul <2 x float> %280, %366, !dbg !64
  %368 = insertelement <2 x float> poison, float %357, i64 0, !dbg !64
  %369 = insertelement <2 x float> %368, float %358, i64 1, !dbg !64
  %370 = fmul <2 x float> %256, %369, !dbg !64
  %371 = fptrunc <2 x float> %361 to <2 x half>, !dbg !30
  %372 = fptrunc <2 x float> %364 to <2 x half>, !dbg !30
  %373 = fptrunc <2 x float> %367 to <2 x half>, !dbg !30
  %374 = fptrunc <2 x float> %370 to <2 x half>, !dbg !30
  %375 = bitcast <2 x half> %371 to i32, !dbg !30
  %376 = bitcast <2 x half> %372 to i32, !dbg !30
  %377 = bitcast <2 x half> %373 to i32, !dbg !30
  %378 = bitcast <2 x half> %374 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %375, i32 %376, i32 %377, i32 %378, ptr addrspace(1) %238, i1 %232) #5, !dbg !30
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cqb32uiw36vwnyvtgujzwoc6yznuefj5hj5slb6u5za62hz3c3bq.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/qb")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7", linkageName: "triton__0d1d2d3d4d5d6de7", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 44, scope: !7)
!11 = !DILocation(line: 27, column: 44, scope: !7)
!12 = !DILocation(line: 23, column: 28, scope: !7)
!13 = !DILocation(line: 23, column: 48, scope: !7)
!14 = !DILocation(line: 23, column: 53, scope: !7)
!15 = !DILocation(line: 23, column: 34, scope: !7)
!16 = !DILocation(line: 23, column: 58, scope: !7)
!17 = !DILocation(line: 24, column: 23, scope: !7)
!18 = !DILocation(line: 25, column: 21, scope: !7)
!19 = !DILocation(line: 26, column: 28, scope: !7)
!20 = !DILocation(line: 26, column: 33, scope: !7)
!21 = !DILocation(line: 27, column: 23, scope: !7)
!22 = !DILocation(line: 28, column: 21, scope: !7)
!23 = !DILocation(line: 32, column: 20, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 41, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 47, scope: !7)
!30 = !DILocation(line: 53, column: 62, scope: !7)
!31 = !DILocation(line: 34, column: 34, scope: !7)
!32 = !DILocation(line: 34, column: 47, scope: !7)
!33 = !DILocation(line: 34, column: 41, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 53, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 53, scope: !7)
!38 = !DILocation(line: 36, column: 31, scope: !7)
!39 = !DILocation(line: 36, column: 36, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 36, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 27, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 49, scope: !7)
!48 = !DILocation(line: 53, column: 42, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 33, column: 95, scope: !7)
!51 = !DILocation(line: 39, column: 18, scope: !7)
!52 = !DILocation(line: 37, column: 76, scope: !7)
!53 = !DILocation(line: 36, column: 76, scope: !7)
!54 = !DILocation(line: 45, column: 19, scope: !7)
!55 = !DILocation(line: 47, column: 20, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 27, column: 30, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!60 = !DILocation(line: 50, column: 23, scope: !58)
!61 = !DILocation(line: 27, column: 29, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 27, column: 20, scope: !58, inlinedAt: !60)
!63 = !DILocation(line: 27, column: 16, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 51, column: 20, scope: !7)
!65 = !DILocation(line: 53, column: 4, scope: !7)
