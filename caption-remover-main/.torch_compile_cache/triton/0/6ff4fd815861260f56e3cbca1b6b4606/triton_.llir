; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = lshr i32 %7, 6, !dbg !8
  %9 = and i32 %8, 1, !dbg !8
  %10 = shl i32 %7, 3, !dbg !9
  %11 = and i32 %10, 504, !dbg !9
  %12 = and i32 %7, 127, !dbg !9
  %13 = or i32 %12, 128, !dbg !9
  %14 = or i32 %12, 256, !dbg !9
  %15 = or i32 %12, 384, !dbg !9
  %16 = shl nuw nsw i32 %12, 2, !dbg !9
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %19 = add i32 %18, 1, !dbg !12
  %20 = shl i32 %17, 1, !dbg !13
  %21 = mul i32 %20, %19, !dbg !14
  %22 = or i32 %21, %9, !dbg !15
  %23 = or i32 %21, 1, !dbg !15
  %24 = icmp slt i32 %22, 14850, !dbg !16
  %25 = icmp slt i32 %21, 14850, !dbg !16
  %26 = icmp slt i32 %23, 14850, !dbg !16
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %28 = shl i32 %27, 9, !dbg !18
  %29 = or i32 %28, %11, !dbg !19
  %30 = or i32 %28, %12, !dbg !19
  %31 = or i32 %28, %13, !dbg !19
  %32 = or i32 %28, %14, !dbg !19
  %33 = or i32 %28, %15, !dbg !19
  %34 = or i32 %28, %16, !dbg !19
  %35 = icmp slt i32 %29, 320, !dbg !20
  %36 = icmp slt i32 %30, 320, !dbg !20
  %37 = icmp slt i32 %31, 320, !dbg !20
  %38 = icmp slt i32 %32, 320, !dbg !20
  %39 = icmp slt i32 %33, 320, !dbg !20
  %40 = icmp slt i32 %34, 320, !dbg !20
  %.frozen = freeze i32 %21
  %41 = sdiv i32 %.frozen, 675, !dbg !21
  %42 = mul i32 %41, 675
  %.decomposed = sub i32 %.frozen, %42
  %.frozen10 = freeze i32 %23
  %43 = sdiv i32 %.frozen10, 675, !dbg !21
  %44 = mul i32 %43, 675
  %.decomposed11 = sub i32 %.frozen10, %44
  %45 = mul i32 %22, 320, !dbg !22
  %46 = add i32 %45, %29, !dbg !23
  %47 = sext i32 %46 to i64, !dbg !24
  %48 = getelementptr half, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = and i1 %35, %24, !dbg !25
  %50 = and i1 %25, %36, !dbg !25
  %51 = and i1 %25, %37, !dbg !25
  %52 = and i1 %25, %38, !dbg !25
  %53 = and i1 %25, %39, !dbg !25
  %54 = and i1 %36, %26, !dbg !25
  %55 = and i1 %37, %26, !dbg !25
  %56 = and i1 %38, %26, !dbg !25
  %57 = and i1 %39, %26, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %49) #2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = trunc i32 %59 to i16, !dbg !26
  %extelt.offset = lshr i32 %59, 16, !dbg !26
  %64 = trunc i32 %extelt.offset to i16, !dbg !26
  %65 = trunc i32 %60 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %60, 16, !dbg !26
  %66 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %67 = trunc i32 %61 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %61, 16, !dbg !26
  %68 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %69 = trunc i32 %62 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %62, 16, !dbg !26
  %70 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %71 = mul nuw nsw i32 %9, 513, !dbg !27
  %72 = add nuw nsw i32 %71, %11, !dbg !27
  %73 = zext nneg i32 %72 to i64, !dbg !27
  %74 = getelementptr half, ptr addrspace(3) @global_smem, i64 %73, !dbg !27
  store i16 %63, ptr addrspace(3) %74, align 2, !dbg !27
  %75 = or i32 %11, 1, !dbg !27
  %76 = add nuw nsw i32 %75, %71, !dbg !27
  %77 = zext nneg i32 %76 to i64, !dbg !27
  %78 = getelementptr half, ptr addrspace(3) @global_smem, i64 %77, !dbg !27
  store i16 %64, ptr addrspace(3) %78, align 2, !dbg !27
  %79 = or i32 %11, 2, !dbg !27
  %80 = add nuw nsw i32 %79, %71, !dbg !27
  %81 = zext nneg i32 %80 to i64, !dbg !27
  %82 = getelementptr half, ptr addrspace(3) @global_smem, i64 %81, !dbg !27
  store i16 %65, ptr addrspace(3) %82, align 2, !dbg !27
  %83 = or i32 %11, 3, !dbg !27
  %84 = add nuw nsw i32 %83, %71, !dbg !27
  %85 = zext nneg i32 %84 to i64, !dbg !27
  %86 = getelementptr half, ptr addrspace(3) @global_smem, i64 %85, !dbg !27
  store i16 %66, ptr addrspace(3) %86, align 2, !dbg !27
  %87 = or i32 %11, 4, !dbg !27
  %88 = add nuw nsw i32 %87, %71, !dbg !27
  %89 = zext nneg i32 %88 to i64, !dbg !27
  %90 = getelementptr half, ptr addrspace(3) @global_smem, i64 %89, !dbg !27
  store i16 %67, ptr addrspace(3) %90, align 2, !dbg !27
  %91 = or i32 %11, 5, !dbg !27
  %92 = add nuw nsw i32 %91, %71, !dbg !27
  %93 = zext nneg i32 %92 to i64, !dbg !27
  %94 = getelementptr half, ptr addrspace(3) @global_smem, i64 %93, !dbg !27
  store i16 %68, ptr addrspace(3) %94, align 2, !dbg !27
  %95 = or i32 %11, 6, !dbg !27
  %96 = add nuw nsw i32 %95, %71, !dbg !27
  %97 = zext nneg i32 %96 to i64, !dbg !27
  %98 = getelementptr half, ptr addrspace(3) @global_smem, i64 %97, !dbg !27
  store i16 %69, ptr addrspace(3) %98, align 2, !dbg !27
  %99 = or i32 %11, 7, !dbg !27
  %100 = add nuw nsw i32 %99, %71, !dbg !27
  %101 = zext nneg i32 %100 to i64, !dbg !27
  %102 = getelementptr half, ptr addrspace(3) @global_smem, i64 %101, !dbg !27
  store i16 %70, ptr addrspace(3) %102, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %103 = zext nneg i32 %12 to i64, !dbg !27
  %104 = getelementptr half, ptr addrspace(3) @global_smem, i64 %103, !dbg !27
  %105 = load half, ptr addrspace(3) %104, align 2, !dbg !27
  %106 = zext nneg i32 %13 to i64, !dbg !27
  %107 = getelementptr half, ptr addrspace(3) @global_smem, i64 %106, !dbg !27
  %108 = load half, ptr addrspace(3) %107, align 2, !dbg !27
  %109 = zext nneg i32 %14 to i64, !dbg !27
  %110 = getelementptr half, ptr addrspace(3) @global_smem, i64 %109, !dbg !27
  %111 = load half, ptr addrspace(3) %110, align 2, !dbg !27
  %112 = zext nneg i32 %15 to i64, !dbg !27
  %113 = getelementptr half, ptr addrspace(3) @global_smem, i64 %112, !dbg !27
  %114 = load half, ptr addrspace(3) %113, align 2, !dbg !27
  %115 = add nuw nsw i32 %12, 513, !dbg !27
  %116 = zext nneg i32 %115 to i64, !dbg !27
  %117 = getelementptr half, ptr addrspace(3) @global_smem, i64 %116, !dbg !27
  %118 = load half, ptr addrspace(3) %117, align 2, !dbg !27
  %119 = add nuw nsw i32 %12, 641, !dbg !27
  %120 = zext nneg i32 %119 to i64, !dbg !27
  %121 = getelementptr half, ptr addrspace(3) @global_smem, i64 %120, !dbg !27
  %122 = load half, ptr addrspace(3) %121, align 2, !dbg !27
  %123 = add nuw nsw i32 %12, 769, !dbg !27
  %124 = zext nneg i32 %123 to i64, !dbg !27
  %125 = getelementptr half, ptr addrspace(3) @global_smem, i64 %124, !dbg !27
  %126 = load half, ptr addrspace(3) %125, align 2, !dbg !27
  %127 = add nuw nsw i32 %12, 897, !dbg !27
  %128 = zext nneg i32 %127 to i64, !dbg !27
  %129 = getelementptr half, ptr addrspace(3) @global_smem, i64 %128, !dbg !27
  %130 = load half, ptr addrspace(3) %129, align 2, !dbg !27
  %131 = fpext half %105 to float, !dbg !27
  %132 = fpext half %108 to float, !dbg !27
  %133 = fpext half %111 to float, !dbg !27
  %134 = fpext half %114 to float, !dbg !27
  %135 = fpext half %118 to float, !dbg !27
  %136 = fpext half %122 to float, !dbg !27
  %137 = fpext half %126 to float, !dbg !27
  %138 = fpext half %130 to float, !dbg !27
  %139 = sext i32 %34 to i64, !dbg !28
  %140 = getelementptr half, ptr addrspace(1) %1, i64 %139, !dbg !28
  %141 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %140, i1 %40) #2, !dbg !29
  %142 = extractvalue { i32, i32 } %141, 0, !dbg !29
  %143 = extractvalue { i32, i32 } %141, 1, !dbg !29
  %144 = trunc i32 %142 to i16, !dbg !29
  %145 = bitcast i16 %144 to half, !dbg !29
  %extelt.offset4 = lshr i32 %142, 16, !dbg !29
  %146 = trunc i32 %extelt.offset4 to i16, !dbg !29
  %147 = bitcast i16 %146 to half, !dbg !29
  %148 = trunc i32 %143 to i16, !dbg !29
  %149 = bitcast i16 %148 to half, !dbg !29
  %extelt.offset5 = lshr i32 %143, 16, !dbg !29
  %150 = trunc i32 %extelt.offset5 to i16, !dbg !29
  %151 = bitcast i16 %150 to half, !dbg !29
  %152 = fpext half %145 to float, !dbg !30
  %153 = fpext half %147 to float, !dbg !30
  %154 = fpext half %149 to float, !dbg !30
  %155 = fpext half %151 to float, !dbg !30
  %156 = getelementptr half, ptr addrspace(1) %2, i64 %47, !dbg !31
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %49) #2, !dbg !32
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !32
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !32
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !32
  %162 = trunc i32 %158 to i16, !dbg !32
  %extelt.offset6 = lshr i32 %158, 16, !dbg !32
  %163 = trunc i32 %extelt.offset6 to i16, !dbg !32
  %164 = trunc i32 %159 to i16, !dbg !32
  %extelt.offset7 = lshr i32 %159, 16, !dbg !32
  %165 = trunc i32 %extelt.offset7 to i16, !dbg !32
  %166 = trunc i32 %160 to i16, !dbg !32
  %extelt.offset8 = lshr i32 %160, 16, !dbg !32
  %167 = trunc i32 %extelt.offset8 to i16, !dbg !32
  %168 = trunc i32 %161 to i16, !dbg !32
  %extelt.offset9 = lshr i32 %161, 16, !dbg !32
  %169 = trunc i32 %extelt.offset9 to i16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  store i16 %162, ptr addrspace(3) %74, align 2, !dbg !33
  store i16 %163, ptr addrspace(3) %78, align 2, !dbg !33
  store i16 %164, ptr addrspace(3) %82, align 2, !dbg !33
  store i16 %165, ptr addrspace(3) %86, align 2, !dbg !33
  store i16 %166, ptr addrspace(3) %90, align 2, !dbg !33
  store i16 %167, ptr addrspace(3) %94, align 2, !dbg !33
  store i16 %168, ptr addrspace(3) %98, align 2, !dbg !33
  store i16 %169, ptr addrspace(3) %102, align 2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %170 = load half, ptr addrspace(3) %104, align 2, !dbg !33
  %171 = load half, ptr addrspace(3) %107, align 2, !dbg !33
  %172 = load half, ptr addrspace(3) %110, align 2, !dbg !33
  %173 = load half, ptr addrspace(3) %113, align 2, !dbg !33
  %174 = load half, ptr addrspace(3) %117, align 2, !dbg !33
  %175 = load half, ptr addrspace(3) %121, align 2, !dbg !33
  %176 = load half, ptr addrspace(3) %125, align 2, !dbg !33
  %177 = load half, ptr addrspace(3) %129, align 2, !dbg !33
  %178 = fpext half %170 to float, !dbg !34
  %179 = fpext half %171 to float, !dbg !34
  %180 = fpext half %172 to float, !dbg !34
  %181 = fpext half %173 to float, !dbg !34
  %182 = fpext half %174 to float, !dbg !34
  %183 = fpext half %175 to float, !dbg !34
  %184 = fpext half %176 to float, !dbg !34
  %185 = fpext half %177 to float, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %186 = zext nneg i32 %16 to i64, !dbg !35
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !35
  %188 = insertelement <1 x float> undef, float %152, i64 0, !dbg !35
  store <1 x float> %188, ptr addrspace(3) %187, align 4, !dbg !35
  %189 = or i32 %16, 1, !dbg !35
  %190 = zext nneg i32 %189 to i64, !dbg !35
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !35
  %192 = insertelement <1 x float> undef, float %153, i64 0, !dbg !35
  store <1 x float> %192, ptr addrspace(3) %191, align 4, !dbg !35
  %193 = or i32 %16, 2, !dbg !35
  %194 = zext nneg i32 %193 to i64, !dbg !35
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194, !dbg !35
  %196 = insertelement <1 x float> undef, float %154, i64 0, !dbg !35
  store <1 x float> %196, ptr addrspace(3) %195, align 4, !dbg !35
  %197 = or i32 %16, 3, !dbg !35
  %198 = zext nneg i32 %197 to i64, !dbg !35
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198, !dbg !35
  %200 = insertelement <1 x float> undef, float %155, i64 0, !dbg !35
  store <1 x float> %200, ptr addrspace(3) %199, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !35
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !35
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %106, !dbg !35
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !35
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %109, !dbg !35
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !35
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i64 %112, !dbg !35
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !35
  %209 = fadd float %202, %131, !dbg !35
  %210 = fadd float %204, %132, !dbg !35
  %211 = fadd float %206, %133, !dbg !35
  %212 = fadd float %208, %134, !dbg !35
  %213 = fadd float %202, %135, !dbg !35
  %214 = fadd float %204, %136, !dbg !35
  %215 = fadd float %206, %137, !dbg !35
  %216 = fadd float %208, %138, !dbg !35
  %217 = fmul float %178, 1.250000e-01, !dbg !36
  %218 = fmul float %179, 1.250000e-01, !dbg !36
  %219 = fmul float %180, 1.250000e-01, !dbg !36
  %220 = fmul float %181, 1.250000e-01, !dbg !36
  %221 = fmul float %182, 1.250000e-01, !dbg !36
  %222 = fmul float %183, 1.250000e-01, !dbg !36
  %223 = fmul float %184, 1.250000e-01, !dbg !36
  %224 = fmul float %185, 1.250000e-01, !dbg !36
  %225 = fadd float %217, %209, !dbg !37
  %226 = fadd float %218, %210, !dbg !37
  %227 = fadd float %219, %211, !dbg !37
  %228 = fadd float %220, %212, !dbg !37
  %229 = fadd float %221, %213, !dbg !37
  %230 = fadd float %222, %214, !dbg !37
  %231 = fadd float %223, %215, !dbg !37
  %232 = fadd float %224, %216, !dbg !37
  %233 = mul i32 %30, 675, !dbg !38
  %234 = mul i32 %31, 675, !dbg !38
  %235 = mul i32 %32, 675, !dbg !38
  %236 = mul i32 %33, 675, !dbg !38
  %237 = mul i32 %41, 216000, !dbg !39
  %238 = mul i32 %43, 216000, !dbg !39
  %239 = add i32 %237, %.decomposed, !dbg !40
  %240 = add i32 %239, %233, !dbg !41
  %241 = add i32 %239, %234, !dbg !41
  %242 = add i32 %239, %235, !dbg !41
  %243 = add i32 %239, %236, !dbg !41
  %244 = add i32 %238, %.decomposed11, !dbg !40
  %245 = add i32 %244, %233, !dbg !41
  %246 = add i32 %244, %234, !dbg !41
  %247 = add i32 %244, %235, !dbg !41
  %248 = add i32 %244, %236, !dbg !41
  %249 = sext i32 %240 to i64, !dbg !42
  %250 = getelementptr half, ptr addrspace(1) %3, i64 %249, !dbg !42
  %251 = sext i32 %241 to i64, !dbg !42
  %252 = getelementptr half, ptr addrspace(1) %3, i64 %251, !dbg !42
  %253 = sext i32 %242 to i64, !dbg !42
  %254 = getelementptr half, ptr addrspace(1) %3, i64 %253, !dbg !42
  %255 = sext i32 %243 to i64, !dbg !42
  %256 = getelementptr half, ptr addrspace(1) %3, i64 %255, !dbg !42
  %257 = sext i32 %245 to i64, !dbg !42
  %258 = getelementptr half, ptr addrspace(1) %3, i64 %257, !dbg !42
  %259 = sext i32 %246 to i64, !dbg !42
  %260 = getelementptr half, ptr addrspace(1) %3, i64 %259, !dbg !42
  %261 = sext i32 %247 to i64, !dbg !42
  %262 = getelementptr half, ptr addrspace(1) %3, i64 %261, !dbg !42
  %263 = sext i32 %248 to i64, !dbg !42
  %264 = getelementptr half, ptr addrspace(1) %3, i64 %263, !dbg !42
  %265 = fptrunc float %225 to half, !dbg !33
  %266 = fptrunc float %226 to half, !dbg !33
  %267 = fptrunc float %227 to half, !dbg !33
  %268 = fptrunc float %228 to half, !dbg !33
  %269 = fptrunc float %229 to half, !dbg !33
  %270 = fptrunc float %230 to half, !dbg !33
  %271 = fptrunc float %231 to half, !dbg !33
  %272 = fptrunc float %232 to half, !dbg !33
  %273 = bitcast half %265 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %273, ptr addrspace(1) %250, i1 %50) #2, !dbg !33
  %274 = bitcast half %266 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %274, ptr addrspace(1) %252, i1 %51) #2, !dbg !33
  %275 = bitcast half %267 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %275, ptr addrspace(1) %254, i1 %52) #2, !dbg !33
  %276 = bitcast half %268 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %276, ptr addrspace(1) %256, i1 %53) #2, !dbg !33
  %277 = bitcast half %269 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %277, ptr addrspace(1) %258, i1 %54) #2, !dbg !33
  %278 = bitcast half %270 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %278, ptr addrspace(1) %260, i1 %55) #2, !dbg !33
  %279 = bitcast half %271 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %279, ptr addrspace(1) %262, i1 %56) #2, !dbg !33
  %280 = bitcast half %272 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %280, ptr addrspace(1) %264, i1 %57) #2, !dbg !33
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cflmorxwram7b53hs73bzvriztaxm7ly3y2s7goaejppuevdgnlk.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/fl")
!3 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 40, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 54, scope: !5)
!26 = !DILocation(line: 33, column: 46, scope: !5)
!27 = !DILocation(line: 33, column: 94, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 34, column: 35, scope: !5)
!30 = !DILocation(line: 34, column: 75, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 40, column: 61, scope: !5)
!34 = !DILocation(line: 35, column: 94, scope: !5)
!35 = !DILocation(line: 36, column: 18, scope: !5)
!36 = !DILocation(line: 38, column: 18, scope: !5)
!37 = !DILocation(line: 39, column: 18, scope: !5)
!38 = !DILocation(line: 40, column: 35, scope: !5)
!39 = !DILocation(line: 40, column: 49, scope: !5)
!40 = !DILocation(line: 40, column: 31, scope: !5)
!41 = !DILocation(line: 40, column: 42, scope: !5)
!42 = !DILocation(line: 40, column: 25, scope: !5)
!43 = !DILocation(line: 40, column: 4, scope: !5)
