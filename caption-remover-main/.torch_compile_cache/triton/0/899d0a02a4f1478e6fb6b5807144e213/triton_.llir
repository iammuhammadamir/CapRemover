; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = shl i32 %8, 3, !dbg !10
  %10 = and i32 %9, 1016, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %12 = shl i32 %11, 10, !dbg !12
  %13 = or i32 %12, %10, !dbg !13
  %14 = or i32 %13, 4, !dbg !13
  %15 = icmp slt i32 %13, 19008000, !dbg !14
  %.frozen = freeze i32 %13
  %16 = sdiv i32 %.frozen, 2700, !dbg !15
  %17 = mul i32 %16, 2700
  %.decomposed = sub i32 %.frozen, %17
  %.frozen25 = freeze i32 %14
  %18 = sdiv i32 %.frozen25, 2700, !dbg !15
  %19 = mul i32 %18, 2700
  %.decomposed26 = sub i32 %.frozen25, %19
  %20 = srem i32 %16, 22, !dbg !16
  %21 = srem i32 %18, 22, !dbg !16
  %22 = sdiv i32 %13, 59400, !dbg !17
  %23 = mul nsw i32 %22, 2700, !dbg !18
  %24 = add nsw i32 %23, %.decomposed, !dbg !19
  %25 = mul nsw i32 %20, 864000, !dbg !20
  %26 = mul nsw i32 %21, 864000, !dbg !20
  %27 = add nsw i32 %24, %25, !dbg !21
  %28 = add nsw i32 %26, %.decomposed26, !dbg !19
  %29 = add nsw i32 %28, %23, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr half, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %15) #4, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #4, !dbg !23
  %36 = sdiv i32 %13, 594000, !dbg !24
  %37 = sext i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %53 = bitcast i32 %52 to float, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %59 = bitcast i32 %58 to float, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %61 = bitcast i32 %60 to float, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %15) #4, !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = sext i32 %22 to i64, !dbg !29
  %65 = getelementptr half, ptr addrspace(1) %3, i64 %64, !dbg !29
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !30
  %74 = getelementptr half, ptr addrspace(1) %4, i64 %64, !dbg !31
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %15) #4, !dbg !32
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 5.940000e+05) #4, !dbg !33
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 5.940000e+05) #4, !dbg !33
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 5.940000e+05) #4, !dbg !33
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 5.940000e+05) #4, !dbg !33
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 5.940000e+05) #4, !dbg !33
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 5.940000e+05) #4, !dbg !33
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 5.940000e+05) #4, !dbg !33
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 5.940000e+05) #4, !dbg !33
  %91 = fadd float %83, 0x3EB0C6F7A0000000, !dbg !34
  %92 = fadd float %84, 0x3EB0C6F7A0000000, !dbg !34
  %93 = fadd float %85, 0x3EB0C6F7A0000000, !dbg !34
  %94 = fadd float %86, 0x3EB0C6F7A0000000, !dbg !34
  %95 = fadd float %87, 0x3EB0C6F7A0000000, !dbg !34
  %96 = fadd float %88, 0x3EB0C6F7A0000000, !dbg !34
  %97 = fadd float %89, 0x3EB0C6F7A0000000, !dbg !34
  %98 = fadd float %90, 0x3EB0C6F7A0000000, !dbg !34
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %99, 0, !dbg !35
  br i1 %.not.i, label %102, label %100, !dbg !35

100:                                              ; preds = %7
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

102:                                              ; preds = %7
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %100, %102
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], !dbg !35
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i4 = icmp eq i32 %104, 0, !dbg !35
  br i1 %.not.i4, label %107, label %105, !dbg !35

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !35
  br label %__nv_rsqrtf.exit6, !dbg !35

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !35
  br label %__nv_rsqrtf.exit6, !dbg !35

__nv_rsqrtf.exit6:                                ; preds = %105, %107
  %.0.i5 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !35
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i7 = icmp eq i32 %109, 0, !dbg !35
  br i1 %.not.i7, label %112, label %110, !dbg !35

110:                                              ; preds = %__nv_rsqrtf.exit6
  %111 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !35
  br label %__nv_rsqrtf.exit9, !dbg !35

112:                                              ; preds = %__nv_rsqrtf.exit6
  %113 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !35
  br label %__nv_rsqrtf.exit9, !dbg !35

__nv_rsqrtf.exit9:                                ; preds = %110, %112
  %.0.i8 = phi float [ %111, %110 ], [ %113, %112 ], !dbg !35
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i10 = icmp eq i32 %114, 0, !dbg !35
  br i1 %.not.i10, label %117, label %115, !dbg !35

115:                                              ; preds = %__nv_rsqrtf.exit9
  %116 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !35
  br label %__nv_rsqrtf.exit12, !dbg !35

117:                                              ; preds = %__nv_rsqrtf.exit9
  %118 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !35
  br label %__nv_rsqrtf.exit12, !dbg !35

__nv_rsqrtf.exit12:                               ; preds = %115, %117
  %.0.i11 = phi float [ %116, %115 ], [ %118, %117 ], !dbg !35
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i13 = icmp eq i32 %119, 0, !dbg !35
  br i1 %.not.i13, label %122, label %120, !dbg !35

120:                                              ; preds = %__nv_rsqrtf.exit12
  %121 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !35
  br label %__nv_rsqrtf.exit15, !dbg !35

122:                                              ; preds = %__nv_rsqrtf.exit12
  %123 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !35
  br label %__nv_rsqrtf.exit15, !dbg !35

__nv_rsqrtf.exit15:                               ; preds = %120, %122
  %.0.i14 = phi float [ %121, %120 ], [ %123, %122 ], !dbg !35
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i16 = icmp eq i32 %124, 0, !dbg !35
  br i1 %.not.i16, label %127, label %125, !dbg !35

125:                                              ; preds = %__nv_rsqrtf.exit15
  %126 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %96), !dbg !35
  br label %__nv_rsqrtf.exit18, !dbg !35

127:                                              ; preds = %__nv_rsqrtf.exit15
  %128 = tail call float @llvm.nvvm.rsqrt.approx.f(float %96), !dbg !35
  br label %__nv_rsqrtf.exit18, !dbg !35

__nv_rsqrtf.exit18:                               ; preds = %125, %127
  %.0.i17 = phi float [ %126, %125 ], [ %128, %127 ], !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i19 = icmp eq i32 %129, 0, !dbg !35
  br i1 %.not.i19, label %132, label %130, !dbg !35

130:                                              ; preds = %__nv_rsqrtf.exit18
  %131 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %97), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

132:                                              ; preds = %__nv_rsqrtf.exit18
  %133 = tail call float @llvm.nvvm.rsqrt.approx.f(float %97), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

__nv_rsqrtf.exit21:                               ; preds = %130, %132
  %.0.i20 = phi float [ %131, %130 ], [ %133, %132 ], !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i22 = icmp eq i32 %134, 0, !dbg !35
  br i1 %.not.i22, label %137, label %135, !dbg !35

135:                                              ; preds = %__nv_rsqrtf.exit21
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

137:                                              ; preds = %__nv_rsqrtf.exit21
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

__nv_rsqrtf.exit24:                               ; preds = %135, %137
  %.0.i23 = phi float [ %136, %135 ], [ %138, %137 ], !dbg !35
  %139 = extractvalue { i32, i32 } %35, 1, !dbg !23
  %extelt.offset3 = lshr i32 %139, 16, !dbg !23
  %140 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !26
  %141 = insertelement <2 x i32> %140, i32 %46, i64 1, !dbg !26
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !26
  %143 = extractvalue { i32, i32 } %35, 0, !dbg !23
  %extelt.offset2 = lshr i32 %143, 16, !dbg !23
  %144 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !26
  %145 = insertelement <2 x i32> %144, i32 %44, i64 1, !dbg !26
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !26
  %147 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %extelt.offset1 = lshr i32 %147, 16, !dbg !23
  %148 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !26
  %149 = insertelement <2 x i32> %148, i32 %42, i64 1, !dbg !26
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !26
  %151 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %extelt.offset = lshr i32 %151, 16, !dbg !23
  %152 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %153 = insertelement <2 x i32> %152, i32 %40, i64 1, !dbg !26
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !26
  %155 = insertelement <2 x i16> poison, i16 %81, i64 0, !dbg !32
  %156 = insertelement <2 x i16> %155, i16 %82, i64 1, !dbg !32
  %157 = bitcast <2 x i16> %156 to <2 x half>, !dbg !32
  %158 = insertelement <2 x i16> poison, i16 %79, i64 0, !dbg !32
  %159 = insertelement <2 x i16> %158, i16 %80, i64 1, !dbg !32
  %160 = bitcast <2 x i16> %159 to <2 x half>, !dbg !32
  %161 = insertelement <2 x i16> poison, i16 %77, i64 0, !dbg !32
  %162 = insertelement <2 x i16> %161, i16 %78, i64 1, !dbg !32
  %163 = bitcast <2 x i16> %162 to <2 x half>, !dbg !32
  %164 = insertelement <2 x i16> poison, i16 %75, i64 0, !dbg !32
  %165 = insertelement <2 x i16> %164, i16 %76, i64 1, !dbg !32
  %166 = bitcast <2 x i16> %165 to <2 x half>, !dbg !32
  %167 = insertelement <2 x i16> poison, i16 %72, i64 0, !dbg !30
  %168 = insertelement <2 x i16> %167, i16 %73, i64 1, !dbg !30
  %169 = bitcast <2 x i16> %168 to <2 x half>, !dbg !30
  %170 = insertelement <2 x i16> poison, i16 %70, i64 0, !dbg !30
  %171 = insertelement <2 x i16> %170, i16 %71, i64 1, !dbg !30
  %172 = bitcast <2 x i16> %171 to <2 x half>, !dbg !30
  %173 = insertelement <2 x i16> poison, i16 %68, i64 0, !dbg !30
  %174 = insertelement <2 x i16> %173, i16 %69, i64 1, !dbg !30
  %175 = bitcast <2 x i16> %174 to <2 x half>, !dbg !30
  %176 = insertelement <2 x i16> poison, i16 %66, i64 0, !dbg !30
  %177 = insertelement <2 x i16> %176, i16 %67, i64 1, !dbg !30
  %178 = bitcast <2 x i16> %177 to <2 x half>, !dbg !30
  %179 = sext i32 %13 to i64, !dbg !36
  %180 = getelementptr half, ptr addrspace(1) %5, i64 %179, !dbg !36
  %181 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !23
  %182 = insertelement <2 x i32> %181, i32 %extelt.offset, i64 1, !dbg !23
  %183 = trunc <2 x i32> %182 to <2 x i16>, !dbg !23
  %184 = bitcast <2 x i16> %183 to <2 x half>, !dbg !23
  %185 = fpext <2 x half> %184 to <2 x float>, !dbg !37
  %186 = fsub <2 x float> %185, %154, !dbg !38
  %187 = fpext <2 x half> %166 to <2 x float>, !dbg !39
  %188 = fpext <2 x half> %178 to <2 x float>, !dbg !40
  %189 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !41
  %190 = insertelement <2 x float> %189, float %.0.i5, i64 1, !dbg !41
  %191 = fmul <2 x float> %186, %190, !dbg !41
  %192 = fmul <2 x float> %191, %188, !dbg !42
  %193 = fadd <2 x float> %192, %187, !dbg !43
  %194 = fptrunc <2 x float> %193 to <2 x half>, !dbg !44
  %195 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !23
  %196 = insertelement <2 x i32> %195, i32 %extelt.offset1, i64 1, !dbg !23
  %197 = trunc <2 x i32> %196 to <2 x i16>, !dbg !23
  %198 = bitcast <2 x i16> %197 to <2 x half>, !dbg !23
  %199 = fpext <2 x half> %198 to <2 x float>, !dbg !37
  %200 = fsub <2 x float> %199, %150, !dbg !38
  %201 = fpext <2 x half> %163 to <2 x float>, !dbg !39
  %202 = fpext <2 x half> %175 to <2 x float>, !dbg !40
  %203 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !41
  %204 = insertelement <2 x float> %203, float %.0.i11, i64 1, !dbg !41
  %205 = fmul <2 x float> %200, %204, !dbg !41
  %206 = fmul <2 x float> %205, %202, !dbg !42
  %207 = fadd <2 x float> %206, %201, !dbg !43
  %208 = fptrunc <2 x float> %207 to <2 x half>, !dbg !44
  %209 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !23
  %210 = insertelement <2 x i32> %209, i32 %extelt.offset2, i64 1, !dbg !23
  %211 = trunc <2 x i32> %210 to <2 x i16>, !dbg !23
  %212 = bitcast <2 x i16> %211 to <2 x half>, !dbg !23
  %213 = fpext <2 x half> %212 to <2 x float>, !dbg !37
  %214 = fsub <2 x float> %213, %146, !dbg !38
  %215 = fpext <2 x half> %160 to <2 x float>, !dbg !39
  %216 = fpext <2 x half> %172 to <2 x float>, !dbg !40
  %217 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !41
  %218 = insertelement <2 x float> %217, float %.0.i17, i64 1, !dbg !41
  %219 = fmul <2 x float> %214, %218, !dbg !41
  %220 = fmul <2 x float> %219, %216, !dbg !42
  %221 = fadd <2 x float> %220, %215, !dbg !43
  %222 = fptrunc <2 x float> %221 to <2 x half>, !dbg !44
  %223 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !23
  %224 = insertelement <2 x i32> %223, i32 %extelt.offset3, i64 1, !dbg !23
  %225 = trunc <2 x i32> %224 to <2 x i16>, !dbg !23
  %226 = bitcast <2 x i16> %225 to <2 x half>, !dbg !23
  %227 = fpext <2 x half> %226 to <2 x float>, !dbg !37
  %228 = fsub <2 x float> %227, %142, !dbg !38
  %229 = fpext <2 x half> %157 to <2 x float>, !dbg !39
  %230 = fpext <2 x half> %169 to <2 x float>, !dbg !40
  %231 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !41
  %232 = insertelement <2 x float> %231, float %.0.i23, i64 1, !dbg !41
  %233 = fmul <2 x float> %228, %232, !dbg !41
  %234 = fmul <2 x float> %233, %230, !dbg !42
  %235 = fadd <2 x float> %234, %229, !dbg !43
  %236 = fptrunc <2 x float> %235 to <2 x half>, !dbg !44
  %237 = bitcast <2 x half> %194 to i32, !dbg !44
  %238 = bitcast <2 x half> %208 to i32, !dbg !44
  %239 = bitcast <2 x half> %222 to i32, !dbg !44
  %240 = bitcast <2 x half> %236 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %180, i1 %15) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #1 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cr5z32c5wkxaopnojqio3s3loy3m2vtr3727e76nwwsegimbnefe.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/r5")
!4 = !{ptr @triton__0d1d2d3d4d5d6de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de", linkageName: "triton__0d1d2d3d4d5d6de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 36, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 22, column: 33, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 20, scope: !7)
!16 = !DILocation(line: 26, column: 28, scope: !7)
!17 = !DILocation(line: 27, column: 20, scope: !7)
!18 = !DILocation(line: 29, column: 41, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 55, scope: !7)
!21 = !DILocation(line: 29, column: 48, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 61, scope: !7)
!24 = !DILocation(line: 30, column: 37, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 43, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 43, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 27, scope: !7)
!36 = !DILocation(line: 47, column: 25, scope: !7)
!37 = !DILocation(line: 29, column: 71, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 33, column: 76, scope: !7)
!40 = !DILocation(line: 32, column: 76, scope: !7)
!41 = !DILocation(line: 41, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 37, scope: !7)
!45 = !DILocation(line: 47, column: 4, scope: !7)
