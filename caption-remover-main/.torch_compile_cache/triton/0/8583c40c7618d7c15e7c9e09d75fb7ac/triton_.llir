; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = lshr i32 %8, 5, !dbg !8
  %11 = and i32 %10, 3, !dbg !8
  %12 = lshr i32 %9, 3, !dbg !8
  %13 = shl nuw nsw i32 %11, 2, !dbg !8
  %14 = or i32 %13, %12, !dbg !8
  %15 = or i32 %14, 16, !dbg !8
  %16 = shl i32 %8, 3, !dbg !8
  %17 = and i32 %16, 24, !dbg !8
  %18 = shl i32 %8, 2, !dbg !9
  %19 = and i32 %18, 28, !dbg !9
  %20 = lshr i32 %9, 2, !dbg !9
  %21 = shl nuw nsw i32 %11, 3, !dbg !9
  %22 = or i32 %21, %20, !dbg !9
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %25 = add i32 %24, 1, !dbg !12
  %26 = shl i32 %23, 5, !dbg !13
  %27 = mul i32 %26, %25, !dbg !14
  %28 = or i32 %27, %14, !dbg !15
  %29 = or i32 %27, %15, !dbg !15
  %30 = or i32 %27, %17, !dbg !15
  %31 = icmp slt i32 %28, 7040, !dbg !16
  %32 = icmp slt i32 %29, 7040, !dbg !16
  %33 = icmp slt i32 %30, 7040, !dbg !16
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %35 = shl i32 %34, 5, !dbg !18
  %36 = or i32 %35, %19, !dbg !19
  %37 = or i32 %35, %22, !dbg !19
  %38 = icmp slt i32 %36, 2700, !dbg !20
  %39 = icmp slt i32 %37, 2700, !dbg !20
  %.frozen = freeze i32 %30
  %40 = sdiv i32 %.frozen, 320, !dbg !21
  %41 = mul i32 %40, 320
  %.decomposed = sub i32 %.frozen, %41
  %42 = mul i32 %28, 2700, !dbg !22
  %43 = mul i32 %29, 2700, !dbg !22
  %44 = add i32 %42, %36, !dbg !23
  %45 = add i32 %43, %36, !dbg !23
  %46 = sext i32 %44 to i64, !dbg !24
  %47 = getelementptr half, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %45 to i64, !dbg !24
  %49 = getelementptr half, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = and i1 %38, %31, !dbg !25
  %51 = and i1 %38, %32, !dbg !25
  %52 = and i1 %39, %33, !dbg !25
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %50) #2, !dbg !26
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !26
  %56 = trunc i32 %54 to i16, !dbg !26
  %extelt.offset = lshr i32 %54, 16, !dbg !26
  %57 = trunc i32 %extelt.offset to i16, !dbg !26
  %58 = trunc i32 %55 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %55, 16, !dbg !26
  %59 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %51) #2, !dbg !26
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !26
  %63 = trunc i32 %61 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %61, 16, !dbg !26
  %64 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %65 = trunc i32 %62 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %62, 16, !dbg !26
  %66 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %67 = mul nuw nsw i32 %19, 40, !dbg !27
  %68 = or i32 %14, %67, !dbg !27
  %69 = zext nneg i32 %68 to i64, !dbg !27
  %70 = getelementptr half, ptr addrspace(3) @global_smem, i64 %69, !dbg !27
  store i16 %56, ptr addrspace(3) %70, align 2, !dbg !27
  %71 = or i32 %19, 1, !dbg !27
  %72 = mul nuw nsw i32 %71, 40, !dbg !27
  %73 = add nuw nsw i32 %72, %14, !dbg !27
  %74 = zext nneg i32 %73 to i64, !dbg !27
  %75 = getelementptr half, ptr addrspace(3) @global_smem, i64 %74, !dbg !27
  store i16 %57, ptr addrspace(3) %75, align 2, !dbg !27
  %76 = or i32 %19, 2, !dbg !27
  %77 = mul nuw nsw i32 %76, 40, !dbg !27
  %78 = or i32 %77, %14, !dbg !27
  %79 = zext nneg i32 %78 to i64, !dbg !27
  %80 = getelementptr half, ptr addrspace(3) @global_smem, i64 %79, !dbg !27
  store i16 %58, ptr addrspace(3) %80, align 2, !dbg !27
  %81 = or i32 %19, 3, !dbg !27
  %82 = mul nuw nsw i32 %81, 40, !dbg !27
  %83 = add nuw nsw i32 %82, %14, !dbg !27
  %84 = zext nneg i32 %83 to i64, !dbg !27
  %85 = getelementptr half, ptr addrspace(3) @global_smem, i64 %84, !dbg !27
  store i16 %59, ptr addrspace(3) %85, align 2, !dbg !27
  %86 = or i32 %15, %67, !dbg !27
  %87 = zext nneg i32 %86 to i64, !dbg !27
  %88 = getelementptr half, ptr addrspace(3) @global_smem, i64 %87, !dbg !27
  store i16 %63, ptr addrspace(3) %88, align 2, !dbg !27
  %89 = add nuw nsw i32 %15, %72, !dbg !27
  %90 = zext nneg i32 %89 to i64, !dbg !27
  %91 = getelementptr half, ptr addrspace(3) @global_smem, i64 %90, !dbg !27
  store i16 %64, ptr addrspace(3) %91, align 2, !dbg !27
  %92 = add nuw nsw i32 %15, %77, !dbg !27
  %93 = zext nneg i32 %92 to i64, !dbg !27
  %94 = getelementptr half, ptr addrspace(3) @global_smem, i64 %93, !dbg !27
  store i16 %65, ptr addrspace(3) %94, align 2, !dbg !27
  %95 = add nuw nsw i32 %15, %82, !dbg !27
  %96 = zext nneg i32 %95 to i64, !dbg !27
  %97 = getelementptr half, ptr addrspace(3) @global_smem, i64 %96, !dbg !27
  store i16 %66, ptr addrspace(3) %97, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %98 = mul nuw nsw i32 %22, 40, !dbg !27
  %99 = add nuw nsw i32 %98, %17, !dbg !27
  %100 = zext nneg i32 %99 to i64, !dbg !27
  %101 = getelementptr half, ptr addrspace(3) @global_smem, i64 %100, !dbg !27
  %102 = load half, ptr addrspace(3) %101, align 16, !dbg !27
  %103 = getelementptr inbounds <8 x half>, ptr addrspace(3) %101, i64 0, i64 1, !dbg !27
  %104 = load half, ptr addrspace(3) %103, align 2, !dbg !27
  %105 = getelementptr inbounds <8 x half>, ptr addrspace(3) %101, i64 0, i64 2, !dbg !27
  %106 = load half, ptr addrspace(3) %105, align 4, !dbg !27
  %107 = getelementptr inbounds <8 x half>, ptr addrspace(3) %101, i64 0, i64 3, !dbg !27
  %108 = load half, ptr addrspace(3) %107, align 2, !dbg !27
  %109 = getelementptr inbounds <8 x half>, ptr addrspace(3) %101, i64 0, i64 4, !dbg !27
  %110 = load half, ptr addrspace(3) %109, align 8, !dbg !27
  %111 = getelementptr inbounds <8 x half>, ptr addrspace(3) %101, i64 0, i64 5, !dbg !27
  %112 = load half, ptr addrspace(3) %111, align 2, !dbg !27
  %113 = getelementptr inbounds <8 x half>, ptr addrspace(3) %101, i64 0, i64 6, !dbg !27
  %114 = load half, ptr addrspace(3) %113, align 4, !dbg !27
  %115 = getelementptr inbounds <8 x half>, ptr addrspace(3) %101, i64 0, i64 7, !dbg !27
  %116 = load half, ptr addrspace(3) %115, align 2, !dbg !27
  %117 = fpext half %102 to float, !dbg !27
  %118 = fpext half %104 to float, !dbg !27
  %119 = fpext half %106 to float, !dbg !27
  %120 = fpext half %108 to float, !dbg !27
  %121 = fpext half %110 to float, !dbg !27
  %122 = fpext half %112 to float, !dbg !27
  %123 = fpext half %114 to float, !dbg !27
  %124 = fpext half %116 to float, !dbg !27
  %125 = mul i32 %37, 320, !dbg !28
  %126 = add i32 %.decomposed, %125, !dbg !29
  %127 = mul i32 %40, 864000, !dbg !30
  %128 = add i32 %126, %127, !dbg !31
  %129 = sext i32 %128 to i64, !dbg !32
  %130 = getelementptr half, ptr addrspace(1) %1, i64 %129, !dbg !32
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %52) #2, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !33
  %136 = sext i32 %.decomposed to i64, !dbg !34
  %137 = getelementptr half, ptr addrspace(1) %2, i64 %136, !dbg !34
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %33) #2, !dbg !35
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !35
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !35
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !35
  %extelt.offset8 = lshr i32 %139, 16, !dbg !35
  %143 = trunc i32 %extelt.offset8 to i16, !dbg !35
  %144 = bitcast i16 %143 to half, !dbg !35
  %extelt.offset9 = lshr i32 %140, 16, !dbg !35
  %145 = trunc i32 %extelt.offset9 to i16, !dbg !35
  %146 = bitcast i16 %145 to half, !dbg !35
  %extelt.offset10 = lshr i32 %141, 16, !dbg !35
  %147 = trunc i32 %extelt.offset10 to i16, !dbg !35
  %148 = bitcast i16 %147 to half, !dbg !35
  %extelt.offset11 = lshr i32 %142, 16, !dbg !35
  %149 = trunc i32 %extelt.offset11 to i16, !dbg !35
  %150 = bitcast i16 %149 to half, !dbg !35
  %151 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !33
  %152 = insertelement <2 x i32> %151, i32 %139, i64 1, !dbg !33
  %153 = trunc <2 x i32> %152 to <2 x i16>, !dbg !33
  %154 = bitcast <2 x i16> %153 to <2 x half>, !dbg !33
  %155 = fpext <2 x half> %154 to <2 x float>, !dbg !36
  %156 = fpext half %144 to float, !dbg !37
  %157 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !33
  %158 = insertelement <2 x i32> %157, i32 %140, i64 1, !dbg !33
  %159 = trunc <2 x i32> %158 to <2 x i16>, !dbg !33
  %160 = bitcast <2 x i16> %159 to <2 x half>, !dbg !33
  %161 = fpext <2 x half> %160 to <2 x float>, !dbg !36
  %162 = fpext half %146 to float, !dbg !37
  %163 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !33
  %164 = insertelement <2 x i32> %163, i32 %141, i64 1, !dbg !33
  %165 = trunc <2 x i32> %164 to <2 x i16>, !dbg !33
  %166 = bitcast <2 x i16> %165 to <2 x half>, !dbg !33
  %167 = fpext <2 x half> %166 to <2 x float>, !dbg !36
  %168 = fpext half %148 to float, !dbg !37
  %169 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !33
  %170 = insertelement <2 x i32> %169, i32 %142, i64 1, !dbg !33
  %171 = trunc <2 x i32> %170 to <2 x i16>, !dbg !33
  %172 = bitcast <2 x i16> %171 to <2 x half>, !dbg !33
  %173 = fpext <2 x half> %172 to <2 x float>, !dbg !36
  %174 = fpext half %150 to float, !dbg !37
  %175 = getelementptr half, ptr addrspace(1) %3, i64 %129, !dbg !38
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %52) #2, !dbg !39
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !39
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !39
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !39
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !39
  %181 = trunc i32 %177 to i16, !dbg !39
  %182 = bitcast i16 %181 to half, !dbg !39
  %183 = trunc i32 %178 to i16, !dbg !39
  %184 = bitcast i16 %183 to half, !dbg !39
  %185 = trunc i32 %179 to i16, !dbg !39
  %186 = bitcast i16 %185 to half, !dbg !39
  %187 = trunc i32 %180 to i16, !dbg !39
  %188 = bitcast i16 %187 to half, !dbg !39
  %189 = fpext half %182 to float, !dbg !40
  %190 = fpext half %184 to float, !dbg !40
  %191 = fpext half %186 to float, !dbg !40
  %192 = fpext half %188 to float, !dbg !40
  %shift = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %193 = fadd <2 x float> %shift, %155, !dbg !41
  %194 = extractelement <2 x float> %193, i64 0, !dbg !41
  %shift16 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %195 = fadd <2 x float> %shift16, %161, !dbg !41
  %196 = extractelement <2 x float> %195, i64 0, !dbg !41
  %shift17 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %197 = fadd <2 x float> %shift17, %167, !dbg !41
  %198 = extractelement <2 x float> %197, i64 0, !dbg !41
  %shift18 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %199 = fadd <2 x float> %shift18, %173, !dbg !41
  %200 = extractelement <2 x float> %199, i64 0, !dbg !41
  %201 = fmul float %189, 1.250000e-01, !dbg !42
  %202 = insertelement <2 x i32> %151, i32 %177, i64 1, !dbg !33
  %203 = lshr <2 x i32> %202, <i32 16, i32 16>, !dbg !33
  %204 = trunc <2 x i32> %203 to <2 x i16>, !dbg !33
  %205 = bitcast <2 x i16> %204 to <2 x half>, !dbg !33
  %206 = fpext <2 x half> %205 to <2 x float>, !dbg !36
  %207 = fmul float %190, 1.250000e-01, !dbg !42
  %208 = insertelement <2 x i32> %157, i32 %178, i64 1, !dbg !33
  %209 = lshr <2 x i32> %208, <i32 16, i32 16>, !dbg !33
  %210 = trunc <2 x i32> %209 to <2 x i16>, !dbg !33
  %211 = bitcast <2 x i16> %210 to <2 x half>, !dbg !33
  %212 = fpext <2 x half> %211 to <2 x float>, !dbg !36
  %213 = fmul float %191, 1.250000e-01, !dbg !42
  %214 = insertelement <2 x i32> %163, i32 %179, i64 1, !dbg !33
  %215 = lshr <2 x i32> %214, <i32 16, i32 16>, !dbg !33
  %216 = trunc <2 x i32> %215 to <2 x i16>, !dbg !33
  %217 = bitcast <2 x i16> %216 to <2 x half>, !dbg !33
  %218 = fpext <2 x half> %217 to <2 x float>, !dbg !36
  %219 = fmul float %192, 1.250000e-01, !dbg !42
  %220 = insertelement <2 x i32> %169, i32 %180, i64 1, !dbg !33
  %221 = lshr <2 x i32> %220, <i32 16, i32 16>, !dbg !33
  %222 = trunc <2 x i32> %221 to <2 x i16>, !dbg !33
  %223 = bitcast <2 x i16> %222 to <2 x half>, !dbg !33
  %224 = fpext <2 x half> %223 to <2 x float>, !dbg !36
  %225 = fadd float %194, %201, !dbg !43
  %226 = extractelement <2 x float> %206, i64 0, !dbg !43
  %227 = fadd float %226, %156, !dbg !43
  %228 = extractelement <2 x float> %206, i64 1, !dbg !43
  %229 = fmul float %228, 1.250000e-01, !dbg !43
  %230 = fadd float %227, %229, !dbg !43
  %231 = fadd float %196, %207, !dbg !43
  %232 = extractelement <2 x float> %212, i64 0, !dbg !43
  %233 = fadd float %232, %162, !dbg !43
  %234 = extractelement <2 x float> %212, i64 1, !dbg !43
  %235 = fmul float %234, 1.250000e-01, !dbg !43
  %236 = fadd float %233, %235, !dbg !43
  %237 = fadd float %198, %213, !dbg !43
  %238 = extractelement <2 x float> %218, i64 0, !dbg !43
  %239 = fadd float %238, %168, !dbg !43
  %240 = extractelement <2 x float> %218, i64 1, !dbg !43
  %241 = fmul float %240, 1.250000e-01, !dbg !43
  %242 = fadd float %239, %241, !dbg !43
  %243 = fadd float %200, %219, !dbg !43
  %244 = extractelement <2 x float> %224, i64 0, !dbg !43
  %245 = fadd float %244, %174, !dbg !43
  %246 = extractelement <2 x float> %224, i64 1, !dbg !43
  %247 = fmul float %246, 1.250000e-01, !dbg !43
  %248 = fadd float %245, %247, !dbg !43
  %249 = fadd float %225, %117, !dbg !44
  %250 = fadd float %230, %118, !dbg !44
  %251 = fadd float %231, %119, !dbg !44
  %252 = fadd float %236, %120, !dbg !44
  %253 = fadd float %237, %121, !dbg !44
  %254 = fadd float %242, %122, !dbg !44
  %255 = fadd float %243, %123, !dbg !44
  %256 = fadd float %248, %124, !dbg !44
  %257 = getelementptr half, ptr addrspace(1) %4, i64 %46, !dbg !45
  %258 = getelementptr half, ptr addrspace(1) %4, i64 %48, !dbg !45
  %259 = fptrunc float %249 to half, !dbg !46
  %260 = fptrunc float %250 to half, !dbg !46
  %261 = fptrunc float %251 to half, !dbg !46
  %262 = fptrunc float %252 to half, !dbg !46
  %263 = fptrunc float %253 to half, !dbg !46
  %264 = fptrunc float %254 to half, !dbg !46
  %265 = fptrunc float %255 to half, !dbg !46
  %266 = fptrunc float %256 to half, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %267 = mul nuw nsw i32 %17, 33, !dbg !46
  %268 = add nuw nsw i32 %22, %267, !dbg !46
  %269 = zext nneg i32 %268 to i64, !dbg !46
  %270 = getelementptr half, ptr addrspace(3) @global_smem, i64 %269, !dbg !46
  %271 = insertelement <1 x half> undef, half %259, i64 0, !dbg !46
  store <1 x half> %271, ptr addrspace(3) %270, align 2, !dbg !46
  %272 = add nuw nsw i32 %267, 33, !dbg !46
  %273 = add nuw nsw i32 %272, %22, !dbg !46
  %274 = zext nneg i32 %273 to i64, !dbg !46
  %275 = getelementptr half, ptr addrspace(3) @global_smem, i64 %274, !dbg !46
  %276 = insertelement <1 x half> undef, half %260, i64 0, !dbg !46
  store <1 x half> %276, ptr addrspace(3) %275, align 2, !dbg !46
  %277 = add nuw nsw i32 %267, 66, !dbg !46
  %278 = add nuw nsw i32 %277, %22, !dbg !46
  %279 = zext nneg i32 %278 to i64, !dbg !46
  %280 = getelementptr half, ptr addrspace(3) @global_smem, i64 %279, !dbg !46
  %281 = insertelement <1 x half> undef, half %261, i64 0, !dbg !46
  store <1 x half> %281, ptr addrspace(3) %280, align 2, !dbg !46
  %282 = add nuw nsw i32 %267, 99, !dbg !46
  %283 = add nuw nsw i32 %282, %22, !dbg !46
  %284 = zext nneg i32 %283 to i64, !dbg !46
  %285 = getelementptr half, ptr addrspace(3) @global_smem, i64 %284, !dbg !46
  %286 = insertelement <1 x half> undef, half %262, i64 0, !dbg !46
  store <1 x half> %286, ptr addrspace(3) %285, align 2, !dbg !46
  %287 = add nuw nsw i32 %267, 132, !dbg !46
  %288 = add nuw nsw i32 %287, %22, !dbg !46
  %289 = zext nneg i32 %288 to i64, !dbg !46
  %290 = getelementptr half, ptr addrspace(3) @global_smem, i64 %289, !dbg !46
  %291 = insertelement <1 x half> undef, half %263, i64 0, !dbg !46
  store <1 x half> %291, ptr addrspace(3) %290, align 2, !dbg !46
  %292 = add nuw nsw i32 %267, 165, !dbg !46
  %293 = add nuw nsw i32 %292, %22, !dbg !46
  %294 = zext nneg i32 %293 to i64, !dbg !46
  %295 = getelementptr half, ptr addrspace(3) @global_smem, i64 %294, !dbg !46
  %296 = insertelement <1 x half> undef, half %264, i64 0, !dbg !46
  store <1 x half> %296, ptr addrspace(3) %295, align 2, !dbg !46
  %297 = add nuw nsw i32 %267, 198, !dbg !46
  %298 = add nuw nsw i32 %297, %22, !dbg !46
  %299 = zext nneg i32 %298 to i64, !dbg !46
  %300 = getelementptr half, ptr addrspace(3) @global_smem, i64 %299, !dbg !46
  %301 = insertelement <1 x half> undef, half %265, i64 0, !dbg !46
  store <1 x half> %301, ptr addrspace(3) %300, align 2, !dbg !46
  %302 = add nuw nsw i32 %267, 231, !dbg !46
  %303 = add nuw nsw i32 %302, %22, !dbg !46
  %304 = zext nneg i32 %303 to i64, !dbg !46
  %305 = getelementptr half, ptr addrspace(3) @global_smem, i64 %304, !dbg !46
  %306 = insertelement <1 x half> undef, half %266, i64 0, !dbg !46
  store <1 x half> %306, ptr addrspace(3) %305, align 2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %307 = mul nuw nsw i32 %14, 33, !dbg !46
  %308 = add nuw nsw i32 %307, %19, !dbg !46
  %309 = zext nneg i32 %308 to i64, !dbg !46
  %310 = getelementptr half, ptr addrspace(3) @global_smem, i64 %309, !dbg !46
  %311 = load <1 x half>, ptr addrspace(3) %310, align 2, !dbg !46
  %312 = add nuw nsw i32 %307, %71, !dbg !46
  %313 = zext nneg i32 %312 to i64, !dbg !46
  %314 = getelementptr half, ptr addrspace(3) @global_smem, i64 %313, !dbg !46
  %315 = load <1 x half>, ptr addrspace(3) %314, align 2, !dbg !46
  %316 = add nuw nsw i32 %307, %76, !dbg !46
  %317 = zext nneg i32 %316 to i64, !dbg !46
  %318 = getelementptr half, ptr addrspace(3) @global_smem, i64 %317, !dbg !46
  %319 = load <1 x half>, ptr addrspace(3) %318, align 2, !dbg !46
  %320 = add nuw nsw i32 %307, %81, !dbg !46
  %321 = zext nneg i32 %320 to i64, !dbg !46
  %322 = getelementptr half, ptr addrspace(3) @global_smem, i64 %321, !dbg !46
  %323 = load <1 x half>, ptr addrspace(3) %322, align 2, !dbg !46
  %324 = mul nuw nsw i32 %15, 33, !dbg !46
  %325 = add nuw nsw i32 %324, %19, !dbg !46
  %326 = zext nneg i32 %325 to i64, !dbg !46
  %327 = getelementptr half, ptr addrspace(3) @global_smem, i64 %326, !dbg !46
  %328 = load <1 x half>, ptr addrspace(3) %327, align 2, !dbg !46
  %329 = add nuw nsw i32 %324, %71, !dbg !46
  %330 = zext nneg i32 %329 to i64, !dbg !46
  %331 = getelementptr half, ptr addrspace(3) @global_smem, i64 %330, !dbg !46
  %332 = load <1 x half>, ptr addrspace(3) %331, align 2, !dbg !46
  %333 = add nuw nsw i32 %324, %76, !dbg !46
  %334 = zext nneg i32 %333 to i64, !dbg !46
  %335 = getelementptr half, ptr addrspace(3) @global_smem, i64 %334, !dbg !46
  %336 = load <1 x half>, ptr addrspace(3) %335, align 2, !dbg !46
  %337 = add nuw nsw i32 %324, %81, !dbg !46
  %338 = zext nneg i32 %337 to i64, !dbg !46
  %339 = getelementptr half, ptr addrspace(3) @global_smem, i64 %338, !dbg !46
  %340 = load <1 x half>, ptr addrspace(3) %339, align 2, !dbg !46
  %341 = shufflevector <1 x half> %311, <1 x half> %315, <2 x i32> <i32 0, i32 1>, !dbg !46
  %342 = bitcast <2 x half> %341 to i32, !dbg !46
  %343 = shufflevector <1 x half> %319, <1 x half> %323, <2 x i32> <i32 0, i32 1>, !dbg !46
  %344 = bitcast <2 x half> %343 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %342, i32 %344, ptr addrspace(1) %257, i1 %50) #2, !dbg !46
  %345 = shufflevector <1 x half> %328, <1 x half> %332, <2 x i32> <i32 0, i32 1>, !dbg !46
  %346 = bitcast <2 x half> %345 to i32, !dbg !46
  %347 = shufflevector <1 x half> %336, <1 x half> %340, <2 x i32> <i32 0, i32 1>, !dbg !46
  %348 = bitcast <2 x half> %347 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %346, i32 %348, ptr addrspace(1) %258, i1 %51) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cvk77foil2cmgtxf3tky32mtvmynvcpxcyxs7fk4towlrhqtdrni.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/vk")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 41, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 55, scope: !5)
!26 = !DILocation(line: 33, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 95, scope: !5)
!28 = !DILocation(line: 34, column: 40, scope: !5)
!29 = !DILocation(line: 34, column: 36, scope: !5)
!30 = !DILocation(line: 34, column: 54, scope: !5)
!31 = !DILocation(line: 34, column: 47, scope: !5)
!32 = !DILocation(line: 34, column: 30, scope: !5)
!33 = !DILocation(line: 34, column: 60, scope: !5)
!34 = !DILocation(line: 35, column: 30, scope: !5)
!35 = !DILocation(line: 35, column: 35, scope: !5)
!36 = !DILocation(line: 34, column: 108, scope: !5)
!37 = !DILocation(line: 35, column: 75, scope: !5)
!38 = !DILocation(line: 36, column: 30, scope: !5)
!39 = !DILocation(line: 36, column: 60, scope: !5)
!40 = !DILocation(line: 36, column: 108, scope: !5)
!41 = !DILocation(line: 37, column: 18, scope: !5)
!42 = !DILocation(line: 39, column: 18, scope: !5)
!43 = !DILocation(line: 40, column: 18, scope: !5)
!44 = !DILocation(line: 41, column: 18, scope: !5)
!45 = !DILocation(line: 44, column: 25, scope: !5)
!46 = !DILocation(line: 44, column: 49, scope: !5)
!47 = !DILocation(line: 44, column: 4, scope: !5)
