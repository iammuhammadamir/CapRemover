; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d67de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = and i32 %11, 7, !dbg !10
  %urem = shl i32 %9, 3, !dbg !10
  %13 = and i32 %urem, 2040, !dbg !10
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %15 = icmp slt i32 %14, %6, !dbg !12
  %16 = icmp ult i32 %13, 1280, !dbg !13
  %17 = mul i32 %14, 1280, !dbg !14
  %18 = add i32 %17, %13, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr half, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = and i1 %16, %15, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #6, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %27 = trunc i32 %23 to i16, !dbg !18
  %28 = bitcast i16 %27 to half, !dbg !18
  %extelt.offset = lshr i32 %23, 16, !dbg !18
  %29 = trunc i32 %extelt.offset to i16, !dbg !18
  %30 = bitcast i16 %29 to half, !dbg !18
  %31 = trunc i32 %24 to i16, !dbg !18
  %32 = bitcast i16 %31 to half, !dbg !18
  %extelt.offset1 = lshr i32 %24, 16, !dbg !18
  %33 = trunc i32 %extelt.offset1 to i16, !dbg !18
  %34 = bitcast i16 %33 to half, !dbg !18
  %35 = trunc i32 %25 to i16, !dbg !18
  %36 = bitcast i16 %35 to half, !dbg !18
  %extelt.offset2 = lshr i32 %25, 16, !dbg !18
  %37 = trunc i32 %extelt.offset2 to i16, !dbg !18
  %38 = bitcast i16 %37 to half, !dbg !18
  %39 = trunc i32 %26 to i16, !dbg !18
  %40 = bitcast i16 %39 to half, !dbg !18
  %extelt.offset3 = lshr i32 %26, 16, !dbg !18
  %41 = trunc i32 %extelt.offset3 to i16, !dbg !18
  %42 = bitcast i16 %41 to half, !dbg !18
  %43 = fpext half %28 to float, !dbg !19
  %44 = fpext half %30 to float, !dbg !19
  %45 = fpext half %32 to float, !dbg !19
  %46 = fpext half %34 to float, !dbg !19
  %47 = fpext half %36 to float, !dbg !19
  %48 = fpext half %38 to float, !dbg !19
  %49 = fpext half %40 to float, !dbg !19
  %50 = fpext half %42 to float, !dbg !19
  %51 = zext nneg i32 %13 to i64, !dbg !20
  %52 = getelementptr half, ptr addrspace(1) %1, i64 %51, !dbg !20
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !21
  %extelt.offset4 = lshr i32 %54, 16, !dbg !21
  %extelt.offset5 = lshr i32 %55, 16, !dbg !21
  %extelt.offset6 = lshr i32 %56, 16, !dbg !21
  %extelt.offset7 = lshr i32 %57, 16, !dbg !21
  %58 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !21
  %59 = insertelement <2 x i32> %58, i32 %extelt.offset4, i64 1, !dbg !21
  %60 = trunc <2 x i32> %59 to <2 x i16>, !dbg !21
  %61 = bitcast <2 x i16> %60 to <2 x half>, !dbg !21
  %62 = fpext <2 x half> %61 to <2 x float>, !dbg !22
  %63 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !21
  %64 = insertelement <2 x i32> %63, i32 %extelt.offset5, i64 1, !dbg !21
  %65 = trunc <2 x i32> %64 to <2 x i16>, !dbg !21
  %66 = bitcast <2 x i16> %65 to <2 x half>, !dbg !21
  %67 = fpext <2 x half> %66 to <2 x float>, !dbg !22
  %68 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !21
  %69 = insertelement <2 x i32> %68, i32 %extelt.offset6, i64 1, !dbg !21
  %70 = trunc <2 x i32> %69 to <2 x i16>, !dbg !21
  %71 = bitcast <2 x i16> %70 to <2 x half>, !dbg !21
  %72 = fpext <2 x half> %71 to <2 x float>, !dbg !22
  %73 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !21
  %74 = insertelement <2 x i32> %73, i32 %extelt.offset7, i64 1, !dbg !21
  %75 = trunc <2 x i32> %74 to <2 x i16>, !dbg !21
  %76 = bitcast <2 x i16> %75 to <2 x half>, !dbg !21
  %77 = fpext <2 x half> %76 to <2 x float>, !dbg !22
  %78 = extractelement <2 x float> %62, i64 0, !dbg !23
  %79 = fadd float %78, %43, !dbg !23
  %80 = extractelement <2 x float> %62, i64 1, !dbg !23
  %81 = fadd float %80, %44, !dbg !23
  %82 = extractelement <2 x float> %67, i64 0, !dbg !23
  %83 = fadd float %82, %45, !dbg !23
  %84 = extractelement <2 x float> %67, i64 1, !dbg !23
  %85 = fadd float %84, %46, !dbg !23
  %86 = extractelement <2 x float> %72, i64 0, !dbg !23
  %87 = fadd float %86, %47, !dbg !23
  %88 = extractelement <2 x float> %72, i64 1, !dbg !23
  %89 = fadd float %88, %48, !dbg !23
  %90 = extractelement <2 x float> %77, i64 0, !dbg !23
  %91 = fadd float %90, %49, !dbg !23
  %92 = extractelement <2 x float> %77, i64 1, !dbg !23
  %93 = fadd float %92, %50, !dbg !23
  %94 = select i1 %21, float %79, float 0.000000e+00, !dbg !24
  %95 = select i1 %21, float %81, float 0.000000e+00, !dbg !24
  %96 = select i1 %21, float %83, float 0.000000e+00, !dbg !24
  %97 = select i1 %21, float %85, float 0.000000e+00, !dbg !24
  %98 = select i1 %21, float %87, float 0.000000e+00, !dbg !24
  %99 = select i1 %21, float %89, float 0.000000e+00, !dbg !24
  %100 = select i1 %21, float %91, float 0.000000e+00, !dbg !24
  %101 = select i1 %21, float %93, float 0.000000e+00, !dbg !24
  %102 = select i1 %21, float 1.000000e+00, float 0.000000e+00, !dbg !25
  %103 = fsub float %95, %94, !dbg !26
  %104 = select i1 %21, float 2.000000e+00, float 0.000000e+00, !dbg !32
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !33
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %104) #6, !dbg !34
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !35
  %108 = fmul float %107, %103, !dbg !36
  %109 = fadd float %94, %108, !dbg !37
  %110 = fmul float %103, %103, !dbg !38
  %111 = fmul float %102, %110, !dbg !39
  %112 = fmul float %107, %111, !dbg !40
  %113 = fadd float %112, 0.000000e+00, !dbg !41
  %114 = fsub float %96, %109, !dbg !26
  %115 = select i1 %21, float 3.000000e+00, float 0.000000e+00, !dbg !32
  %116 = fcmp oeq float %115, 0.000000e+00, !dbg !33
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %115) #6, !dbg !34
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !35
  %119 = fmul float %118, %114, !dbg !36
  %120 = fadd float %109, %119, !dbg !37
  %121 = fmul float %114, %114, !dbg !38
  %122 = fmul float %104, %121, !dbg !39
  %123 = fmul float %118, %122, !dbg !40
  %124 = fadd float %113, %123, !dbg !41
  %125 = fsub float %97, %120, !dbg !26
  %126 = select i1 %21, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %127 = fcmp oeq float %126, 0.000000e+00, !dbg !33
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %126) #6, !dbg !34
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !35
  %130 = fmul float %129, %125, !dbg !36
  %131 = fadd float %120, %130, !dbg !37
  %132 = fmul float %125, %125, !dbg !38
  %133 = fmul float %115, %132, !dbg !39
  %134 = fmul float %129, %133, !dbg !40
  %135 = fadd float %124, %134, !dbg !41
  %136 = fsub float %98, %131, !dbg !26
  %137 = select i1 %21, float 5.000000e+00, float 0.000000e+00, !dbg !32
  %138 = fcmp oeq float %137, 0.000000e+00, !dbg !33
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %137) #6, !dbg !34
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !35
  %141 = fmul float %140, %136, !dbg !36
  %142 = fadd float %131, %141, !dbg !37
  %143 = fmul float %136, %136, !dbg !38
  %144 = fmul float %126, %143, !dbg !39
  %145 = fmul float %140, %144, !dbg !40
  %146 = fadd float %135, %145, !dbg !41
  %147 = fsub float %99, %142, !dbg !26
  %148 = select i1 %21, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !33
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %148) #6, !dbg !34
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !35
  %152 = fmul float %151, %147, !dbg !36
  %153 = fadd float %142, %152, !dbg !37
  %154 = fmul float %147, %147, !dbg !38
  %155 = fmul float %137, %154, !dbg !39
  %156 = fmul float %151, %155, !dbg !40
  %157 = fadd float %146, %156, !dbg !41
  %158 = fsub float %100, %153, !dbg !26
  %159 = select i1 %21, float 7.000000e+00, float 0.000000e+00, !dbg !32
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !33
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %159) #6, !dbg !34
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !35
  %163 = fmul float %162, %158, !dbg !36
  %164 = fadd float %153, %163, !dbg !37
  %165 = fmul float %158, %158, !dbg !38
  %166 = fmul float %148, %165, !dbg !39
  %167 = fmul float %162, %166, !dbg !40
  %168 = fadd float %157, %167, !dbg !41
  %169 = fsub float %101, %164, !dbg !26
  %170 = select i1 %21, float 8.000000e+00, float 0.000000e+00, !dbg !32
  %171 = fcmp oeq float %170, 0.000000e+00, !dbg !33
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %170) #6, !dbg !34
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !35
  %174 = fmul float %173, %169, !dbg !36
  %175 = fadd float %164, %174, !dbg !37
  %176 = fmul float %169, %169, !dbg !38
  %177 = fmul float %159, %176, !dbg !39
  %178 = fmul float %173, %177, !dbg !40
  %179 = fadd float %168, %178, !dbg !41
  %180 = bitcast float %175 to i32, !dbg !42
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !42
  %182 = bitcast i32 %181 to float, !dbg !42
  %183 = bitcast float %179 to i32, !dbg !42
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !42
  %185 = bitcast i32 %184 to float, !dbg !42
  %186 = bitcast float %170 to i32, !dbg !42
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !42
  %188 = bitcast i32 %187 to float, !dbg !42
  %189 = fsub float %182, %175, !dbg !26
  %190 = fadd float %170, %188, !dbg !32
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !33
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %190) #6, !dbg !34
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !35
  %194 = fmul float %193, %189, !dbg !36
  %195 = fadd float %175, %194, !dbg !37
  %196 = fadd float %179, %185, !dbg !44
  %197 = fmul float %189, %189, !dbg !38
  %198 = fmul float %170, %197, !dbg !39
  %199 = fmul float %193, %198, !dbg !40
  %200 = fadd float %196, %199, !dbg !41
  %201 = bitcast float %195 to i32, !dbg !42
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !42
  %203 = bitcast i32 %202 to float, !dbg !42
  %204 = bitcast float %200 to i32, !dbg !42
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !42
  %206 = bitcast i32 %205 to float, !dbg !42
  %207 = bitcast float %190 to i32, !dbg !42
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !42
  %209 = bitcast i32 %208 to float, !dbg !42
  %210 = fsub float %203, %195, !dbg !26
  %211 = fadd float %190, %209, !dbg !32
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !33
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #6, !dbg !34
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !35
  %215 = fmul float %214, %210, !dbg !36
  %216 = fadd float %195, %215, !dbg !37
  %217 = fadd float %200, %206, !dbg !44
  %218 = fmul float %210, %210, !dbg !38
  %219 = fmul float %190, %218, !dbg !39
  %220 = fmul float %214, %219, !dbg !40
  %221 = fadd float %217, %220, !dbg !41
  %222 = bitcast float %216 to i32, !dbg !42
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !42
  %224 = bitcast i32 %223 to float, !dbg !42
  %225 = bitcast float %221 to i32, !dbg !42
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !42
  %227 = bitcast i32 %226 to float, !dbg !42
  %228 = bitcast float %211 to i32, !dbg !42
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !42
  %230 = bitcast i32 %229 to float, !dbg !42
  %231 = fsub float %224, %216, !dbg !26
  %232 = fadd float %211, %230, !dbg !32
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !33
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %232) #6, !dbg !34
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !35
  %236 = fmul float %235, %231, !dbg !36
  %237 = fadd float %216, %236, !dbg !37
  %238 = fadd float %221, %227, !dbg !44
  %239 = fmul float %231, %231, !dbg !38
  %240 = fmul float %211, %239, !dbg !39
  %241 = fmul float %235, %240, !dbg !40
  %242 = fadd float %238, %241, !dbg !41
  %243 = bitcast float %237 to i32, !dbg !42
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !42
  %245 = bitcast i32 %244 to float, !dbg !42
  %246 = bitcast float %242 to i32, !dbg !42
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !42
  %248 = bitcast i32 %247 to float, !dbg !42
  %249 = bitcast float %232 to i32, !dbg !42
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !42
  %251 = bitcast i32 %250 to float, !dbg !42
  %252 = fsub float %245, %237, !dbg !26
  %253 = fadd float %232, %251, !dbg !32
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !33
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float %253) #6, !dbg !34
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !35
  %257 = fmul float %256, %252, !dbg !36
  %258 = fadd float %237, %257, !dbg !37
  %259 = fadd float %242, %248, !dbg !44
  %260 = fmul float %252, %252, !dbg !38
  %261 = fmul float %232, %260, !dbg !39
  %262 = fmul float %256, %261, !dbg !40
  %263 = fadd float %259, %262, !dbg !41
  %264 = bitcast float %258 to i32, !dbg !42
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !42
  %266 = bitcast i32 %265 to float, !dbg !42
  %267 = bitcast float %263 to i32, !dbg !42
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !42
  %269 = bitcast i32 %268 to float, !dbg !42
  %270 = bitcast float %253 to i32, !dbg !42
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !42
  %272 = bitcast i32 %271 to float, !dbg !42
  %273 = fsub float %266, %258, !dbg !26
  %274 = fadd float %253, %272, !dbg !32
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !33
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %274) #6, !dbg !34
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !35
  %278 = fmul float %277, %273, !dbg !36
  %279 = fadd float %258, %278, !dbg !37
  %280 = fadd float %263, %269, !dbg !44
  %281 = fmul float %273, %273, !dbg !38
  %282 = fmul float %253, %281, !dbg !39
  %283 = fmul float %277, %282, !dbg !40
  %284 = fadd float %280, %283, !dbg !41
  %285 = icmp eq i32 %10, 0, !dbg !42
  %286 = zext nneg i32 %12 to i64, !dbg !42
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, float %279, i1 %285) #6, !dbg !42
  %288 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %286, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, float %284, i1 %285) #6, !dbg !42
  %289 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %286, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, float %274, i1 %285) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %290 = icmp slt i32 %9, 8, !dbg !42
  %291 = sext i32 %9 to i64, !dbg !42
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i64 %291, !dbg !42
  %293 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %292, i1 %290) #6, !dbg !42
  %294 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %291, !dbg !42
  %295 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %290) #6, !dbg !42
  %296 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %291, !dbg !42
  %297 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %296, i1 %290) #6, !dbg !42
  %298 = bitcast float %293 to i32, !dbg !42
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !42
  %300 = bitcast i32 %299 to float, !dbg !42
  %301 = bitcast float %295 to i32, !dbg !42
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !42
  %303 = bitcast i32 %302 to float, !dbg !42
  %304 = bitcast float %297 to i32, !dbg !42
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !42
  %306 = bitcast i32 %305 to float, !dbg !42
  %307 = fsub float %300, %293, !dbg !26
  %308 = fadd float %297, %306, !dbg !32
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !33
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #6, !dbg !34
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !35
  %312 = fmul float %307, %311, !dbg !36
  %313 = fadd float %293, %312, !dbg !37
  %314 = fadd float %295, %303, !dbg !44
  %315 = fmul float %307, %307, !dbg !38
  %316 = fmul float %297, %315, !dbg !39
  %317 = fmul float %316, %311, !dbg !40
  %318 = fadd float %314, %317, !dbg !41
  %319 = bitcast float %313 to i32, !dbg !42
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 2, i32 31), !dbg !42
  %321 = bitcast i32 %320 to float, !dbg !42
  %322 = bitcast float %318 to i32, !dbg !42
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 2, i32 31), !dbg !42
  %324 = bitcast i32 %323 to float, !dbg !42
  %325 = bitcast float %308 to i32, !dbg !42
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 2, i32 31), !dbg !42
  %327 = bitcast i32 %326 to float, !dbg !42
  %328 = fsub float %321, %313, !dbg !26
  %329 = fadd float %308, %327, !dbg !32
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !33
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float %329) #6, !dbg !34
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !35
  %333 = fmul float %328, %332, !dbg !36
  %334 = fadd float %313, %333, !dbg !37
  %335 = fadd float %318, %324, !dbg !44
  %336 = fmul float %328, %328, !dbg !38
  %337 = fmul float %308, %336, !dbg !39
  %338 = fmul float %332, %337, !dbg !40
  %339 = fadd float %335, %338, !dbg !41
  %340 = bitcast float %334 to i32, !dbg !42
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !42
  %342 = bitcast i32 %341 to float, !dbg !42
  %343 = bitcast float %339 to i32, !dbg !42
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 1, i32 31), !dbg !42
  %345 = bitcast i32 %344 to float, !dbg !42
  %346 = bitcast float %329 to i32, !dbg !42
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 1, i32 31), !dbg !42
  %348 = bitcast i32 %347 to float, !dbg !42
  %349 = fsub float %342, %334, !dbg !26
  %350 = fadd float %329, %348, !dbg !32
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !33
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %348, float %350) #6, !dbg !34
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !35
  %354 = fmul float %349, %353, !dbg !36
  %355 = fadd float %334, %354, !dbg !37
  %356 = fadd float %339, %345, !dbg !44
  %357 = fmul float %349, %349, !dbg !38
  %358 = fmul float %329, %357, !dbg !39
  %359 = fmul float %353, %358, !dbg !40
  %360 = fadd float %356, %359, !dbg !41
  %361 = and i32 %9, 7, !dbg !42
  %362 = icmp eq i32 %361, 0, !dbg !42
  %363 = and i1 %290, %362, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, float %355, i1 %363) #6, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, float %360, i1 %363) #6, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, float %350, i1 %363) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %364 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !42
  %365 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !42
  %366 = srem i32 %14, 22, !dbg !45
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #6, !dbg !46
  %368 = getelementptr half, ptr addrspace(1) %2, i64 %51, !dbg !47
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %368, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !48
  %370 = getelementptr half, ptr addrspace(1) %3, i64 %51, !dbg !49
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %370, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !50
  %372 = mul nsw i32 %366, 1280, !dbg !51
  %373 = add nsw i32 %372, %13, !dbg !52
  %374 = sext i32 %373 to i64, !dbg !53
  %375 = getelementptr half, ptr addrspace(1) %4, i64 %374, !dbg !53
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %375, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #6, !dbg !54
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 1.280000e+03) #6, !dbg !55
  %385 = fadd float %377, 0x3EE4F8B580000000, !dbg !56
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %.not.i = icmp eq i32 %386, 0, !dbg !57
  br i1 %.not.i, label %389, label %387, !dbg !57

387:                                              ; preds = %8
  %388 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %385), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

389:                                              ; preds = %8
  %390 = tail call float @llvm.nvvm.rsqrt.approx.f(float %385), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %387, %389
  %.0.i = phi float [ %388, %387 ], [ %390, %389 ], !dbg !57
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %398 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !46
  %extelt.offset11 = lshr i32 %398, 16, !dbg !46
  %399 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !46
  %extelt.offset10 = lshr i32 %399, 16, !dbg !46
  %400 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !46
  %extelt.offset9 = lshr i32 %400, 16, !dbg !46
  %401 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !46
  %extelt.offset8 = lshr i32 %401, 16, !dbg !46
  %402 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !54
  %extelt.offset23 = lshr i32 %402, 16, !dbg !54
  %403 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !54
  %extelt.offset22 = lshr i32 %403, 16, !dbg !54
  %404 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !54
  %extelt.offset21 = lshr i32 %404, 16, !dbg !54
  %405 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !54
  %extelt.offset20 = lshr i32 %405, 16, !dbg !54
  %406 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !50
  %extelt.offset19 = lshr i32 %406, 16, !dbg !50
  %407 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !50
  %extelt.offset18 = lshr i32 %407, 16, !dbg !50
  %408 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !50
  %extelt.offset17 = lshr i32 %408, 16, !dbg !50
  %409 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !50
  %extelt.offset16 = lshr i32 %409, 16, !dbg !50
  %410 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !48
  %extelt.offset15 = lshr i32 %410, 16, !dbg !48
  %411 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !48
  %extelt.offset14 = lshr i32 %411, 16, !dbg !48
  %412 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !48
  %extelt.offset13 = lshr i32 %412, 16, !dbg !48
  %413 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !48
  %extelt.offset12 = lshr i32 %413, 16, !dbg !48
  %414 = getelementptr half, ptr addrspace(1) %5, i64 %19, !dbg !58
  %415 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !46
  %416 = insertelement <2 x i32> %415, i32 %extelt.offset8, i64 1, !dbg !46
  %417 = trunc <2 x i32> %416 to <2 x i16>, !dbg !46
  %418 = bitcast <2 x i16> %417 to <2 x half>, !dbg !46
  %419 = fpext <2 x half> %418 to <2 x float>, !dbg !59
  %420 = fadd <2 x float> %62, %419, !dbg !60
  %421 = insertelement <2 x float> poison, float %364, i64 0, !dbg !61
  %422 = shufflevector <2 x float> %421, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %423 = fsub <2 x float> %420, %422, !dbg !61
  %424 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !54
  %425 = insertelement <2 x i32> %424, i32 %extelt.offset20, i64 1, !dbg !54
  %426 = trunc <2 x i32> %425 to <2 x i16>, !dbg !54
  %427 = bitcast <2 x i16> %426 to <2 x half>, !dbg !54
  %428 = fpext <2 x half> %427 to <2 x float>, !dbg !62
  %429 = insertelement <2 x i32> poison, i32 %409, i64 0, !dbg !50
  %430 = insertelement <2 x i32> %429, i32 %extelt.offset16, i64 1, !dbg !50
  %431 = trunc <2 x i32> %430 to <2 x i16>, !dbg !50
  %432 = bitcast <2 x i16> %431 to <2 x half>, !dbg !50
  %433 = fpext <2 x half> %432 to <2 x float>, !dbg !63
  %434 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !48
  %435 = insertelement <2 x i32> %434, i32 %extelt.offset12, i64 1, !dbg !48
  %436 = trunc <2 x i32> %435 to <2 x i16>, !dbg !48
  %437 = bitcast <2 x i16> %436 to <2 x half>, !dbg !48
  %438 = fpext <2 x half> %437 to <2 x float>, !dbg !64
  %439 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !65
  %440 = shufflevector <2 x float> %439, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %441 = fmul <2 x float> %423, %440, !dbg !65
  %442 = fmul <2 x float> %441, %438, !dbg !66
  %443 = fadd <2 x float> %442, %433, !dbg !67
  %444 = fadd <2 x float> %443, %428, !dbg !68
  %445 = fptrunc <2 x float> %444 to <2 x half>, !dbg !69
  %446 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !46
  %447 = insertelement <2 x i32> %446, i32 %extelt.offset9, i64 1, !dbg !46
  %448 = trunc <2 x i32> %447 to <2 x i16>, !dbg !46
  %449 = bitcast <2 x i16> %448 to <2 x half>, !dbg !46
  %450 = fpext <2 x half> %449 to <2 x float>, !dbg !59
  %451 = fadd <2 x float> %67, %450, !dbg !60
  %452 = fsub <2 x float> %451, %422, !dbg !61
  %453 = insertelement <2 x i32> poison, i32 %404, i64 0, !dbg !54
  %454 = insertelement <2 x i32> %453, i32 %extelt.offset21, i64 1, !dbg !54
  %455 = trunc <2 x i32> %454 to <2 x i16>, !dbg !54
  %456 = bitcast <2 x i16> %455 to <2 x half>, !dbg !54
  %457 = fpext <2 x half> %456 to <2 x float>, !dbg !62
  %458 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !50
  %459 = insertelement <2 x i32> %458, i32 %extelt.offset17, i64 1, !dbg !50
  %460 = trunc <2 x i32> %459 to <2 x i16>, !dbg !50
  %461 = bitcast <2 x i16> %460 to <2 x half>, !dbg !50
  %462 = fpext <2 x half> %461 to <2 x float>, !dbg !63
  %463 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !48
  %464 = insertelement <2 x i32> %463, i32 %extelt.offset13, i64 1, !dbg !48
  %465 = trunc <2 x i32> %464 to <2 x i16>, !dbg !48
  %466 = bitcast <2 x i16> %465 to <2 x half>, !dbg !48
  %467 = fpext <2 x half> %466 to <2 x float>, !dbg !64
  %468 = fmul <2 x float> %452, %440, !dbg !65
  %469 = fmul <2 x float> %468, %467, !dbg !66
  %470 = fadd <2 x float> %469, %462, !dbg !67
  %471 = fadd <2 x float> %470, %457, !dbg !68
  %472 = fptrunc <2 x float> %471 to <2 x half>, !dbg !69
  %473 = insertelement <2 x i32> poison, i32 %399, i64 0, !dbg !46
  %474 = insertelement <2 x i32> %473, i32 %extelt.offset10, i64 1, !dbg !46
  %475 = trunc <2 x i32> %474 to <2 x i16>, !dbg !46
  %476 = bitcast <2 x i16> %475 to <2 x half>, !dbg !46
  %477 = fpext <2 x half> %476 to <2 x float>, !dbg !59
  %478 = fadd <2 x float> %72, %477, !dbg !60
  %479 = fsub <2 x float> %478, %422, !dbg !61
  %480 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !54
  %481 = insertelement <2 x i32> %480, i32 %extelt.offset22, i64 1, !dbg !54
  %482 = trunc <2 x i32> %481 to <2 x i16>, !dbg !54
  %483 = bitcast <2 x i16> %482 to <2 x half>, !dbg !54
  %484 = fpext <2 x half> %483 to <2 x float>, !dbg !62
  %485 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !50
  %486 = insertelement <2 x i32> %485, i32 %extelt.offset18, i64 1, !dbg !50
  %487 = trunc <2 x i32> %486 to <2 x i16>, !dbg !50
  %488 = bitcast <2 x i16> %487 to <2 x half>, !dbg !50
  %489 = fpext <2 x half> %488 to <2 x float>, !dbg !63
  %490 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !48
  %491 = insertelement <2 x i32> %490, i32 %extelt.offset14, i64 1, !dbg !48
  %492 = trunc <2 x i32> %491 to <2 x i16>, !dbg !48
  %493 = bitcast <2 x i16> %492 to <2 x half>, !dbg !48
  %494 = fpext <2 x half> %493 to <2 x float>, !dbg !64
  %495 = fmul <2 x float> %479, %440, !dbg !65
  %496 = fmul <2 x float> %495, %494, !dbg !66
  %497 = fadd <2 x float> %496, %489, !dbg !67
  %498 = fadd <2 x float> %497, %484, !dbg !68
  %499 = fptrunc <2 x float> %498 to <2 x half>, !dbg !69
  %500 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !46
  %501 = insertelement <2 x i32> %500, i32 %extelt.offset11, i64 1, !dbg !46
  %502 = trunc <2 x i32> %501 to <2 x i16>, !dbg !46
  %503 = bitcast <2 x i16> %502 to <2 x half>, !dbg !46
  %504 = fpext <2 x half> %503 to <2 x float>, !dbg !59
  %505 = fadd <2 x float> %77, %504, !dbg !60
  %506 = fsub <2 x float> %505, %422, !dbg !61
  %507 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !54
  %508 = insertelement <2 x i32> %507, i32 %extelt.offset23, i64 1, !dbg !54
  %509 = trunc <2 x i32> %508 to <2 x i16>, !dbg !54
  %510 = bitcast <2 x i16> %509 to <2 x half>, !dbg !54
  %511 = fpext <2 x half> %510 to <2 x float>, !dbg !62
  %512 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !50
  %513 = insertelement <2 x i32> %512, i32 %extelt.offset19, i64 1, !dbg !50
  %514 = trunc <2 x i32> %513 to <2 x i16>, !dbg !50
  %515 = bitcast <2 x i16> %514 to <2 x half>, !dbg !50
  %516 = fpext <2 x half> %515 to <2 x float>, !dbg !63
  %517 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !48
  %518 = insertelement <2 x i32> %517, i32 %extelt.offset15, i64 1, !dbg !48
  %519 = trunc <2 x i32> %518 to <2 x i16>, !dbg !48
  %520 = bitcast <2 x i16> %519 to <2 x half>, !dbg !48
  %521 = fpext <2 x half> %520 to <2 x float>, !dbg !64
  %522 = fmul <2 x float> %506, %440, !dbg !65
  %523 = fmul <2 x float> %522, %521, !dbg !66
  %524 = fadd <2 x float> %523, %516, !dbg !67
  %525 = fadd <2 x float> %524, %511, !dbg !68
  %526 = fptrunc <2 x float> %525 to <2 x half>, !dbg !69
  %527 = bitcast <2 x half> %445 to i32, !dbg !69
  %528 = bitcast <2 x half> %472 to i32, !dbg !69
  %529 = bitcast <2 x half> %499 to i32, !dbg !69
  %530 = bitcast <2 x half> %526 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %527, i32 %528, i32 %529, i32 %530, ptr addrspace(1) %414, i1 %21) #6, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c6nttcmmfi2ywo3kefvc4lcrxeeradv4hly27c5quxdqf6jczfrt.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/6n")
!4 = !{ptr @triton__0d1d2d3d4d5d67de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d67de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d67de", linkageName: "triton__0d1d2d3d4d5d67de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 25, scope: !7)
!14 = !DILocation(line: 34, column: 45, scope: !7)
!15 = !DILocation(line: 34, column: 40, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 59, scope: !7)
!18 = !DILocation(line: 34, column: 51, scope: !7)
!19 = !DILocation(line: 34, column: 110, scope: !7)
!20 = !DILocation(line: 35, column: 34, scope: !7)
!21 = !DILocation(line: 35, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 90, scope: !7)
!23 = !DILocation(line: 36, column: 22, scope: !7)
!24 = !DILocation(line: 42, column: 60, scope: !7)
!25 = !DILocation(line: 44, column: 64, scope: !7)
!26 = !DILocation(line: 119, column: 21, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 131, column: 46, scope: !27, inlinedAt: !31)
!31 = !DILocation(line: 46, column: 41, scope: !27)
!32 = !DILocation(line: 120, column: 28, scope: !27, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 39, scope: !27, inlinedAt: !30)
!34 = !DILocation(line: 121, column: 60, scope: !27, inlinedAt: !30)
!35 = !DILocation(line: 121, column: 49, scope: !27, inlinedAt: !30)
!36 = !DILocation(line: 123, column: 25, scope: !27, inlinedAt: !30)
!37 = !DILocation(line: 123, column: 17, scope: !27, inlinedAt: !30)
!38 = !DILocation(line: 124, column: 30, scope: !27, inlinedAt: !30)
!39 = !DILocation(line: 124, column: 38, scope: !27, inlinedAt: !30)
!40 = !DILocation(line: 124, column: 49, scope: !27, inlinedAt: !30)
!41 = !DILocation(line: 124, column: 22, scope: !27, inlinedAt: !30)
!42 = !DILocation(line: 131, column: 46, scope: !29, inlinedAt: !43)
!43 = !DILocation(line: 46, column: 41, scope: !29)
!44 = !DILocation(line: 124, column: 15, scope: !27, inlinedAt: !30)
!45 = !DILocation(line: 51, column: 18, scope: !7)
!46 = !DILocation(line: 56, column: 51, scope: !7)
!47 = !DILocation(line: 58, column: 35, scope: !7)
!48 = !DILocation(line: 58, column: 40, scope: !7)
!49 = !DILocation(line: 59, column: 35, scope: !7)
!50 = !DILocation(line: 59, column: 40, scope: !7)
!51 = !DILocation(line: 60, column: 46, scope: !7)
!52 = !DILocation(line: 60, column: 41, scope: !7)
!53 = !DILocation(line: 60, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 52, scope: !7)
!55 = !DILocation(line: 65, column: 23, scope: !7)
!56 = !DILocation(line: 67, column: 24, scope: !7)
!57 = !DILocation(line: 68, column: 32, scope: !7)
!58 = !DILocation(line: 76, column: 29, scope: !7)
!59 = !DILocation(line: 56, column: 111, scope: !7)
!60 = !DILocation(line: 61, column: 23, scope: !7)
!61 = !DILocation(line: 63, column: 24, scope: !7)
!62 = !DILocation(line: 60, column: 111, scope: !7)
!63 = !DILocation(line: 59, column: 91, scope: !7)
!64 = !DILocation(line: 58, column: 91, scope: !7)
!65 = !DILocation(line: 69, column: 24, scope: !7)
!66 = !DILocation(line: 71, column: 24, scope: !7)
!67 = !DILocation(line: 73, column: 24, scope: !7)
!68 = !DILocation(line: 75, column: 24, scope: !7)
!69 = !DILocation(line: 76, column: 53, scope: !7)
!70 = !DILocation(line: 52, column: 4, scope: !7)
