; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d9e10de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %13 = and i32 %12, 31, !dbg !10
  %14 = lshr i32 %12, 5, !dbg !10
  %15 = and i32 %14, 3, !dbg !10
  %urem = shl i32 %12, 2, !dbg !10
  %16 = and i32 %urem, 508, !dbg !10
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %18 = icmp slt i32 %17, 59400, !dbg !12
  %19 = icmp ult i32 %16, 320, !dbg !13
  %20 = mul i32 %17, 320, !dbg !14
  %21 = add i32 %20, %16, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr half, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = and i1 %19, %18, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !18
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %extelt.offset = lshr i32 %26, 16, !dbg !18
  %extelt.offset1 = lshr i32 %27, 16, !dbg !18
  %28 = zext nneg i32 %16 to i64, !dbg !19
  %29 = getelementptr half, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !20
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %extelt.offset2 = lshr i32 %31, 16, !dbg !20
  %extelt.offset3 = lshr i32 %32, 16, !dbg !20
  %33 = getelementptr half, ptr addrspace(1) %2, i64 %22, !dbg !21
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !22
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !22
  %extelt.offset4 = lshr i32 %35, 16, !dbg !22
  %extelt.offset5 = lshr i32 %36, 16, !dbg !22
  %37 = getelementptr half, ptr addrspace(1) %3, i64 %22, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !24
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %extelt.offset6 = lshr i32 %39, 16, !dbg !24
  %extelt.offset7 = lshr i32 %40, 16, !dbg !24
  %41 = getelementptr half, ptr addrspace(1) %4, i64 %28, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !26
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %extelt.offset8 = lshr i32 %43, 16, !dbg !26
  %extelt.offset9 = lshr i32 %44, 16, !dbg !26
  %45 = getelementptr half, ptr addrspace(1) %5, i64 %22, !dbg !27
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #6, !dbg !28
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !28
  %extelt.offset10 = lshr i32 %47, 16, !dbg !28
  %extelt.offset11 = lshr i32 %48, 16, !dbg !28
  %49 = getelementptr half, ptr addrspace(1) %6, i64 %28, !dbg !29
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !30
  %51 = getelementptr half, ptr addrspace(1) %7, i64 %28, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #6, !dbg !32
  %53 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !18
  %54 = insertelement <2 x i32> %53, i32 %extelt.offset, i64 1, !dbg !18
  %55 = trunc <2 x i32> %54 to <2 x i16>, !dbg !18
  %56 = bitcast <2 x i16> %55 to <2 x half>, !dbg !18
  %57 = fpext <2 x half> %56 to <2 x float>, !dbg !33
  %58 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %59 = insertelement <2 x i32> %58, i32 %extelt.offset2, i64 1, !dbg !20
  %60 = trunc <2 x i32> %59 to <2 x i16>, !dbg !20
  %61 = bitcast <2 x i16> %60 to <2 x half>, !dbg !20
  %62 = fpext <2 x half> %61 to <2 x float>, !dbg !34
  %63 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %64 = insertelement <2 x i32> %63, i32 %extelt.offset4, i64 1, !dbg !22
  %65 = trunc <2 x i32> %64 to <2 x i16>, !dbg !22
  %66 = bitcast <2 x i16> %65 to <2 x half>, !dbg !22
  %67 = fpext <2 x half> %66 to <2 x float>, !dbg !35
  %68 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !24
  %69 = insertelement <2 x i32> %68, i32 %extelt.offset6, i64 1, !dbg !24
  %70 = trunc <2 x i32> %69 to <2 x i16>, !dbg !24
  %71 = bitcast <2 x i16> %70 to <2 x half>, !dbg !24
  %72 = fpext <2 x half> %71 to <2 x float>, !dbg !36
  %73 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !26
  %74 = insertelement <2 x i32> %73, i32 %extelt.offset8, i64 1, !dbg !26
  %75 = trunc <2 x i32> %74 to <2 x i16>, !dbg !26
  %76 = bitcast <2 x i16> %75 to <2 x half>, !dbg !26
  %77 = fpext <2 x half> %76 to <2 x float>, !dbg !37
  %78 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !28
  %79 = insertelement <2 x i32> %78, i32 %extelt.offset10, i64 1, !dbg !28
  %80 = trunc <2 x i32> %79 to <2 x i16>, !dbg !28
  %81 = bitcast <2 x i16> %80 to <2 x half>, !dbg !28
  %82 = fpext <2 x half> %81 to <2 x float>, !dbg !38
  %83 = fadd <2 x float> %57, %62, !dbg !39
  %84 = fmul <2 x float> %67, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %85 = fadd <2 x float> %83, %84, !dbg !41
  %86 = fadd <2 x float> %72, %77, !dbg !42
  %87 = fmul <2 x float> %82, <float 1.250000e-01, float 1.250000e-01>, !dbg !43
  %88 = fadd <2 x float> %86, %87, !dbg !44
  %89 = fadd <2 x float> %85, %88, !dbg !45
  %90 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !18
  %91 = insertelement <2 x i32> %90, i32 %extelt.offset1, i64 1, !dbg !18
  %92 = trunc <2 x i32> %91 to <2 x i16>, !dbg !18
  %93 = bitcast <2 x i16> %92 to <2 x half>, !dbg !18
  %94 = fpext <2 x half> %93 to <2 x float>, !dbg !33
  %95 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %96 = insertelement <2 x i32> %95, i32 %extelt.offset3, i64 1, !dbg !20
  %97 = trunc <2 x i32> %96 to <2 x i16>, !dbg !20
  %98 = bitcast <2 x i16> %97 to <2 x half>, !dbg !20
  %99 = fpext <2 x half> %98 to <2 x float>, !dbg !34
  %100 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !22
  %101 = insertelement <2 x i32> %100, i32 %extelt.offset5, i64 1, !dbg !22
  %102 = trunc <2 x i32> %101 to <2 x i16>, !dbg !22
  %103 = bitcast <2 x i16> %102 to <2 x half>, !dbg !22
  %104 = fpext <2 x half> %103 to <2 x float>, !dbg !35
  %105 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !24
  %106 = insertelement <2 x i32> %105, i32 %extelt.offset7, i64 1, !dbg !24
  %107 = trunc <2 x i32> %106 to <2 x i16>, !dbg !24
  %108 = bitcast <2 x i16> %107 to <2 x half>, !dbg !24
  %109 = fpext <2 x half> %108 to <2 x float>, !dbg !36
  %110 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !26
  %111 = insertelement <2 x i32> %110, i32 %extelt.offset9, i64 1, !dbg !26
  %112 = trunc <2 x i32> %111 to <2 x i16>, !dbg !26
  %113 = bitcast <2 x i16> %112 to <2 x half>, !dbg !26
  %114 = fpext <2 x half> %113 to <2 x float>, !dbg !37
  %115 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !28
  %116 = insertelement <2 x i32> %115, i32 %extelt.offset11, i64 1, !dbg !28
  %117 = trunc <2 x i32> %116 to <2 x i16>, !dbg !28
  %118 = bitcast <2 x i16> %117 to <2 x half>, !dbg !28
  %119 = fpext <2 x half> %118 to <2 x float>, !dbg !38
  %120 = fadd <2 x float> %94, %99, !dbg !39
  %121 = fmul <2 x float> %104, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %122 = fadd <2 x float> %120, %121, !dbg !41
  %123 = fadd <2 x float> %109, %114, !dbg !42
  %124 = fmul <2 x float> %119, <float 1.250000e-01, float 1.250000e-01>, !dbg !43
  %125 = fadd <2 x float> %123, %124, !dbg !44
  %126 = fadd <2 x float> %122, %125, !dbg !45
  %shift = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %127 = fadd <2 x float> %89, %shift, !dbg !46
  %128 = fadd <2 x float> %126, %127, !dbg !46
  %shift16 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %129 = fadd <2 x float> %shift16, %128, !dbg !46
  %130 = extractelement <2 x float> %129, i64 0, !dbg !46
  %131 = select i1 %24, float %130, float 0.000000e+00, !dbg !46
  %132 = bitcast float %131 to i32, !dbg !52
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !52
  %134 = bitcast i32 %133 to float, !dbg !52
  %135 = fadd float %131, %134, !dbg !46
  %136 = bitcast float %135 to i32, !dbg !52
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !52
  %138 = bitcast i32 %137 to float, !dbg !52
  %139 = fadd float %135, %138, !dbg !46
  %140 = bitcast float %139 to i32, !dbg !52
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 4, i32 31), !dbg !52
  %142 = bitcast i32 %141 to float, !dbg !52
  %143 = fadd float %139, %142, !dbg !46
  %144 = bitcast float %143 to i32, !dbg !52
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !52
  %146 = bitcast i32 %145 to float, !dbg !52
  %147 = fadd float %143, %146, !dbg !46
  %148 = bitcast float %147 to i32, !dbg !52
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !52
  %150 = bitcast i32 %149 to float, !dbg !52
  %151 = fadd float %147, %150, !dbg !46
  %152 = icmp eq i32 %13, 0, !dbg !52
  %153 = zext nneg i32 %15 to i64, !dbg !52
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i64 %153, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, float %151, i1 %152) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %155 = icmp slt i32 %12, 4, !dbg !52
  %156 = sext i32 %12 to i64, !dbg !52
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i64 %156, !dbg !52
  %158 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %157, i1 %155) #6, !dbg !52
  %159 = bitcast float %158 to i32, !dbg !52
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !52
  %161 = bitcast i32 %160 to float, !dbg !52
  %162 = fadd float %158, %161, !dbg !46
  %163 = bitcast float %162 to i32, !dbg !52
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !52
  %165 = bitcast i32 %164 to float, !dbg !52
  %166 = fadd float %162, %165, !dbg !46
  %167 = and i32 %12, 3, !dbg !52
  %168 = icmp eq i32 %167, 0, !dbg !52
  %169 = and i1 %155, %168, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, float %166, i1 %169) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %170 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !52
  %171 = fadd float %170, 0.000000e+00, !dbg !54
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float 3.200000e+02) #6, !dbg !58
  %173 = insertelement <2 x float> poison, float %172, i64 0, !dbg !59
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %175 = fsub <2 x float> %89, %174, !dbg !59
  %176 = fsub <2 x float> %126, %174, !dbg !59
  %177 = fmul <2 x float> %175, %175, !dbg !60
  %178 = fmul <2 x float> %176, %176, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %shift17 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %179 = fadd <2 x float> %177, %shift17, !dbg !63
  %180 = fadd <2 x float> %178, %179, !dbg !63
  %shift18 = shufflevector <2 x float> %178, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %181 = fadd <2 x float> %shift18, %180, !dbg !63
  %182 = extractelement <2 x float> %181, i64 0, !dbg !63
  %183 = select i1 %24, float %182, float 0.000000e+00, !dbg !63
  %184 = bitcast float %183 to i32, !dbg !61
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !61
  %186 = bitcast i32 %185 to float, !dbg !61
  %187 = fadd float %183, %186, !dbg !63
  %188 = bitcast float %187 to i32, !dbg !61
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !61
  %190 = bitcast i32 %189 to float, !dbg !61
  %191 = fadd float %187, %190, !dbg !63
  %192 = bitcast float %191 to i32, !dbg !61
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !61
  %194 = bitcast i32 %193 to float, !dbg !61
  %195 = fadd float %191, %194, !dbg !63
  %196 = bitcast float %195 to i32, !dbg !61
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !61
  %198 = bitcast i32 %197 to float, !dbg !61
  %199 = fadd float %195, %198, !dbg !63
  %200 = bitcast float %199 to i32, !dbg !61
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !61
  %202 = bitcast i32 %201 to float, !dbg !61
  %203 = fadd float %199, %202, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, float %203, i1 %152) #6, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %204 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %157, i1 %155) #6, !dbg !61
  %205 = bitcast float %204 to i32, !dbg !61
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !61
  %207 = bitcast i32 %206 to float, !dbg !61
  %208 = fadd float %204, %207, !dbg !63
  %209 = bitcast float %208 to i32, !dbg !61
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 1, i32 31), !dbg !61
  %211 = bitcast i32 %210 to float, !dbg !61
  %212 = fadd float %208, %211, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, float %212, i1 %169) #6, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %213 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !61
  %214 = fadd float %213, 0.000000e+00, !dbg !66
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float 3.200000e+02) #6, !dbg !68
  %216 = fadd float %215, 0x3EE4F8B580000000, !dbg !69
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !70
  %.not.i = icmp eq i32 %217, 0, !dbg !70
  br i1 %.not.i, label %220, label %218, !dbg !70

218:                                              ; preds = %11
  %219 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %216), !dbg !70
  br label %__nv_rsqrtf.exit, !dbg !70

220:                                              ; preds = %11
  %221 = tail call float @llvm.nvvm.rsqrt.approx.f(float %216), !dbg !70
  br label %__nv_rsqrtf.exit, !dbg !70

__nv_rsqrtf.exit:                                 ; preds = %218, %220
  %.0.i = phi float [ %219, %218 ], [ %221, %220 ], !dbg !70
  %222 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %extelt.offset15 = lshr i32 %222, 16, !dbg !32
  %223 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %extelt.offset14 = lshr i32 %223, 16, !dbg !32
  %224 = extractvalue { i32, i32 } %50, 1, !dbg !30
  %extelt.offset13 = lshr i32 %224, 16, !dbg !30
  %225 = extractvalue { i32, i32 } %50, 0, !dbg !30
  %extelt.offset12 = lshr i32 %225, 16, !dbg !30
  %226 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !71
  %227 = shufflevector <2 x float> %226, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !71
  %228 = fmul <2 x float> %175, %227, !dbg !71
  %229 = fmul <2 x float> %176, %227, !dbg !71
  %230 = fptrunc <2 x float> %89 to <2 x half>, !dbg !72
  %231 = fptrunc <2 x float> %126 to <2 x half>, !dbg !72
  %232 = bitcast <2 x half> %230 to i32, !dbg !72
  %233 = bitcast <2 x half> %231 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %232, i32 %233, ptr addrspace(1) %23, i1 %24) #6, !dbg !72
  %234 = getelementptr half, ptr addrspace(1) %8, i64 %22, !dbg !73
  %235 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !32
  %236 = insertelement <2 x i32> %235, i32 %extelt.offset14, i64 1, !dbg !32
  %237 = trunc <2 x i32> %236 to <2 x i16>, !dbg !32
  %238 = bitcast <2 x i16> %237 to <2 x half>, !dbg !32
  %239 = fpext <2 x half> %238 to <2 x float>, !dbg !74
  %240 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !30
  %241 = insertelement <2 x i32> %240, i32 %extelt.offset12, i64 1, !dbg !30
  %242 = trunc <2 x i32> %241 to <2 x i16>, !dbg !30
  %243 = bitcast <2 x i16> %242 to <2 x half>, !dbg !30
  %244 = fpext <2 x half> %243 to <2 x float>, !dbg !75
  %245 = fmul <2 x float> %228, %244, !dbg !76
  %246 = fadd <2 x float> %245, %239, !dbg !77
  %247 = fptrunc <2 x float> %246 to <2 x half>, !dbg !78
  %248 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !32
  %249 = insertelement <2 x i32> %248, i32 %extelt.offset15, i64 1, !dbg !32
  %250 = trunc <2 x i32> %249 to <2 x i16>, !dbg !32
  %251 = bitcast <2 x i16> %250 to <2 x half>, !dbg !32
  %252 = fpext <2 x half> %251 to <2 x float>, !dbg !74
  %253 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !30
  %254 = insertelement <2 x i32> %253, i32 %extelt.offset13, i64 1, !dbg !30
  %255 = trunc <2 x i32> %254 to <2 x i16>, !dbg !30
  %256 = bitcast <2 x i16> %255 to <2 x half>, !dbg !30
  %257 = fpext <2 x half> %256 to <2 x float>, !dbg !75
  %258 = fmul <2 x float> %229, %257, !dbg !76
  %259 = fadd <2 x float> %258, %252, !dbg !77
  %260 = fptrunc <2 x float> %259 to <2 x half>, !dbg !78
  %261 = bitcast <2 x half> %247 to i32, !dbg !78
  %262 = bitcast <2 x half> %260 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %261, i32 %262, ptr addrspace(1) %234, i1 %24) #6, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cx6nwwvakg2bea3lkgwqt4brutfwxengoh7nt2pnw65gmuunnjps.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/x6")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9e10de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d9e10de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d9e10de", linkageName: "triton__0d1d2d3d4d5d6d7d8d9e10de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 26, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 27, column: 21, scope: !7)
!13 = !DILocation(line: 30, column: 21, scope: !7)
!14 = !DILocation(line: 33, column: 44, scope: !7)
!15 = !DILocation(line: 33, column: 40, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 58, scope: !7)
!18 = !DILocation(line: 33, column: 50, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 46, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 46, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 47, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 36, scope: !7)
!33 = !DILocation(line: 33, column: 79, scope: !7)
!34 = !DILocation(line: 34, column: 86, scope: !7)
!35 = !DILocation(line: 35, column: 75, scope: !7)
!36 = !DILocation(line: 36, column: 75, scope: !7)
!37 = !DILocation(line: 37, column: 87, scope: !7)
!38 = !DILocation(line: 38, column: 76, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 233, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 243, column: 36, scope: !47, inlinedAt: !51)
!51 = !DILocation(line: 56, column: 59, scope: !47)
!52 = !DILocation(line: 243, column: 36, scope: !49, inlinedAt: !53)
!53 = !DILocation(line: 56, column: 59, scope: !49)
!54 = !DILocation(line: 17, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!57 = !DILocation(line: 56, column: 45, scope: !55)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 243, column: 36, scope: !49, inlinedAt: !62)
!62 = !DILocation(line: 64, column: 59, scope: !49)
!63 = !DILocation(line: 233, column: 15, scope: !47, inlinedAt: !64)
!64 = !DILocation(line: 243, column: 36, scope: !47, inlinedAt: !65)
!65 = !DILocation(line: 64, column: 59, scope: !47)
!66 = !DILocation(line: 17, column: 15, scope: !55, inlinedAt: !67)
!67 = !DILocation(line: 64, column: 45, scope: !55)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 69, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 28, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 77, column: 51, scope: !7)
!73 = !DILocation(line: 78, column: 25, scope: !7)
!74 = !DILocation(line: 40, column: 87, scope: !7)
!75 = !DILocation(line: 39, column: 87, scope: !7)
!76 = !DILocation(line: 73, column: 20, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 78, column: 48, scope: !7)
!79 = !DILocation(line: 78, column: 4, scope: !7)
