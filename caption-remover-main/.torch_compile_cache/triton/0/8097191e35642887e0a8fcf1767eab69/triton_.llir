; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d6d7de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = shl i32 %9, 3, !dbg !8
  %11 = and i32 %10, 1016, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %13 = shl i32 %12, 10, !dbg !10
  %14 = or i32 %13, %11, !dbg !11
  %15 = icmp slt i32 %14, 19008000, !dbg !12
  %16 = srem i32 %14, 320, !dbg !13
  %17 = sext i32 %14 to i64, !dbg !14
  %18 = getelementptr half, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %15) #1, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %extelt.offset = lshr i32 %20, 16, !dbg !15
  %extelt.offset1 = lshr i32 %21, 16, !dbg !15
  %extelt.offset2 = lshr i32 %22, 16, !dbg !15
  %extelt.offset3 = lshr i32 %23, 16, !dbg !15
  %24 = sext i32 %16 to i64, !dbg !16
  %25 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %15) #1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %extelt.offset4 = lshr i32 %27, 16, !dbg !17
  %extelt.offset5 = lshr i32 %28, 16, !dbg !17
  %extelt.offset6 = lshr i32 %29, 16, !dbg !17
  %extelt.offset7 = lshr i32 %30, 16, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %2, i64 %17, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %15) #1, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %extelt.offset8 = lshr i32 %33, 16, !dbg !19
  %extelt.offset9 = lshr i32 %34, 16, !dbg !19
  %extelt.offset10 = lshr i32 %35, 16, !dbg !19
  %extelt.offset11 = lshr i32 %36, 16, !dbg !19
  %37 = getelementptr half, ptr addrspace(1) %3, i64 %17, !dbg !20
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %15) #1, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %extelt.offset12 = lshr i32 %39, 16, !dbg !21
  %extelt.offset13 = lshr i32 %40, 16, !dbg !21
  %extelt.offset14 = lshr i32 %41, 16, !dbg !21
  %extelt.offset15 = lshr i32 %42, 16, !dbg !21
  %43 = getelementptr half, ptr addrspace(1) %4, i64 %24, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %extelt.offset16 = lshr i32 %45, 16, !dbg !23
  %extelt.offset17 = lshr i32 %46, 16, !dbg !23
  %extelt.offset18 = lshr i32 %47, 16, !dbg !23
  %extelt.offset19 = lshr i32 %48, 16, !dbg !23
  %49 = getelementptr half, ptr addrspace(1) %5, i64 %17, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %15) #1, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %extelt.offset20 = lshr i32 %51, 16, !dbg !25
  %extelt.offset21 = lshr i32 %52, 16, !dbg !25
  %extelt.offset22 = lshr i32 %53, 16, !dbg !25
  %extelt.offset23 = lshr i32 %54, 16, !dbg !25
  %55 = getelementptr half, ptr addrspace(1) %6, i64 %17, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %15) #1, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %extelt.offset24 = lshr i32 %57, 16, !dbg !27
  %extelt.offset25 = lshr i32 %58, 16, !dbg !27
  %extelt.offset26 = lshr i32 %59, 16, !dbg !27
  %extelt.offset27 = lshr i32 %60, 16, !dbg !27
  %61 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !15
  %62 = insertelement <2 x i32> %61, i32 %extelt.offset, i64 1, !dbg !15
  %63 = trunc <2 x i32> %62 to <2 x i16>, !dbg !15
  %64 = bitcast <2 x i16> %63 to <2 x half>, !dbg !15
  %65 = fpext <2 x half> %64 to <2 x float>, !dbg !28
  %66 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !17
  %67 = insertelement <2 x i32> %66, i32 %extelt.offset4, i64 1, !dbg !17
  %68 = trunc <2 x i32> %67 to <2 x i16>, !dbg !17
  %69 = bitcast <2 x i16> %68 to <2 x half>, !dbg !17
  %70 = fpext <2 x half> %69 to <2 x float>, !dbg !29
  %71 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !19
  %72 = insertelement <2 x i32> %71, i32 %extelt.offset8, i64 1, !dbg !19
  %73 = trunc <2 x i32> %72 to <2 x i16>, !dbg !19
  %74 = bitcast <2 x i16> %73 to <2 x half>, !dbg !19
  %75 = fpext <2 x half> %74 to <2 x float>, !dbg !30
  %76 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !21
  %77 = insertelement <2 x i32> %76, i32 %extelt.offset12, i64 1, !dbg !21
  %78 = trunc <2 x i32> %77 to <2 x i16>, !dbg !21
  %79 = bitcast <2 x i16> %78 to <2 x half>, !dbg !21
  %80 = fpext <2 x half> %79 to <2 x float>, !dbg !31
  %81 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !23
  %82 = insertelement <2 x i32> %81, i32 %extelt.offset16, i64 1, !dbg !23
  %83 = trunc <2 x i32> %82 to <2 x i16>, !dbg !23
  %84 = bitcast <2 x i16> %83 to <2 x half>, !dbg !23
  %85 = fpext <2 x half> %84 to <2 x float>, !dbg !32
  %86 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !25
  %87 = insertelement <2 x i32> %86, i32 %extelt.offset20, i64 1, !dbg !25
  %88 = trunc <2 x i32> %87 to <2 x i16>, !dbg !25
  %89 = bitcast <2 x i16> %88 to <2 x half>, !dbg !25
  %90 = fpext <2 x half> %89 to <2 x float>, !dbg !33
  %91 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !27
  %92 = insertelement <2 x i32> %91, i32 %extelt.offset24, i64 1, !dbg !27
  %93 = trunc <2 x i32> %92 to <2 x i16>, !dbg !27
  %94 = bitcast <2 x i16> %93 to <2 x half>, !dbg !27
  %95 = fpext <2 x half> %94 to <2 x float>, !dbg !34
  %96 = fadd <2 x float> %65, %70, !dbg !35
  %97 = fmul <2 x float> %75, <float 1.250000e-01, float 1.250000e-01>, !dbg !36
  %98 = fadd <2 x float> %96, %97, !dbg !37
  %99 = fadd <2 x float> %80, %85, !dbg !38
  %100 = fmul <2 x float> %90, <float 1.250000e-01, float 1.250000e-01>, !dbg !39
  %101 = fadd <2 x float> %99, %100, !dbg !40
  %102 = fadd <2 x float> %101, %95, !dbg !41
  %103 = fadd <2 x float> %98, %102, !dbg !42
  %104 = fptrunc <2 x float> %103 to <2 x half>, !dbg !43
  %105 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !15
  %106 = insertelement <2 x i32> %105, i32 %extelt.offset1, i64 1, !dbg !15
  %107 = trunc <2 x i32> %106 to <2 x i16>, !dbg !15
  %108 = bitcast <2 x i16> %107 to <2 x half>, !dbg !15
  %109 = fpext <2 x half> %108 to <2 x float>, !dbg !28
  %110 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !17
  %111 = insertelement <2 x i32> %110, i32 %extelt.offset5, i64 1, !dbg !17
  %112 = trunc <2 x i32> %111 to <2 x i16>, !dbg !17
  %113 = bitcast <2 x i16> %112 to <2 x half>, !dbg !17
  %114 = fpext <2 x half> %113 to <2 x float>, !dbg !29
  %115 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !19
  %116 = insertelement <2 x i32> %115, i32 %extelt.offset9, i64 1, !dbg !19
  %117 = trunc <2 x i32> %116 to <2 x i16>, !dbg !19
  %118 = bitcast <2 x i16> %117 to <2 x half>, !dbg !19
  %119 = fpext <2 x half> %118 to <2 x float>, !dbg !30
  %120 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !21
  %121 = insertelement <2 x i32> %120, i32 %extelt.offset13, i64 1, !dbg !21
  %122 = trunc <2 x i32> %121 to <2 x i16>, !dbg !21
  %123 = bitcast <2 x i16> %122 to <2 x half>, !dbg !21
  %124 = fpext <2 x half> %123 to <2 x float>, !dbg !31
  %125 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !23
  %126 = insertelement <2 x i32> %125, i32 %extelt.offset17, i64 1, !dbg !23
  %127 = trunc <2 x i32> %126 to <2 x i16>, !dbg !23
  %128 = bitcast <2 x i16> %127 to <2 x half>, !dbg !23
  %129 = fpext <2 x half> %128 to <2 x float>, !dbg !32
  %130 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !25
  %131 = insertelement <2 x i32> %130, i32 %extelt.offset21, i64 1, !dbg !25
  %132 = trunc <2 x i32> %131 to <2 x i16>, !dbg !25
  %133 = bitcast <2 x i16> %132 to <2 x half>, !dbg !25
  %134 = fpext <2 x half> %133 to <2 x float>, !dbg !33
  %135 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !27
  %136 = insertelement <2 x i32> %135, i32 %extelt.offset25, i64 1, !dbg !27
  %137 = trunc <2 x i32> %136 to <2 x i16>, !dbg !27
  %138 = bitcast <2 x i16> %137 to <2 x half>, !dbg !27
  %139 = fpext <2 x half> %138 to <2 x float>, !dbg !34
  %140 = fadd <2 x float> %109, %114, !dbg !35
  %141 = fmul <2 x float> %119, <float 1.250000e-01, float 1.250000e-01>, !dbg !36
  %142 = fadd <2 x float> %140, %141, !dbg !37
  %143 = fadd <2 x float> %124, %129, !dbg !38
  %144 = fmul <2 x float> %134, <float 1.250000e-01, float 1.250000e-01>, !dbg !39
  %145 = fadd <2 x float> %143, %144, !dbg !40
  %146 = fadd <2 x float> %145, %139, !dbg !41
  %147 = fadd <2 x float> %142, %146, !dbg !42
  %148 = fptrunc <2 x float> %147 to <2 x half>, !dbg !43
  %149 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !15
  %150 = insertelement <2 x i32> %149, i32 %extelt.offset2, i64 1, !dbg !15
  %151 = trunc <2 x i32> %150 to <2 x i16>, !dbg !15
  %152 = bitcast <2 x i16> %151 to <2 x half>, !dbg !15
  %153 = fpext <2 x half> %152 to <2 x float>, !dbg !28
  %154 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !17
  %155 = insertelement <2 x i32> %154, i32 %extelt.offset6, i64 1, !dbg !17
  %156 = trunc <2 x i32> %155 to <2 x i16>, !dbg !17
  %157 = bitcast <2 x i16> %156 to <2 x half>, !dbg !17
  %158 = fpext <2 x half> %157 to <2 x float>, !dbg !29
  %159 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %160 = insertelement <2 x i32> %159, i32 %extelt.offset10, i64 1, !dbg !19
  %161 = trunc <2 x i32> %160 to <2 x i16>, !dbg !19
  %162 = bitcast <2 x i16> %161 to <2 x half>, !dbg !19
  %163 = fpext <2 x half> %162 to <2 x float>, !dbg !30
  %164 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !21
  %165 = insertelement <2 x i32> %164, i32 %extelt.offset14, i64 1, !dbg !21
  %166 = trunc <2 x i32> %165 to <2 x i16>, !dbg !21
  %167 = bitcast <2 x i16> %166 to <2 x half>, !dbg !21
  %168 = fpext <2 x half> %167 to <2 x float>, !dbg !31
  %169 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !23
  %170 = insertelement <2 x i32> %169, i32 %extelt.offset18, i64 1, !dbg !23
  %171 = trunc <2 x i32> %170 to <2 x i16>, !dbg !23
  %172 = bitcast <2 x i16> %171 to <2 x half>, !dbg !23
  %173 = fpext <2 x half> %172 to <2 x float>, !dbg !32
  %174 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !25
  %175 = insertelement <2 x i32> %174, i32 %extelt.offset22, i64 1, !dbg !25
  %176 = trunc <2 x i32> %175 to <2 x i16>, !dbg !25
  %177 = bitcast <2 x i16> %176 to <2 x half>, !dbg !25
  %178 = fpext <2 x half> %177 to <2 x float>, !dbg !33
  %179 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !27
  %180 = insertelement <2 x i32> %179, i32 %extelt.offset26, i64 1, !dbg !27
  %181 = trunc <2 x i32> %180 to <2 x i16>, !dbg !27
  %182 = bitcast <2 x i16> %181 to <2 x half>, !dbg !27
  %183 = fpext <2 x half> %182 to <2 x float>, !dbg !34
  %184 = fadd <2 x float> %153, %158, !dbg !35
  %185 = fmul <2 x float> %163, <float 1.250000e-01, float 1.250000e-01>, !dbg !36
  %186 = fadd <2 x float> %184, %185, !dbg !37
  %187 = fadd <2 x float> %168, %173, !dbg !38
  %188 = fmul <2 x float> %178, <float 1.250000e-01, float 1.250000e-01>, !dbg !39
  %189 = fadd <2 x float> %187, %188, !dbg !40
  %190 = fadd <2 x float> %189, %183, !dbg !41
  %191 = fadd <2 x float> %186, %190, !dbg !42
  %192 = fptrunc <2 x float> %191 to <2 x half>, !dbg !43
  %193 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %194 = insertelement <2 x i32> %193, i32 %extelt.offset3, i64 1, !dbg !15
  %195 = trunc <2 x i32> %194 to <2 x i16>, !dbg !15
  %196 = bitcast <2 x i16> %195 to <2 x half>, !dbg !15
  %197 = fpext <2 x half> %196 to <2 x float>, !dbg !28
  %198 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !17
  %199 = insertelement <2 x i32> %198, i32 %extelt.offset7, i64 1, !dbg !17
  %200 = trunc <2 x i32> %199 to <2 x i16>, !dbg !17
  %201 = bitcast <2 x i16> %200 to <2 x half>, !dbg !17
  %202 = fpext <2 x half> %201 to <2 x float>, !dbg !29
  %203 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !19
  %204 = insertelement <2 x i32> %203, i32 %extelt.offset11, i64 1, !dbg !19
  %205 = trunc <2 x i32> %204 to <2 x i16>, !dbg !19
  %206 = bitcast <2 x i16> %205 to <2 x half>, !dbg !19
  %207 = fpext <2 x half> %206 to <2 x float>, !dbg !30
  %208 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !21
  %209 = insertelement <2 x i32> %208, i32 %extelt.offset15, i64 1, !dbg !21
  %210 = trunc <2 x i32> %209 to <2 x i16>, !dbg !21
  %211 = bitcast <2 x i16> %210 to <2 x half>, !dbg !21
  %212 = fpext <2 x half> %211 to <2 x float>, !dbg !31
  %213 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !23
  %214 = insertelement <2 x i32> %213, i32 %extelt.offset19, i64 1, !dbg !23
  %215 = trunc <2 x i32> %214 to <2 x i16>, !dbg !23
  %216 = bitcast <2 x i16> %215 to <2 x half>, !dbg !23
  %217 = fpext <2 x half> %216 to <2 x float>, !dbg !32
  %218 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !25
  %219 = insertelement <2 x i32> %218, i32 %extelt.offset23, i64 1, !dbg !25
  %220 = trunc <2 x i32> %219 to <2 x i16>, !dbg !25
  %221 = bitcast <2 x i16> %220 to <2 x half>, !dbg !25
  %222 = fpext <2 x half> %221 to <2 x float>, !dbg !33
  %223 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !27
  %224 = insertelement <2 x i32> %223, i32 %extelt.offset27, i64 1, !dbg !27
  %225 = trunc <2 x i32> %224 to <2 x i16>, !dbg !27
  %226 = bitcast <2 x i16> %225 to <2 x half>, !dbg !27
  %227 = fpext <2 x half> %226 to <2 x float>, !dbg !34
  %228 = fadd <2 x float> %197, %202, !dbg !35
  %229 = fmul <2 x float> %207, <float 1.250000e-01, float 1.250000e-01>, !dbg !36
  %230 = fadd <2 x float> %228, %229, !dbg !37
  %231 = fadd <2 x float> %212, %217, !dbg !38
  %232 = fmul <2 x float> %222, <float 1.250000e-01, float 1.250000e-01>, !dbg !39
  %233 = fadd <2 x float> %231, %232, !dbg !40
  %234 = fadd <2 x float> %233, %227, !dbg !41
  %235 = fadd <2 x float> %230, %234, !dbg !42
  %236 = fptrunc <2 x float> %235 to <2 x half>, !dbg !43
  %237 = bitcast <2 x half> %104 to i32, !dbg !43
  %238 = bitcast <2 x half> %148 to i32, !dbg !43
  %239 = bitcast <2 x half> %192 to i32, !dbg !43
  %240 = bitcast <2 x half> %236 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %18, i1 %15) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cs2yyo3qfnodjqipotisn6fsgrsyiel4uy2vf5l2q62uglzafkbr.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/s2")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7de", linkageName: "triton__0d1d2d3d4d5d6d7de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 36, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 22, column: 33, scope: !5)
!11 = !DILocation(line: 23, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 18, scope: !5)
!14 = !DILocation(line: 27, column: 34, scope: !5)
!15 = !DILocation(line: 27, column: 39, scope: !5)
!16 = !DILocation(line: 28, column: 30, scope: !5)
!17 = !DILocation(line: 28, column: 35, scope: !5)
!18 = !DILocation(line: 29, column: 30, scope: !5)
!19 = !DILocation(line: 29, column: 35, scope: !5)
!20 = !DILocation(line: 30, column: 30, scope: !5)
!21 = !DILocation(line: 30, column: 35, scope: !5)
!22 = !DILocation(line: 31, column: 30, scope: !5)
!23 = !DILocation(line: 31, column: 35, scope: !5)
!24 = !DILocation(line: 32, column: 31, scope: !5)
!25 = !DILocation(line: 32, column: 36, scope: !5)
!26 = !DILocation(line: 33, column: 31, scope: !5)
!27 = !DILocation(line: 33, column: 36, scope: !5)
!28 = !DILocation(line: 27, column: 49, scope: !5)
!29 = !DILocation(line: 28, column: 75, scope: !5)
!30 = !DILocation(line: 29, column: 45, scope: !5)
!31 = !DILocation(line: 30, column: 45, scope: !5)
!32 = !DILocation(line: 31, column: 75, scope: !5)
!33 = !DILocation(line: 32, column: 46, scope: !5)
!34 = !DILocation(line: 33, column: 46, scope: !5)
!35 = !DILocation(line: 34, column: 18, scope: !5)
!36 = !DILocation(line: 36, column: 18, scope: !5)
!37 = !DILocation(line: 37, column: 18, scope: !5)
!38 = !DILocation(line: 38, column: 18, scope: !5)
!39 = !DILocation(line: 39, column: 20, scope: !5)
!40 = !DILocation(line: 40, column: 19, scope: !5)
!41 = !DILocation(line: 43, column: 20, scope: !5)
!42 = !DILocation(line: 44, column: 19, scope: !5)
!43 = !DILocation(line: 45, column: 40, scope: !5)
!44 = !DILocation(line: 45, column: 4, scope: !5)
