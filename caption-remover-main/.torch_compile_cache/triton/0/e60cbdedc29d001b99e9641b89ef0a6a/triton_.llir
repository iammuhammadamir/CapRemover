; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !9
  %11 = icmp slt i32 %10, 32, !dbg !10
  %12 = icmp ult i32 %9, 18, !dbg !11
  %13 = shl nuw nsw i32 %9, 5, !dbg !12
  %14 = add i32 %10, %13, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = and i1 %12, %11, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %17, i32 0, i1 %17) #2, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %17, i32 0, i1 %17) #2, !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %17, i32 0, i1 %17) #2, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = select i1 %17, float %19, float 0.000000e+00, !dbg !21
  %27 = select i1 %17, float %22, float 0.000000e+00, !dbg !22
  %28 = select i1 %17, float %25, float 0.000000e+00, !dbg !23
  %29 = bitcast float %26 to i32, !dbg !24
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 16, i32 31), !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = bitcast float %27 to i32, !dbg !24
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = bitcast float %28 to i32, !dbg !24
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = fsub float %31, %26, !dbg !28
  %39 = fadd float %28, %37, !dbg !32
  %40 = fcmp oeq float %39, 0.000000e+00, !dbg !33
  %41 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float %39) #2, !dbg !34
  %42 = select i1 %40, float 0.000000e+00, float %41, !dbg !35
  %43 = fmul float %38, %42, !dbg !36
  %44 = fadd float %26, %43, !dbg !37
  %45 = fadd float %27, %34, !dbg !38
  %46 = fmul float %38, %38, !dbg !39
  %47 = fmul float %28, %46, !dbg !40
  %48 = fmul float %47, %42, !dbg !41
  %49 = fadd float %45, %48, !dbg !42
  %50 = bitcast float %44 to i32, !dbg !24
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = bitcast float %49 to i32, !dbg !24
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = bitcast float %39 to i32, !dbg !24
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = fsub float %52, %44, !dbg !28
  %60 = fadd float %39, %58, !dbg !32
  %61 = fcmp oeq float %60, 0.000000e+00, !dbg !33
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %60) #2, !dbg !34
  %63 = select i1 %61, float 0.000000e+00, float %62, !dbg !35
  %64 = fmul float %59, %63, !dbg !36
  %65 = fadd float %44, %64, !dbg !37
  %66 = fadd float %49, %55, !dbg !38
  %67 = fmul float %59, %59, !dbg !39
  %68 = fmul float %39, %67, !dbg !40
  %69 = fmul float %63, %68, !dbg !41
  %70 = fadd float %66, %69, !dbg !42
  %71 = bitcast float %65 to i32, !dbg !24
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = bitcast float %70 to i32, !dbg !24
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !24
  %76 = bitcast i32 %75 to float, !dbg !24
  %77 = bitcast float %60 to i32, !dbg !24
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !24
  %79 = bitcast i32 %78 to float, !dbg !24
  %80 = fsub float %73, %65, !dbg !28
  %81 = fadd float %60, %79, !dbg !32
  %82 = fcmp oeq float %81, 0.000000e+00, !dbg !33
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %81) #2, !dbg !34
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !35
  %85 = fmul float %80, %84, !dbg !36
  %86 = fadd float %65, %85, !dbg !37
  %87 = fadd float %70, %76, !dbg !38
  %88 = fmul float %80, %80, !dbg !39
  %89 = fmul float %60, %88, !dbg !40
  %90 = fmul float %84, %89, !dbg !41
  %91 = fadd float %87, %90, !dbg !42
  %92 = bitcast float %86 to i32, !dbg !24
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = bitcast float %91 to i32, !dbg !24
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !24
  %97 = bitcast i32 %96 to float, !dbg !24
  %98 = bitcast float %81 to i32, !dbg !24
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !24
  %100 = bitcast i32 %99 to float, !dbg !24
  %101 = fsub float %94, %86, !dbg !28
  %102 = fadd float %81, %100, !dbg !32
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !33
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %102) #2, !dbg !34
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !35
  %106 = fmul float %101, %105, !dbg !36
  %107 = fadd float %86, %106, !dbg !37
  %108 = fadd float %91, %97, !dbg !38
  %109 = fmul float %101, %101, !dbg !39
  %110 = fmul float %81, %109, !dbg !40
  %111 = fmul float %105, %110, !dbg !41
  %112 = fadd float %108, %111, !dbg !42
  %113 = bitcast float %107 to i32, !dbg !24
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !24
  %115 = bitcast i32 %114 to float, !dbg !24
  %116 = bitcast float %112 to i32, !dbg !24
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !24
  %118 = bitcast i32 %117 to float, !dbg !24
  %119 = bitcast float %102 to i32, !dbg !24
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !24
  %121 = bitcast i32 %120 to float, !dbg !24
  %122 = fsub float %115, %107, !dbg !28
  %123 = fadd float %102, %121, !dbg !32
  %124 = fcmp oeq float %123, 0.000000e+00, !dbg !33
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %123) #2, !dbg !34
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !35
  %127 = fmul float %122, %126, !dbg !36
  %128 = fadd float %107, %127, !dbg !37
  %129 = fadd float %112, %118, !dbg !38
  %130 = fmul float %122, %122, !dbg !39
  %131 = fmul float %102, %130, !dbg !40
  %132 = fmul float %126, %131, !dbg !41
  %133 = fadd float %129, %132, !dbg !42
  %134 = sext i32 %10 to i64, !dbg !43
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !43
  %136 = and i32 %8, 63, !dbg !44
  %137 = icmp eq i32 %136, 0, !dbg !44
  %138 = bitcast float %128 to i32, !dbg !44
  %139 = and i1 %137, %11, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %135, i1 %139) #2, !dbg !44
  %140 = getelementptr float, ptr addrspace(1) %4, i64 %134, !dbg !45
  %141 = bitcast float %133 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %140, i1 %139) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cxuipnka3pv5je3dzh4v7jl6y435phrfdgzqcawitbvhrrl2cgwo.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/xu")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 64}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 27, column: 34, scope: !5)
!9 = !DILocation(line: 24, column: 28, scope: !5)
!10 = !DILocation(line: 26, column: 21, scope: !5)
!11 = !DILocation(line: 29, column: 21, scope: !5)
!12 = !DILocation(line: 32, column: 39, scope: !5)
!13 = !DILocation(line: 32, column: 36, scope: !5)
!14 = !DILocation(line: 32, column: 30, scope: !5)
!15 = !DILocation(line: 32, column: 53, scope: !5)
!16 = !DILocation(line: 32, column: 45, scope: !5)
!17 = !DILocation(line: 33, column: 30, scope: !5)
!18 = !DILocation(line: 33, column: 45, scope: !5)
!19 = !DILocation(line: 34, column: 30, scope: !5)
!20 = !DILocation(line: 34, column: 45, scope: !5)
!21 = !DILocation(line: 38, column: 41, scope: !5)
!22 = !DILocation(line: 39, column: 41, scope: !5)
!23 = !DILocation(line: 40, column: 41, scope: !5)
!24 = !DILocation(line: 131, column: 46, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !5, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!27 = !DILocation(line: 41, column: 67, scope: !25)
!28 = !DILocation(line: 119, column: 21, scope: !29, inlinedAt: !30)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 131, column: 46, scope: !29, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 67, scope: !29)
!32 = !DILocation(line: 120, column: 28, scope: !29, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 39, scope: !29, inlinedAt: !30)
!34 = !DILocation(line: 121, column: 60, scope: !29, inlinedAt: !30)
!35 = !DILocation(line: 121, column: 49, scope: !29, inlinedAt: !30)
!36 = !DILocation(line: 123, column: 25, scope: !29, inlinedAt: !30)
!37 = !DILocation(line: 123, column: 17, scope: !29, inlinedAt: !30)
!38 = !DILocation(line: 124, column: 15, scope: !29, inlinedAt: !30)
!39 = !DILocation(line: 124, column: 30, scope: !29, inlinedAt: !30)
!40 = !DILocation(line: 124, column: 38, scope: !29, inlinedAt: !30)
!41 = !DILocation(line: 124, column: 49, scope: !29, inlinedAt: !30)
!42 = !DILocation(line: 124, column: 22, scope: !29, inlinedAt: !30)
!43 = !DILocation(line: 45, column: 25, scope: !5)
!44 = !DILocation(line: 45, column: 37, scope: !5)
!45 = !DILocation(line: 46, column: 25, scope: !5)
!46 = !DILocation(line: 46, column: 37, scope: !5)
!47 = !DILocation(line: 46, column: 4, scope: !5)
