; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d56789de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) local_unnamed_addr !dbg !5 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %12 = and i32 %11, 63, !dbg !8
  %13 = lshr i32 %11, 3, !dbg !8
  %14 = and i32 %13, 15, !dbg !8
  %15 = or i32 %14, 16, !dbg !8
  %16 = or i32 %14, 32, !dbg !8
  %17 = or i32 %14, 48, !dbg !8
  %18 = lshr i32 %11, 6, !dbg !9
  %19 = and i32 %18, 1, !dbg !9
  %20 = or i32 %19, 2, !dbg !9
  %21 = or i32 %19, 4, !dbg !9
  %22 = or i32 %19, 6, !dbg !9
  %23 = and i32 %11, 7, !dbg !9
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 6, !dbg !11
  %26 = or i32 %25, %12, !dbg !12
  %27 = or i32 %25, %14, !dbg !12
  %28 = or i32 %25, %15, !dbg !12
  %29 = or i32 %25, %16, !dbg !12
  %30 = or i32 %25, %17, !dbg !12
  %31 = icmp slt i32 %26, %8, !dbg !13
  %32 = icmp slt i32 %27, %8, !dbg !13
  %33 = icmp slt i32 %28, %8, !dbg !13
  %34 = icmp slt i32 %29, %8, !dbg !13
  %35 = icmp slt i32 %30, %8, !dbg !13
  %.frozen = freeze i32 %26
  %.frozen81 = freeze i32 %5
  %36 = sdiv i32 %.frozen, %.frozen81, !dbg !14
  %37 = mul i32 %36, %.frozen81
  %.decomposed = sub i32 %.frozen, %37
  %38 = mul i32 %7, %6, !dbg !15
  %39 = mul i32 %38, 640, !dbg !16
  %40 = mul i32 %39, %36, !dbg !17
  %41 = add i32 %40, %.decomposed
  %42 = mul nuw nsw i32 %23, 65
  %43 = add nuw nsw i32 %42, %14
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44
  %46 = add nuw nsw i32 %15, %42
  %47 = zext nneg i32 %46 to i64
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47
  %49 = add nuw nsw i32 %16, %42
  %50 = zext nneg i32 %49 to i64
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50
  %52 = add nuw nsw i32 %17, %42
  %53 = zext nneg i32 %52 to i64
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53
  %55 = mul nuw nsw i32 %19, 65
  %56 = add nuw nsw i32 %55, %12
  %57 = zext nneg i32 %56 to i64
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57
  %59 = mul nuw nsw i32 %20, 65
  %60 = add nuw nsw i32 %59, %12
  %61 = zext nneg i32 %60 to i64
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i64 %61
  %63 = mul nuw nsw i32 %21, 65
  %64 = add nuw nsw i32 %63, %12
  %65 = zext nneg i32 %64 to i64
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65
  %67 = mul nuw nsw i32 %22, 65
  %68 = add nuw nsw i32 %67, %12
  %69 = zext nneg i32 %68 to i64
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69
  %71 = insertelement <4 x i1> poison, i1 %31, i64 0, !dbg !18
  %72 = shufflevector <4 x i1> %71, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !18
  br label %73, !dbg !19

73:                                               ; preds = %10, %._crit_edge
  %74 = phi float [ 0.000000e+00, %10 ], [ %210, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %10 ], [ %211, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %10 ], [ %212, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %10 ], [ %213, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %10 ], [ %206, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %10 ], [ %207, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %10 ], [ %208, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %10 ], [ %209, %._crit_edge ]
  %82 = phi i32 [ 0, %10 ], [ %214, %._crit_edge ]
  %83 = phi <4 x float> [ zeroinitializer, %10 ], [ %205, %._crit_edge ]
  %84 = or i32 %82, %19, !dbg !20
  %85 = or i32 %82, %20, !dbg !20
  %86 = or i32 %82, %21, !dbg !20
  %87 = or i32 %82, %22, !dbg !20
  %88 = mul i32 %84, %38, !dbg !21
  %89 = mul i32 %85, %38, !dbg !21
  %90 = mul i32 %86, %38, !dbg !21
  %91 = mul i32 %87, %38, !dbg !21
  %92 = add i32 %41, %88, !dbg !22
  %93 = add i32 %41, %89, !dbg !22
  %94 = add i32 %41, %90, !dbg !22
  %95 = add i32 %41, %91, !dbg !22
  %96 = sext i32 %92 to i64, !dbg !23
  %97 = getelementptr half, ptr addrspace(1) %0, i64 %96, !dbg !23
  %98 = sext i32 %93 to i64, !dbg !23
  %99 = getelementptr half, ptr addrspace(1) %0, i64 %98, !dbg !23
  %100 = sext i32 %94 to i64, !dbg !23
  %101 = getelementptr half, ptr addrspace(1) %0, i64 %100, !dbg !23
  %102 = sext i32 %95 to i64, !dbg !23
  %103 = getelementptr half, ptr addrspace(1) %0, i64 %102, !dbg !23
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %97, i1 %31, i16 0, i1 %31) #3, !dbg !24
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %99, i1 %31, i16 0, i1 %31) #3, !dbg !24
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %101, i1 %31, i16 0, i1 %31) #3, !dbg !24
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 %31, i16 0, i1 %31) #3, !dbg !24
  %108 = zext nneg i32 %84 to i64, !dbg !25
  %109 = getelementptr half, ptr addrspace(1) %1, i64 %108, !dbg !25
  %110 = zext nneg i32 %85 to i64, !dbg !25
  %111 = getelementptr half, ptr addrspace(1) %1, i64 %110, !dbg !25
  %112 = zext nneg i32 %86 to i64, !dbg !25
  %113 = getelementptr half, ptr addrspace(1) %1, i64 %112, !dbg !25
  %114 = zext nneg i32 %87 to i64, !dbg !25
  %115 = getelementptr half, ptr addrspace(1) %1, i64 %114, !dbg !25
  %116 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %109, i1 true, i16 0, i1 true) #3, !dbg !26
  %117 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %111, i1 true, i16 0, i1 true) #3, !dbg !26
  %118 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %113, i1 true, i16 0, i1 true) #3, !dbg !26
  %119 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %115, i1 true, i16 0, i1 true) #3, !dbg !26
  %120 = getelementptr half, ptr addrspace(1) %2, i64 %96, !dbg !27
  %121 = getelementptr half, ptr addrspace(1) %2, i64 %98, !dbg !27
  %122 = getelementptr half, ptr addrspace(1) %2, i64 %100, !dbg !27
  %123 = getelementptr half, ptr addrspace(1) %2, i64 %102, !dbg !27
  %124 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %120, i1 %31, i16 0, i1 %31) #3, !dbg !28
  %125 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %121, i1 %31, i16 0, i1 %31) #3, !dbg !28
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %122, i1 %31, i16 0, i1 %31) #3, !dbg !28
  %127 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %123, i1 %31, i16 0, i1 %31) #3, !dbg !28
  %128 = insertelement <4 x i16> poison, i16 %104, i64 0, !dbg !24
  %129 = insertelement <4 x i16> %128, i16 %105, i64 1, !dbg !24
  %130 = insertelement <4 x i16> %129, i16 %106, i64 2, !dbg !24
  %131 = insertelement <4 x i16> %130, i16 %107, i64 3, !dbg !24
  %132 = bitcast <4 x i16> %131 to <4 x half>, !dbg !24
  %133 = fpext <4 x half> %132 to <4 x float>, !dbg !29
  %134 = insertelement <4 x i16> poison, i16 %116, i64 0, !dbg !26
  %135 = insertelement <4 x i16> %134, i16 %117, i64 1, !dbg !26
  %136 = insertelement <4 x i16> %135, i16 %118, i64 2, !dbg !26
  %137 = insertelement <4 x i16> %136, i16 %119, i64 3, !dbg !26
  %138 = bitcast <4 x i16> %137 to <4 x half>, !dbg !26
  %139 = fpext <4 x half> %138 to <4 x float>, !dbg !30
  %140 = insertelement <4 x i16> poison, i16 %124, i64 0, !dbg !28
  %141 = insertelement <4 x i16> %140, i16 %125, i64 1, !dbg !28
  %142 = insertelement <4 x i16> %141, i16 %126, i64 2, !dbg !28
  %143 = insertelement <4 x i16> %142, i16 %127, i64 3, !dbg !28
  %144 = bitcast <4 x i16> %143 to <4 x half>, !dbg !28
  %145 = fpext <4 x half> %144 to <4 x float>, !dbg !31
  %146 = fadd <4 x float> %133, %139, !dbg !32
  %147 = fmul <4 x float> %145, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !33
  %148 = fadd <4 x float> %146, %147, !dbg !34
  %149 = icmp eq i32 %82, 0, !dbg !35
  br i1 %149, label %._crit_edge, label %150, !dbg !36

150:                                              ; preds = %73
  %151 = fsub <4 x float> %148, %83, !dbg !40
  %152 = extractelement <4 x float> %151, i64 0, !dbg !40
  %153 = fsub <4 x float> %148, %83, !dbg !40
  %154 = extractelement <4 x float> %153, i64 1, !dbg !40
  %155 = fsub <4 x float> %148, %83, !dbg !40
  %156 = extractelement <4 x float> %155, i64 2, !dbg !40
  %157 = fsub <4 x float> %148, %83, !dbg !40
  %158 = extractelement <4 x float> %157, i64 3, !dbg !40
  %159 = fadd float %74, 1.000000e+00, !dbg !41
  %160 = fadd float %75, 1.000000e+00, !dbg !41
  %161 = fadd float %76, 1.000000e+00, !dbg !41
  %162 = fadd float %77, 1.000000e+00, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %163 = insertelement <1 x float> undef, float %159, i64 0, !dbg !41
  store <1 x float> %163, ptr addrspace(3) %45, align 4, !dbg !41
  %164 = insertelement <1 x float> undef, float %160, i64 0, !dbg !41
  store <1 x float> %164, ptr addrspace(3) %48, align 4, !dbg !41
  %165 = insertelement <1 x float> undef, float %161, i64 0, !dbg !41
  store <1 x float> %165, ptr addrspace(3) %51, align 4, !dbg !41
  %166 = insertelement <1 x float> undef, float %162, i64 0, !dbg !41
  store <1 x float> %166, ptr addrspace(3) %54, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %167 = load float, ptr addrspace(3) %58, align 4, !dbg !41
  %168 = load float, ptr addrspace(3) %62, align 4, !dbg !41
  %169 = load float, ptr addrspace(3) %66, align 4, !dbg !41
  %170 = load float, ptr addrspace(3) %70, align 4, !dbg !41
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %167) #3, !dbg !42
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %168) #3, !dbg !42
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %169) #3, !dbg !42
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float %170) #3, !dbg !42
  %175 = insertelement <4 x float> poison, float %171, i64 0, !dbg !43
  %176 = insertelement <4 x float> %175, float %172, i64 1, !dbg !43
  %177 = insertelement <4 x float> %176, float %173, i64 2, !dbg !43
  %178 = insertelement <4 x float> %177, float %174, i64 3, !dbg !43
  %179 = fadd <4 x float> %83, %178, !dbg !43
  %180 = fsub <4 x float> %148, %179, !dbg !44
  %181 = fsub <4 x float> %148, %179, !dbg !44
  %182 = fsub <4 x float> %148, %179, !dbg !44
  %183 = fsub <4 x float> %148, %179, !dbg !44
  %184 = fmul <4 x float> %151, %180, !dbg !45
  %185 = extractelement <4 x float> %184, i64 0, !dbg !45
  %186 = fmul <4 x float> %153, %181, !dbg !45
  %187 = extractelement <4 x float> %186, i64 1, !dbg !45
  %188 = fmul <4 x float> %155, %182, !dbg !45
  %189 = extractelement <4 x float> %188, i64 2, !dbg !45
  %190 = fmul <4 x float> %157, %183, !dbg !45
  %191 = extractelement <4 x float> %190, i64 3, !dbg !45
  %192 = fadd float %78, %185, !dbg !46
  %193 = fadd float %79, %187, !dbg !46
  %194 = fadd float %80, %189, !dbg !46
  %195 = fadd float %81, %191, !dbg !46
  br label %._crit_edge, !dbg !36

._crit_edge:                                      ; preds = %73, %150
  %196 = phi float [ %159, %150 ], [ 1.000000e+00, %73 ]
  %197 = phi float [ %160, %150 ], [ 1.000000e+00, %73 ]
  %198 = phi float [ %161, %150 ], [ 1.000000e+00, %73 ]
  %199 = phi float [ %162, %150 ], [ 1.000000e+00, %73 ]
  %200 = phi float [ %192, %150 ], [ 0.000000e+00, %73 ]
  %201 = phi float [ %193, %150 ], [ 0.000000e+00, %73 ]
  %202 = phi float [ %194, %150 ], [ 0.000000e+00, %73 ]
  %203 = phi float [ %195, %150 ], [ 0.000000e+00, %73 ]
  %204 = phi <4 x float> [ %179, %150 ], [ %148, %73 ]
  %205 = select <4 x i1> %72, <4 x float> %204, <4 x float> %83, !dbg !18
  %206 = select i1 %31, float %200, float %78, !dbg !47
  %207 = select i1 %31, float %201, float %79, !dbg !47
  %208 = select i1 %31, float %202, float %80, !dbg !47
  %209 = select i1 %31, float %203, float %81, !dbg !47
  %210 = select i1 %32, float %196, float %74, !dbg !48
  %211 = select i1 %33, float %197, float %75, !dbg !48
  %212 = select i1 %34, float %198, float %76, !dbg !48
  %213 = select i1 %35, float %199, float %77, !dbg !48
  %214 = add nuw nsw i32 %82, 8, !dbg !19
  %215 = icmp ult i32 %82, 632, !dbg !19
  br i1 %215, label %73, label %216, !dbg !19

216:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %217 = insertelement <1 x float> undef, float %210, i64 0, !dbg !19
  store <1 x float> %217, ptr addrspace(3) %45, align 4, !dbg !19
  %218 = insertelement <1 x float> undef, float %211, i64 0, !dbg !19
  store <1 x float> %218, ptr addrspace(3) %48, align 4, !dbg !19
  %219 = insertelement <1 x float> undef, float %212, i64 0, !dbg !19
  store <1 x float> %219, ptr addrspace(3) %51, align 4, !dbg !19
  %220 = insertelement <1 x float> undef, float %213, i64 0, !dbg !19
  store <1 x float> %220, ptr addrspace(3) %54, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %221 = load float, ptr addrspace(3) %58, align 4, !dbg !19
  %222 = load float, ptr addrspace(3) %62, align 4, !dbg !19
  %223 = load float, ptr addrspace(3) %66, align 4, !dbg !19
  %224 = load float, ptr addrspace(3) %70, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %225 = extractelement <4 x float> %205, i64 0, !dbg !51
  %226 = extractelement <4 x float> %205, i64 1, !dbg !51
  %227 = fsub float %226, %225, !dbg !51
  %228 = fadd float %221, %222, !dbg !55
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !56
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %228) #3, !dbg !57
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !58
  %232 = fmul float %227, %231, !dbg !59
  %233 = fadd float %225, %232, !dbg !60
  %234 = fadd float %206, %207, !dbg !61
  %235 = fmul float %227, %227, !dbg !62
  %236 = fmul float %235, %221, !dbg !63
  %237 = fmul float %236, %231, !dbg !64
  %238 = fadd float %234, %237, !dbg !65
  %239 = extractelement <4 x float> %205, i64 2, !dbg !51
  %240 = fsub float %239, %233, !dbg !51
  %241 = fadd float %228, %223, !dbg !55
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !56
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %241) #3, !dbg !57
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !58
  %245 = fmul float %244, %240, !dbg !59
  %246 = fadd float %233, %245, !dbg !60
  %247 = fadd float %208, %238, !dbg !61
  %248 = fmul float %240, %240, !dbg !62
  %249 = fmul float %228, %248, !dbg !63
  %250 = fmul float %244, %249, !dbg !64
  %251 = fadd float %247, %250, !dbg !65
  %252 = extractelement <4 x float> %205, i64 3, !dbg !51
  %253 = fsub float %252, %246, !dbg !51
  %254 = fadd float %241, %224, !dbg !55
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !56
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %254) #3, !dbg !57
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !58
  %258 = fmul float %257, %253, !dbg !59
  %259 = fadd float %246, %258, !dbg !60
  %260 = fadd float %209, %251, !dbg !61
  %261 = fmul float %253, %253, !dbg !62
  %262 = fmul float %241, %261, !dbg !63
  %263 = fmul float %257, %262, !dbg !64
  %264 = fadd float %260, %263, !dbg !65
  %265 = shl nuw nsw i32 %12, 1, !dbg !49
  %266 = or i32 %265, %19, !dbg !49
  %267 = zext nneg i32 %266 to i64, !dbg !49
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i64 %267, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, float %259, i1 true) #3, !dbg !49
  %269 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 512), i64 %267, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, float %264, i1 true) #3, !dbg !49
  %270 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %267, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, float %254, i1 true) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %271 = icmp slt i32 %11, 128, !dbg !49
  %272 = sext i32 %11 to i64, !dbg !49
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i64 %272, !dbg !49
  %274 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %273, i1 %271) #3, !dbg !49
  %275 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 512), i64 %272, !dbg !49
  %276 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %275, i1 %271) #3, !dbg !49
  %277 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %272, !dbg !49
  %278 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %277, i1 %271) #3, !dbg !49
  %279 = bitcast float %274 to i32, !dbg !49
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !49
  %281 = bitcast i32 %280 to float, !dbg !49
  %282 = bitcast float %276 to i32, !dbg !49
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !49
  %284 = bitcast i32 %283 to float, !dbg !49
  %285 = bitcast float %278 to i32, !dbg !49
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !49
  %287 = bitcast i32 %286 to float, !dbg !49
  %288 = fsub float %281, %274, !dbg !51
  %289 = fadd float %278, %287, !dbg !55
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !56
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #3, !dbg !57
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !58
  %293 = fmul float %288, %292, !dbg !59
  %294 = fadd float %274, %293, !dbg !60
  %295 = fadd float %276, %284, !dbg !61
  %296 = fmul float %288, %288, !dbg !62
  %297 = fmul float %278, %296, !dbg !63
  %298 = fmul float %297, %292, !dbg !64
  %299 = fadd float %295, %298, !dbg !65
  %300 = and i32 %11, 1, !dbg !49
  %301 = icmp eq i32 %300, 0, !dbg !49
  %302 = and i1 %271, %301, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, float %294, i1 %302) #3, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, float %299, i1 %302) #3, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, float %289, i1 %302) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %303 = zext nneg i32 %265 to i64, !dbg !49
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !49
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !49
  %306 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 512), i64 %303, !dbg !49
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !49
  %308 = sext i32 %26 to i64, !dbg !66
  %309 = getelementptr float, ptr addrspace(1) %3, i64 %308, !dbg !66
  %310 = icmp eq i32 %19, 0, !dbg !67
  %311 = and i1 %310, %31, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %305, ptr addrspace(1) %309, i1 %311) #3, !dbg !67
  %312 = getelementptr float, ptr addrspace(1) %4, i64 %308, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %307, ptr addrspace(1) %312, i1 %311) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ccehsxhd25ziwkgruplxbpazyec5xvwv4igp7me7k2nuy4twka22.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/ce")
!3 = !{ptr @triton__0d1d2d3d4d56789de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d56789de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d56789de", linkageName: "triton__0d1d2d3d4d56789de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 25, column: 33, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 33, scope: !5)
!12 = !DILocation(line: 23, column: 23, scope: !5)
!13 = !DILocation(line: 24, column: 21, scope: !5)
!14 = !DILocation(line: 27, column: 20, scope: !5)
!15 = !DILocation(line: 36, column: 44, scope: !5)
!16 = !DILocation(line: 36, column: 63, scope: !5)
!17 = !DILocation(line: 36, column: 67, scope: !5)
!18 = !DILocation(line: 48, column: 60, scope: !5)
!19 = !DILocation(line: 32, column: 36, scope: !5)
!20 = !DILocation(line: 33, column: 27, scope: !5)
!21 = !DILocation(line: 36, column: 48, scope: !5)
!22 = !DILocation(line: 36, column: 55, scope: !5)
!23 = !DILocation(line: 36, column: 34, scope: !5)
!24 = !DILocation(line: 36, column: 73, scope: !5)
!25 = !DILocation(line: 37, column: 34, scope: !5)
!26 = !DILocation(line: 37, column: 39, scope: !5)
!27 = !DILocation(line: 38, column: 34, scope: !5)
!28 = !DILocation(line: 38, column: 73, scope: !5)
!29 = !DILocation(line: 36, column: 132, scope: !5)
!30 = !DILocation(line: 37, column: 90, scope: !5)
!31 = !DILocation(line: 38, column: 132, scope: !5)
!32 = !DILocation(line: 39, column: 22, scope: !5)
!33 = !DILocation(line: 41, column: 22, scope: !5)
!34 = !DILocation(line: 42, column: 22, scope: !5)
!35 = !DILocation(line: 46, column: 62, scope: !5)
!36 = !DILocation(line: 105, column: 7, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !5, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!39 = !DILocation(line: 46, column: 51, scope: !37)
!40 = !DILocation(line: 110, column: 24, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 111, column: 30, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 112, column: 34, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 112, column: 26, scope: !37, inlinedAt: !39)
!44 = !DILocation(line: 113, column: 39, scope: !37, inlinedAt: !39)
!45 = !DILocation(line: 113, column: 31, scope: !37, inlinedAt: !39)
!46 = !DILocation(line: 113, column: 22, scope: !37, inlinedAt: !39)
!47 = !DILocation(line: 49, column: 56, scope: !5)
!48 = !DILocation(line: 50, column: 64, scope: !5)
!49 = !DILocation(line: 131, column: 46, scope: !37, inlinedAt: !50)
!50 = !DILocation(line: 52, column: 41, scope: !37)
!51 = !DILocation(line: 119, column: 21, scope: !52, inlinedAt: !53)
!52 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!53 = !DILocation(line: 131, column: 46, scope: !52, inlinedAt: !54)
!54 = !DILocation(line: 52, column: 41, scope: !52)
!55 = !DILocation(line: 120, column: 28, scope: !52, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 39, scope: !52, inlinedAt: !53)
!57 = !DILocation(line: 121, column: 60, scope: !52, inlinedAt: !53)
!58 = !DILocation(line: 121, column: 49, scope: !52, inlinedAt: !53)
!59 = !DILocation(line: 123, column: 25, scope: !52, inlinedAt: !53)
!60 = !DILocation(line: 123, column: 17, scope: !52, inlinedAt: !53)
!61 = !DILocation(line: 124, column: 15, scope: !52, inlinedAt: !53)
!62 = !DILocation(line: 124, column: 30, scope: !52, inlinedAt: !53)
!63 = !DILocation(line: 124, column: 38, scope: !52, inlinedAt: !53)
!64 = !DILocation(line: 124, column: 49, scope: !52, inlinedAt: !53)
!65 = !DILocation(line: 124, column: 22, scope: !52, inlinedAt: !53)
!66 = !DILocation(line: 57, column: 25, scope: !5)
!67 = !DILocation(line: 57, column: 36, scope: !5)
!68 = !DILocation(line: 58, column: 25, scope: !5)
!69 = !DILocation(line: 58, column: 37, scope: !5)
!70 = !DILocation(line: 58, column: 4, scope: !5)
