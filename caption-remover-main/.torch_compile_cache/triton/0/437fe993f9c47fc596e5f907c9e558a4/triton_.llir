; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d56789de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) local_unnamed_addr !dbg !5 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %12 = and i32 %11, 31, !dbg !8
  %13 = lshr i32 %11, 5, !dbg !8
  %14 = and i32 %13, 3, !dbg !8
  %urem = and i32 %11, 127, !dbg !8
  %15 = or i32 %urem, 128, !dbg !8
  %16 = or i32 %urem, 256, !dbg !8
  %17 = or i32 %urem, 384, !dbg !8
  %18 = shl nuw nsw i32 %urem, 2, !dbg !8
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %20 = icmp slt i32 %19, %8, !dbg !10
  %.frozen = freeze i32 %19
  %.frozen2 = freeze i32 %5
  %21 = sdiv i32 %.frozen, %.frozen2, !dbg !11
  %22 = mul i32 %21, %.frozen2
  %.decomposed = sub i32 %.frozen, %22
  %23 = icmp ult i32 %16, 320, !dbg !12
  %24 = icmp ult i32 %urem, 80, !dbg !12
  %25 = mul i32 %7, %6, !dbg !13
  %26 = mul i32 %25, %urem, !dbg !14
  %27 = mul i32 %25, %15, !dbg !14
  %28 = mul i32 %25, %16, !dbg !14
  %29 = mul i32 %25, %17, !dbg !14
  %30 = mul i32 %25, 320, !dbg !15
  %31 = mul i32 %30, %21, !dbg !16
  %32 = add i32 %31, %.decomposed, !dbg !17
  %33 = add i32 %32, %26, !dbg !18
  %34 = add i32 %32, %27, !dbg !18
  %35 = add i32 %32, %28, !dbg !18
  %36 = add i32 %32, %29, !dbg !18
  %37 = sext i32 %33 to i64, !dbg !19
  %38 = getelementptr half, ptr addrspace(1) %0, i64 %37, !dbg !19
  %39 = sext i32 %34 to i64, !dbg !19
  %40 = getelementptr half, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = sext i32 %35 to i64, !dbg !19
  %42 = getelementptr half, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = sext i32 %36 to i64, !dbg !19
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = and i1 %23, %20, !dbg !20
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %38, i1 %20, i16 0, i1 %20) #3, !dbg !21
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %40, i1 %20, i16 0, i1 %20) #3, !dbg !21
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %42, i1 %45, i16 0, i1 %45) #3, !dbg !21
  %49 = bitcast i16 %48 to half, !dbg !21
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %44, i1 false, i16 0, i1 false) #3, !dbg !21
  %51 = fpext half %49 to float, !dbg !22
  %52 = zext nneg i32 %18 to i64, !dbg !23
  %53 = getelementptr half, ptr addrspace(1) %1, i64 %52, !dbg !23
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !24
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !24
  %57 = trunc i32 %55 to i16, !dbg !24
  %extelt.offset = lshr i32 %55, 16, !dbg !24
  %58 = trunc i32 %extelt.offset to i16, !dbg !24
  %59 = trunc i32 %56 to i16, !dbg !24
  %extelt.offset1 = lshr i32 %56, 16, !dbg !24
  %60 = trunc i32 %extelt.offset1 to i16, !dbg !24
  %61 = shl nuw nsw i32 %urem, 3, !dbg !25
  %62 = zext nneg i32 %61 to i64, !dbg !25
  %63 = getelementptr half, ptr addrspace(3) @global_smem, i64 %62, !dbg !25
  store i16 %57, ptr addrspace(3) %63, align 2, !dbg !25
  %64 = or i32 %61, 2, !dbg !25
  %65 = zext nneg i32 %64 to i64, !dbg !25
  %66 = getelementptr half, ptr addrspace(3) @global_smem, i64 %65, !dbg !25
  store i16 %58, ptr addrspace(3) %66, align 2, !dbg !25
  %67 = or i32 %61, 4, !dbg !25
  %68 = zext nneg i32 %67 to i64, !dbg !25
  %69 = getelementptr half, ptr addrspace(3) @global_smem, i64 %68, !dbg !25
  store i16 %59, ptr addrspace(3) %69, align 2, !dbg !25
  %70 = or i32 %61, 6, !dbg !25
  %71 = zext nneg i32 %70 to i64, !dbg !25
  %72 = getelementptr half, ptr addrspace(3) @global_smem, i64 %71, !dbg !25
  store i16 %60, ptr addrspace(3) %72, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %73 = shl nuw nsw i32 %urem, 1, !dbg !25
  %74 = zext nneg i32 %73 to i64, !dbg !25
  %75 = getelementptr half, ptr addrspace(3) @global_smem, i64 %74, !dbg !25
  %76 = load half, ptr addrspace(3) %75, align 2, !dbg !25
  %77 = shl nuw nsw i32 %15, 1, !dbg !25
  %78 = zext nneg i32 %77 to i64, !dbg !25
  %79 = getelementptr half, ptr addrspace(3) @global_smem, i64 %78, !dbg !25
  %80 = load half, ptr addrspace(3) %79, align 2, !dbg !25
  %81 = shl nuw nsw i32 %16, 1, !dbg !25
  %82 = zext nneg i32 %81 to i64, !dbg !25
  %83 = getelementptr half, ptr addrspace(3) @global_smem, i64 %82, !dbg !25
  %84 = load half, ptr addrspace(3) %83, align 2, !dbg !25
  %85 = fpext half %84 to float, !dbg !26
  %86 = getelementptr half, ptr addrspace(1) %2, i64 %37, !dbg !27
  %87 = getelementptr half, ptr addrspace(1) %2, i64 %39, !dbg !27
  %88 = getelementptr half, ptr addrspace(1) %2, i64 %41, !dbg !27
  %89 = getelementptr half, ptr addrspace(1) %2, i64 %43, !dbg !27
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %86, i1 %20, i16 0, i1 %20) #3, !dbg !28
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %87, i1 %20, i16 0, i1 %20) #3, !dbg !28
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %88, i1 %45, i16 0, i1 %45) #3, !dbg !28
  %93 = bitcast i16 %92 to half, !dbg !28
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %89, i1 false, i16 0, i1 false) #3, !dbg !28
  %95 = fpext half %93 to float, !dbg !29
  %96 = fadd float %51, %85, !dbg !25
  %97 = fmul float %95, 1.250000e-01, !dbg !30
  %98 = fadd float %96, %97, !dbg !31
  %99 = insertelement <2 x i16> poison, i16 %47, i64 0, !dbg !21
  %100 = insertelement <2 x i16> %99, i16 %46, i64 1, !dbg !21
  %101 = bitcast <2 x i16> %100 to <2 x half>, !dbg !21
  %102 = fpext <2 x half> %101 to <2 x float>, !dbg !22
  %103 = insertelement <2 x half> poison, half %80, i64 0, !dbg !26
  %104 = insertelement <2 x half> %103, half %76, i64 1, !dbg !26
  %105 = fpext <2 x half> %104 to <2 x float>, !dbg !26
  %106 = insertelement <2 x i16> poison, i16 %91, i64 0, !dbg !28
  %107 = insertelement <2 x i16> %106, i16 %90, i64 1, !dbg !28
  %108 = bitcast <2 x i16> %107 to <2 x half>, !dbg !28
  %109 = fpext <2 x half> %108 to <2 x float>, !dbg !29
  %110 = fadd <2 x float> %102, %105, !dbg !25
  %111 = fmul <2 x float> %109, <float 1.250000e-01, float 1.250000e-01>, !dbg !30
  %112 = fadd <2 x float> %110, %111, !dbg !31
  %113 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !32
  %114 = shufflevector <2 x i1> %113, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !32
  %115 = select <2 x i1> %114, <2 x float> %112, <2 x float> zeroinitializer, !dbg !32
  %116 = select i1 %45, float %98, float 0.000000e+00, !dbg !32
  %117 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !33
  %118 = select i1 %45, float 1.000000e+00, float 0.000000e+00, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %119 = extractelement <2 x float> %115, i64 0, !dbg !38
  %120 = extractelement <2 x float> %115, i64 1, !dbg !42
  %121 = fsub float %119, %120, !dbg !38
  %122 = select i1 %20, float 2.000000e+00, float 0.000000e+00, !dbg !43
  %123 = fcmp oeq float %122, 0.000000e+00, !dbg !44
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %122) #3, !dbg !45
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !46
  %126 = fmul float %125, %121, !dbg !47
  %127 = fadd float %120, %126, !dbg !42
  %128 = fmul float %121, %121, !dbg !48
  %129 = fmul float %117, %128, !dbg !49
  %130 = fmul float %125, %129, !dbg !50
  %131 = fadd float %130, 0.000000e+00, !dbg !51
  %132 = fsub float %116, %127, !dbg !38
  %133 = fadd float %122, %118, !dbg !43
  %134 = fcmp oeq float %133, 0.000000e+00, !dbg !44
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %133) #3, !dbg !45
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !46
  %137 = fmul float %136, %132, !dbg !47
  %138 = fadd float %127, %137, !dbg !42
  %139 = fmul float %132, %132, !dbg !48
  %140 = fmul float %122, %139, !dbg !49
  %141 = fmul float %136, %140, !dbg !50
  %142 = fadd float %131, %141, !dbg !51
  %143 = fsub float 0.000000e+00, %138, !dbg !38
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 0.000000e+00, float %133) #3, !dbg !45
  %145 = select i1 %134, float 0.000000e+00, float %144, !dbg !46
  %146 = fmul float %145, %143, !dbg !47
  %147 = fadd float %138, %146, !dbg !42
  %148 = fmul float %143, %143, !dbg !48
  %149 = fmul float %133, %148, !dbg !49
  %150 = fmul float %145, %149, !dbg !50
  %151 = fadd float %142, %150, !dbg !51
  %152 = bitcast float %147 to i32, !dbg !34
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !34
  %154 = bitcast i32 %153 to float, !dbg !34
  %155 = bitcast float %151 to i32, !dbg !34
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 16, i32 31), !dbg !34
  %157 = bitcast i32 %156 to float, !dbg !34
  %158 = bitcast float %133 to i32, !dbg !34
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !34
  %160 = bitcast i32 %159 to float, !dbg !34
  %161 = fsub float %154, %147, !dbg !38
  %162 = fadd float %133, %160, !dbg !43
  %163 = fcmp oeq float %162, 0.000000e+00, !dbg !44
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %162) #3, !dbg !45
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !46
  %166 = fmul float %165, %161, !dbg !47
  %167 = fadd float %147, %166, !dbg !42
  %168 = fadd float %151, %157, !dbg !52
  %169 = fmul float %161, %161, !dbg !48
  %170 = fmul float %133, %169, !dbg !49
  %171 = fmul float %165, %170, !dbg !50
  %172 = fadd float %168, %171, !dbg !51
  %173 = bitcast float %167 to i32, !dbg !34
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !34
  %175 = bitcast i32 %174 to float, !dbg !34
  %176 = bitcast float %172 to i32, !dbg !34
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !34
  %178 = bitcast i32 %177 to float, !dbg !34
  %179 = bitcast float %162 to i32, !dbg !34
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 8, i32 31), !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = fsub float %175, %167, !dbg !38
  %183 = fadd float %162, %181, !dbg !43
  %184 = fcmp oeq float %183, 0.000000e+00, !dbg !44
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %183) #3, !dbg !45
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !46
  %187 = fmul float %186, %182, !dbg !47
  %188 = fadd float %167, %187, !dbg !42
  %189 = fadd float %172, %178, !dbg !52
  %190 = fmul float %182, %182, !dbg !48
  %191 = fmul float %162, %190, !dbg !49
  %192 = fmul float %186, %191, !dbg !50
  %193 = fadd float %189, %192, !dbg !51
  %194 = bitcast float %188 to i32, !dbg !34
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !34
  %196 = bitcast i32 %195 to float, !dbg !34
  %197 = bitcast float %193 to i32, !dbg !34
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !34
  %199 = bitcast i32 %198 to float, !dbg !34
  %200 = bitcast float %183 to i32, !dbg !34
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !34
  %202 = bitcast i32 %201 to float, !dbg !34
  %203 = fsub float %196, %188, !dbg !38
  %204 = fadd float %183, %202, !dbg !43
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !44
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float %204) #3, !dbg !45
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !46
  %208 = fmul float %203, %207, !dbg !47
  %209 = fadd float %188, %208, !dbg !42
  %210 = fadd float %193, %199, !dbg !52
  %211 = fmul float %203, %203, !dbg !48
  %212 = fmul float %183, %211, !dbg !49
  %213 = fmul float %207, %212, !dbg !50
  %214 = fadd float %210, %213, !dbg !51
  %215 = bitcast float %209 to i32, !dbg !34
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !34
  %217 = bitcast i32 %216 to float, !dbg !34
  %218 = bitcast float %214 to i32, !dbg !34
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 2, i32 31), !dbg !34
  %220 = bitcast i32 %219 to float, !dbg !34
  %221 = bitcast float %204 to i32, !dbg !34
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !34
  %223 = bitcast i32 %222 to float, !dbg !34
  %224 = fsub float %217, %209, !dbg !38
  %225 = fadd float %204, %223, !dbg !43
  %226 = fcmp oeq float %225, 0.000000e+00, !dbg !44
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %225) #3, !dbg !45
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !46
  %229 = fmul float %224, %228, !dbg !47
  %230 = fadd float %209, %229, !dbg !42
  %231 = fadd float %214, %220, !dbg !52
  %232 = fmul float %224, %224, !dbg !48
  %233 = fmul float %204, %232, !dbg !49
  %234 = fmul float %228, %233, !dbg !50
  %235 = fadd float %231, %234, !dbg !51
  %236 = bitcast float %230 to i32, !dbg !34
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !34
  %238 = bitcast i32 %237 to float, !dbg !34
  %239 = bitcast float %235 to i32, !dbg !34
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 1, i32 31), !dbg !34
  %241 = bitcast i32 %240 to float, !dbg !34
  %242 = bitcast float %225 to i32, !dbg !34
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !34
  %244 = bitcast i32 %243 to float, !dbg !34
  %245 = fsub float %238, %230, !dbg !38
  %246 = fadd float %225, %244, !dbg !43
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !44
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %246) #3, !dbg !45
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !46
  %250 = fmul float %245, %249, !dbg !47
  %251 = fadd float %230, %250, !dbg !42
  %252 = fadd float %235, %241, !dbg !52
  %253 = fmul float %245, %245, !dbg !48
  %254 = fmul float %225, %253, !dbg !49
  %255 = fmul float %249, %254, !dbg !50
  %256 = fadd float %252, %255, !dbg !51
  %257 = icmp eq i32 %12, 0, !dbg !34
  %258 = zext nneg i32 %14 to i64, !dbg !34
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i64 %258, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, float %251, i1 %257) #3, !dbg !34
  %260 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 16), i64 %258, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, float %256, i1 %257) #3, !dbg !34
  %261 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %258, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, float %246, i1 %257) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %262 = icmp slt i32 %11, 4, !dbg !34
  %263 = sext i32 %11 to i64, !dbg !34
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i64 %263, !dbg !34
  %265 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %264, i1 %262) #3, !dbg !34
  %266 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 16), i64 %263, !dbg !34
  %267 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %266, i1 %262) #3, !dbg !34
  %268 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %263, !dbg !34
  %269 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %268, i1 %262) #3, !dbg !34
  %270 = bitcast float %265 to i32, !dbg !34
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 2, i32 31), !dbg !34
  %272 = bitcast i32 %271 to float, !dbg !34
  %273 = bitcast float %267 to i32, !dbg !34
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !34
  %275 = bitcast i32 %274 to float, !dbg !34
  %276 = bitcast float %269 to i32, !dbg !34
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !34
  %278 = bitcast i32 %277 to float, !dbg !34
  %279 = fsub float %272, %265, !dbg !38
  %280 = fadd float %269, %278, !dbg !43
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !44
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %280) #3, !dbg !45
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !46
  %284 = fmul float %279, %283, !dbg !47
  %285 = fadd float %265, %284, !dbg !42
  %286 = fadd float %267, %275, !dbg !52
  %287 = fmul float %279, %279, !dbg !48
  %288 = fmul float %269, %287, !dbg !49
  %289 = fmul float %288, %283, !dbg !50
  %290 = fadd float %286, %289, !dbg !51
  %291 = bitcast float %285 to i32, !dbg !34
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 1, i32 31), !dbg !34
  %293 = bitcast i32 %292 to float, !dbg !34
  %294 = bitcast float %290 to i32, !dbg !34
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !34
  %296 = bitcast i32 %295 to float, !dbg !34
  %297 = bitcast float %280 to i32, !dbg !34
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !34
  %299 = bitcast i32 %298 to float, !dbg !34
  %300 = fsub float %293, %285, !dbg !38
  %301 = fadd float %280, %299, !dbg !43
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !44
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %301) #3, !dbg !45
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !46
  %305 = fmul float %300, %304, !dbg !47
  %306 = fadd float %285, %305, !dbg !42
  %307 = fadd float %290, %296, !dbg !52
  %308 = fmul float %300, %300, !dbg !48
  %309 = fmul float %280, %308, !dbg !49
  %310 = fmul float %304, %309, !dbg !50
  %311 = fadd float %307, %310, !dbg !51
  %312 = and i32 %11, 3, !dbg !34
  %313 = icmp eq i32 %312, 0, !dbg !34
  %314 = and i1 %262, %313, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, float %306, i1 %314) #3, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, float %311, i1 %314) #3, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, float %301, i1 %314) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %315 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !34
  %316 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 16), align 4, !dbg !34
  %317 = sext i32 %19 to i64, !dbg !53
  %318 = getelementptr float, ptr addrspace(1) %3, i64 %317, !dbg !53
  %319 = icmp eq i32 %urem, 0, !dbg !54
  %320 = and i1 %319, %20, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %315, ptr addrspace(1) %318, i1 %320) #3, !dbg !54
  %321 = getelementptr float, ptr addrspace(1) %4, i64 %317, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %316, ptr addrspace(1) %321, i1 %320) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c3ktaxvojbasijh3jdxafl3ojn3hdusjlhbwixjzuuzus4du6imy.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/3k")
!3 = !{ptr @triton__0d1d2d3d4d56789de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d56789de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d56789de", linkageName: "triton__0d1d2d3d4d56789de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 27, column: 20, scope: !5)
!12 = !DILocation(line: 34, column: 25, scope: !5)
!13 = !DILocation(line: 36, column: 44, scope: !5)
!14 = !DILocation(line: 36, column: 48, scope: !5)
!15 = !DILocation(line: 36, column: 63, scope: !5)
!16 = !DILocation(line: 36, column: 67, scope: !5)
!17 = !DILocation(line: 36, column: 40, scope: !5)
!18 = !DILocation(line: 36, column: 55, scope: !5)
!19 = !DILocation(line: 36, column: 34, scope: !5)
!20 = !DILocation(line: 36, column: 81, scope: !5)
!21 = !DILocation(line: 36, column: 73, scope: !5)
!22 = !DILocation(line: 36, column: 132, scope: !5)
!23 = !DILocation(line: 37, column: 34, scope: !5)
!24 = !DILocation(line: 37, column: 39, scope: !5)
!25 = !DILocation(line: 39, column: 22, scope: !5)
!26 = !DILocation(line: 37, column: 90, scope: !5)
!27 = !DILocation(line: 38, column: 34, scope: !5)
!28 = !DILocation(line: 38, column: 73, scope: !5)
!29 = !DILocation(line: 38, column: 132, scope: !5)
!30 = !DILocation(line: 41, column: 22, scope: !5)
!31 = !DILocation(line: 42, column: 22, scope: !5)
!32 = !DILocation(line: 48, column: 60, scope: !5)
!33 = !DILocation(line: 50, column: 64, scope: !5)
!34 = !DILocation(line: 131, column: 46, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!37 = !DILocation(line: 52, column: 41, scope: !35)
!38 = !DILocation(line: 119, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 131, column: 46, scope: !39, inlinedAt: !41)
!41 = !DILocation(line: 52, column: 41, scope: !39)
!42 = !DILocation(line: 123, column: 17, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 120, column: 28, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 121, column: 39, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 121, column: 60, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 121, column: 49, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 123, column: 25, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 124, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 124, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 124, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 124, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 124, column: 15, scope: !39, inlinedAt: !40)
!53 = !DILocation(line: 57, column: 25, scope: !5)
!54 = !DILocation(line: 57, column: 36, scope: !5)
!55 = !DILocation(line: 58, column: 25, scope: !5)
!56 = !DILocation(line: 58, column: 37, scope: !5)
!57 = !DILocation(line: 58, column: 4, scope: !5)
