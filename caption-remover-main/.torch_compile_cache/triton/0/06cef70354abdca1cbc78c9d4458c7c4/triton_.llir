; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d678910de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %13 = shl i32 %12, 1, !dbg !10
  %14 = and i32 %13, 510, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %16 = shl i32 %15, 9, !dbg !12
  %17 = or i32 %16, %14, !dbg !13
  %18 = or i32 %17, 1, !dbg !13
  %19 = icmp slt i32 %17, %10, !dbg !14
  %.frozen = freeze i32 %17
  %.frozen6 = freeze i32 %6
  %20 = sdiv i32 %.frozen, %.frozen6, !dbg !15
  %21 = mul i32 %20, %.frozen6
  %.decomposed = sub i32 %.frozen, %21
  %.frozen7 = freeze i32 %18
  %.frozen8 = freeze i32 %6
  %22 = sdiv i32 %.frozen7, %.frozen8, !dbg !15
  %23 = mul i32 %22, %.frozen8
  %.decomposed9 = sub i32 %.frozen7, %23
  %24 = srem i32 %20, %7, !dbg !16
  %25 = srem i32 %22, %7, !dbg !16
  %26 = sdiv i32 %17, %8, !dbg !17
  %27 = sdiv i32 %18, %8, !dbg !17
  %28 = srem i32 %26, 22, !dbg !18
  %29 = srem i32 %27, 22, !dbg !18
  %30 = sdiv i32 %17, %9, !dbg !19
  %31 = sdiv i32 %18, %9, !dbg !19
  %32 = mul i32 %24, %6, !dbg !20
  %33 = mul i32 %25, %6, !dbg !20
  %34 = add i32 %32, %.decomposed, !dbg !21
  %35 = add i32 %33, %.decomposed9, !dbg !21
  %36 = mul i32 %7, %6, !dbg !22
  %37 = mul i32 %30, %36, !dbg !23
  %38 = mul i32 %31, %36, !dbg !23
  %39 = mul i32 %36, 1280, !dbg !24
  %40 = sdiv i32 %34, %36, !dbg !25
  %41 = sdiv i32 %35, %36, !dbg !25
  %reass.add = add i32 %40, %28
  %reass.mul = mul i32 %reass.add, %39
  %42 = add i32 %37, %34, !dbg !26
  %43 = add i32 %42, %reass.mul, !dbg !27
  %reass.add4 = add i32 %41, %29
  %reass.mul5 = mul i32 %reass.add4, %39
  %44 = add i32 %38, %35, !dbg !26
  %45 = add i32 %44, %reass.mul5, !dbg !27
  %46 = sext i32 %43 to i64, !dbg !28
  %47 = getelementptr half, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = sext i32 %45 to i64, !dbg !28
  %49 = getelementptr half, ptr addrspace(1) %0, i64 %48, !dbg !28
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %47, i1 %19) #4, !dbg !29
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %49, i1 %19) #4, !dbg !29
  %52 = sdiv i32 %30, 40, !dbg !30
  %53 = sdiv i32 %31, 40, !dbg !30
  %54 = sext i32 %52 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !31
  %56 = sext i32 %53 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %19) #4, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %19) #4, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #4, !dbg !34
  %63 = bitcast i32 %62 to float, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %19) #4, !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = sext i32 %30 to i64, !dbg !35
  %67 = getelementptr half, ptr addrspace(1) %3, i64 %66, !dbg !35
  %68 = sext i32 %31 to i64, !dbg !35
  %69 = getelementptr half, ptr addrspace(1) %3, i64 %68, !dbg !35
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %67, i1 %19) #4, !dbg !36
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %69, i1 %19) #4, !dbg !36
  %72 = getelementptr half, ptr addrspace(1) %4, i64 %66, !dbg !37
  %73 = getelementptr half, ptr addrspace(1) %4, i64 %68, !dbg !37
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %19) #4, !dbg !38
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %19) #4, !dbg !38
  %76 = mul i32 %36, 880, !dbg !39
  %77 = sitofp i32 %76 to float, !dbg !40
  %78 = fcmp olt float %77, 0.000000e+00, !dbg !41
  %79 = select i1 %78, float 0.000000e+00, float %77, !dbg !45
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %79) #4, !dbg !46
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %79) #4, !dbg !46
  %82 = fadd float %80, 0x3EB0C6F7A0000000, !dbg !47
  %83 = fadd float %81, 0x3EB0C6F7A0000000, !dbg !47
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i = icmp eq i32 %84, 0, !dbg !48
  br i1 %.not.i, label %87, label %85, !dbg !48

85:                                               ; preds = %11
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

87:                                               ; preds = %11
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %85, %87
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], !dbg !48
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i1 = icmp eq i32 %89, 0, !dbg !48
  br i1 %.not.i1, label %92, label %90, !dbg !48

90:                                               ; preds = %__nv_rsqrtf.exit
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !48
  br label %__nv_rsqrtf.exit3, !dbg !48

92:                                               ; preds = %__nv_rsqrtf.exit
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !48
  br label %__nv_rsqrtf.exit3, !dbg !48

__nv_rsqrtf.exit3:                                ; preds = %90, %92
  %.0.i2 = phi float [ %91, %90 ], [ %93, %92 ], !dbg !48
  %94 = insertelement <2 x i16> poison, i16 %50, i64 0, !dbg !29
  %95 = insertelement <2 x i16> %94, i16 %51, i64 1, !dbg !29
  %96 = bitcast <2 x i16> %95 to <2 x half>, !dbg !29
  %97 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !32
  %98 = insertelement <2 x i32> %97, i32 %59, i64 1, !dbg !32
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !32
  %100 = insertelement <2 x i16> poison, i16 %74, i64 0, !dbg !38
  %101 = insertelement <2 x i16> %100, i16 %75, i64 1, !dbg !38
  %102 = bitcast <2 x i16> %101 to <2 x half>, !dbg !38
  %103 = insertelement <2 x i16> poison, i16 %70, i64 0, !dbg !36
  %104 = insertelement <2 x i16> %103, i16 %71, i64 1, !dbg !36
  %105 = bitcast <2 x i16> %104 to <2 x half>, !dbg !36
  %106 = sext i32 %17 to i64, !dbg !49
  %107 = getelementptr half, ptr addrspace(1) %5, i64 %106, !dbg !49
  %108 = fpext <2 x half> %96 to <2 x float>, !dbg !50
  %109 = fsub <2 x float> %108, %99, !dbg !51
  %110 = fpext <2 x half> %102 to <2 x float>, !dbg !52
  %111 = fpext <2 x half> %105 to <2 x float>, !dbg !53
  %112 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !54
  %113 = insertelement <2 x float> %112, float %.0.i2, i64 1, !dbg !54
  %114 = fmul <2 x float> %109, %113, !dbg !54
  %115 = fmul <2 x float> %114, %111, !dbg !55
  %116 = fadd <2 x float> %115, %110, !dbg !56
  %117 = fptrunc <2 x float> %116 to <2 x half>, !dbg !57
  %118 = bitcast <2 x half> %117 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %107, i1 %19) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #1 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c5zlwzbd253it5whmwzgls7otkyycsqlnrmd3luslozdw2hco2kt.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/5z")
!4 = !{ptr @triton__0d1d2d3d4d5d678910de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d678910de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d678910de", linkageName: "triton__0d1d2d3d4d5d678910de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 36, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 21, column: 33, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 20, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 20, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 20, scope: !7)
!20 = !DILocation(line: 29, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 29, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 71, scope: !7)
!25 = !DILocation(line: 29, column: 116, scope: !7)
!26 = !DILocation(line: 29, column: 62, scope: !7)
!27 = !DILocation(line: 29, column: 82, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 129, scope: !7)
!30 = !DILocation(line: 30, column: 37, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 43, scope: !7)
!35 = !DILocation(line: 32, column: 31, scope: !7)
!36 = !DILocation(line: 32, column: 36, scope: !7)
!37 = !DILocation(line: 33, column: 31, scope: !7)
!38 = !DILocation(line: 33, column: 36, scope: !7)
!39 = !DILocation(line: 36, column: 19, scope: !7)
!40 = !DILocation(line: 37, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!44 = !DILocation(line: 40, column: 40, scope: !42)
!45 = !DILocation(line: 48, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 41, column: 19, scope: !7)
!47 = !DILocation(line: 43, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 28, scope: !7)
!49 = !DILocation(line: 51, column: 25, scope: !7)
!50 = !DILocation(line: 29, column: 169, scope: !7)
!51 = !DILocation(line: 35, column: 18, scope: !7)
!52 = !DILocation(line: 33, column: 76, scope: !7)
!53 = !DILocation(line: 32, column: 76, scope: !7)
!54 = !DILocation(line: 45, column: 19, scope: !7)
!55 = !DILocation(line: 47, column: 20, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 37, scope: !7)
!58 = !DILocation(line: 51, column: 4, scope: !7)
