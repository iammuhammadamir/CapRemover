; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8910de11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %14 = lshr i32 %13, 6, !dbg !10
  %15 = and i32 %14, 1, !dbg !10
  %16 = or i32 %15, 2, !dbg !10
  %17 = or i32 %15, 4, !dbg !10
  %18 = or i32 %15, 6, !dbg !10
  %19 = or i32 %15, 8, !dbg !10
  %20 = or i32 %15, 10, !dbg !10
  %21 = or i32 %15, 12, !dbg !10
  %22 = or i32 %15, 14, !dbg !10
  %23 = and i32 %13, 63, !dbg !11
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !12
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !13
  %26 = add i32 %25, 1, !dbg !14
  %27 = shl i32 %24, 4, !dbg !15
  %28 = mul i32 %27, %26, !dbg !16
  %29 = or i32 %28, %15, !dbg !17
  %30 = or i32 %28, %16, !dbg !17
  %31 = or i32 %28, %17, !dbg !17
  %32 = or i32 %28, %18, !dbg !17
  %33 = or i32 %28, %19, !dbg !17
  %34 = or i32 %28, %20, !dbg !17
  %35 = or i32 %28, %21, !dbg !17
  %36 = or i32 %28, %22, !dbg !17
  %37 = icmp slt i32 %29, 28160, !dbg !18
  %38 = icmp slt i32 %30, 28160, !dbg !18
  %39 = icmp slt i32 %31, 28160, !dbg !18
  %40 = icmp slt i32 %32, 28160, !dbg !18
  %41 = icmp slt i32 %33, 28160, !dbg !18
  %42 = icmp slt i32 %34, 28160, !dbg !18
  %43 = icmp slt i32 %35, 28160, !dbg !18
  %44 = icmp slt i32 %36, 28160, !dbg !18
  %45 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !19
  %46 = shl i32 %45, 6, !dbg !20
  %47 = or i32 %46, %23, !dbg !21
  %48 = icmp slt i32 %47, %11, !dbg !22
  %.frozen = freeze i32 %29
  %49 = sdiv i32 %.frozen, 1280, !dbg !23
  %50 = mul i32 %49, 1280
  %.decomposed = sub i32 %.frozen, %50
  %.frozen28 = freeze i32 %30
  %51 = sdiv i32 %.frozen28, 1280, !dbg !23
  %52 = mul i32 %51, 1280
  %.decomposed29 = sub i32 %.frozen28, %52
  %.frozen30 = freeze i32 %31
  %53 = sdiv i32 %.frozen30, 1280, !dbg !23
  %54 = mul i32 %53, 1280
  %.decomposed31 = sub i32 %.frozen30, %54
  %.frozen32 = freeze i32 %32
  %55 = sdiv i32 %.frozen32, 1280, !dbg !23
  %56 = mul i32 %55, 1280
  %.decomposed33 = sub i32 %.frozen32, %56
  %.frozen34 = freeze i32 %33
  %57 = sdiv i32 %.frozen34, 1280, !dbg !23
  %58 = mul i32 %57, 1280
  %.decomposed35 = sub i32 %.frozen34, %58
  %.frozen36 = freeze i32 %34
  %59 = sdiv i32 %.frozen36, 1280, !dbg !23
  %60 = mul i32 %59, 1280
  %.decomposed37 = sub i32 %.frozen36, %60
  %.frozen38 = freeze i32 %35
  %61 = sdiv i32 %.frozen38, 1280, !dbg !23
  %62 = mul i32 %61, 1280
  %.decomposed39 = sub i32 %.frozen38, %62
  %.frozen40 = freeze i32 %36
  %63 = sdiv i32 %.frozen40, 1280, !dbg !23
  %64 = mul i32 %63, 1280
  %.decomposed41 = sub i32 %.frozen40, %64
  %65 = mul i32 %9, %8, !dbg !24
  %66 = mul i32 %29, %65, !dbg !25
  %67 = mul i32 %30, %65, !dbg !25
  %68 = mul i32 %31, %65, !dbg !25
  %69 = mul i32 %32, %65, !dbg !25
  %70 = mul i32 %33, %65, !dbg !25
  %71 = mul i32 %34, %65, !dbg !25
  %72 = mul i32 %35, %65, !dbg !25
  %73 = mul i32 %36, %65, !dbg !25
  %74 = add i32 %66, %47, !dbg !26
  %75 = add i32 %67, %47, !dbg !26
  %76 = add i32 %68, %47, !dbg !26
  %77 = add i32 %69, %47, !dbg !26
  %78 = add i32 %70, %47, !dbg !26
  %79 = add i32 %71, %47, !dbg !26
  %80 = add i32 %72, %47, !dbg !26
  %81 = add i32 %73, %47, !dbg !26
  %82 = sext i32 %74 to i64, !dbg !27
  %83 = getelementptr half, ptr addrspace(1) %0, i64 %82, !dbg !27
  %84 = sext i32 %75 to i64, !dbg !27
  %85 = getelementptr half, ptr addrspace(1) %0, i64 %84, !dbg !27
  %86 = sext i32 %76 to i64, !dbg !27
  %87 = getelementptr half, ptr addrspace(1) %0, i64 %86, !dbg !27
  %88 = sext i32 %77 to i64, !dbg !27
  %89 = getelementptr half, ptr addrspace(1) %0, i64 %88, !dbg !27
  %90 = sext i32 %78 to i64, !dbg !27
  %91 = getelementptr half, ptr addrspace(1) %0, i64 %90, !dbg !27
  %92 = sext i32 %79 to i64, !dbg !27
  %93 = getelementptr half, ptr addrspace(1) %0, i64 %92, !dbg !27
  %94 = sext i32 %80 to i64, !dbg !27
  %95 = getelementptr half, ptr addrspace(1) %0, i64 %94, !dbg !27
  %96 = sext i32 %81 to i64, !dbg !27
  %97 = getelementptr half, ptr addrspace(1) %0, i64 %96, !dbg !27
  %98 = and i1 %48, %37, !dbg !28
  %99 = and i1 %48, %38, !dbg !28
  %100 = and i1 %48, %39, !dbg !28
  %101 = and i1 %48, %40, !dbg !28
  %102 = and i1 %48, %41, !dbg !28
  %103 = and i1 %48, %42, !dbg !28
  %104 = and i1 %48, %43, !dbg !28
  %105 = and i1 %48, %44, !dbg !28
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %83, i1 %98) #5, !dbg !29
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %85, i1 %99) #5, !dbg !29
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %100) #5, !dbg !29
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %89, i1 %101) #5, !dbg !29
  %110 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %91, i1 %102) #5, !dbg !29
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %93, i1 %103) #5, !dbg !29
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %95, i1 %104) #5, !dbg !29
  %113 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %97, i1 %105) #5, !dbg !29
  %114 = sext i32 %.decomposed to i64, !dbg !30
  %115 = getelementptr half, ptr addrspace(1) %1, i64 %114, !dbg !30
  %116 = sext i32 %.decomposed29 to i64, !dbg !30
  %117 = getelementptr half, ptr addrspace(1) %1, i64 %116, !dbg !30
  %118 = sext i32 %.decomposed31 to i64, !dbg !30
  %119 = getelementptr half, ptr addrspace(1) %1, i64 %118, !dbg !30
  %120 = sext i32 %.decomposed33 to i64, !dbg !30
  %121 = getelementptr half, ptr addrspace(1) %1, i64 %120, !dbg !30
  %122 = sext i32 %.decomposed35 to i64, !dbg !30
  %123 = getelementptr half, ptr addrspace(1) %1, i64 %122, !dbg !30
  %124 = sext i32 %.decomposed37 to i64, !dbg !30
  %125 = getelementptr half, ptr addrspace(1) %1, i64 %124, !dbg !30
  %126 = sext i32 %.decomposed39 to i64, !dbg !30
  %127 = getelementptr half, ptr addrspace(1) %1, i64 %126, !dbg !30
  %128 = sext i32 %.decomposed41 to i64, !dbg !30
  %129 = getelementptr half, ptr addrspace(1) %1, i64 %128, !dbg !30
  %130 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %115, i1 %37) #5, !dbg !31
  %131 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %117, i1 %38) #5, !dbg !31
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %119, i1 %39) #5, !dbg !31
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %121, i1 %40) #5, !dbg !31
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %123, i1 %41) #5, !dbg !31
  %135 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %125, i1 %42) #5, !dbg !31
  %136 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %127, i1 %43) #5, !dbg !31
  %137 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %129, i1 %44) #5, !dbg !31
  %138 = getelementptr half, ptr addrspace(1) %2, i64 %82, !dbg !32
  %139 = getelementptr half, ptr addrspace(1) %2, i64 %84, !dbg !32
  %140 = getelementptr half, ptr addrspace(1) %2, i64 %86, !dbg !32
  %141 = getelementptr half, ptr addrspace(1) %2, i64 %88, !dbg !32
  %142 = getelementptr half, ptr addrspace(1) %2, i64 %90, !dbg !32
  %143 = getelementptr half, ptr addrspace(1) %2, i64 %92, !dbg !32
  %144 = getelementptr half, ptr addrspace(1) %2, i64 %94, !dbg !32
  %145 = getelementptr half, ptr addrspace(1) %2, i64 %96, !dbg !32
  %146 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %138, i1 %98) #5, !dbg !33
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %139, i1 %99) #5, !dbg !33
  %148 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %140, i1 %100) #5, !dbg !33
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %141, i1 %101) #5, !dbg !33
  %150 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %142, i1 %102) #5, !dbg !33
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %143, i1 %103) #5, !dbg !33
  %152 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %144, i1 %104) #5, !dbg !33
  %153 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %145, i1 %105) #5, !dbg !33
  %154 = mul i32 %49, %65, !dbg !34
  %155 = mul i32 %51, %65, !dbg !34
  %156 = mul i32 %53, %65, !dbg !34
  %157 = mul i32 %55, %65, !dbg !34
  %158 = mul i32 %57, %65, !dbg !34
  %159 = mul i32 %59, %65, !dbg !34
  %160 = mul i32 %61, %65, !dbg !34
  %161 = mul i32 %63, %65, !dbg !34
  %162 = add i32 %154, %47, !dbg !35
  %163 = add i32 %155, %47, !dbg !35
  %164 = add i32 %156, %47, !dbg !35
  %165 = add i32 %157, %47, !dbg !35
  %166 = add i32 %158, %47, !dbg !35
  %167 = add i32 %159, %47, !dbg !35
  %168 = add i32 %160, %47, !dbg !35
  %169 = add i32 %161, %47, !dbg !35
  %170 = sext i32 %162 to i64, !dbg !36
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !36
  %172 = sext i32 %163 to i64, !dbg !36
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %172, !dbg !36
  %174 = sext i32 %164 to i64, !dbg !36
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %174, !dbg !36
  %176 = sext i32 %165 to i64, !dbg !36
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %176, !dbg !36
  %178 = sext i32 %166 to i64, !dbg !36
  %179 = getelementptr float, ptr addrspace(1) %3, i64 %178, !dbg !36
  %180 = sext i32 %167 to i64, !dbg !36
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %180, !dbg !36
  %182 = sext i32 %168 to i64, !dbg !36
  %183 = getelementptr float, ptr addrspace(1) %3, i64 %182, !dbg !36
  %184 = sext i32 %169 to i64, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !36
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %98) #5, !dbg !37
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %99) #5, !dbg !37
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %100) #5, !dbg !37
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %101) #5, !dbg !37
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %102) #5, !dbg !37
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %103) #5, !dbg !37
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %104) #5, !dbg !37
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %105) #5, !dbg !37
  %194 = getelementptr float, ptr addrspace(1) %4, i64 %170, !dbg !38
  %195 = getelementptr float, ptr addrspace(1) %4, i64 %172, !dbg !38
  %196 = getelementptr float, ptr addrspace(1) %4, i64 %174, !dbg !38
  %197 = getelementptr float, ptr addrspace(1) %4, i64 %176, !dbg !38
  %198 = getelementptr float, ptr addrspace(1) %4, i64 %178, !dbg !38
  %199 = getelementptr float, ptr addrspace(1) %4, i64 %180, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %182, !dbg !38
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %184, !dbg !38
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %98) #5, !dbg !39
  %203 = bitcast i32 %202 to float, !dbg !39
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %99) #5, !dbg !39
  %205 = bitcast i32 %204 to float, !dbg !39
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %100) #5, !dbg !39
  %207 = bitcast i32 %206 to float, !dbg !39
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %101) #5, !dbg !39
  %209 = bitcast i32 %208 to float, !dbg !39
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %102) #5, !dbg !39
  %211 = bitcast i32 %210 to float, !dbg !39
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %103) #5, !dbg !39
  %213 = bitcast i32 %212 to float, !dbg !39
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %104) #5, !dbg !39
  %215 = bitcast i32 %214 to float, !dbg !39
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %105) #5, !dbg !39
  %217 = bitcast i32 %216 to float, !dbg !39
  %218 = getelementptr half, ptr addrspace(1) %5, i64 %114, !dbg !40
  %219 = getelementptr half, ptr addrspace(1) %5, i64 %116, !dbg !40
  %220 = getelementptr half, ptr addrspace(1) %5, i64 %118, !dbg !40
  %221 = getelementptr half, ptr addrspace(1) %5, i64 %120, !dbg !40
  %222 = getelementptr half, ptr addrspace(1) %5, i64 %122, !dbg !40
  %223 = getelementptr half, ptr addrspace(1) %5, i64 %124, !dbg !40
  %224 = getelementptr half, ptr addrspace(1) %5, i64 %126, !dbg !40
  %225 = getelementptr half, ptr addrspace(1) %5, i64 %128, !dbg !40
  %226 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %218, i1 %37) #5, !dbg !41
  %227 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %219, i1 %38) #5, !dbg !41
  %228 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %220, i1 %39) #5, !dbg !41
  %229 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %221, i1 %40) #5, !dbg !41
  %230 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %222, i1 %41) #5, !dbg !41
  %231 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %223, i1 %42) #5, !dbg !41
  %232 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %224, i1 %43) #5, !dbg !41
  %233 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %225, i1 %44) #5, !dbg !41
  %234 = getelementptr half, ptr addrspace(1) %6, i64 %114, !dbg !42
  %235 = getelementptr half, ptr addrspace(1) %6, i64 %116, !dbg !42
  %236 = getelementptr half, ptr addrspace(1) %6, i64 %118, !dbg !42
  %237 = getelementptr half, ptr addrspace(1) %6, i64 %120, !dbg !42
  %238 = getelementptr half, ptr addrspace(1) %6, i64 %122, !dbg !42
  %239 = getelementptr half, ptr addrspace(1) %6, i64 %124, !dbg !42
  %240 = getelementptr half, ptr addrspace(1) %6, i64 %126, !dbg !42
  %241 = getelementptr half, ptr addrspace(1) %6, i64 %128, !dbg !42
  %242 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %234, i1 %37) #5, !dbg !43
  %243 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %235, i1 %38) #5, !dbg !43
  %244 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %236, i1 %39) #5, !dbg !43
  %245 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %237, i1 %40) #5, !dbg !43
  %246 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %238, i1 %41) #5, !dbg !43
  %247 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %239, i1 %42) #5, !dbg !43
  %248 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %240, i1 %43) #5, !dbg !43
  %249 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %241, i1 %44) #5, !dbg !43
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 1.280000e+03) #5, !dbg !44
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float 1.280000e+03) #5, !dbg !44
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float 1.280000e+03) #5, !dbg !44
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float 1.280000e+03) #5, !dbg !44
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float 1.280000e+03) #5, !dbg !44
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float 1.280000e+03) #5, !dbg !44
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float 1.280000e+03) #5, !dbg !44
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float 1.280000e+03) #5, !dbg !44
  %258 = fadd float %250, 0x3EE4F8B580000000, !dbg !45
  %259 = fadd float %251, 0x3EE4F8B580000000, !dbg !45
  %260 = fadd float %252, 0x3EE4F8B580000000, !dbg !45
  %261 = fadd float %253, 0x3EE4F8B580000000, !dbg !45
  %262 = fadd float %254, 0x3EE4F8B580000000, !dbg !45
  %263 = fadd float %255, 0x3EE4F8B580000000, !dbg !45
  %264 = fadd float %256, 0x3EE4F8B580000000, !dbg !45
  %265 = fadd float %257, 0x3EE4F8B580000000, !dbg !45
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %266, 0, !dbg !46
  br i1 %.not.i, label %269, label %267, !dbg !46

267:                                              ; preds = %12
  %268 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %258), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

269:                                              ; preds = %12
  %270 = tail call float @llvm.nvvm.rsqrt.approx.f(float %258), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %267, %269
  %.0.i = phi float [ %268, %267 ], [ %270, %269 ], !dbg !46
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i7 = icmp eq i32 %271, 0, !dbg !46
  br i1 %.not.i7, label %274, label %272, !dbg !46

272:                                              ; preds = %__nv_rsqrtf.exit
  %273 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %259), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

274:                                              ; preds = %__nv_rsqrtf.exit
  %275 = tail call float @llvm.nvvm.rsqrt.approx.f(float %259), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

__nv_rsqrtf.exit9:                                ; preds = %272, %274
  %.0.i8 = phi float [ %273, %272 ], [ %275, %274 ], !dbg !46
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i10 = icmp eq i32 %276, 0, !dbg !46
  br i1 %.not.i10, label %279, label %277, !dbg !46

277:                                              ; preds = %__nv_rsqrtf.exit9
  %278 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %260), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

279:                                              ; preds = %__nv_rsqrtf.exit9
  %280 = tail call float @llvm.nvvm.rsqrt.approx.f(float %260), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

__nv_rsqrtf.exit12:                               ; preds = %277, %279
  %.0.i11 = phi float [ %278, %277 ], [ %280, %279 ], !dbg !46
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i13 = icmp eq i32 %281, 0, !dbg !46
  br i1 %.not.i13, label %284, label %282, !dbg !46

282:                                              ; preds = %__nv_rsqrtf.exit12
  %283 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %261), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

284:                                              ; preds = %__nv_rsqrtf.exit12
  %285 = tail call float @llvm.nvvm.rsqrt.approx.f(float %261), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

__nv_rsqrtf.exit15:                               ; preds = %282, %284
  %.0.i14 = phi float [ %283, %282 ], [ %285, %284 ], !dbg !46
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i16 = icmp eq i32 %286, 0, !dbg !46
  br i1 %.not.i16, label %289, label %287, !dbg !46

287:                                              ; preds = %__nv_rsqrtf.exit15
  %288 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %262), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

289:                                              ; preds = %__nv_rsqrtf.exit15
  %290 = tail call float @llvm.nvvm.rsqrt.approx.f(float %262), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

__nv_rsqrtf.exit18:                               ; preds = %287, %289
  %.0.i17 = phi float [ %288, %287 ], [ %290, %289 ], !dbg !46
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i19 = icmp eq i32 %291, 0, !dbg !46
  br i1 %.not.i19, label %294, label %292, !dbg !46

292:                                              ; preds = %__nv_rsqrtf.exit18
  %293 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %263), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

294:                                              ; preds = %__nv_rsqrtf.exit18
  %295 = tail call float @llvm.nvvm.rsqrt.approx.f(float %263), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

__nv_rsqrtf.exit21:                               ; preds = %292, %294
  %.0.i20 = phi float [ %293, %292 ], [ %295, %294 ], !dbg !46
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i22 = icmp eq i32 %296, 0, !dbg !46
  br i1 %.not.i22, label %299, label %297, !dbg !46

297:                                              ; preds = %__nv_rsqrtf.exit21
  %298 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %264), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

299:                                              ; preds = %__nv_rsqrtf.exit21
  %300 = tail call float @llvm.nvvm.rsqrt.approx.f(float %264), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

__nv_rsqrtf.exit24:                               ; preds = %297, %299
  %.0.i23 = phi float [ %298, %297 ], [ %300, %299 ], !dbg !46
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i25 = icmp eq i32 %301, 0, !dbg !46
  br i1 %.not.i25, label %304, label %302, !dbg !46

302:                                              ; preds = %__nv_rsqrtf.exit24
  %303 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %265), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

304:                                              ; preds = %__nv_rsqrtf.exit24
  %305 = tail call float @llvm.nvvm.rsqrt.approx.f(float %265), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

__nv_rsqrtf.exit27:                               ; preds = %302, %304
  %.0.i26 = phi float [ %303, %302 ], [ %305, %304 ], !dbg !46
  %306 = bitcast i16 %113 to half, !dbg !29
  %307 = fpext half %306 to float, !dbg !47
  %308 = bitcast i16 %137 to half, !dbg !31
  %309 = fpext half %308 to float, !dbg !48
  %310 = fadd float %307, %309, !dbg !49
  %311 = bitcast i16 %153 to half, !dbg !33
  %312 = fpext half %311 to float, !dbg !50
  %313 = fmul float %312, 1.250000e-01, !dbg !51
  %314 = fadd float %310, %313, !dbg !52
  %315 = bitcast i32 %193 to float, !dbg !37
  %316 = fsub float %314, %315, !dbg !53
  %317 = bitcast i16 %112 to half, !dbg !29
  %318 = fpext half %317 to float, !dbg !47
  %319 = bitcast i16 %136 to half, !dbg !31
  %320 = fpext half %319 to float, !dbg !48
  %321 = fadd float %318, %320, !dbg !49
  %322 = bitcast i16 %152 to half, !dbg !33
  %323 = fpext half %322 to float, !dbg !50
  %324 = fmul float %323, 1.250000e-01, !dbg !51
  %325 = fadd float %321, %324, !dbg !52
  %326 = bitcast i32 %192 to float, !dbg !37
  %327 = fsub float %325, %326, !dbg !53
  %328 = bitcast i16 %111 to half, !dbg !29
  %329 = fpext half %328 to float, !dbg !47
  %330 = bitcast i16 %135 to half, !dbg !31
  %331 = fpext half %330 to float, !dbg !48
  %332 = fadd float %329, %331, !dbg !49
  %333 = bitcast i16 %151 to half, !dbg !33
  %334 = fpext half %333 to float, !dbg !50
  %335 = fmul float %334, 1.250000e-01, !dbg !51
  %336 = fadd float %332, %335, !dbg !52
  %337 = bitcast i32 %191 to float, !dbg !37
  %338 = fsub float %336, %337, !dbg !53
  %339 = bitcast i16 %110 to half, !dbg !29
  %340 = fpext half %339 to float, !dbg !47
  %341 = bitcast i16 %134 to half, !dbg !31
  %342 = fpext half %341 to float, !dbg !48
  %343 = fadd float %340, %342, !dbg !49
  %344 = bitcast i16 %150 to half, !dbg !33
  %345 = fpext half %344 to float, !dbg !50
  %346 = fmul float %345, 1.250000e-01, !dbg !51
  %347 = fadd float %343, %346, !dbg !52
  %348 = bitcast i32 %190 to float, !dbg !37
  %349 = fsub float %347, %348, !dbg !53
  %350 = bitcast i16 %109 to half, !dbg !29
  %351 = fpext half %350 to float, !dbg !47
  %352 = bitcast i16 %133 to half, !dbg !31
  %353 = fpext half %352 to float, !dbg !48
  %354 = fadd float %351, %353, !dbg !49
  %355 = bitcast i16 %149 to half, !dbg !33
  %356 = fpext half %355 to float, !dbg !50
  %357 = fmul float %356, 1.250000e-01, !dbg !51
  %358 = fadd float %354, %357, !dbg !52
  %359 = bitcast i32 %189 to float, !dbg !37
  %360 = fsub float %358, %359, !dbg !53
  %361 = bitcast i16 %108 to half, !dbg !29
  %362 = fpext half %361 to float, !dbg !47
  %363 = bitcast i16 %132 to half, !dbg !31
  %364 = fpext half %363 to float, !dbg !48
  %365 = fadd float %362, %364, !dbg !49
  %366 = bitcast i16 %148 to half, !dbg !33
  %367 = fpext half %366 to float, !dbg !50
  %368 = fmul float %367, 1.250000e-01, !dbg !51
  %369 = fadd float %365, %368, !dbg !52
  %370 = bitcast i32 %188 to float, !dbg !37
  %371 = fsub float %369, %370, !dbg !53
  %372 = bitcast i16 %107 to half, !dbg !29
  %373 = fpext half %372 to float, !dbg !47
  %374 = bitcast i16 %131 to half, !dbg !31
  %375 = fpext half %374 to float, !dbg !48
  %376 = fadd float %373, %375, !dbg !49
  %377 = bitcast i16 %147 to half, !dbg !33
  %378 = fpext half %377 to float, !dbg !50
  %379 = fmul float %378, 1.250000e-01, !dbg !51
  %380 = fadd float %376, %379, !dbg !52
  %381 = bitcast i32 %187 to float, !dbg !37
  %382 = fsub float %380, %381, !dbg !53
  %383 = bitcast i16 %106 to half, !dbg !29
  %384 = fpext half %383 to float, !dbg !47
  %385 = bitcast i16 %130 to half, !dbg !31
  %386 = fpext half %385 to float, !dbg !48
  %387 = fadd float %384, %386, !dbg !49
  %388 = bitcast i16 %146 to half, !dbg !33
  %389 = fpext half %388 to float, !dbg !50
  %390 = fmul float %389, 1.250000e-01, !dbg !51
  %391 = fadd float %387, %390, !dbg !52
  %392 = bitcast i32 %186 to float, !dbg !37
  %393 = fsub float %391, %392, !dbg !53
  %394 = bitcast i16 %249 to half, !dbg !43
  %395 = fpext half %394 to float, !dbg !54
  %396 = bitcast i16 %248 to half, !dbg !43
  %397 = fpext half %396 to float, !dbg !54
  %398 = bitcast i16 %247 to half, !dbg !43
  %399 = fpext half %398 to float, !dbg !54
  %400 = bitcast i16 %246 to half, !dbg !43
  %401 = fpext half %400 to float, !dbg !54
  %402 = bitcast i16 %245 to half, !dbg !43
  %403 = fpext half %402 to float, !dbg !54
  %404 = bitcast i16 %244 to half, !dbg !43
  %405 = fpext half %404 to float, !dbg !54
  %406 = bitcast i16 %243 to half, !dbg !43
  %407 = fpext half %406 to float, !dbg !54
  %408 = bitcast i16 %242 to half, !dbg !43
  %409 = fpext half %408 to float, !dbg !54
  %410 = bitcast i16 %233 to half, !dbg !41
  %411 = fpext half %410 to float, !dbg !55
  %412 = bitcast i16 %232 to half, !dbg !41
  %413 = fpext half %412 to float, !dbg !55
  %414 = bitcast i16 %231 to half, !dbg !41
  %415 = fpext half %414 to float, !dbg !55
  %416 = bitcast i16 %230 to half, !dbg !41
  %417 = fpext half %416 to float, !dbg !55
  %418 = bitcast i16 %229 to half, !dbg !41
  %419 = fpext half %418 to float, !dbg !55
  %420 = bitcast i16 %228 to half, !dbg !41
  %421 = fpext half %420 to float, !dbg !55
  %422 = bitcast i16 %227 to half, !dbg !41
  %423 = fpext half %422 to float, !dbg !55
  %424 = bitcast i16 %226 to half, !dbg !41
  %425 = fpext half %424 to float, !dbg !55
  %426 = lshr i32 %13, 1, !dbg !11
  %427 = and i32 %426, 63, !dbg !11
  %428 = or i32 %46, %427, !dbg !21
  %429 = icmp slt i32 %428, %11, !dbg !22
  %430 = shl i32 %13, 3, !dbg !10
  %431 = and i32 %430, 8, !dbg !10
  %432 = or i32 %28, %431, !dbg !17
  %433 = icmp slt i32 %432, 28160, !dbg !18
  %434 = and i1 %429, %433, !dbg !28
  %.frozen42 = freeze i32 %432
  %435 = sdiv i32 %.frozen42, 1280, !dbg !23
  %436 = mul i32 %435, 1280
  %.decomposed43 = sub i32 %.frozen42, %436
  %437 = fmul float %393, %.0.i, !dbg !56
  %438 = fmul float %382, %.0.i8, !dbg !56
  %439 = fmul float %371, %.0.i11, !dbg !56
  %440 = fmul float %360, %.0.i14, !dbg !56
  %441 = fmul float %349, %.0.i17, !dbg !56
  %442 = fmul float %338, %.0.i20, !dbg !56
  %443 = fmul float %327, %.0.i23, !dbg !56
  %444 = fmul float %316, %.0.i26, !dbg !56
  %445 = fmul float %437, %425, !dbg !57
  %446 = fmul float %438, %423, !dbg !57
  %447 = fmul float %439, %421, !dbg !57
  %448 = fmul float %440, %419, !dbg !57
  %449 = fmul float %441, %417, !dbg !57
  %450 = fmul float %442, %415, !dbg !57
  %451 = fmul float %443, %413, !dbg !57
  %452 = fmul float %444, %411, !dbg !57
  %453 = fadd float %445, %409, !dbg !58
  %454 = fadd float %446, %407, !dbg !58
  %455 = fadd float %447, %405, !dbg !58
  %456 = fadd float %448, %403, !dbg !58
  %457 = fadd float %449, %401, !dbg !58
  %458 = fadd float %450, %399, !dbg !58
  %459 = fadd float %451, %397, !dbg !58
  %460 = fadd float %452, %395, !dbg !58
  %461 = mul i32 %65, %435, !dbg !59
  %reass.add = add i32 %461, %428
  %reass.mul = mul i32 %reass.add, 1280
  %462 = add i32 %reass.mul, %.decomposed43, !dbg !60
  %463 = sext i32 %462 to i64, !dbg !61
  %464 = getelementptr half, ptr addrspace(1) %7, i64 %463, !dbg !61
  %465 = fptrunc float %453 to half, !dbg !62
  %466 = fptrunc float %454 to half, !dbg !62
  %467 = fptrunc float %455 to half, !dbg !62
  %468 = fptrunc float %456 to half, !dbg !62
  %469 = fptrunc float %457 to half, !dbg !62
  %470 = fptrunc float %458 to half, !dbg !62
  %471 = fptrunc float %459 to half, !dbg !62
  %472 = fptrunc float %460 to half, !dbg !62
  %473 = mul nuw nsw i32 %23, 24, !dbg !62
  %474 = or i32 %473, %15, !dbg !62
  %475 = zext nneg i32 %474 to i64, !dbg !62
  %476 = getelementptr half, ptr addrspace(3) @global_smem, i64 %475, !dbg !62
  %477 = insertelement <1 x half> undef, half %465, i64 0, !dbg !62
  store <1 x half> %477, ptr addrspace(3) %476, align 2, !dbg !62
  %478 = or i32 %16, %473, !dbg !62
  %479 = zext nneg i32 %478 to i64, !dbg !62
  %480 = getelementptr half, ptr addrspace(3) @global_smem, i64 %479, !dbg !62
  %481 = insertelement <1 x half> undef, half %466, i64 0, !dbg !62
  store <1 x half> %481, ptr addrspace(3) %480, align 2, !dbg !62
  %482 = or i32 %17, %473, !dbg !62
  %483 = zext nneg i32 %482 to i64, !dbg !62
  %484 = getelementptr half, ptr addrspace(3) @global_smem, i64 %483, !dbg !62
  %485 = insertelement <1 x half> undef, half %467, i64 0, !dbg !62
  store <1 x half> %485, ptr addrspace(3) %484, align 2, !dbg !62
  %486 = or i32 %18, %473, !dbg !62
  %487 = zext nneg i32 %486 to i64, !dbg !62
  %488 = getelementptr half, ptr addrspace(3) @global_smem, i64 %487, !dbg !62
  %489 = insertelement <1 x half> undef, half %468, i64 0, !dbg !62
  store <1 x half> %489, ptr addrspace(3) %488, align 2, !dbg !62
  %490 = add nuw nsw i32 %19, %473, !dbg !62
  %491 = zext nneg i32 %490 to i64, !dbg !62
  %492 = getelementptr half, ptr addrspace(3) @global_smem, i64 %491, !dbg !62
  %493 = insertelement <1 x half> undef, half %469, i64 0, !dbg !62
  store <1 x half> %493, ptr addrspace(3) %492, align 2, !dbg !62
  %494 = add nuw nsw i32 %20, %473, !dbg !62
  %495 = zext nneg i32 %494 to i64, !dbg !62
  %496 = getelementptr half, ptr addrspace(3) @global_smem, i64 %495, !dbg !62
  %497 = insertelement <1 x half> undef, half %470, i64 0, !dbg !62
  store <1 x half> %497, ptr addrspace(3) %496, align 2, !dbg !62
  %498 = add nuw nsw i32 %21, %473, !dbg !62
  %499 = zext nneg i32 %498 to i64, !dbg !62
  %500 = getelementptr half, ptr addrspace(3) @global_smem, i64 %499, !dbg !62
  %501 = insertelement <1 x half> undef, half %471, i64 0, !dbg !62
  store <1 x half> %501, ptr addrspace(3) %500, align 2, !dbg !62
  %502 = add nuw nsw i32 %22, %473, !dbg !62
  %503 = zext nneg i32 %502 to i64, !dbg !62
  %504 = getelementptr half, ptr addrspace(3) @global_smem, i64 %503, !dbg !62
  %505 = insertelement <1 x half> undef, half %472, i64 0, !dbg !62
  store <1 x half> %505, ptr addrspace(3) %504, align 2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %506 = mul nuw nsw i32 %427, 24, !dbg !62
  %507 = add nuw nsw i32 %506, %431, !dbg !62
  %508 = zext nneg i32 %507 to i64, !dbg !62
  %509 = getelementptr half, ptr addrspace(3) @global_smem, i64 %508, !dbg !62
  %.extract = load i32, ptr addrspace(3) %509, align 16, !dbg !62
  %510 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %509, i64 0, i64 1, !dbg !62
  %.extract2 = load i32, ptr addrspace(3) %510, align 4, !dbg !62
  %511 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %509, i64 0, i64 2, !dbg !62
  %.extract4 = load i32, ptr addrspace(3) %511, align 8, !dbg !62
  %512 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %509, i64 0, i64 3, !dbg !62
  %.extract6 = load i32, ptr addrspace(3) %512, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract2, i32 %.extract4, i32 %.extract6, ptr addrspace(1) %464, i1 %434) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c27zeinoepmswlg4nhkek5zzv7w6j37ozelqwowjzj3vrugotrjs.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/27")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8910de11, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8910de11, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8910de11", linkageName: "triton__0d1d2d3d4d5d6d7d8910de11", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 44, scope: !7)
!11 = !DILocation(line: 26, column: 44, scope: !7)
!12 = !DILocation(line: 22, column: 28, scope: !7)
!13 = !DILocation(line: 22, column: 48, scope: !7)
!14 = !DILocation(line: 22, column: 53, scope: !7)
!15 = !DILocation(line: 22, column: 34, scope: !7)
!16 = !DILocation(line: 22, column: 58, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 23, scope: !7)
!22 = !DILocation(line: 27, column: 21, scope: !7)
!23 = !DILocation(line: 31, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 40, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 58, scope: !7)
!29 = !DILocation(line: 32, column: 50, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 50, scope: !7)
!34 = !DILocation(line: 35, column: 44, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 50, scope: !7)
!38 = !DILocation(line: 36, column: 31, scope: !7)
!39 = !DILocation(line: 36, column: 51, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 36, scope: !7)
!42 = !DILocation(line: 38, column: 31, scope: !7)
!43 = !DILocation(line: 38, column: 36, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 28, scope: !7)
!47 = !DILocation(line: 32, column: 98, scope: !7)
!48 = !DILocation(line: 33, column: 75, scope: !7)
!49 = !DILocation(line: 39, column: 18, scope: !7)
!50 = !DILocation(line: 34, column: 98, scope: !7)
!51 = !DILocation(line: 41, column: 18, scope: !7)
!52 = !DILocation(line: 42, column: 18, scope: !7)
!53 = !DILocation(line: 44, column: 18, scope: !7)
!54 = !DILocation(line: 38, column: 76, scope: !7)
!55 = !DILocation(line: 37, column: 76, scope: !7)
!56 = !DILocation(line: 50, column: 19, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 56, column: 56, scope: !7)
!60 = !DILocation(line: 56, column: 43, scope: !7)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 69, scope: !7)
!63 = !DILocation(line: 56, column: 4, scope: !7)
