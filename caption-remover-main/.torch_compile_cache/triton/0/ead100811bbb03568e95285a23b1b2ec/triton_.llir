; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d89101112de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %15 = lshr i32 %14, 5, !dbg !8
  %16 = and i32 %15, 7, !dbg !8
  %17 = shl i32 %14, 3, !dbg !9
  %18 = and i32 %17, 248, !dbg !9
  %urem = and i32 %14, 255, !dbg !9
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %21 = add i32 %20, 1, !dbg !12
  %22 = shl i32 %19, 4, !dbg !13
  %23 = mul i32 %22, %21, !dbg !14
  %24 = or i32 %23, %16, !dbg !15
  %25 = or i32 %24, 8, !dbg !15
  %26 = or i32 %23, 1, !dbg !15
  %27 = or i32 %23, 2, !dbg !15
  %28 = or i32 %23, 3, !dbg !15
  %29 = or i32 %23, 4, !dbg !15
  %30 = or i32 %23, 5, !dbg !15
  %31 = or i32 %23, 6, !dbg !15
  %32 = or i32 %23, 7, !dbg !15
  %33 = or i32 %23, 8, !dbg !15
  %34 = or i32 %23, 9, !dbg !15
  %35 = or i32 %23, 10, !dbg !15
  %36 = or i32 %23, 11, !dbg !15
  %37 = or i32 %23, 12, !dbg !15
  %38 = or i32 %23, 13, !dbg !15
  %39 = or i32 %23, 14, !dbg !15
  %40 = or i32 %23, 15, !dbg !15
  %41 = icmp slt i32 %24, %11, !dbg !16
  %42 = icmp slt i32 %25, %11, !dbg !16
  %43 = icmp slt i32 %23, %11, !dbg !16
  %44 = icmp slt i32 %26, %11, !dbg !16
  %45 = icmp slt i32 %27, %11, !dbg !16
  %46 = icmp slt i32 %28, %11, !dbg !16
  %47 = icmp slt i32 %29, %11, !dbg !16
  %48 = icmp slt i32 %30, %11, !dbg !16
  %49 = icmp slt i32 %31, %11, !dbg !16
  %50 = icmp slt i32 %32, %11, !dbg !16
  %51 = icmp slt i32 %33, %11, !dbg !16
  %52 = icmp slt i32 %34, %11, !dbg !16
  %53 = icmp slt i32 %35, %11, !dbg !16
  %54 = icmp slt i32 %36, %11, !dbg !16
  %55 = icmp slt i32 %37, %11, !dbg !16
  %56 = icmp slt i32 %38, %11, !dbg !16
  %57 = icmp slt i32 %39, %11, !dbg !16
  %58 = icmp slt i32 %40, %11, !dbg !16
  %59 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %60 = shl i32 %59, 8, !dbg !18
  %61 = or i32 %60, %18, !dbg !19
  %62 = or i32 %60, %urem, !dbg !19
  %63 = icmp slt i32 %61, 1280, !dbg !20
  %64 = icmp slt i32 %62, 1280, !dbg !20
  %.frozen = freeze i32 %23
  %.frozen40 = freeze i32 %8
  %65 = sdiv i32 %.frozen, %.frozen40, !dbg !21
  %66 = mul i32 %65, %.frozen40
  %.decomposed = sub i32 %.frozen, %66
  %.frozen41 = freeze i32 %26
  %.frozen42 = freeze i32 %8
  %67 = sdiv i32 %.frozen41, %.frozen42, !dbg !21
  %68 = mul i32 %67, %.frozen42
  %.decomposed43 = sub i32 %.frozen41, %68
  %.frozen44 = freeze i32 %27
  %.frozen45 = freeze i32 %8
  %69 = sdiv i32 %.frozen44, %.frozen45, !dbg !21
  %70 = mul i32 %69, %.frozen45
  %.decomposed46 = sub i32 %.frozen44, %70
  %.frozen47 = freeze i32 %28
  %.frozen48 = freeze i32 %8
  %71 = sdiv i32 %.frozen47, %.frozen48, !dbg !21
  %72 = mul i32 %71, %.frozen48
  %.decomposed49 = sub i32 %.frozen47, %72
  %.frozen50 = freeze i32 %29
  %.frozen51 = freeze i32 %8
  %73 = sdiv i32 %.frozen50, %.frozen51, !dbg !21
  %74 = mul i32 %73, %.frozen51
  %.decomposed52 = sub i32 %.frozen50, %74
  %.frozen53 = freeze i32 %30
  %.frozen54 = freeze i32 %8
  %75 = sdiv i32 %.frozen53, %.frozen54, !dbg !21
  %76 = mul i32 %75, %.frozen54
  %.decomposed55 = sub i32 %.frozen53, %76
  %.frozen56 = freeze i32 %31
  %.frozen57 = freeze i32 %8
  %77 = sdiv i32 %.frozen56, %.frozen57, !dbg !21
  %78 = mul i32 %77, %.frozen57
  %.decomposed58 = sub i32 %.frozen56, %78
  %.frozen59 = freeze i32 %32
  %.frozen60 = freeze i32 %8
  %79 = sdiv i32 %.frozen59, %.frozen60, !dbg !21
  %80 = mul i32 %79, %.frozen60
  %.decomposed61 = sub i32 %.frozen59, %80
  %.frozen62 = freeze i32 %33
  %.frozen63 = freeze i32 %8
  %81 = sdiv i32 %.frozen62, %.frozen63, !dbg !21
  %82 = mul i32 %81, %.frozen63
  %.decomposed64 = sub i32 %.frozen62, %82
  %.frozen65 = freeze i32 %34
  %.frozen66 = freeze i32 %8
  %83 = sdiv i32 %.frozen65, %.frozen66, !dbg !21
  %84 = mul i32 %83, %.frozen66
  %.decomposed67 = sub i32 %.frozen65, %84
  %.frozen68 = freeze i32 %35
  %.frozen69 = freeze i32 %8
  %85 = sdiv i32 %.frozen68, %.frozen69, !dbg !21
  %86 = mul i32 %85, %.frozen69
  %.decomposed70 = sub i32 %.frozen68, %86
  %.frozen71 = freeze i32 %36
  %.frozen72 = freeze i32 %8
  %87 = sdiv i32 %.frozen71, %.frozen72, !dbg !21
  %88 = mul i32 %87, %.frozen72
  %.decomposed73 = sub i32 %.frozen71, %88
  %.frozen74 = freeze i32 %37
  %.frozen75 = freeze i32 %8
  %89 = sdiv i32 %.frozen74, %.frozen75, !dbg !21
  %90 = mul i32 %89, %.frozen75
  %.decomposed76 = sub i32 %.frozen74, %90
  %.frozen77 = freeze i32 %38
  %.frozen78 = freeze i32 %8
  %91 = sdiv i32 %.frozen77, %.frozen78, !dbg !21
  %92 = mul i32 %91, %.frozen78
  %.decomposed79 = sub i32 %.frozen77, %92
  %.frozen80 = freeze i32 %39
  %.frozen81 = freeze i32 %8
  %93 = sdiv i32 %.frozen80, %.frozen81, !dbg !21
  %94 = mul i32 %93, %.frozen81
  %.decomposed82 = sub i32 %.frozen80, %94
  %.frozen83 = freeze i32 %40
  %.frozen84 = freeze i32 %8
  %95 = sdiv i32 %.frozen83, %.frozen84, !dbg !21
  %96 = mul i32 %95, %.frozen84
  %.decomposed85 = sub i32 %.frozen83, %96
  %97 = mul i32 %24, 1280, !dbg !22
  %98 = mul i32 %25, 1280, !dbg !22
  %99 = add i32 %97, %61, !dbg !23
  %100 = add i32 %98, %61, !dbg !23
  %101 = sext i32 %99 to i64, !dbg !24
  %102 = getelementptr half, ptr addrspace(1) %0, i64 %101, !dbg !24
  %103 = sext i32 %100 to i64, !dbg !24
  %104 = getelementptr half, ptr addrspace(1) %0, i64 %103, !dbg !24
  %105 = and i1 %63, %41, !dbg !25
  %106 = and i1 %63, %42, !dbg !25
  %107 = and i1 %43, %64, !dbg !25
  %108 = and i1 %64, %44, !dbg !25
  %109 = and i1 %64, %45, !dbg !25
  %110 = and i1 %64, %46, !dbg !25
  %111 = and i1 %64, %47, !dbg !25
  %112 = and i1 %64, %48, !dbg !25
  %113 = and i1 %64, %49, !dbg !25
  %114 = and i1 %64, %50, !dbg !25
  %115 = and i1 %64, %51, !dbg !25
  %116 = and i1 %64, %52, !dbg !25
  %117 = and i1 %64, %53, !dbg !25
  %118 = and i1 %64, %54, !dbg !25
  %119 = and i1 %64, %55, !dbg !25
  %120 = and i1 %64, %56, !dbg !25
  %121 = and i1 %64, %57, !dbg !25
  %122 = and i1 %64, %58, !dbg !25
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %105) #2, !dbg !26
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !26
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !26
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %106) #2, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !26
  %133 = sext i32 %62 to i64, !dbg !27
  %134 = getelementptr half, ptr addrspace(1) %1, i64 %133, !dbg !27
  %135 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %134, i1 %64) #2, !dbg !28
  %136 = bitcast i16 %135 to half, !dbg !28
  %137 = fpext half %136 to float, !dbg !29
  %138 = getelementptr half, ptr addrspace(1) %2, i64 %101, !dbg !30
  %139 = getelementptr half, ptr addrspace(1) %2, i64 %103, !dbg !30
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %105) #2, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !31
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %106) #2, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !31
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !31
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !31
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !31
  %150 = getelementptr half, ptr addrspace(1) %3, i64 %101, !dbg !32
  %151 = getelementptr half, ptr addrspace(1) %3, i64 %103, !dbg !32
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %105) #2, !dbg !33
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !33
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !33
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !33
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %106) #2, !dbg !33
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !33
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !33
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !33
  %162 = getelementptr half, ptr addrspace(1) %4, i64 %133, !dbg !34
  %163 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %162, i1 %64) #2, !dbg !35
  %164 = bitcast i16 %163 to half, !dbg !35
  %165 = fpext half %164 to float, !dbg !36
  %166 = getelementptr half, ptr addrspace(1) %5, i64 %101, !dbg !37
  %167 = getelementptr half, ptr addrspace(1) %5, i64 %103, !dbg !37
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 %105) #2, !dbg !38
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !38
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !38
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !38
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !38
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %106) #2, !dbg !38
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !38
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !38
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !38
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !38
  %178 = getelementptr half, ptr addrspace(1) %6, i64 %101, !dbg !39
  %179 = getelementptr half, ptr addrspace(1) %6, i64 %103, !dbg !39
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %105) #2, !dbg !40
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !40
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !40
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !40
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !40
  %185 = trunc i32 %181 to i16, !dbg !40
  %186 = bitcast i16 %185 to half, !dbg !40
  %extelt.offset32 = lshr i32 %181, 16, !dbg !40
  %187 = trunc i32 %extelt.offset32 to i16, !dbg !40
  %188 = bitcast i16 %187 to half, !dbg !40
  %189 = trunc i32 %182 to i16, !dbg !40
  %190 = bitcast i16 %189 to half, !dbg !40
  %extelt.offset33 = lshr i32 %182, 16, !dbg !40
  %191 = trunc i32 %extelt.offset33 to i16, !dbg !40
  %192 = bitcast i16 %191 to half, !dbg !40
  %193 = trunc i32 %183 to i16, !dbg !40
  %194 = bitcast i16 %193 to half, !dbg !40
  %extelt.offset34 = lshr i32 %183, 16, !dbg !40
  %195 = trunc i32 %extelt.offset34 to i16, !dbg !40
  %196 = bitcast i16 %195 to half, !dbg !40
  %197 = trunc i32 %184 to i16, !dbg !40
  %198 = bitcast i16 %197 to half, !dbg !40
  %extelt.offset35 = lshr i32 %184, 16, !dbg !40
  %199 = trunc i32 %extelt.offset35 to i16, !dbg !40
  %200 = bitcast i16 %199 to half, !dbg !40
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %106) #2, !dbg !40
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !40
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !40
  %206 = trunc i32 %202 to i16, !dbg !40
  %207 = bitcast i16 %206 to half, !dbg !40
  %extelt.offset36 = lshr i32 %202, 16, !dbg !40
  %208 = trunc i32 %extelt.offset36 to i16, !dbg !40
  %209 = bitcast i16 %208 to half, !dbg !40
  %210 = trunc i32 %203 to i16, !dbg !40
  %211 = bitcast i16 %210 to half, !dbg !40
  %extelt.offset37 = lshr i32 %203, 16, !dbg !40
  %212 = trunc i32 %extelt.offset37 to i16, !dbg !40
  %213 = bitcast i16 %212 to half, !dbg !40
  %214 = trunc i32 %204 to i16, !dbg !40
  %215 = bitcast i16 %214 to half, !dbg !40
  %extelt.offset38 = lshr i32 %204, 16, !dbg !40
  %216 = trunc i32 %extelt.offset38 to i16, !dbg !40
  %217 = bitcast i16 %216 to half, !dbg !40
  %218 = trunc i32 %205 to i16, !dbg !40
  %219 = bitcast i16 %218 to half, !dbg !40
  %extelt.offset39 = lshr i32 %205, 16, !dbg !40
  %220 = trunc i32 %extelt.offset39 to i16, !dbg !40
  %221 = bitcast i16 %220 to half, !dbg !40
  %222 = fpext half %186 to float, !dbg !41
  %223 = fpext half %188 to float, !dbg !41
  %224 = fpext half %190 to float, !dbg !41
  %225 = fpext half %192 to float, !dbg !41
  %226 = fpext half %194 to float, !dbg !41
  %227 = fpext half %196 to float, !dbg !41
  %228 = fpext half %198 to float, !dbg !41
  %229 = fpext half %200 to float, !dbg !41
  %230 = fpext half %207 to float, !dbg !41
  %231 = fpext half %209 to float, !dbg !41
  %232 = fpext half %211 to float, !dbg !41
  %233 = fpext half %213 to float, !dbg !41
  %234 = fpext half %215 to float, !dbg !41
  %235 = fpext half %217 to float, !dbg !41
  %236 = fpext half %219 to float, !dbg !41
  %237 = fpext half %221 to float, !dbg !41
  %238 = zext nneg i32 %urem to i64, !dbg !42
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i64 %238, !dbg !42
  %240 = insertelement <1 x float> undef, float %137, i64 0, !dbg !42
  store <1 x float> %240, ptr addrspace(3) %239, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %241 = zext nneg i32 %18 to i64, !dbg !42
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i64 %241, !dbg !42
  %243 = load float, ptr addrspace(3) %242, align 4, !dbg !42
  %244 = or i32 %18, 1, !dbg !42
  %245 = zext nneg i32 %244 to i64, !dbg !42
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i64 %245, !dbg !42
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !42
  %248 = or i32 %18, 2, !dbg !42
  %249 = zext nneg i32 %248 to i64, !dbg !42
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i64 %249, !dbg !42
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !42
  %252 = or i32 %18, 3, !dbg !42
  %253 = zext nneg i32 %252 to i64, !dbg !42
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !42
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !42
  %256 = or i32 %18, 4, !dbg !42
  %257 = zext nneg i32 %256 to i64, !dbg !42
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i64 %257, !dbg !42
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !42
  %260 = or i32 %18, 5, !dbg !42
  %261 = zext nneg i32 %260 to i64, !dbg !42
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i64 %261, !dbg !42
  %263 = load float, ptr addrspace(3) %262, align 4, !dbg !42
  %264 = or i32 %18, 6, !dbg !42
  %265 = zext nneg i32 %264 to i64, !dbg !42
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i64 %265, !dbg !42
  %267 = load float, ptr addrspace(3) %266, align 4, !dbg !42
  %268 = or i32 %18, 7, !dbg !42
  %269 = zext nneg i32 %268 to i64, !dbg !42
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i64 %269, !dbg !42
  %271 = load float, ptr addrspace(3) %270, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %272 = insertelement <1 x float> undef, float %165, i64 0, !dbg !43
  store <1 x float> %272, ptr addrspace(3) %239, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %273 = load float, ptr addrspace(3) %242, align 4, !dbg !43
  %274 = load float, ptr addrspace(3) %246, align 4, !dbg !43
  %275 = load float, ptr addrspace(3) %250, align 4, !dbg !43
  %276 = load float, ptr addrspace(3) %254, align 4, !dbg !43
  %277 = load float, ptr addrspace(3) %258, align 4, !dbg !43
  %278 = load float, ptr addrspace(3) %262, align 4, !dbg !43
  %279 = load float, ptr addrspace(3) %266, align 4, !dbg !43
  %280 = load float, ptr addrspace(3) %270, align 4, !dbg !43
  %281 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !26
  %282 = insertelement <2 x i32> %281, i32 %153, i64 1, !dbg !26
  %283 = trunc <2 x i32> %282 to <2 x i16>, !dbg !26
  %284 = bitcast <2 x i16> %283 to <2 x half>, !dbg !26
  %285 = fpext <2 x half> %284 to <2 x float>, !dbg !44
  %286 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !31
  %287 = insertelement <2 x i32> %286, i32 %169, i64 1, !dbg !31
  %288 = trunc <2 x i32> %287 to <2 x i16>, !dbg !31
  %289 = bitcast <2 x i16> %288 to <2 x half>, !dbg !31
  %290 = fpext <2 x half> %289 to <2 x float>, !dbg !45
  %291 = insertelement <2 x float> poison, float %243, i64 0, !dbg !42
  %292 = insertelement <2 x float> %291, float %273, i64 1, !dbg !42
  %293 = fadd <2 x float> %292, %285, !dbg !42
  %294 = fmul <2 x float> %290, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %295 = fadd <2 x float> %294, %293, !dbg !47
  %296 = lshr <2 x i32> %282, <i32 16, i32 16>, !dbg !26
  %297 = trunc <2 x i32> %296 to <2 x i16>, !dbg !26
  %298 = bitcast <2 x i16> %297 to <2 x half>, !dbg !26
  %299 = fpext <2 x half> %298 to <2 x float>, !dbg !44
  %300 = lshr <2 x i32> %287, <i32 16, i32 16>, !dbg !31
  %301 = trunc <2 x i32> %300 to <2 x i16>, !dbg !31
  %302 = bitcast <2 x i16> %301 to <2 x half>, !dbg !31
  %303 = fpext <2 x half> %302 to <2 x float>, !dbg !45
  %304 = insertelement <2 x float> poison, float %247, i64 0, !dbg !42
  %305 = insertelement <2 x float> %304, float %274, i64 1, !dbg !42
  %306 = fadd <2 x float> %305, %299, !dbg !42
  %307 = fmul <2 x float> %303, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %308 = fadd <2 x float> %307, %306, !dbg !47
  %309 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !26
  %310 = insertelement <2 x i32> %309, i32 %154, i64 1, !dbg !26
  %311 = trunc <2 x i32> %310 to <2 x i16>, !dbg !26
  %312 = bitcast <2 x i16> %311 to <2 x half>, !dbg !26
  %313 = fpext <2 x half> %312 to <2 x float>, !dbg !44
  %314 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !31
  %315 = insertelement <2 x i32> %314, i32 %170, i64 1, !dbg !31
  %316 = trunc <2 x i32> %315 to <2 x i16>, !dbg !31
  %317 = bitcast <2 x i16> %316 to <2 x half>, !dbg !31
  %318 = fpext <2 x half> %317 to <2 x float>, !dbg !45
  %319 = insertelement <2 x float> poison, float %251, i64 0, !dbg !42
  %320 = insertelement <2 x float> %319, float %275, i64 1, !dbg !42
  %321 = fadd <2 x float> %320, %313, !dbg !42
  %322 = fmul <2 x float> %318, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %323 = fadd <2 x float> %322, %321, !dbg !47
  %324 = lshr <2 x i32> %310, <i32 16, i32 16>, !dbg !26
  %325 = trunc <2 x i32> %324 to <2 x i16>, !dbg !26
  %326 = bitcast <2 x i16> %325 to <2 x half>, !dbg !26
  %327 = fpext <2 x half> %326 to <2 x float>, !dbg !44
  %328 = lshr <2 x i32> %315, <i32 16, i32 16>, !dbg !31
  %329 = trunc <2 x i32> %328 to <2 x i16>, !dbg !31
  %330 = bitcast <2 x i16> %329 to <2 x half>, !dbg !31
  %331 = fpext <2 x half> %330 to <2 x float>, !dbg !45
  %332 = insertelement <2 x float> poison, float %255, i64 0, !dbg !42
  %333 = insertelement <2 x float> %332, float %276, i64 1, !dbg !42
  %334 = fadd <2 x float> %333, %327, !dbg !42
  %335 = fmul <2 x float> %331, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %336 = fadd <2 x float> %335, %334, !dbg !47
  %337 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !26
  %338 = insertelement <2 x i32> %337, i32 %155, i64 1, !dbg !26
  %339 = trunc <2 x i32> %338 to <2 x i16>, !dbg !26
  %340 = bitcast <2 x i16> %339 to <2 x half>, !dbg !26
  %341 = fpext <2 x half> %340 to <2 x float>, !dbg !44
  %342 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !31
  %343 = insertelement <2 x i32> %342, i32 %171, i64 1, !dbg !31
  %344 = trunc <2 x i32> %343 to <2 x i16>, !dbg !31
  %345 = bitcast <2 x i16> %344 to <2 x half>, !dbg !31
  %346 = fpext <2 x half> %345 to <2 x float>, !dbg !45
  %347 = insertelement <2 x float> poison, float %259, i64 0, !dbg !42
  %348 = insertelement <2 x float> %347, float %277, i64 1, !dbg !42
  %349 = fadd <2 x float> %348, %341, !dbg !42
  %350 = fmul <2 x float> %346, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %351 = fadd <2 x float> %350, %349, !dbg !47
  %352 = lshr <2 x i32> %338, <i32 16, i32 16>, !dbg !26
  %353 = trunc <2 x i32> %352 to <2 x i16>, !dbg !26
  %354 = bitcast <2 x i16> %353 to <2 x half>, !dbg !26
  %355 = fpext <2 x half> %354 to <2 x float>, !dbg !44
  %356 = lshr <2 x i32> %343, <i32 16, i32 16>, !dbg !31
  %357 = trunc <2 x i32> %356 to <2 x i16>, !dbg !31
  %358 = bitcast <2 x i16> %357 to <2 x half>, !dbg !31
  %359 = fpext <2 x half> %358 to <2 x float>, !dbg !45
  %360 = insertelement <2 x float> poison, float %263, i64 0, !dbg !42
  %361 = insertelement <2 x float> %360, float %278, i64 1, !dbg !42
  %362 = fadd <2 x float> %361, %355, !dbg !42
  %363 = fmul <2 x float> %359, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %364 = fadd <2 x float> %363, %362, !dbg !47
  %365 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !26
  %366 = insertelement <2 x i32> %365, i32 %156, i64 1, !dbg !26
  %367 = trunc <2 x i32> %366 to <2 x i16>, !dbg !26
  %368 = bitcast <2 x i16> %367 to <2 x half>, !dbg !26
  %369 = fpext <2 x half> %368 to <2 x float>, !dbg !44
  %370 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !31
  %371 = insertelement <2 x i32> %370, i32 %172, i64 1, !dbg !31
  %372 = trunc <2 x i32> %371 to <2 x i16>, !dbg !31
  %373 = bitcast <2 x i16> %372 to <2 x half>, !dbg !31
  %374 = fpext <2 x half> %373 to <2 x float>, !dbg !45
  %375 = insertelement <2 x float> poison, float %267, i64 0, !dbg !42
  %376 = insertelement <2 x float> %375, float %279, i64 1, !dbg !42
  %377 = fadd <2 x float> %376, %369, !dbg !42
  %378 = fmul <2 x float> %374, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %379 = fadd <2 x float> %378, %377, !dbg !47
  %380 = lshr <2 x i32> %366, <i32 16, i32 16>, !dbg !26
  %381 = trunc <2 x i32> %380 to <2 x i16>, !dbg !26
  %382 = bitcast <2 x i16> %381 to <2 x half>, !dbg !26
  %383 = fpext <2 x half> %382 to <2 x float>, !dbg !44
  %384 = lshr <2 x i32> %371, <i32 16, i32 16>, !dbg !31
  %385 = trunc <2 x i32> %384 to <2 x i16>, !dbg !31
  %386 = bitcast <2 x i16> %385 to <2 x half>, !dbg !31
  %387 = fpext <2 x half> %386 to <2 x float>, !dbg !45
  %388 = insertelement <2 x float> poison, float %271, i64 0, !dbg !42
  %389 = insertelement <2 x float> %388, float %280, i64 1, !dbg !42
  %390 = fadd <2 x float> %389, %383, !dbg !42
  %391 = fmul <2 x float> %387, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %392 = fadd <2 x float> %391, %390, !dbg !47
  %393 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !26
  %394 = insertelement <2 x i32> %393, i32 %158, i64 1, !dbg !26
  %395 = trunc <2 x i32> %394 to <2 x i16>, !dbg !26
  %396 = bitcast <2 x i16> %395 to <2 x half>, !dbg !26
  %397 = fpext <2 x half> %396 to <2 x float>, !dbg !44
  %398 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !31
  %399 = insertelement <2 x i32> %398, i32 %174, i64 1, !dbg !31
  %400 = trunc <2 x i32> %399 to <2 x i16>, !dbg !31
  %401 = bitcast <2 x i16> %400 to <2 x half>, !dbg !31
  %402 = fpext <2 x half> %401 to <2 x float>, !dbg !45
  %403 = fadd <2 x float> %292, %397, !dbg !42
  %404 = fmul <2 x float> %402, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %405 = fadd <2 x float> %404, %403, !dbg !47
  %406 = lshr <2 x i32> %394, <i32 16, i32 16>, !dbg !26
  %407 = trunc <2 x i32> %406 to <2 x i16>, !dbg !26
  %408 = bitcast <2 x i16> %407 to <2 x half>, !dbg !26
  %409 = fpext <2 x half> %408 to <2 x float>, !dbg !44
  %410 = lshr <2 x i32> %399, <i32 16, i32 16>, !dbg !31
  %411 = trunc <2 x i32> %410 to <2 x i16>, !dbg !31
  %412 = bitcast <2 x i16> %411 to <2 x half>, !dbg !31
  %413 = fpext <2 x half> %412 to <2 x float>, !dbg !45
  %414 = fadd <2 x float> %305, %409, !dbg !42
  %415 = fmul <2 x float> %413, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %416 = fadd <2 x float> %415, %414, !dbg !47
  %417 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !26
  %418 = insertelement <2 x i32> %417, i32 %159, i64 1, !dbg !26
  %419 = trunc <2 x i32> %418 to <2 x i16>, !dbg !26
  %420 = bitcast <2 x i16> %419 to <2 x half>, !dbg !26
  %421 = fpext <2 x half> %420 to <2 x float>, !dbg !44
  %422 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !31
  %423 = insertelement <2 x i32> %422, i32 %175, i64 1, !dbg !31
  %424 = trunc <2 x i32> %423 to <2 x i16>, !dbg !31
  %425 = bitcast <2 x i16> %424 to <2 x half>, !dbg !31
  %426 = fpext <2 x half> %425 to <2 x float>, !dbg !45
  %427 = fadd <2 x float> %320, %421, !dbg !42
  %428 = fmul <2 x float> %426, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %429 = fadd <2 x float> %428, %427, !dbg !47
  %430 = lshr <2 x i32> %418, <i32 16, i32 16>, !dbg !26
  %431 = trunc <2 x i32> %430 to <2 x i16>, !dbg !26
  %432 = bitcast <2 x i16> %431 to <2 x half>, !dbg !26
  %433 = fpext <2 x half> %432 to <2 x float>, !dbg !44
  %434 = lshr <2 x i32> %423, <i32 16, i32 16>, !dbg !31
  %435 = trunc <2 x i32> %434 to <2 x i16>, !dbg !31
  %436 = bitcast <2 x i16> %435 to <2 x half>, !dbg !31
  %437 = fpext <2 x half> %436 to <2 x float>, !dbg !45
  %438 = fadd <2 x float> %333, %433, !dbg !42
  %439 = fmul <2 x float> %437, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %440 = fadd <2 x float> %439, %438, !dbg !47
  %441 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !26
  %442 = insertelement <2 x i32> %441, i32 %160, i64 1, !dbg !26
  %443 = trunc <2 x i32> %442 to <2 x i16>, !dbg !26
  %444 = bitcast <2 x i16> %443 to <2 x half>, !dbg !26
  %445 = fpext <2 x half> %444 to <2 x float>, !dbg !44
  %446 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !31
  %447 = insertelement <2 x i32> %446, i32 %176, i64 1, !dbg !31
  %448 = trunc <2 x i32> %447 to <2 x i16>, !dbg !31
  %449 = bitcast <2 x i16> %448 to <2 x half>, !dbg !31
  %450 = fpext <2 x half> %449 to <2 x float>, !dbg !45
  %451 = fadd <2 x float> %348, %445, !dbg !42
  %452 = fmul <2 x float> %450, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %453 = fadd <2 x float> %452, %451, !dbg !47
  %454 = lshr <2 x i32> %442, <i32 16, i32 16>, !dbg !26
  %455 = trunc <2 x i32> %454 to <2 x i16>, !dbg !26
  %456 = bitcast <2 x i16> %455 to <2 x half>, !dbg !26
  %457 = fpext <2 x half> %456 to <2 x float>, !dbg !44
  %458 = lshr <2 x i32> %447, <i32 16, i32 16>, !dbg !31
  %459 = trunc <2 x i32> %458 to <2 x i16>, !dbg !31
  %460 = bitcast <2 x i16> %459 to <2 x half>, !dbg !31
  %461 = fpext <2 x half> %460 to <2 x float>, !dbg !45
  %462 = fadd <2 x float> %361, %457, !dbg !42
  %463 = fmul <2 x float> %461, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %464 = fadd <2 x float> %463, %462, !dbg !47
  %465 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !26
  %466 = insertelement <2 x i32> %465, i32 %161, i64 1, !dbg !26
  %467 = trunc <2 x i32> %466 to <2 x i16>, !dbg !26
  %468 = bitcast <2 x i16> %467 to <2 x half>, !dbg !26
  %469 = fpext <2 x half> %468 to <2 x float>, !dbg !44
  %470 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !31
  %471 = insertelement <2 x i32> %470, i32 %177, i64 1, !dbg !31
  %472 = trunc <2 x i32> %471 to <2 x i16>, !dbg !31
  %473 = bitcast <2 x i16> %472 to <2 x half>, !dbg !31
  %474 = fpext <2 x half> %473 to <2 x float>, !dbg !45
  %475 = fadd <2 x float> %376, %469, !dbg !42
  %476 = fmul <2 x float> %474, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %477 = fadd <2 x float> %476, %475, !dbg !47
  %478 = lshr <2 x i32> %466, <i32 16, i32 16>, !dbg !26
  %479 = trunc <2 x i32> %478 to <2 x i16>, !dbg !26
  %480 = bitcast <2 x i16> %479 to <2 x half>, !dbg !26
  %481 = fpext <2 x half> %480 to <2 x float>, !dbg !44
  %482 = lshr <2 x i32> %471, <i32 16, i32 16>, !dbg !31
  %483 = trunc <2 x i32> %482 to <2 x i16>, !dbg !31
  %484 = bitcast <2 x i16> %483 to <2 x half>, !dbg !31
  %485 = fpext <2 x half> %484 to <2 x float>, !dbg !45
  %486 = fadd <2 x float> %389, %481, !dbg !42
  %487 = fmul <2 x float> %485, <float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %488 = fadd <2 x float> %487, %486, !dbg !47
  %489 = extractelement <2 x float> %295, i64 1, !dbg !48
  %490 = fadd float %489, %222, !dbg !48
  %491 = extractelement <2 x float> %308, i64 1, !dbg !48
  %492 = fadd float %491, %223, !dbg !48
  %493 = extractelement <2 x float> %323, i64 1, !dbg !48
  %494 = fadd float %493, %224, !dbg !48
  %495 = extractelement <2 x float> %336, i64 1, !dbg !48
  %496 = fadd float %495, %225, !dbg !48
  %497 = extractelement <2 x float> %351, i64 1, !dbg !48
  %498 = fadd float %497, %226, !dbg !48
  %499 = extractelement <2 x float> %364, i64 1, !dbg !48
  %500 = fadd float %499, %227, !dbg !48
  %501 = extractelement <2 x float> %379, i64 1, !dbg !48
  %502 = fadd float %501, %228, !dbg !48
  %503 = extractelement <2 x float> %392, i64 1, !dbg !48
  %504 = fadd float %503, %229, !dbg !48
  %505 = extractelement <2 x float> %405, i64 1, !dbg !48
  %506 = fadd float %505, %230, !dbg !48
  %507 = extractelement <2 x float> %416, i64 1, !dbg !48
  %508 = fadd float %507, %231, !dbg !48
  %509 = extractelement <2 x float> %429, i64 1, !dbg !48
  %510 = fadd float %509, %232, !dbg !48
  %511 = extractelement <2 x float> %440, i64 1, !dbg !48
  %512 = fadd float %511, %233, !dbg !48
  %513 = extractelement <2 x float> %453, i64 1, !dbg !48
  %514 = fadd float %513, %234, !dbg !48
  %515 = extractelement <2 x float> %464, i64 1, !dbg !48
  %516 = fadd float %515, %235, !dbg !48
  %517 = extractelement <2 x float> %477, i64 1, !dbg !48
  %518 = fadd float %517, %236, !dbg !48
  %519 = extractelement <2 x float> %488, i64 1, !dbg !48
  %520 = fadd float %519, %237, !dbg !48
  %521 = extractelement <2 x float> %295, i64 0, !dbg !49
  %522 = fadd float %521, %490, !dbg !49
  %523 = extractelement <2 x float> %308, i64 0, !dbg !49
  %524 = fadd float %523, %492, !dbg !49
  %525 = extractelement <2 x float> %323, i64 0, !dbg !49
  %526 = fadd float %525, %494, !dbg !49
  %527 = extractelement <2 x float> %336, i64 0, !dbg !49
  %528 = fadd float %527, %496, !dbg !49
  %529 = extractelement <2 x float> %351, i64 0, !dbg !49
  %530 = fadd float %529, %498, !dbg !49
  %531 = extractelement <2 x float> %364, i64 0, !dbg !49
  %532 = fadd float %531, %500, !dbg !49
  %533 = extractelement <2 x float> %379, i64 0, !dbg !49
  %534 = fadd float %533, %502, !dbg !49
  %535 = extractelement <2 x float> %392, i64 0, !dbg !49
  %536 = fadd float %535, %504, !dbg !49
  %537 = extractelement <2 x float> %405, i64 0, !dbg !49
  %538 = fadd float %537, %506, !dbg !49
  %539 = extractelement <2 x float> %416, i64 0, !dbg !49
  %540 = fadd float %539, %508, !dbg !49
  %541 = extractelement <2 x float> %429, i64 0, !dbg !49
  %542 = fadd float %541, %510, !dbg !49
  %543 = extractelement <2 x float> %440, i64 0, !dbg !49
  %544 = fadd float %543, %512, !dbg !49
  %545 = extractelement <2 x float> %453, i64 0, !dbg !49
  %546 = fadd float %545, %514, !dbg !49
  %547 = extractelement <2 x float> %464, i64 0, !dbg !49
  %548 = fadd float %547, %516, !dbg !49
  %549 = extractelement <2 x float> %477, i64 0, !dbg !49
  %550 = fadd float %549, %518, !dbg !49
  %551 = extractelement <2 x float> %488, i64 0, !dbg !49
  %552 = fadd float %551, %520, !dbg !49
  %553 = mul i32 %10, %9, !dbg !50
  %554 = mul i32 %553, %62, !dbg !51
  %555 = add i32 %554, %.decomposed, !dbg !52
  %556 = add i32 %554, %.decomposed43, !dbg !52
  %557 = add i32 %.decomposed46, %554, !dbg !52
  %558 = add i32 %.decomposed49, %554, !dbg !52
  %559 = add i32 %.decomposed52, %554, !dbg !52
  %560 = add i32 %.decomposed55, %554, !dbg !52
  %561 = add i32 %.decomposed58, %554, !dbg !52
  %562 = add i32 %.decomposed61, %554, !dbg !52
  %563 = add i32 %.decomposed64, %554, !dbg !52
  %564 = add i32 %.decomposed67, %554, !dbg !52
  %565 = add i32 %.decomposed70, %554, !dbg !52
  %566 = add i32 %.decomposed73, %554, !dbg !52
  %567 = add i32 %.decomposed76, %554, !dbg !52
  %568 = add i32 %.decomposed79, %554, !dbg !52
  %569 = add i32 %.decomposed82, %554, !dbg !52
  %570 = add i32 %.decomposed85, %554, !dbg !52
  %571 = mul i32 %553, 1280, !dbg !53
  %572 = mul i32 %65, %571, !dbg !54
  %573 = mul i32 %67, %571, !dbg !54
  %574 = mul i32 %69, %571, !dbg !54
  %575 = mul i32 %71, %571, !dbg !54
  %576 = mul i32 %73, %571, !dbg !54
  %577 = mul i32 %75, %571, !dbg !54
  %578 = mul i32 %77, %571, !dbg !54
  %579 = mul i32 %79, %571, !dbg !54
  %580 = mul i32 %81, %571, !dbg !54
  %581 = mul i32 %83, %571, !dbg !54
  %582 = mul i32 %85, %571, !dbg !54
  %583 = mul i32 %87, %571, !dbg !54
  %584 = mul i32 %89, %571, !dbg !54
  %585 = mul i32 %91, %571, !dbg !54
  %586 = mul i32 %93, %571, !dbg !54
  %587 = mul i32 %95, %571, !dbg !54
  %588 = add i32 %555, %572, !dbg !55
  %589 = add i32 %556, %573, !dbg !55
  %590 = add i32 %557, %574, !dbg !55
  %591 = add i32 %558, %575, !dbg !55
  %592 = add i32 %559, %576, !dbg !55
  %593 = add i32 %560, %577, !dbg !55
  %594 = add i32 %561, %578, !dbg !55
  %595 = add i32 %562, %579, !dbg !55
  %596 = add i32 %563, %580, !dbg !55
  %597 = add i32 %564, %581, !dbg !55
  %598 = add i32 %565, %582, !dbg !55
  %599 = add i32 %566, %583, !dbg !55
  %600 = add i32 %567, %584, !dbg !55
  %601 = add i32 %568, %585, !dbg !55
  %602 = add i32 %569, %586, !dbg !55
  %603 = add i32 %570, %587, !dbg !55
  %604 = sext i32 %588 to i64, !dbg !56
  %605 = getelementptr half, ptr addrspace(1) %7, i64 %604, !dbg !56
  %606 = sext i32 %589 to i64, !dbg !56
  %607 = getelementptr half, ptr addrspace(1) %7, i64 %606, !dbg !56
  %608 = sext i32 %590 to i64, !dbg !56
  %609 = getelementptr half, ptr addrspace(1) %7, i64 %608, !dbg !56
  %610 = sext i32 %591 to i64, !dbg !56
  %611 = getelementptr half, ptr addrspace(1) %7, i64 %610, !dbg !56
  %612 = sext i32 %592 to i64, !dbg !56
  %613 = getelementptr half, ptr addrspace(1) %7, i64 %612, !dbg !56
  %614 = sext i32 %593 to i64, !dbg !56
  %615 = getelementptr half, ptr addrspace(1) %7, i64 %614, !dbg !56
  %616 = sext i32 %594 to i64, !dbg !56
  %617 = getelementptr half, ptr addrspace(1) %7, i64 %616, !dbg !56
  %618 = sext i32 %595 to i64, !dbg !56
  %619 = getelementptr half, ptr addrspace(1) %7, i64 %618, !dbg !56
  %620 = sext i32 %596 to i64, !dbg !56
  %621 = getelementptr half, ptr addrspace(1) %7, i64 %620, !dbg !56
  %622 = sext i32 %597 to i64, !dbg !56
  %623 = getelementptr half, ptr addrspace(1) %7, i64 %622, !dbg !56
  %624 = sext i32 %598 to i64, !dbg !56
  %625 = getelementptr half, ptr addrspace(1) %7, i64 %624, !dbg !56
  %626 = sext i32 %599 to i64, !dbg !56
  %627 = getelementptr half, ptr addrspace(1) %7, i64 %626, !dbg !56
  %628 = sext i32 %600 to i64, !dbg !56
  %629 = getelementptr half, ptr addrspace(1) %7, i64 %628, !dbg !56
  %630 = sext i32 %601 to i64, !dbg !56
  %631 = getelementptr half, ptr addrspace(1) %7, i64 %630, !dbg !56
  %632 = sext i32 %602 to i64, !dbg !56
  %633 = getelementptr half, ptr addrspace(1) %7, i64 %632, !dbg !56
  %634 = sext i32 %603 to i64, !dbg !56
  %635 = getelementptr half, ptr addrspace(1) %7, i64 %634, !dbg !56
  %636 = fptrunc float %522 to half, !dbg !57
  %637 = fptrunc float %524 to half, !dbg !57
  %638 = fptrunc float %526 to half, !dbg !57
  %639 = fptrunc float %528 to half, !dbg !57
  %640 = fptrunc float %530 to half, !dbg !57
  %641 = fptrunc float %532 to half, !dbg !57
  %642 = fptrunc float %534 to half, !dbg !57
  %643 = fptrunc float %536 to half, !dbg !57
  %644 = fptrunc float %538 to half, !dbg !57
  %645 = fptrunc float %540 to half, !dbg !57
  %646 = fptrunc float %542 to half, !dbg !57
  %647 = fptrunc float %544 to half, !dbg !57
  %648 = fptrunc float %546 to half, !dbg !57
  %649 = fptrunc float %548 to half, !dbg !57
  %650 = fptrunc float %550 to half, !dbg !57
  %651 = fptrunc float %552 to half, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %652 = mul nuw nsw i32 %16, 257, !dbg !57
  %653 = add nuw nsw i32 %652, %18, !dbg !57
  %654 = zext nneg i32 %653 to i64, !dbg !57
  %655 = getelementptr half, ptr addrspace(3) @global_smem, i64 %654, !dbg !57
  %656 = insertelement <1 x half> undef, half %636, i64 0, !dbg !57
  store <1 x half> %656, ptr addrspace(3) %655, align 2, !dbg !57
  %657 = add nuw nsw i32 %652, %244, !dbg !57
  %658 = zext nneg i32 %657 to i64, !dbg !57
  %659 = getelementptr half, ptr addrspace(3) @global_smem, i64 %658, !dbg !57
  %660 = insertelement <1 x half> undef, half %637, i64 0, !dbg !57
  store <1 x half> %660, ptr addrspace(3) %659, align 2, !dbg !57
  %661 = add nuw nsw i32 %652, %248, !dbg !57
  %662 = zext nneg i32 %661 to i64, !dbg !57
  %663 = getelementptr half, ptr addrspace(3) @global_smem, i64 %662, !dbg !57
  %664 = insertelement <1 x half> undef, half %638, i64 0, !dbg !57
  store <1 x half> %664, ptr addrspace(3) %663, align 2, !dbg !57
  %665 = add nuw nsw i32 %652, %252, !dbg !57
  %666 = zext nneg i32 %665 to i64, !dbg !57
  %667 = getelementptr half, ptr addrspace(3) @global_smem, i64 %666, !dbg !57
  %668 = insertelement <1 x half> undef, half %639, i64 0, !dbg !57
  store <1 x half> %668, ptr addrspace(3) %667, align 2, !dbg !57
  %669 = add nuw nsw i32 %652, %256, !dbg !57
  %670 = zext nneg i32 %669 to i64, !dbg !57
  %671 = getelementptr half, ptr addrspace(3) @global_smem, i64 %670, !dbg !57
  %672 = insertelement <1 x half> undef, half %640, i64 0, !dbg !57
  store <1 x half> %672, ptr addrspace(3) %671, align 2, !dbg !57
  %673 = add nuw nsw i32 %652, %260, !dbg !57
  %674 = zext nneg i32 %673 to i64, !dbg !57
  %675 = getelementptr half, ptr addrspace(3) @global_smem, i64 %674, !dbg !57
  %676 = insertelement <1 x half> undef, half %641, i64 0, !dbg !57
  store <1 x half> %676, ptr addrspace(3) %675, align 2, !dbg !57
  %677 = add nuw nsw i32 %652, %264, !dbg !57
  %678 = zext nneg i32 %677 to i64, !dbg !57
  %679 = getelementptr half, ptr addrspace(3) @global_smem, i64 %678, !dbg !57
  %680 = insertelement <1 x half> undef, half %642, i64 0, !dbg !57
  store <1 x half> %680, ptr addrspace(3) %679, align 2, !dbg !57
  %681 = add nuw nsw i32 %652, %268, !dbg !57
  %682 = zext nneg i32 %681 to i64, !dbg !57
  %683 = getelementptr half, ptr addrspace(3) @global_smem, i64 %682, !dbg !57
  %684 = insertelement <1 x half> undef, half %643, i64 0, !dbg !57
  store <1 x half> %684, ptr addrspace(3) %683, align 2, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %685 = getelementptr half, ptr addrspace(3) @global_smem, i64 %238, !dbg !57
  %686 = load i16, ptr addrspace(3) %685, align 2, !dbg !57
  %687 = add nuw nsw i32 %urem, 257, !dbg !57
  %688 = zext nneg i32 %687 to i64, !dbg !57
  %689 = getelementptr half, ptr addrspace(3) @global_smem, i64 %688, !dbg !57
  %690 = load i16, ptr addrspace(3) %689, align 2, !dbg !57
  %691 = add nuw nsw i32 %urem, 514, !dbg !57
  %692 = zext nneg i32 %691 to i64, !dbg !57
  %693 = getelementptr half, ptr addrspace(3) @global_smem, i64 %692, !dbg !57
  %694 = load i16, ptr addrspace(3) %693, align 2, !dbg !57
  %695 = add nuw nsw i32 %urem, 771, !dbg !57
  %696 = zext nneg i32 %695 to i64, !dbg !57
  %697 = getelementptr half, ptr addrspace(3) @global_smem, i64 %696, !dbg !57
  %698 = load i16, ptr addrspace(3) %697, align 2, !dbg !57
  %699 = add nuw nsw i32 %urem, 1028, !dbg !57
  %700 = zext nneg i32 %699 to i64, !dbg !57
  %701 = getelementptr half, ptr addrspace(3) @global_smem, i64 %700, !dbg !57
  %702 = load i16, ptr addrspace(3) %701, align 2, !dbg !57
  %703 = add nuw nsw i32 %urem, 1285, !dbg !57
  %704 = zext nneg i32 %703 to i64, !dbg !57
  %705 = getelementptr half, ptr addrspace(3) @global_smem, i64 %704, !dbg !57
  %706 = load i16, ptr addrspace(3) %705, align 2, !dbg !57
  %707 = add nuw nsw i32 %urem, 1542, !dbg !57
  %708 = zext nneg i32 %707 to i64, !dbg !57
  %709 = getelementptr half, ptr addrspace(3) @global_smem, i64 %708, !dbg !57
  %710 = load i16, ptr addrspace(3) %709, align 2, !dbg !57
  %711 = add nuw nsw i32 %urem, 1799, !dbg !57
  %712 = zext nneg i32 %711 to i64, !dbg !57
  %713 = getelementptr half, ptr addrspace(3) @global_smem, i64 %712, !dbg !57
  %714 = load i16, ptr addrspace(3) %713, align 2, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %715 = insertelement <1 x half> undef, half %644, i64 0, !dbg !57
  store <1 x half> %715, ptr addrspace(3) %655, align 2, !dbg !57
  %716 = insertelement <1 x half> undef, half %645, i64 0, !dbg !57
  store <1 x half> %716, ptr addrspace(3) %659, align 2, !dbg !57
  %717 = insertelement <1 x half> undef, half %646, i64 0, !dbg !57
  store <1 x half> %717, ptr addrspace(3) %663, align 2, !dbg !57
  %718 = insertelement <1 x half> undef, half %647, i64 0, !dbg !57
  store <1 x half> %718, ptr addrspace(3) %667, align 2, !dbg !57
  %719 = insertelement <1 x half> undef, half %648, i64 0, !dbg !57
  store <1 x half> %719, ptr addrspace(3) %671, align 2, !dbg !57
  %720 = insertelement <1 x half> undef, half %649, i64 0, !dbg !57
  store <1 x half> %720, ptr addrspace(3) %675, align 2, !dbg !57
  %721 = insertelement <1 x half> undef, half %650, i64 0, !dbg !57
  store <1 x half> %721, ptr addrspace(3) %679, align 2, !dbg !57
  %722 = insertelement <1 x half> undef, half %651, i64 0, !dbg !57
  store <1 x half> %722, ptr addrspace(3) %683, align 2, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %723 = load i16, ptr addrspace(3) %685, align 2, !dbg !57
  %724 = load i16, ptr addrspace(3) %689, align 2, !dbg !57
  %725 = load i16, ptr addrspace(3) %693, align 2, !dbg !57
  %726 = load i16, ptr addrspace(3) %697, align 2, !dbg !57
  %727 = load i16, ptr addrspace(3) %701, align 2, !dbg !57
  %728 = load i16, ptr addrspace(3) %705, align 2, !dbg !57
  %729 = load i16, ptr addrspace(3) %709, align 2, !dbg !57
  %730 = load i16, ptr addrspace(3) %713, align 2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %686, ptr addrspace(1) %605, i1 %107) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %690, ptr addrspace(1) %607, i1 %108) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %694, ptr addrspace(1) %609, i1 %109) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %698, ptr addrspace(1) %611, i1 %110) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %702, ptr addrspace(1) %613, i1 %111) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %706, ptr addrspace(1) %615, i1 %112) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %710, ptr addrspace(1) %617, i1 %113) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %714, ptr addrspace(1) %619, i1 %114) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %723, ptr addrspace(1) %621, i1 %115) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %623, i1 %116) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %725, ptr addrspace(1) %625, i1 %117) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %726, ptr addrspace(1) %627, i1 %118) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %727, ptr addrspace(1) %629, i1 %119) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %728, ptr addrspace(1) %631, i1 %120) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %729, ptr addrspace(1) %633, i1 %121) #2, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %730, ptr addrspace(1) %635, i1 %122) #2, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c7srkcchb2nxsgdvte2bkgvu6npyw245ceu5jo4nokeaspccdfhh.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/7s")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89101112de", linkageName: "triton__0d1d2d3d4d5d6d7d89101112de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 32, column: 41, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 55, scope: !5)
!26 = !DILocation(line: 32, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 30, scope: !5)
!28 = !DILocation(line: 33, column: 35, scope: !5)
!29 = !DILocation(line: 33, column: 75, scope: !5)
!30 = !DILocation(line: 34, column: 30, scope: !5)
!31 = !DILocation(line: 34, column: 47, scope: !5)
!32 = !DILocation(line: 35, column: 30, scope: !5)
!33 = !DILocation(line: 35, column: 47, scope: !5)
!34 = !DILocation(line: 36, column: 30, scope: !5)
!35 = !DILocation(line: 36, column: 35, scope: !5)
!36 = !DILocation(line: 36, column: 75, scope: !5)
!37 = !DILocation(line: 37, column: 31, scope: !5)
!38 = !DILocation(line: 37, column: 48, scope: !5)
!39 = !DILocation(line: 38, column: 31, scope: !5)
!40 = !DILocation(line: 38, column: 48, scope: !5)
!41 = !DILocation(line: 38, column: 96, scope: !5)
!42 = !DILocation(line: 39, column: 18, scope: !5)
!43 = !DILocation(line: 43, column: 18, scope: !5)
!44 = !DILocation(line: 32, column: 95, scope: !5)
!45 = !DILocation(line: 34, column: 95, scope: !5)
!46 = !DILocation(line: 41, column: 18, scope: !5)
!47 = !DILocation(line: 42, column: 18, scope: !5)
!48 = !DILocation(line: 48, column: 20, scope: !5)
!49 = !DILocation(line: 49, column: 19, scope: !5)
!50 = !DILocation(line: 50, column: 35, scope: !5)
!51 = !DILocation(line: 50, column: 39, scope: !5)
!52 = !DILocation(line: 50, column: 31, scope: !5)
!53 = !DILocation(line: 50, column: 55, scope: !5)
!54 = !DILocation(line: 50, column: 59, scope: !5)
!55 = !DILocation(line: 50, column: 46, scope: !5)
!56 = !DILocation(line: 50, column: 25, scope: !5)
!57 = !DILocation(line: 50, column: 72, scope: !5)
!58 = !DILocation(line: 50, column: 4, scope: !5)
