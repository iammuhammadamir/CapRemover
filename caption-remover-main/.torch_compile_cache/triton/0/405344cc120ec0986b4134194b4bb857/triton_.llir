; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d89101112de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %15 = and i32 %14, 127, !dbg !8
  %16 = shl nuw nsw i32 %15, 3, !dbg !8
  %17 = or i32 %15, 128, !dbg !8
  %18 = or i32 %15, 256, !dbg !8
  %19 = or i32 %15, 384, !dbg !8
  %20 = or i32 %15, 512, !dbg !8
  %21 = or i32 %15, 640, !dbg !8
  %22 = or i32 %15, 768, !dbg !8
  %23 = or i32 %15, 896, !dbg !8
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %26 = add i32 %25, 1, !dbg !11
  %27 = mul i32 %26, %24, !dbg !12
  %28 = icmp slt i32 %27, %11, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = shl i32 %29, 10, !dbg !15
  %31 = or i32 %30, %16, !dbg !16
  %32 = or i32 %30, %15, !dbg !16
  %33 = or i32 %30, %17, !dbg !16
  %34 = or i32 %30, %18, !dbg !16
  %35 = or i32 %30, %19, !dbg !16
  %36 = or i32 %30, %20, !dbg !16
  %37 = or i32 %30, %21, !dbg !16
  %38 = or i32 %30, %22, !dbg !16
  %39 = or i32 %30, %23, !dbg !16
  %40 = icmp slt i32 %31, 1280, !dbg !17
  %41 = icmp slt i32 %32, 1280, !dbg !17
  %42 = icmp slt i32 %33, 1280, !dbg !17
  %43 = icmp slt i32 %34, 1280, !dbg !17
  %44 = icmp slt i32 %35, 1280, !dbg !17
  %45 = icmp slt i32 %36, 1280, !dbg !17
  %46 = icmp slt i32 %37, 1280, !dbg !17
  %47 = icmp slt i32 %38, 1280, !dbg !17
  %48 = icmp slt i32 %39, 1280, !dbg !17
  %.frozen = freeze i32 %27
  %.frozen28 = freeze i32 %8
  %49 = sdiv i32 %.frozen, %.frozen28, !dbg !18
  %50 = mul i32 %49, %.frozen28
  %.decomposed = sub i32 %.frozen, %50
  %51 = mul i32 %27, 1280, !dbg !19
  %52 = add i32 %31, %51, !dbg !20
  %53 = sext i32 %52 to i64, !dbg !21
  %54 = getelementptr half, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = and i1 %28, %40, !dbg !22
  %56 = and i1 %28, %41, !dbg !22
  %57 = and i1 %28, %42, !dbg !22
  %58 = and i1 %28, %43, !dbg !22
  %59 = and i1 %28, %44, !dbg !22
  %60 = and i1 %28, %45, !dbg !22
  %61 = and i1 %28, %46, !dbg !22
  %62 = and i1 %28, %47, !dbg !22
  %63 = and i1 %28, %48, !dbg !22
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %55) #2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !23
  %69 = sext i32 %31 to i64, !dbg !24
  %70 = getelementptr half, ptr addrspace(1) %1, i64 %69, !dbg !24
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %40) #2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !25
  %76 = getelementptr half, ptr addrspace(1) %2, i64 %53, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %55) #2, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !27
  %82 = getelementptr half, ptr addrspace(1) %3, i64 %53, !dbg !28
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %55) #2, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !29
  %88 = getelementptr half, ptr addrspace(1) %4, i64 %69, !dbg !30
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %40) #2, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !31
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !31
  %94 = getelementptr half, ptr addrspace(1) %5, i64 %53, !dbg !32
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %55) #2, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !33
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !33
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !33
  %100 = getelementptr half, ptr addrspace(1) %6, i64 %53, !dbg !34
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %55) #2, !dbg !35
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !35
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !35
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !35
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !35
  %106 = trunc i32 %102 to i16, !dbg !35
  %107 = bitcast i16 %106 to half, !dbg !35
  %extelt.offset24 = lshr i32 %102, 16, !dbg !35
  %108 = trunc i32 %extelt.offset24 to i16, !dbg !35
  %109 = bitcast i16 %108 to half, !dbg !35
  %110 = trunc i32 %103 to i16, !dbg !35
  %111 = bitcast i16 %110 to half, !dbg !35
  %extelt.offset25 = lshr i32 %103, 16, !dbg !35
  %112 = trunc i32 %extelt.offset25 to i16, !dbg !35
  %113 = bitcast i16 %112 to half, !dbg !35
  %114 = trunc i32 %104 to i16, !dbg !35
  %115 = bitcast i16 %114 to half, !dbg !35
  %extelt.offset26 = lshr i32 %104, 16, !dbg !35
  %116 = trunc i32 %extelt.offset26 to i16, !dbg !35
  %117 = bitcast i16 %116 to half, !dbg !35
  %118 = trunc i32 %105 to i16, !dbg !35
  %119 = bitcast i16 %118 to half, !dbg !35
  %extelt.offset27 = lshr i32 %105, 16, !dbg !35
  %120 = trunc i32 %extelt.offset27 to i16, !dbg !35
  %121 = bitcast i16 %120 to half, !dbg !35
  %122 = fpext half %107 to float, !dbg !36
  %123 = fpext half %109 to float, !dbg !36
  %124 = fpext half %111 to float, !dbg !36
  %125 = fpext half %113 to float, !dbg !36
  %126 = fpext half %115 to float, !dbg !36
  %127 = fpext half %117 to float, !dbg !36
  %128 = fpext half %119 to float, !dbg !36
  %129 = fpext half %121 to float, !dbg !36
  %130 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !23
  %131 = insertelement <2 x i32> %130, i32 %84, i64 1, !dbg !23
  %132 = trunc <2 x i32> %131 to <2 x i16>, !dbg !23
  %133 = bitcast <2 x i16> %132 to <2 x half>, !dbg !23
  %134 = fpext <2 x half> %133 to <2 x float>, !dbg !37
  %135 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !25
  %136 = insertelement <2 x i32> %135, i32 %90, i64 1, !dbg !25
  %137 = trunc <2 x i32> %136 to <2 x i16>, !dbg !25
  %138 = bitcast <2 x i16> %137 to <2 x half>, !dbg !25
  %139 = fpext <2 x half> %138 to <2 x float>, !dbg !38
  %140 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !27
  %141 = insertelement <2 x i32> %140, i32 %96, i64 1, !dbg !27
  %142 = trunc <2 x i32> %141 to <2 x i16>, !dbg !27
  %143 = bitcast <2 x i16> %142 to <2 x half>, !dbg !27
  %144 = fpext <2 x half> %143 to <2 x float>, !dbg !39
  %145 = fadd <2 x float> %134, %139, !dbg !40
  %146 = fmul <2 x float> %144, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %147 = fadd <2 x float> %145, %146, !dbg !42
  %148 = lshr <2 x i32> %131, <i32 16, i32 16>, !dbg !23
  %149 = trunc <2 x i32> %148 to <2 x i16>, !dbg !23
  %150 = bitcast <2 x i16> %149 to <2 x half>, !dbg !23
  %151 = fpext <2 x half> %150 to <2 x float>, !dbg !37
  %152 = lshr <2 x i32> %136, <i32 16, i32 16>, !dbg !25
  %153 = trunc <2 x i32> %152 to <2 x i16>, !dbg !25
  %154 = bitcast <2 x i16> %153 to <2 x half>, !dbg !25
  %155 = fpext <2 x half> %154 to <2 x float>, !dbg !38
  %156 = lshr <2 x i32> %141, <i32 16, i32 16>, !dbg !27
  %157 = trunc <2 x i32> %156 to <2 x i16>, !dbg !27
  %158 = bitcast <2 x i16> %157 to <2 x half>, !dbg !27
  %159 = fpext <2 x half> %158 to <2 x float>, !dbg !39
  %160 = fadd <2 x float> %151, %155, !dbg !40
  %161 = fmul <2 x float> %159, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %162 = fadd <2 x float> %160, %161, !dbg !42
  %163 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !23
  %164 = insertelement <2 x i32> %163, i32 %85, i64 1, !dbg !23
  %165 = trunc <2 x i32> %164 to <2 x i16>, !dbg !23
  %166 = bitcast <2 x i16> %165 to <2 x half>, !dbg !23
  %167 = fpext <2 x half> %166 to <2 x float>, !dbg !37
  %168 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !25
  %169 = insertelement <2 x i32> %168, i32 %91, i64 1, !dbg !25
  %170 = trunc <2 x i32> %169 to <2 x i16>, !dbg !25
  %171 = bitcast <2 x i16> %170 to <2 x half>, !dbg !25
  %172 = fpext <2 x half> %171 to <2 x float>, !dbg !38
  %173 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !27
  %174 = insertelement <2 x i32> %173, i32 %97, i64 1, !dbg !27
  %175 = trunc <2 x i32> %174 to <2 x i16>, !dbg !27
  %176 = bitcast <2 x i16> %175 to <2 x half>, !dbg !27
  %177 = fpext <2 x half> %176 to <2 x float>, !dbg !39
  %178 = fadd <2 x float> %167, %172, !dbg !40
  %179 = fmul <2 x float> %177, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %180 = fadd <2 x float> %178, %179, !dbg !42
  %181 = lshr <2 x i32> %164, <i32 16, i32 16>, !dbg !23
  %182 = trunc <2 x i32> %181 to <2 x i16>, !dbg !23
  %183 = bitcast <2 x i16> %182 to <2 x half>, !dbg !23
  %184 = fpext <2 x half> %183 to <2 x float>, !dbg !37
  %185 = lshr <2 x i32> %169, <i32 16, i32 16>, !dbg !25
  %186 = trunc <2 x i32> %185 to <2 x i16>, !dbg !25
  %187 = bitcast <2 x i16> %186 to <2 x half>, !dbg !25
  %188 = fpext <2 x half> %187 to <2 x float>, !dbg !38
  %189 = lshr <2 x i32> %174, <i32 16, i32 16>, !dbg !27
  %190 = trunc <2 x i32> %189 to <2 x i16>, !dbg !27
  %191 = bitcast <2 x i16> %190 to <2 x half>, !dbg !27
  %192 = fpext <2 x half> %191 to <2 x float>, !dbg !39
  %193 = fadd <2 x float> %184, %188, !dbg !40
  %194 = fmul <2 x float> %192, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %195 = fadd <2 x float> %193, %194, !dbg !42
  %196 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !23
  %197 = insertelement <2 x i32> %196, i32 %86, i64 1, !dbg !23
  %198 = trunc <2 x i32> %197 to <2 x i16>, !dbg !23
  %199 = bitcast <2 x i16> %198 to <2 x half>, !dbg !23
  %200 = fpext <2 x half> %199 to <2 x float>, !dbg !37
  %201 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !25
  %202 = insertelement <2 x i32> %201, i32 %92, i64 1, !dbg !25
  %203 = trunc <2 x i32> %202 to <2 x i16>, !dbg !25
  %204 = bitcast <2 x i16> %203 to <2 x half>, !dbg !25
  %205 = fpext <2 x half> %204 to <2 x float>, !dbg !38
  %206 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !27
  %207 = insertelement <2 x i32> %206, i32 %98, i64 1, !dbg !27
  %208 = trunc <2 x i32> %207 to <2 x i16>, !dbg !27
  %209 = bitcast <2 x i16> %208 to <2 x half>, !dbg !27
  %210 = fpext <2 x half> %209 to <2 x float>, !dbg !39
  %211 = fadd <2 x float> %200, %205, !dbg !40
  %212 = fmul <2 x float> %210, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %213 = fadd <2 x float> %211, %212, !dbg !42
  %214 = lshr <2 x i32> %197, <i32 16, i32 16>, !dbg !23
  %215 = trunc <2 x i32> %214 to <2 x i16>, !dbg !23
  %216 = bitcast <2 x i16> %215 to <2 x half>, !dbg !23
  %217 = fpext <2 x half> %216 to <2 x float>, !dbg !37
  %218 = lshr <2 x i32> %202, <i32 16, i32 16>, !dbg !25
  %219 = trunc <2 x i32> %218 to <2 x i16>, !dbg !25
  %220 = bitcast <2 x i16> %219 to <2 x half>, !dbg !25
  %221 = fpext <2 x half> %220 to <2 x float>, !dbg !38
  %222 = lshr <2 x i32> %207, <i32 16, i32 16>, !dbg !27
  %223 = trunc <2 x i32> %222 to <2 x i16>, !dbg !27
  %224 = bitcast <2 x i16> %223 to <2 x half>, !dbg !27
  %225 = fpext <2 x half> %224 to <2 x float>, !dbg !39
  %226 = fadd <2 x float> %217, %221, !dbg !40
  %227 = fmul <2 x float> %225, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %228 = fadd <2 x float> %226, %227, !dbg !42
  %229 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !23
  %230 = insertelement <2 x i32> %229, i32 %87, i64 1, !dbg !23
  %231 = trunc <2 x i32> %230 to <2 x i16>, !dbg !23
  %232 = bitcast <2 x i16> %231 to <2 x half>, !dbg !23
  %233 = fpext <2 x half> %232 to <2 x float>, !dbg !37
  %234 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !25
  %235 = insertelement <2 x i32> %234, i32 %93, i64 1, !dbg !25
  %236 = trunc <2 x i32> %235 to <2 x i16>, !dbg !25
  %237 = bitcast <2 x i16> %236 to <2 x half>, !dbg !25
  %238 = fpext <2 x half> %237 to <2 x float>, !dbg !38
  %239 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !27
  %240 = insertelement <2 x i32> %239, i32 %99, i64 1, !dbg !27
  %241 = trunc <2 x i32> %240 to <2 x i16>, !dbg !27
  %242 = bitcast <2 x i16> %241 to <2 x half>, !dbg !27
  %243 = fpext <2 x half> %242 to <2 x float>, !dbg !39
  %244 = fadd <2 x float> %233, %238, !dbg !40
  %245 = fmul <2 x float> %243, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %246 = fadd <2 x float> %244, %245, !dbg !42
  %247 = lshr <2 x i32> %230, <i32 16, i32 16>, !dbg !23
  %248 = trunc <2 x i32> %247 to <2 x i16>, !dbg !23
  %249 = bitcast <2 x i16> %248 to <2 x half>, !dbg !23
  %250 = fpext <2 x half> %249 to <2 x float>, !dbg !37
  %251 = lshr <2 x i32> %235, <i32 16, i32 16>, !dbg !25
  %252 = trunc <2 x i32> %251 to <2 x i16>, !dbg !25
  %253 = bitcast <2 x i16> %252 to <2 x half>, !dbg !25
  %254 = fpext <2 x half> %253 to <2 x float>, !dbg !38
  %255 = lshr <2 x i32> %240, <i32 16, i32 16>, !dbg !27
  %256 = trunc <2 x i32> %255 to <2 x i16>, !dbg !27
  %257 = bitcast <2 x i16> %256 to <2 x half>, !dbg !27
  %258 = fpext <2 x half> %257 to <2 x float>, !dbg !39
  %259 = fadd <2 x float> %250, %254, !dbg !40
  %260 = fmul <2 x float> %258, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %261 = fadd <2 x float> %259, %260, !dbg !42
  %262 = extractelement <2 x float> %147, i64 1, !dbg !43
  %263 = fadd float %262, %122, !dbg !43
  %264 = extractelement <2 x float> %162, i64 1, !dbg !43
  %265 = fadd float %264, %123, !dbg !43
  %266 = extractelement <2 x float> %180, i64 1, !dbg !43
  %267 = fadd float %266, %124, !dbg !43
  %268 = extractelement <2 x float> %195, i64 1, !dbg !43
  %269 = fadd float %268, %125, !dbg !43
  %270 = extractelement <2 x float> %213, i64 1, !dbg !43
  %271 = fadd float %270, %126, !dbg !43
  %272 = extractelement <2 x float> %228, i64 1, !dbg !43
  %273 = fadd float %272, %127, !dbg !43
  %274 = extractelement <2 x float> %246, i64 1, !dbg !43
  %275 = fadd float %274, %128, !dbg !43
  %276 = extractelement <2 x float> %261, i64 1, !dbg !43
  %277 = fadd float %276, %129, !dbg !43
  %278 = extractelement <2 x float> %147, i64 0, !dbg !44
  %279 = fadd float %278, %263, !dbg !44
  %280 = extractelement <2 x float> %162, i64 0, !dbg !44
  %281 = fadd float %280, %265, !dbg !44
  %282 = extractelement <2 x float> %180, i64 0, !dbg !44
  %283 = fadd float %282, %267, !dbg !44
  %284 = extractelement <2 x float> %195, i64 0, !dbg !44
  %285 = fadd float %284, %269, !dbg !44
  %286 = extractelement <2 x float> %213, i64 0, !dbg !44
  %287 = fadd float %286, %271, !dbg !44
  %288 = extractelement <2 x float> %228, i64 0, !dbg !44
  %289 = fadd float %288, %273, !dbg !44
  %290 = extractelement <2 x float> %246, i64 0, !dbg !44
  %291 = fadd float %290, %275, !dbg !44
  %292 = extractelement <2 x float> %261, i64 0, !dbg !44
  %293 = fadd float %292, %277, !dbg !44
  %294 = mul i32 %10, %9, !dbg !45
  %295 = mul i32 %32, %294, !dbg !46
  %296 = mul i32 %33, %294, !dbg !46
  %297 = mul i32 %34, %294, !dbg !46
  %298 = mul i32 %35, %294, !dbg !46
  %299 = mul i32 %36, %294, !dbg !46
  %300 = mul i32 %37, %294, !dbg !46
  %301 = mul i32 %38, %294, !dbg !46
  %302 = mul i32 %39, %294, !dbg !46
  %303 = mul i32 %294, 1280, !dbg !47
  %304 = mul i32 %303, %49, !dbg !48
  %305 = add i32 %304, %.decomposed, !dbg !49
  %306 = add i32 %305, %295, !dbg !50
  %307 = add i32 %305, %296, !dbg !50
  %308 = add i32 %305, %297, !dbg !50
  %309 = add i32 %305, %298, !dbg !50
  %310 = add i32 %305, %299, !dbg !50
  %311 = add i32 %305, %300, !dbg !50
  %312 = add i32 %305, %301, !dbg !50
  %313 = add i32 %305, %302, !dbg !50
  %314 = sext i32 %306 to i64, !dbg !51
  %315 = getelementptr half, ptr addrspace(1) %7, i64 %314, !dbg !51
  %316 = sext i32 %307 to i64, !dbg !51
  %317 = getelementptr half, ptr addrspace(1) %7, i64 %316, !dbg !51
  %318 = sext i32 %308 to i64, !dbg !51
  %319 = getelementptr half, ptr addrspace(1) %7, i64 %318, !dbg !51
  %320 = sext i32 %309 to i64, !dbg !51
  %321 = getelementptr half, ptr addrspace(1) %7, i64 %320, !dbg !51
  %322 = sext i32 %310 to i64, !dbg !51
  %323 = getelementptr half, ptr addrspace(1) %7, i64 %322, !dbg !51
  %324 = sext i32 %311 to i64, !dbg !51
  %325 = getelementptr half, ptr addrspace(1) %7, i64 %324, !dbg !51
  %326 = sext i32 %312 to i64, !dbg !51
  %327 = getelementptr half, ptr addrspace(1) %7, i64 %326, !dbg !51
  %328 = sext i32 %313 to i64, !dbg !51
  %329 = getelementptr half, ptr addrspace(1) %7, i64 %328, !dbg !51
  %330 = fptrunc float %279 to half, !dbg !52
  %331 = fptrunc float %281 to half, !dbg !52
  %332 = fptrunc float %283 to half, !dbg !52
  %333 = fptrunc float %285 to half, !dbg !52
  %334 = fptrunc float %287 to half, !dbg !52
  %335 = fptrunc float %289 to half, !dbg !52
  %336 = fptrunc float %291 to half, !dbg !52
  %337 = fptrunc float %293 to half, !dbg !52
  %338 = zext nneg i32 %16 to i64, !dbg !52
  %339 = getelementptr half, ptr addrspace(3) @global_smem, i64 %338, !dbg !52
  %340 = insertelement <1 x half> undef, half %330, i64 0, !dbg !52
  store <1 x half> %340, ptr addrspace(3) %339, align 2, !dbg !52
  %341 = or i32 %16, 1, !dbg !52
  %342 = zext nneg i32 %341 to i64, !dbg !52
  %343 = getelementptr half, ptr addrspace(3) @global_smem, i64 %342, !dbg !52
  %344 = insertelement <1 x half> undef, half %331, i64 0, !dbg !52
  store <1 x half> %344, ptr addrspace(3) %343, align 2, !dbg !52
  %345 = or i32 %16, 2, !dbg !52
  %346 = zext nneg i32 %345 to i64, !dbg !52
  %347 = getelementptr half, ptr addrspace(3) @global_smem, i64 %346, !dbg !52
  %348 = insertelement <1 x half> undef, half %332, i64 0, !dbg !52
  store <1 x half> %348, ptr addrspace(3) %347, align 2, !dbg !52
  %349 = or i32 %16, 3, !dbg !52
  %350 = zext nneg i32 %349 to i64, !dbg !52
  %351 = getelementptr half, ptr addrspace(3) @global_smem, i64 %350, !dbg !52
  %352 = insertelement <1 x half> undef, half %333, i64 0, !dbg !52
  store <1 x half> %352, ptr addrspace(3) %351, align 2, !dbg !52
  %353 = or i32 %16, 4, !dbg !52
  %354 = zext nneg i32 %353 to i64, !dbg !52
  %355 = getelementptr half, ptr addrspace(3) @global_smem, i64 %354, !dbg !52
  %356 = insertelement <1 x half> undef, half %334, i64 0, !dbg !52
  store <1 x half> %356, ptr addrspace(3) %355, align 2, !dbg !52
  %357 = or i32 %16, 5, !dbg !52
  %358 = zext nneg i32 %357 to i64, !dbg !52
  %359 = getelementptr half, ptr addrspace(3) @global_smem, i64 %358, !dbg !52
  %360 = insertelement <1 x half> undef, half %335, i64 0, !dbg !52
  store <1 x half> %360, ptr addrspace(3) %359, align 2, !dbg !52
  %361 = or i32 %16, 6, !dbg !52
  %362 = zext nneg i32 %361 to i64, !dbg !52
  %363 = getelementptr half, ptr addrspace(3) @global_smem, i64 %362, !dbg !52
  %364 = insertelement <1 x half> undef, half %336, i64 0, !dbg !52
  store <1 x half> %364, ptr addrspace(3) %363, align 2, !dbg !52
  %365 = or i32 %16, 7, !dbg !52
  %366 = zext nneg i32 %365 to i64, !dbg !52
  %367 = getelementptr half, ptr addrspace(3) @global_smem, i64 %366, !dbg !52
  %368 = insertelement <1 x half> undef, half %337, i64 0, !dbg !52
  store <1 x half> %368, ptr addrspace(3) %367, align 2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %369 = zext nneg i32 %15 to i64, !dbg !52
  %370 = getelementptr half, ptr addrspace(3) @global_smem, i64 %369, !dbg !52
  %371 = load i16, ptr addrspace(3) %370, align 2, !dbg !52
  %372 = zext nneg i32 %17 to i64, !dbg !52
  %373 = getelementptr half, ptr addrspace(3) @global_smem, i64 %372, !dbg !52
  %374 = load i16, ptr addrspace(3) %373, align 2, !dbg !52
  %375 = zext nneg i32 %18 to i64, !dbg !52
  %376 = getelementptr half, ptr addrspace(3) @global_smem, i64 %375, !dbg !52
  %377 = load i16, ptr addrspace(3) %376, align 2, !dbg !52
  %378 = zext nneg i32 %19 to i64, !dbg !52
  %379 = getelementptr half, ptr addrspace(3) @global_smem, i64 %378, !dbg !52
  %380 = load i16, ptr addrspace(3) %379, align 2, !dbg !52
  %381 = zext nneg i32 %20 to i64, !dbg !52
  %382 = getelementptr half, ptr addrspace(3) @global_smem, i64 %381, !dbg !52
  %383 = load i16, ptr addrspace(3) %382, align 2, !dbg !52
  %384 = zext nneg i32 %21 to i64, !dbg !52
  %385 = getelementptr half, ptr addrspace(3) @global_smem, i64 %384, !dbg !52
  %386 = load i16, ptr addrspace(3) %385, align 2, !dbg !52
  %387 = zext nneg i32 %22 to i64, !dbg !52
  %388 = getelementptr half, ptr addrspace(3) @global_smem, i64 %387, !dbg !52
  %389 = load i16, ptr addrspace(3) %388, align 2, !dbg !52
  %390 = zext nneg i32 %23 to i64, !dbg !52
  %391 = getelementptr half, ptr addrspace(3) @global_smem, i64 %390, !dbg !52
  %392 = load i16, ptr addrspace(3) %391, align 2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %371, ptr addrspace(1) %315, i1 %56) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %374, ptr addrspace(1) %317, i1 %57) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %377, ptr addrspace(1) %319, i1 %58) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %380, ptr addrspace(1) %321, i1 %59) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %383, ptr addrspace(1) %323, i1 %60) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %386, ptr addrspace(1) %325, i1 %61) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %389, ptr addrspace(1) %327, i1 %62) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %392, ptr addrspace(1) %329, i1 %63) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c7srkcchb2nxsgdvte2bkgvu6npyw245ceu5jo4nokeaspccdfhh.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/7s")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89101112de", linkageName: "triton__0d1d2d3d4d5d6d7d89101112de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 44, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 22, column: 48, scope: !5)
!11 = !DILocation(line: 22, column: 53, scope: !5)
!12 = !DILocation(line: 22, column: 34, scope: !5)
!13 = !DILocation(line: 24, column: 21, scope: !5)
!14 = !DILocation(line: 25, column: 28, scope: !5)
!15 = !DILocation(line: 25, column: 33, scope: !5)
!16 = !DILocation(line: 26, column: 23, scope: !5)
!17 = !DILocation(line: 27, column: 21, scope: !5)
!18 = !DILocation(line: 31, column: 20, scope: !5)
!19 = !DILocation(line: 32, column: 41, scope: !5)
!20 = !DILocation(line: 32, column: 36, scope: !5)
!21 = !DILocation(line: 32, column: 30, scope: !5)
!22 = !DILocation(line: 32, column: 55, scope: !5)
!23 = !DILocation(line: 32, column: 47, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 35, scope: !5)
!26 = !DILocation(line: 34, column: 30, scope: !5)
!27 = !DILocation(line: 34, column: 47, scope: !5)
!28 = !DILocation(line: 35, column: 30, scope: !5)
!29 = !DILocation(line: 35, column: 47, scope: !5)
!30 = !DILocation(line: 36, column: 30, scope: !5)
!31 = !DILocation(line: 36, column: 35, scope: !5)
!32 = !DILocation(line: 37, column: 31, scope: !5)
!33 = !DILocation(line: 37, column: 48, scope: !5)
!34 = !DILocation(line: 38, column: 31, scope: !5)
!35 = !DILocation(line: 38, column: 48, scope: !5)
!36 = !DILocation(line: 38, column: 96, scope: !5)
!37 = !DILocation(line: 32, column: 95, scope: !5)
!38 = !DILocation(line: 33, column: 75, scope: !5)
!39 = !DILocation(line: 34, column: 95, scope: !5)
!40 = !DILocation(line: 39, column: 18, scope: !5)
!41 = !DILocation(line: 41, column: 18, scope: !5)
!42 = !DILocation(line: 42, column: 18, scope: !5)
!43 = !DILocation(line: 48, column: 20, scope: !5)
!44 = !DILocation(line: 49, column: 19, scope: !5)
!45 = !DILocation(line: 50, column: 35, scope: !5)
!46 = !DILocation(line: 50, column: 39, scope: !5)
!47 = !DILocation(line: 50, column: 55, scope: !5)
!48 = !DILocation(line: 50, column: 59, scope: !5)
!49 = !DILocation(line: 50, column: 31, scope: !5)
!50 = !DILocation(line: 50, column: 46, scope: !5)
!51 = !DILocation(line: 50, column: 25, scope: !5)
!52 = !DILocation(line: 50, column: 72, scope: !5)
!53 = !DILocation(line: 50, column: 4, scope: !5)
