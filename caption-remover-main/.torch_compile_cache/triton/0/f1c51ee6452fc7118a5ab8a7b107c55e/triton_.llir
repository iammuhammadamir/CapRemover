; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = shl i32 %8, 3, !dbg !8
  %10 = and i32 %9, 8, !dbg !8
  %11 = lshr i32 %8, 6, !dbg !8
  %12 = and i32 %11, 3, !dbg !8
  %13 = or i32 %12, 4, !dbg !8
  %14 = or i32 %12, 8, !dbg !8
  %15 = or i32 %12, 12, !dbg !8
  %16 = lshr i32 %8, 1, !dbg !9
  %17 = and i32 %16, 127, !dbg !9
  %18 = or i32 %17, 128, !dbg !9
  %19 = shl i32 %8, 2, !dbg !9
  %20 = and i32 %19, 252, !dbg !9
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %23 = add i32 %22, 1, !dbg !12
  %24 = shl i32 %21, 4, !dbg !13
  %25 = mul i32 %24, %23, !dbg !14
  %26 = or i32 %25, %10, !dbg !15
  %27 = or i32 %25, %12, !dbg !15
  %28 = or i32 %25, %13, !dbg !15
  %29 = or i32 %25, %14, !dbg !15
  %30 = or i32 %25, %15, !dbg !15
  %31 = icmp slt i32 %26, 7040, !dbg !16
  %32 = icmp slt i32 %27, 7040, !dbg !16
  %33 = icmp slt i32 %28, 7040, !dbg !16
  %34 = icmp slt i32 %29, 7040, !dbg !16
  %35 = icmp slt i32 %30, 7040, !dbg !16
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %37 = shl i32 %36, 8, !dbg !18
  %38 = or i32 %37, %17, !dbg !19
  %39 = or i32 %37, %18, !dbg !19
  %40 = or i32 %37, %20, !dbg !19
  %41 = icmp slt i32 %38, 2700, !dbg !20
  %42 = icmp slt i32 %39, 2700, !dbg !20
  %43 = icmp slt i32 %40, 2700, !dbg !20
  %.frozen = freeze i32 %26
  %44 = sdiv i32 %.frozen, 320, !dbg !21
  %45 = mul i32 %44, 320
  %.decomposed = sub i32 %.frozen, %45
  %46 = mul i32 %38, 320, !dbg !22
  %47 = mul i32 %39, 320, !dbg !22
  %48 = mul i32 %44, 864000, !dbg !23
  %49 = add i32 %48, %.decomposed, !dbg !24
  %50 = add i32 %49, %46, !dbg !25
  %51 = add i32 %49, %47, !dbg !25
  %52 = sext i32 %50 to i64, !dbg !26
  %53 = getelementptr half, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = sext i32 %51 to i64, !dbg !26
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = and i1 %41, %31, !dbg !27
  %57 = and i1 %42, %31, !dbg !27
  %58 = and i1 %43, %32, !dbg !27
  %59 = and i1 %43, %33, !dbg !27
  %60 = and i1 %43, %34, !dbg !27
  %61 = and i1 %43, %35, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %56) #2, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %57) #2, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %72 = trunc i32 %68 to i16, !dbg !28
  %73 = bitcast i16 %72 to half, !dbg !28
  %74 = trunc i32 %69 to i16, !dbg !28
  %75 = bitcast i16 %74 to half, !dbg !28
  %76 = trunc i32 %70 to i16, !dbg !28
  %77 = bitcast i16 %76 to half, !dbg !28
  %78 = trunc i32 %71 to i16, !dbg !28
  %79 = bitcast i16 %78 to half, !dbg !28
  %80 = fpext half %73 to float, !dbg !29
  %81 = fpext half %75 to float, !dbg !29
  %82 = fpext half %77 to float, !dbg !29
  %83 = fpext half %79 to float, !dbg !29
  %84 = sext i32 %.decomposed to i64, !dbg !30
  %85 = getelementptr half, ptr addrspace(1) %1, i64 %84, !dbg !30
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %31) #2, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !31
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !31
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !31
  %extelt.offset8 = lshr i32 %87, 16, !dbg !31
  %91 = trunc i32 %extelt.offset8 to i16, !dbg !31
  %92 = bitcast i16 %91 to half, !dbg !31
  %extelt.offset9 = lshr i32 %88, 16, !dbg !31
  %93 = trunc i32 %extelt.offset9 to i16, !dbg !31
  %94 = bitcast i16 %93 to half, !dbg !31
  %extelt.offset10 = lshr i32 %89, 16, !dbg !31
  %95 = trunc i32 %extelt.offset10 to i16, !dbg !31
  %96 = bitcast i16 %95 to half, !dbg !31
  %extelt.offset11 = lshr i32 %90, 16, !dbg !31
  %97 = trunc i32 %extelt.offset11 to i16, !dbg !31
  %98 = bitcast i16 %97 to half, !dbg !31
  %99 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !28
  %100 = insertelement <2 x i32> %99, i32 %87, i64 1, !dbg !28
  %101 = trunc <2 x i32> %100 to <2 x i16>, !dbg !28
  %102 = bitcast <2 x i16> %101 to <2 x half>, !dbg !28
  %103 = fpext <2 x half> %102 to <2 x float>, !dbg !29
  %104 = fpext half %92 to float, !dbg !32
  %105 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !28
  %106 = insertelement <2 x i32> %105, i32 %88, i64 1, !dbg !28
  %107 = trunc <2 x i32> %106 to <2 x i16>, !dbg !28
  %108 = bitcast <2 x i16> %107 to <2 x half>, !dbg !28
  %109 = fpext <2 x half> %108 to <2 x float>, !dbg !29
  %110 = fpext half %94 to float, !dbg !32
  %111 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !28
  %112 = insertelement <2 x i32> %111, i32 %89, i64 1, !dbg !28
  %113 = trunc <2 x i32> %112 to <2 x i16>, !dbg !28
  %114 = bitcast <2 x i16> %113 to <2 x half>, !dbg !28
  %115 = fpext <2 x half> %114 to <2 x float>, !dbg !29
  %116 = fpext half %96 to float, !dbg !32
  %117 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !28
  %118 = insertelement <2 x i32> %117, i32 %90, i64 1, !dbg !28
  %119 = trunc <2 x i32> %118 to <2 x i16>, !dbg !28
  %120 = bitcast <2 x i16> %119 to <2 x half>, !dbg !28
  %121 = fpext <2 x half> %120 to <2 x float>, !dbg !29
  %122 = fpext half %98 to float, !dbg !32
  %123 = getelementptr half, ptr addrspace(1) %2, i64 %52, !dbg !33
  %124 = getelementptr half, ptr addrspace(1) %2, i64 %54, !dbg !33
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %56) #2, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !34
  %130 = trunc i32 %126 to i16, !dbg !34
  %131 = bitcast i16 %130 to half, !dbg !34
  %132 = trunc i32 %127 to i16, !dbg !34
  %133 = bitcast i16 %132 to half, !dbg !34
  %134 = trunc i32 %128 to i16, !dbg !34
  %135 = bitcast i16 %134 to half, !dbg !34
  %136 = trunc i32 %129 to i16, !dbg !34
  %137 = bitcast i16 %136 to half, !dbg !34
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %57) #2, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !34
  %143 = trunc i32 %139 to i16, !dbg !34
  %144 = bitcast i16 %143 to half, !dbg !34
  %145 = trunc i32 %140 to i16, !dbg !34
  %146 = bitcast i16 %145 to half, !dbg !34
  %147 = trunc i32 %141 to i16, !dbg !34
  %148 = bitcast i16 %147 to half, !dbg !34
  %149 = trunc i32 %142 to i16, !dbg !34
  %150 = bitcast i16 %149 to half, !dbg !34
  %151 = fpext half %131 to float, !dbg !35
  %152 = fpext half %133 to float, !dbg !35
  %153 = fpext half %135 to float, !dbg !35
  %154 = fpext half %137 to float, !dbg !35
  %155 = fpext half %144 to float, !dbg !35
  %156 = fpext half %146 to float, !dbg !35
  %157 = fpext half %148 to float, !dbg !35
  %158 = fpext half %150 to float, !dbg !35
  %159 = mul i32 %27, 2700, !dbg !36
  %160 = mul i32 %28, 2700, !dbg !36
  %161 = mul i32 %29, 2700, !dbg !36
  %162 = mul i32 %30, 2700, !dbg !36
  %163 = add i32 %159, %40, !dbg !37
  %164 = add i32 %160, %40, !dbg !37
  %165 = add i32 %161, %40, !dbg !37
  %166 = add i32 %162, %40, !dbg !37
  %167 = sext i32 %163 to i64, !dbg !38
  %168 = getelementptr half, ptr addrspace(1) %3, i64 %167, !dbg !38
  %169 = sext i32 %164 to i64, !dbg !38
  %170 = getelementptr half, ptr addrspace(1) %3, i64 %169, !dbg !38
  %171 = sext i32 %165 to i64, !dbg !38
  %172 = getelementptr half, ptr addrspace(1) %3, i64 %171, !dbg !38
  %173 = sext i32 %166 to i64, !dbg !38
  %174 = getelementptr half, ptr addrspace(1) %3, i64 %173, !dbg !38
  %175 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %168, i1 %58) #2, !dbg !39
  %176 = extractvalue { i32, i32 } %175, 0, !dbg !39
  %177 = extractvalue { i32, i32 } %175, 1, !dbg !39
  %extelt.offset20 = lshr i32 %176, 16, !dbg !39
  %extelt.offset21 = lshr i32 %177, 16, !dbg !39
  %178 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %170, i1 %59) #2, !dbg !39
  %179 = extractvalue { i32, i32 } %178, 0, !dbg !39
  %180 = extractvalue { i32, i32 } %178, 1, !dbg !39
  %extelt.offset22 = lshr i32 %179, 16, !dbg !39
  %extelt.offset23 = lshr i32 %180, 16, !dbg !39
  %181 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %172, i1 %60) #2, !dbg !39
  %182 = extractvalue { i32, i32 } %181, 0, !dbg !39
  %183 = extractvalue { i32, i32 } %181, 1, !dbg !39
  %extelt.offset24 = lshr i32 %182, 16, !dbg !39
  %extelt.offset25 = lshr i32 %183, 16, !dbg !39
  %184 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %174, i1 %61) #2, !dbg !39
  %185 = extractvalue { i32, i32 } %184, 0, !dbg !39
  %186 = extractvalue { i32, i32 } %184, 1, !dbg !39
  %extelt.offset26 = lshr i32 %185, 16, !dbg !39
  %extelt.offset27 = lshr i32 %186, 16, !dbg !39
  %187 = extractelement <2 x float> %103, i64 0, !dbg !40
  %188 = extractelement <2 x float> %103, i64 1, !dbg !40
  %189 = fadd float %187, %188, !dbg !40
  %190 = extractelement <2 x float> %109, i64 0, !dbg !40
  %191 = extractelement <2 x float> %109, i64 1, !dbg !40
  %192 = fadd float %190, %191, !dbg !40
  %193 = extractelement <2 x float> %115, i64 0, !dbg !40
  %194 = extractelement <2 x float> %115, i64 1, !dbg !40
  %195 = fadd float %193, %194, !dbg !40
  %196 = extractelement <2 x float> %121, i64 0, !dbg !40
  %197 = extractelement <2 x float> %121, i64 1, !dbg !40
  %198 = fadd float %196, %197, !dbg !40
  %199 = fadd float %188, %80, !dbg !40
  %200 = fadd float %191, %81, !dbg !40
  %201 = fadd float %194, %82, !dbg !40
  %202 = fadd float %197, %83, !dbg !40
  %203 = fmul float %151, 1.250000e-01, !dbg !41
  %204 = insertelement <2 x i32> %99, i32 %126, i64 1, !dbg !28
  %205 = lshr <2 x i32> %204, <i32 16, i32 16>, !dbg !28
  %206 = trunc <2 x i32> %205 to <2 x i16>, !dbg !28
  %207 = bitcast <2 x i16> %206 to <2 x half>, !dbg !28
  %208 = fpext <2 x half> %207 to <2 x float>, !dbg !29
  %209 = fmul float %152, 1.250000e-01, !dbg !41
  %210 = insertelement <2 x i32> %105, i32 %127, i64 1, !dbg !28
  %211 = lshr <2 x i32> %210, <i32 16, i32 16>, !dbg !28
  %212 = trunc <2 x i32> %211 to <2 x i16>, !dbg !28
  %213 = bitcast <2 x i16> %212 to <2 x half>, !dbg !28
  %214 = fpext <2 x half> %213 to <2 x float>, !dbg !29
  %215 = fmul float %153, 1.250000e-01, !dbg !41
  %216 = insertelement <2 x i32> %111, i32 %128, i64 1, !dbg !28
  %217 = lshr <2 x i32> %216, <i32 16, i32 16>, !dbg !28
  %218 = trunc <2 x i32> %217 to <2 x i16>, !dbg !28
  %219 = bitcast <2 x i16> %218 to <2 x half>, !dbg !28
  %220 = fpext <2 x half> %219 to <2 x float>, !dbg !29
  %221 = fmul float %154, 1.250000e-01, !dbg !41
  %222 = insertelement <2 x i32> %117, i32 %129, i64 1, !dbg !28
  %223 = lshr <2 x i32> %222, <i32 16, i32 16>, !dbg !28
  %224 = trunc <2 x i32> %223 to <2 x i16>, !dbg !28
  %225 = bitcast <2 x i16> %224 to <2 x half>, !dbg !28
  %226 = fpext <2 x half> %225 to <2 x float>, !dbg !29
  %227 = fmul float %155, 1.250000e-01, !dbg !41
  %228 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !28
  %229 = insertelement <2 x i32> %228, i32 %139, i64 1, !dbg !28
  %230 = lshr <2 x i32> %229, <i32 16, i32 16>, !dbg !28
  %231 = trunc <2 x i32> %230 to <2 x i16>, !dbg !28
  %232 = bitcast <2 x i16> %231 to <2 x half>, !dbg !28
  %233 = fpext <2 x half> %232 to <2 x float>, !dbg !29
  %234 = fmul float %156, 1.250000e-01, !dbg !41
  %235 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !28
  %236 = insertelement <2 x i32> %235, i32 %140, i64 1, !dbg !28
  %237 = lshr <2 x i32> %236, <i32 16, i32 16>, !dbg !28
  %238 = trunc <2 x i32> %237 to <2 x i16>, !dbg !28
  %239 = bitcast <2 x i16> %238 to <2 x half>, !dbg !28
  %240 = fpext <2 x half> %239 to <2 x float>, !dbg !29
  %241 = fmul float %157, 1.250000e-01, !dbg !41
  %242 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !28
  %243 = insertelement <2 x i32> %242, i32 %141, i64 1, !dbg !28
  %244 = lshr <2 x i32> %243, <i32 16, i32 16>, !dbg !28
  %245 = trunc <2 x i32> %244 to <2 x i16>, !dbg !28
  %246 = bitcast <2 x i16> %245 to <2 x half>, !dbg !28
  %247 = fpext <2 x half> %246 to <2 x float>, !dbg !29
  %248 = fmul float %158, 1.250000e-01, !dbg !41
  %249 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !28
  %250 = insertelement <2 x i32> %249, i32 %142, i64 1, !dbg !28
  %251 = lshr <2 x i32> %250, <i32 16, i32 16>, !dbg !28
  %252 = trunc <2 x i32> %251 to <2 x i16>, !dbg !28
  %253 = bitcast <2 x i16> %252 to <2 x half>, !dbg !28
  %254 = fpext <2 x half> %253 to <2 x float>, !dbg !29
  %255 = fadd float %189, %203, !dbg !42
  %256 = extractelement <2 x float> %208, i64 0, !dbg !42
  %257 = fadd float %256, %104, !dbg !42
  %258 = extractelement <2 x float> %208, i64 1, !dbg !42
  %259 = fmul float %258, 1.250000e-01, !dbg !42
  %260 = fadd float %257, %259, !dbg !42
  %261 = fadd float %192, %209, !dbg !42
  %262 = extractelement <2 x float> %214, i64 0, !dbg !42
  %263 = fadd float %262, %110, !dbg !42
  %264 = extractelement <2 x float> %214, i64 1, !dbg !42
  %265 = fmul float %264, 1.250000e-01, !dbg !42
  %266 = fadd float %263, %265, !dbg !42
  %267 = fadd float %195, %215, !dbg !42
  %268 = extractelement <2 x float> %220, i64 0, !dbg !42
  %269 = fadd float %268, %116, !dbg !42
  %270 = extractelement <2 x float> %220, i64 1, !dbg !42
  %271 = fmul float %270, 1.250000e-01, !dbg !42
  %272 = fadd float %269, %271, !dbg !42
  %273 = fadd float %198, %221, !dbg !42
  %274 = extractelement <2 x float> %226, i64 0, !dbg !42
  %275 = fadd float %274, %122, !dbg !42
  %276 = extractelement <2 x float> %226, i64 1, !dbg !42
  %277 = fmul float %276, 1.250000e-01, !dbg !42
  %278 = fadd float %275, %277, !dbg !42
  %279 = fadd float %199, %227, !dbg !42
  %280 = extractelement <2 x float> %233, i64 0, !dbg !42
  %281 = fadd float %280, %104, !dbg !42
  %282 = extractelement <2 x float> %233, i64 1, !dbg !42
  %283 = fmul float %282, 1.250000e-01, !dbg !42
  %284 = fadd float %281, %283, !dbg !42
  %285 = fadd float %200, %234, !dbg !42
  %286 = extractelement <2 x float> %240, i64 0, !dbg !42
  %287 = fadd float %286, %110, !dbg !42
  %288 = extractelement <2 x float> %240, i64 1, !dbg !42
  %289 = fmul float %288, 1.250000e-01, !dbg !42
  %290 = fadd float %287, %289, !dbg !42
  %291 = fadd float %201, %241, !dbg !42
  %292 = extractelement <2 x float> %247, i64 0, !dbg !42
  %293 = fadd float %292, %116, !dbg !42
  %294 = extractelement <2 x float> %247, i64 1, !dbg !42
  %295 = fmul float %294, 1.250000e-01, !dbg !42
  %296 = fadd float %293, %295, !dbg !42
  %297 = fadd float %202, %248, !dbg !42
  %298 = extractelement <2 x float> %254, i64 0, !dbg !42
  %299 = fadd float %298, %122, !dbg !42
  %300 = extractelement <2 x float> %254, i64 1, !dbg !42
  %301 = fmul float %300, 1.250000e-01, !dbg !42
  %302 = fadd float %299, %301, !dbg !42
  %303 = mul nuw nsw i32 %10, 257, !dbg !42
  %304 = add nuw nsw i32 %303, %17, !dbg !42
  %305 = zext nneg i32 %304 to i64, !dbg !42
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !42
  %307 = insertelement <1 x float> undef, float %255, i64 0, !dbg !42
  store <1 x float> %307, ptr addrspace(3) %306, align 4, !dbg !42
  %308 = add nuw nsw i32 %303, 257, !dbg !42
  %309 = add nuw nsw i32 %308, %17, !dbg !42
  %310 = zext nneg i32 %309 to i64, !dbg !42
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i64 %310, !dbg !42
  %312 = insertelement <1 x float> undef, float %260, i64 0, !dbg !42
  store <1 x float> %312, ptr addrspace(3) %311, align 4, !dbg !42
  %313 = add nuw nsw i32 %303, 514, !dbg !42
  %314 = add nuw nsw i32 %313, %17, !dbg !42
  %315 = zext nneg i32 %314 to i64, !dbg !42
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !42
  %317 = insertelement <1 x float> undef, float %261, i64 0, !dbg !42
  store <1 x float> %317, ptr addrspace(3) %316, align 4, !dbg !42
  %318 = add nuw nsw i32 %303, 771, !dbg !42
  %319 = add nuw nsw i32 %318, %17, !dbg !42
  %320 = zext nneg i32 %319 to i64, !dbg !42
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !42
  %322 = insertelement <1 x float> undef, float %266, i64 0, !dbg !42
  store <1 x float> %322, ptr addrspace(3) %321, align 4, !dbg !42
  %323 = add nuw nsw i32 %303, 1028, !dbg !42
  %324 = add nuw nsw i32 %323, %17, !dbg !42
  %325 = zext nneg i32 %324 to i64, !dbg !42
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !42
  %327 = insertelement <1 x float> undef, float %267, i64 0, !dbg !42
  store <1 x float> %327, ptr addrspace(3) %326, align 4, !dbg !42
  %328 = add nuw nsw i32 %303, 1285, !dbg !42
  %329 = add nuw nsw i32 %328, %17, !dbg !42
  %330 = zext nneg i32 %329 to i64, !dbg !42
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !42
  %332 = insertelement <1 x float> undef, float %272, i64 0, !dbg !42
  store <1 x float> %332, ptr addrspace(3) %331, align 4, !dbg !42
  %333 = add nuw nsw i32 %303, 1542, !dbg !42
  %334 = add nuw nsw i32 %333, %17, !dbg !42
  %335 = zext nneg i32 %334 to i64, !dbg !42
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i64 %335, !dbg !42
  %337 = insertelement <1 x float> undef, float %273, i64 0, !dbg !42
  store <1 x float> %337, ptr addrspace(3) %336, align 4, !dbg !42
  %338 = add nuw nsw i32 %303, 1799, !dbg !42
  %339 = add nuw nsw i32 %338, %17, !dbg !42
  %340 = zext nneg i32 %339 to i64, !dbg !42
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i64 %340, !dbg !42
  %342 = insertelement <1 x float> undef, float %278, i64 0, !dbg !42
  store <1 x float> %342, ptr addrspace(3) %341, align 4, !dbg !42
  %343 = add nuw nsw i32 %303, %18, !dbg !42
  %344 = zext nneg i32 %343 to i64, !dbg !42
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i64 %344, !dbg !42
  %346 = insertelement <1 x float> undef, float %279, i64 0, !dbg !42
  store <1 x float> %346, ptr addrspace(3) %345, align 4, !dbg !42
  %347 = add nuw nsw i32 %308, %18, !dbg !42
  %348 = zext nneg i32 %347 to i64, !dbg !42
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i64 %348, !dbg !42
  %350 = insertelement <1 x float> undef, float %284, i64 0, !dbg !42
  store <1 x float> %350, ptr addrspace(3) %349, align 4, !dbg !42
  %351 = add nuw nsw i32 %313, %18, !dbg !42
  %352 = zext nneg i32 %351 to i64, !dbg !42
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i64 %352, !dbg !42
  %354 = insertelement <1 x float> undef, float %285, i64 0, !dbg !42
  store <1 x float> %354, ptr addrspace(3) %353, align 4, !dbg !42
  %355 = add nuw nsw i32 %318, %18, !dbg !42
  %356 = zext nneg i32 %355 to i64, !dbg !42
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i64 %356, !dbg !42
  %358 = insertelement <1 x float> undef, float %290, i64 0, !dbg !42
  store <1 x float> %358, ptr addrspace(3) %357, align 4, !dbg !42
  %359 = add nuw nsw i32 %323, %18, !dbg !42
  %360 = zext nneg i32 %359 to i64, !dbg !42
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i64 %360, !dbg !42
  %362 = insertelement <1 x float> undef, float %291, i64 0, !dbg !42
  store <1 x float> %362, ptr addrspace(3) %361, align 4, !dbg !42
  %363 = add nuw nsw i32 %328, %18, !dbg !42
  %364 = zext nneg i32 %363 to i64, !dbg !42
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i64 %364, !dbg !42
  %366 = insertelement <1 x float> undef, float %296, i64 0, !dbg !42
  store <1 x float> %366, ptr addrspace(3) %365, align 4, !dbg !42
  %367 = add nuw nsw i32 %333, %18, !dbg !42
  %368 = zext nneg i32 %367 to i64, !dbg !42
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i64 %368, !dbg !42
  %370 = insertelement <1 x float> undef, float %297, i64 0, !dbg !42
  store <1 x float> %370, ptr addrspace(3) %369, align 4, !dbg !42
  %371 = add nuw nsw i32 %338, %18, !dbg !42
  %372 = zext nneg i32 %371 to i64, !dbg !42
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i64 %372, !dbg !42
  %374 = insertelement <1 x float> undef, float %302, i64 0, !dbg !42
  store <1 x float> %374, ptr addrspace(3) %373, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %375 = mul nuw nsw i32 %12, 257, !dbg !42
  %376 = add nuw nsw i32 %375, %20, !dbg !42
  %377 = zext nneg i32 %376 to i64, !dbg !42
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i64 %377, !dbg !42
  %379 = load float, ptr addrspace(3) %378, align 4, !dbg !42
  %380 = or i32 %20, 1, !dbg !42
  %381 = add nuw nsw i32 %375, %380, !dbg !42
  %382 = zext nneg i32 %381 to i64, !dbg !42
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i64 %382, !dbg !42
  %384 = load float, ptr addrspace(3) %383, align 4, !dbg !42
  %385 = or i32 %20, 2, !dbg !42
  %386 = add nuw nsw i32 %375, %385, !dbg !42
  %387 = zext nneg i32 %386 to i64, !dbg !42
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i64 %387, !dbg !42
  %389 = load float, ptr addrspace(3) %388, align 4, !dbg !42
  %390 = or i32 %20, 3, !dbg !42
  %391 = add nuw nsw i32 %375, %390, !dbg !42
  %392 = zext nneg i32 %391 to i64, !dbg !42
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i64 %392, !dbg !42
  %394 = load float, ptr addrspace(3) %393, align 4, !dbg !42
  %395 = mul nuw nsw i32 %13, 257, !dbg !42
  %396 = add nuw nsw i32 %395, %20, !dbg !42
  %397 = zext nneg i32 %396 to i64, !dbg !42
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i64 %397, !dbg !42
  %399 = load float, ptr addrspace(3) %398, align 4, !dbg !42
  %400 = add nuw nsw i32 %395, %380, !dbg !42
  %401 = zext nneg i32 %400 to i64, !dbg !42
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i64 %401, !dbg !42
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !42
  %404 = add nuw nsw i32 %395, %385, !dbg !42
  %405 = zext nneg i32 %404 to i64, !dbg !42
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i64 %405, !dbg !42
  %407 = load float, ptr addrspace(3) %406, align 4, !dbg !42
  %408 = add nuw nsw i32 %395, %390, !dbg !42
  %409 = zext nneg i32 %408 to i64, !dbg !42
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i64 %409, !dbg !42
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !42
  %412 = mul nuw nsw i32 %14, 257, !dbg !42
  %413 = add nuw nsw i32 %412, %20, !dbg !42
  %414 = zext nneg i32 %413 to i64, !dbg !42
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i64 %414, !dbg !42
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !42
  %417 = add nuw nsw i32 %412, %380, !dbg !42
  %418 = zext nneg i32 %417 to i64, !dbg !42
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i64 %418, !dbg !42
  %420 = load float, ptr addrspace(3) %419, align 4, !dbg !42
  %421 = add nuw nsw i32 %412, %385, !dbg !42
  %422 = zext nneg i32 %421 to i64, !dbg !42
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i64 %422, !dbg !42
  %424 = load float, ptr addrspace(3) %423, align 4, !dbg !42
  %425 = add nuw nsw i32 %412, %390, !dbg !42
  %426 = zext nneg i32 %425 to i64, !dbg !42
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i64 %426, !dbg !42
  %428 = load float, ptr addrspace(3) %427, align 4, !dbg !42
  %429 = mul nuw nsw i32 %15, 257, !dbg !42
  %430 = add nuw nsw i32 %429, %20, !dbg !42
  %431 = zext nneg i32 %430 to i64, !dbg !42
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i64 %431, !dbg !42
  %433 = load float, ptr addrspace(3) %432, align 4, !dbg !42
  %434 = add nuw nsw i32 %429, %380, !dbg !42
  %435 = zext nneg i32 %434 to i64, !dbg !42
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i64 %435, !dbg !42
  %437 = load float, ptr addrspace(3) %436, align 4, !dbg !42
  %438 = add nuw nsw i32 %429, %385, !dbg !42
  %439 = zext nneg i32 %438 to i64, !dbg !42
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i64 %439, !dbg !42
  %441 = load float, ptr addrspace(3) %440, align 4, !dbg !42
  %442 = add nuw nsw i32 %429, %390, !dbg !42
  %443 = zext nneg i32 %442 to i64, !dbg !42
  %444 = getelementptr float, ptr addrspace(3) @global_smem, i64 %443, !dbg !42
  %445 = load float, ptr addrspace(3) %444, align 4, !dbg !42
  %446 = getelementptr half, ptr addrspace(1) %4, i64 %167, !dbg !43
  %447 = getelementptr half, ptr addrspace(1) %4, i64 %169, !dbg !43
  %448 = getelementptr half, ptr addrspace(1) %4, i64 %171, !dbg !43
  %449 = getelementptr half, ptr addrspace(1) %4, i64 %173, !dbg !43
  %450 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !39
  %451 = insertelement <2 x i32> %450, i32 %extelt.offset20, i64 1, !dbg !39
  %452 = trunc <2 x i32> %451 to <2 x i16>, !dbg !39
  %453 = bitcast <2 x i16> %452 to <2 x half>, !dbg !39
  %454 = fpext <2 x half> %453 to <2 x float>, !dbg !44
  %455 = insertelement <2 x float> poison, float %379, i64 0, !dbg !45
  %456 = insertelement <2 x float> %455, float %384, i64 1, !dbg !45
  %457 = fadd <2 x float> %456, %454, !dbg !45
  %458 = fptrunc <2 x float> %457 to <2 x half>, !dbg !46
  %459 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !39
  %460 = insertelement <2 x i32> %459, i32 %extelt.offset21, i64 1, !dbg !39
  %461 = trunc <2 x i32> %460 to <2 x i16>, !dbg !39
  %462 = bitcast <2 x i16> %461 to <2 x half>, !dbg !39
  %463 = fpext <2 x half> %462 to <2 x float>, !dbg !44
  %464 = insertelement <2 x float> poison, float %389, i64 0, !dbg !45
  %465 = insertelement <2 x float> %464, float %394, i64 1, !dbg !45
  %466 = fadd <2 x float> %465, %463, !dbg !45
  %467 = fptrunc <2 x float> %466 to <2 x half>, !dbg !46
  %468 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !39
  %469 = insertelement <2 x i32> %468, i32 %extelt.offset22, i64 1, !dbg !39
  %470 = trunc <2 x i32> %469 to <2 x i16>, !dbg !39
  %471 = bitcast <2 x i16> %470 to <2 x half>, !dbg !39
  %472 = fpext <2 x half> %471 to <2 x float>, !dbg !44
  %473 = insertelement <2 x float> poison, float %399, i64 0, !dbg !45
  %474 = insertelement <2 x float> %473, float %403, i64 1, !dbg !45
  %475 = fadd <2 x float> %474, %472, !dbg !45
  %476 = fptrunc <2 x float> %475 to <2 x half>, !dbg !46
  %477 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !39
  %478 = insertelement <2 x i32> %477, i32 %extelt.offset23, i64 1, !dbg !39
  %479 = trunc <2 x i32> %478 to <2 x i16>, !dbg !39
  %480 = bitcast <2 x i16> %479 to <2 x half>, !dbg !39
  %481 = fpext <2 x half> %480 to <2 x float>, !dbg !44
  %482 = insertelement <2 x float> poison, float %407, i64 0, !dbg !45
  %483 = insertelement <2 x float> %482, float %411, i64 1, !dbg !45
  %484 = fadd <2 x float> %483, %481, !dbg !45
  %485 = fptrunc <2 x float> %484 to <2 x half>, !dbg !46
  %486 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !39
  %487 = insertelement <2 x i32> %486, i32 %extelt.offset24, i64 1, !dbg !39
  %488 = trunc <2 x i32> %487 to <2 x i16>, !dbg !39
  %489 = bitcast <2 x i16> %488 to <2 x half>, !dbg !39
  %490 = fpext <2 x half> %489 to <2 x float>, !dbg !44
  %491 = insertelement <2 x float> poison, float %416, i64 0, !dbg !45
  %492 = insertelement <2 x float> %491, float %420, i64 1, !dbg !45
  %493 = fadd <2 x float> %492, %490, !dbg !45
  %494 = fptrunc <2 x float> %493 to <2 x half>, !dbg !46
  %495 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !39
  %496 = insertelement <2 x i32> %495, i32 %extelt.offset25, i64 1, !dbg !39
  %497 = trunc <2 x i32> %496 to <2 x i16>, !dbg !39
  %498 = bitcast <2 x i16> %497 to <2 x half>, !dbg !39
  %499 = fpext <2 x half> %498 to <2 x float>, !dbg !44
  %500 = insertelement <2 x float> poison, float %424, i64 0, !dbg !45
  %501 = insertelement <2 x float> %500, float %428, i64 1, !dbg !45
  %502 = fadd <2 x float> %501, %499, !dbg !45
  %503 = fptrunc <2 x float> %502 to <2 x half>, !dbg !46
  %504 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !39
  %505 = insertelement <2 x i32> %504, i32 %extelt.offset26, i64 1, !dbg !39
  %506 = trunc <2 x i32> %505 to <2 x i16>, !dbg !39
  %507 = bitcast <2 x i16> %506 to <2 x half>, !dbg !39
  %508 = fpext <2 x half> %507 to <2 x float>, !dbg !44
  %509 = insertelement <2 x float> poison, float %433, i64 0, !dbg !45
  %510 = insertelement <2 x float> %509, float %437, i64 1, !dbg !45
  %511 = fadd <2 x float> %510, %508, !dbg !45
  %512 = fptrunc <2 x float> %511 to <2 x half>, !dbg !46
  %513 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !39
  %514 = insertelement <2 x i32> %513, i32 %extelt.offset27, i64 1, !dbg !39
  %515 = trunc <2 x i32> %514 to <2 x i16>, !dbg !39
  %516 = bitcast <2 x i16> %515 to <2 x half>, !dbg !39
  %517 = fpext <2 x half> %516 to <2 x float>, !dbg !44
  %518 = insertelement <2 x float> poison, float %441, i64 0, !dbg !45
  %519 = insertelement <2 x float> %518, float %445, i64 1, !dbg !45
  %520 = fadd <2 x float> %519, %517, !dbg !45
  %521 = fptrunc <2 x float> %520 to <2 x half>, !dbg !46
  %522 = bitcast <2 x half> %458 to i32, !dbg !46
  %523 = bitcast <2 x half> %467 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %522, i32 %523, ptr addrspace(1) %446, i1 %58) #2, !dbg !46
  %524 = bitcast <2 x half> %476 to i32, !dbg !46
  %525 = bitcast <2 x half> %485 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %524, i32 %525, ptr addrspace(1) %447, i1 %59) #2, !dbg !46
  %526 = bitcast <2 x half> %494 to i32, !dbg !46
  %527 = bitcast <2 x half> %503 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %526, i32 %527, ptr addrspace(1) %448, i1 %60) #2, !dbg !46
  %528 = bitcast <2 x half> %512 to i32, !dbg !46
  %529 = bitcast <2 x half> %521 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %528, i32 %529, ptr addrspace(1) %449, i1 %61) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cuwudlitabc4tos2oztf6jaxh24gzbno753bi6gidux5mkpnwqqu.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/uw")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 40, scope: !5)
!23 = !DILocation(line: 33, column: 54, scope: !5)
!24 = !DILocation(line: 33, column: 36, scope: !5)
!25 = !DILocation(line: 33, column: 47, scope: !5)
!26 = !DILocation(line: 33, column: 30, scope: !5)
!27 = !DILocation(line: 33, column: 68, scope: !5)
!28 = !DILocation(line: 33, column: 60, scope: !5)
!29 = !DILocation(line: 33, column: 108, scope: !5)
!30 = !DILocation(line: 34, column: 30, scope: !5)
!31 = !DILocation(line: 34, column: 35, scope: !5)
!32 = !DILocation(line: 34, column: 75, scope: !5)
!33 = !DILocation(line: 35, column: 30, scope: !5)
!34 = !DILocation(line: 35, column: 60, scope: !5)
!35 = !DILocation(line: 35, column: 108, scope: !5)
!36 = !DILocation(line: 36, column: 41, scope: !5)
!37 = !DILocation(line: 36, column: 36, scope: !5)
!38 = !DILocation(line: 36, column: 30, scope: !5)
!39 = !DILocation(line: 36, column: 47, scope: !5)
!40 = !DILocation(line: 37, column: 18, scope: !5)
!41 = !DILocation(line: 39, column: 18, scope: !5)
!42 = !DILocation(line: 40, column: 18, scope: !5)
!43 = !DILocation(line: 42, column: 25, scope: !5)
!44 = !DILocation(line: 36, column: 95, scope: !5)
!45 = !DILocation(line: 41, column: 18, scope: !5)
!46 = !DILocation(line: 42, column: 48, scope: !5)
!47 = !DILocation(line: 42, column: 4, scope: !5)
