; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 127, !dbg !8
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !9
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #1, !dbg !10
  %11 = add i32 %10, 1, !dbg !11
  %12 = shl i32 %9, 10, !dbg !12
  %13 = mul i32 %12, %11, !dbg !13
  %14 = or i32 %13, %8, !dbg !14
  %15 = or i32 %14, 128, !dbg !14
  %16 = or i32 %14, 256, !dbg !14
  %17 = or i32 %14, 384, !dbg !14
  %18 = or i32 %14, 512, !dbg !14
  %19 = or i32 %14, 640, !dbg !14
  %20 = or i32 %14, 768, !dbg !14
  %21 = or i32 %14, 896, !dbg !14
  %22 = icmp slt i32 %14, 14850, !dbg !15
  %23 = icmp slt i32 %15, 14850, !dbg !15
  %24 = icmp slt i32 %16, 14850, !dbg !15
  %25 = icmp slt i32 %17, 14850, !dbg !15
  %26 = icmp slt i32 %18, 14850, !dbg !15
  %27 = icmp slt i32 %19, 14850, !dbg !15
  %28 = icmp slt i32 %20, 14850, !dbg !15
  %29 = icmp slt i32 %21, 14850, !dbg !15
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !16
  %31 = icmp slt i32 %30, 320, !dbg !17
  %.frozen = freeze i32 %14
  %32 = sdiv i32 %.frozen, 675, !dbg !18
  %33 = mul i32 %32, 675
  %.decomposed = sub i32 %.frozen, %33
  %.frozen1 = freeze i32 %15
  %34 = sdiv i32 %.frozen1, 675, !dbg !18
  %35 = mul i32 %34, 675
  %.decomposed2 = sub i32 %.frozen1, %35
  %.frozen3 = freeze i32 %16
  %36 = sdiv i32 %.frozen3, 675, !dbg !18
  %37 = mul i32 %36, 675
  %.decomposed4 = sub i32 %.frozen3, %37
  %.frozen5 = freeze i32 %17
  %38 = sdiv i32 %.frozen5, 675, !dbg !18
  %39 = mul i32 %38, 675
  %.decomposed6 = sub i32 %.frozen5, %39
  %.frozen7 = freeze i32 %18
  %40 = sdiv i32 %.frozen7, 675, !dbg !18
  %41 = mul i32 %40, 675
  %.decomposed8 = sub i32 %.frozen7, %41
  %.frozen9 = freeze i32 %19
  %42 = sdiv i32 %.frozen9, 675, !dbg !18
  %43 = mul i32 %42, 675
  %.decomposed10 = sub i32 %.frozen9, %43
  %.frozen11 = freeze i32 %20
  %44 = sdiv i32 %.frozen11, 675, !dbg !18
  %45 = mul i32 %44, 675
  %.decomposed12 = sub i32 %.frozen11, %45
  %.frozen13 = freeze i32 %21
  %46 = sdiv i32 %.frozen13, 675, !dbg !18
  %47 = mul i32 %46, 675
  %.decomposed14 = sub i32 %.frozen13, %47
  %48 = mul i32 %14, 320, !dbg !19
  %49 = mul i32 %15, 320, !dbg !19
  %50 = mul i32 %16, 320, !dbg !19
  %51 = mul i32 %17, 320, !dbg !19
  %52 = mul i32 %18, 320, !dbg !19
  %53 = mul i32 %19, 320, !dbg !19
  %54 = mul i32 %20, 320, !dbg !19
  %55 = mul i32 %21, 320, !dbg !19
  %56 = add i32 %48, %30, !dbg !20
  %57 = add i32 %49, %30, !dbg !20
  %58 = add i32 %50, %30, !dbg !20
  %59 = add i32 %51, %30, !dbg !20
  %60 = add i32 %52, %30, !dbg !20
  %61 = add i32 %53, %30, !dbg !20
  %62 = add i32 %54, %30, !dbg !20
  %63 = add i32 %55, %30, !dbg !20
  %64 = sext i32 %56 to i64, !dbg !21
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !21
  %66 = sext i32 %57 to i64, !dbg !21
  %67 = getelementptr half, ptr addrspace(1) %0, i64 %66, !dbg !21
  %68 = sext i32 %58 to i64, !dbg !21
  %69 = getelementptr half, ptr addrspace(1) %0, i64 %68, !dbg !21
  %70 = sext i32 %59 to i64, !dbg !21
  %71 = getelementptr half, ptr addrspace(1) %0, i64 %70, !dbg !21
  %72 = sext i32 %60 to i64, !dbg !21
  %73 = getelementptr half, ptr addrspace(1) %0, i64 %72, !dbg !21
  %74 = sext i32 %61 to i64, !dbg !21
  %75 = getelementptr half, ptr addrspace(1) %0, i64 %74, !dbg !21
  %76 = sext i32 %62 to i64, !dbg !21
  %77 = getelementptr half, ptr addrspace(1) %0, i64 %76, !dbg !21
  %78 = sext i32 %63 to i64, !dbg !21
  %79 = getelementptr half, ptr addrspace(1) %0, i64 %78, !dbg !21
  %80 = and i1 %31, %22, !dbg !22
  %81 = and i1 %31, %23, !dbg !22
  %82 = and i1 %31, %24, !dbg !22
  %83 = and i1 %31, %25, !dbg !22
  %84 = and i1 %31, %26, !dbg !22
  %85 = and i1 %31, %27, !dbg !22
  %86 = and i1 %31, %28, !dbg !22
  %87 = and i1 %31, %29, !dbg !22
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %80) #1, !dbg !23
  %89 = bitcast i16 %88 to half, !dbg !23
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %67, i1 %81) #1, !dbg !23
  %91 = bitcast i16 %90 to half, !dbg !23
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %69, i1 %82) #1, !dbg !23
  %93 = bitcast i16 %92 to half, !dbg !23
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %71, i1 %83) #1, !dbg !23
  %95 = bitcast i16 %94 to half, !dbg !23
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %84) #1, !dbg !23
  %97 = bitcast i16 %96 to half, !dbg !23
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %75, i1 %85) #1, !dbg !23
  %99 = bitcast i16 %98 to half, !dbg !23
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %77, i1 %86) #1, !dbg !23
  %101 = bitcast i16 %100 to half, !dbg !23
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 %87) #1, !dbg !23
  %103 = bitcast i16 %102 to half, !dbg !23
  %104 = fpext half %89 to float, !dbg !24
  %105 = fpext half %91 to float, !dbg !24
  %106 = fpext half %93 to float, !dbg !24
  %107 = fpext half %95 to float, !dbg !24
  %108 = fpext half %97 to float, !dbg !24
  %109 = fpext half %99 to float, !dbg !24
  %110 = fpext half %101 to float, !dbg !24
  %111 = fpext half %103 to float, !dbg !24
  %112 = sext i32 %30 to i64, !dbg !25
  %113 = getelementptr half, ptr addrspace(1) %1, i64 %112, !dbg !25
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %113, i1 %31) #1, !dbg !26
  %115 = bitcast i16 %114 to half, !dbg !26
  %116 = fpext half %115 to float, !dbg !27
  %117 = getelementptr half, ptr addrspace(1) %2, i64 %64, !dbg !28
  %118 = getelementptr half, ptr addrspace(1) %2, i64 %66, !dbg !28
  %119 = getelementptr half, ptr addrspace(1) %2, i64 %68, !dbg !28
  %120 = getelementptr half, ptr addrspace(1) %2, i64 %70, !dbg !28
  %121 = getelementptr half, ptr addrspace(1) %2, i64 %72, !dbg !28
  %122 = getelementptr half, ptr addrspace(1) %2, i64 %74, !dbg !28
  %123 = getelementptr half, ptr addrspace(1) %2, i64 %76, !dbg !28
  %124 = getelementptr half, ptr addrspace(1) %2, i64 %78, !dbg !28
  %125 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %117, i1 %80) #1, !dbg !29
  %126 = bitcast i16 %125 to half, !dbg !29
  %127 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %118, i1 %81) #1, !dbg !29
  %128 = bitcast i16 %127 to half, !dbg !29
  %129 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %119, i1 %82) #1, !dbg !29
  %130 = bitcast i16 %129 to half, !dbg !29
  %131 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %120, i1 %83) #1, !dbg !29
  %132 = bitcast i16 %131 to half, !dbg !29
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %121, i1 %84) #1, !dbg !29
  %134 = bitcast i16 %133 to half, !dbg !29
  %135 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %122, i1 %85) #1, !dbg !29
  %136 = bitcast i16 %135 to half, !dbg !29
  %137 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %123, i1 %86) #1, !dbg !29
  %138 = bitcast i16 %137 to half, !dbg !29
  %139 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %124, i1 %87) #1, !dbg !29
  %140 = bitcast i16 %139 to half, !dbg !29
  %141 = fpext half %126 to float, !dbg !30
  %142 = fpext half %128 to float, !dbg !30
  %143 = fpext half %130 to float, !dbg !30
  %144 = fpext half %132 to float, !dbg !30
  %145 = fpext half %134 to float, !dbg !30
  %146 = fpext half %136 to float, !dbg !30
  %147 = fpext half %138 to float, !dbg !30
  %148 = fpext half %140 to float, !dbg !30
  %149 = fadd float %104, %116, !dbg !31
  %150 = fadd float %105, %116, !dbg !31
  %151 = fadd float %106, %116, !dbg !31
  %152 = fadd float %107, %116, !dbg !31
  %153 = fadd float %108, %116, !dbg !31
  %154 = fadd float %109, %116, !dbg !31
  %155 = fadd float %110, %116, !dbg !31
  %156 = fadd float %111, %116, !dbg !31
  %157 = fmul float %141, 1.250000e-01, !dbg !32
  %158 = fmul float %142, 1.250000e-01, !dbg !32
  %159 = fmul float %143, 1.250000e-01, !dbg !32
  %160 = fmul float %144, 1.250000e-01, !dbg !32
  %161 = fmul float %145, 1.250000e-01, !dbg !32
  %162 = fmul float %146, 1.250000e-01, !dbg !32
  %163 = fmul float %147, 1.250000e-01, !dbg !32
  %164 = fmul float %148, 1.250000e-01, !dbg !32
  %165 = fadd float %149, %157, !dbg !33
  %166 = fadd float %150, %158, !dbg !33
  %167 = fadd float %151, %159, !dbg !33
  %168 = fadd float %152, %160, !dbg !33
  %169 = fadd float %153, %161, !dbg !33
  %170 = fadd float %154, %162, !dbg !33
  %171 = fadd float %155, %163, !dbg !33
  %172 = fadd float %156, %164, !dbg !33
  %173 = mul i32 %30, 675, !dbg !34
  %174 = add i32 %.decomposed, %173, !dbg !35
  %175 = add i32 %.decomposed2, %173, !dbg !35
  %176 = add i32 %.decomposed4, %173, !dbg !35
  %177 = add i32 %.decomposed6, %173, !dbg !35
  %178 = add i32 %.decomposed8, %173, !dbg !35
  %179 = add i32 %.decomposed10, %173, !dbg !35
  %180 = add i32 %.decomposed12, %173, !dbg !35
  %181 = add i32 %.decomposed14, %173, !dbg !35
  %182 = mul i32 %32, 216000, !dbg !36
  %183 = mul i32 %34, 216000, !dbg !36
  %184 = mul i32 %36, 216000, !dbg !36
  %185 = mul i32 %38, 216000, !dbg !36
  %186 = mul i32 %40, 216000, !dbg !36
  %187 = mul i32 %42, 216000, !dbg !36
  %188 = mul i32 %44, 216000, !dbg !36
  %189 = mul i32 %46, 216000, !dbg !36
  %190 = add i32 %174, %182, !dbg !37
  %191 = add i32 %175, %183, !dbg !37
  %192 = add i32 %176, %184, !dbg !37
  %193 = add i32 %177, %185, !dbg !37
  %194 = add i32 %178, %186, !dbg !37
  %195 = add i32 %179, %187, !dbg !37
  %196 = add i32 %180, %188, !dbg !37
  %197 = add i32 %181, %189, !dbg !37
  %198 = sext i32 %190 to i64, !dbg !38
  %199 = getelementptr half, ptr addrspace(1) %3, i64 %198, !dbg !38
  %200 = sext i32 %191 to i64, !dbg !38
  %201 = getelementptr half, ptr addrspace(1) %3, i64 %200, !dbg !38
  %202 = sext i32 %192 to i64, !dbg !38
  %203 = getelementptr half, ptr addrspace(1) %3, i64 %202, !dbg !38
  %204 = sext i32 %193 to i64, !dbg !38
  %205 = getelementptr half, ptr addrspace(1) %3, i64 %204, !dbg !38
  %206 = sext i32 %194 to i64, !dbg !38
  %207 = getelementptr half, ptr addrspace(1) %3, i64 %206, !dbg !38
  %208 = sext i32 %195 to i64, !dbg !38
  %209 = getelementptr half, ptr addrspace(1) %3, i64 %208, !dbg !38
  %210 = sext i32 %196 to i64, !dbg !38
  %211 = getelementptr half, ptr addrspace(1) %3, i64 %210, !dbg !38
  %212 = sext i32 %197 to i64, !dbg !38
  %213 = getelementptr half, ptr addrspace(1) %3, i64 %212, !dbg !38
  %214 = fptrunc float %165 to half, !dbg !39
  %215 = fptrunc float %166 to half, !dbg !39
  %216 = fptrunc float %167 to half, !dbg !39
  %217 = fptrunc float %168 to half, !dbg !39
  %218 = fptrunc float %169 to half, !dbg !39
  %219 = fptrunc float %170 to half, !dbg !39
  %220 = fptrunc float %171 to half, !dbg !39
  %221 = fptrunc float %172 to half, !dbg !39
  %222 = bitcast half %214 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %222, ptr addrspace(1) %199, i1 %80) #1, !dbg !39
  %223 = bitcast half %215 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %223, ptr addrspace(1) %201, i1 %81) #1, !dbg !39
  %224 = bitcast half %216 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %224, ptr addrspace(1) %203, i1 %82) #1, !dbg !39
  %225 = bitcast half %217 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %225, ptr addrspace(1) %205, i1 %83) #1, !dbg !39
  %226 = bitcast half %218 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %226, ptr addrspace(1) %207, i1 %84) #1, !dbg !39
  %227 = bitcast half %219 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %227, ptr addrspace(1) %209, i1 %85) #1, !dbg !39
  %228 = bitcast half %220 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %228, ptr addrspace(1) %211, i1 %86) #1, !dbg !39
  %229 = bitcast half %221 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %229, ptr addrspace(1) %213, i1 %87) #1, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cflmorxwram7b53hs73bzvriztaxm7ly3y2s7goaejppuevdgnlk.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/fl")
!3 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 23, column: 58, scope: !5)
!14 = !DILocation(line: 24, column: 23, scope: !5)
!15 = !DILocation(line: 25, column: 21, scope: !5)
!16 = !DILocation(line: 26, column: 28, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 32, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 40, scope: !5)
!20 = !DILocation(line: 33, column: 36, scope: !5)
!21 = !DILocation(line: 33, column: 30, scope: !5)
!22 = !DILocation(line: 33, column: 54, scope: !5)
!23 = !DILocation(line: 33, column: 46, scope: !5)
!24 = !DILocation(line: 33, column: 94, scope: !5)
!25 = !DILocation(line: 34, column: 30, scope: !5)
!26 = !DILocation(line: 34, column: 35, scope: !5)
!27 = !DILocation(line: 34, column: 75, scope: !5)
!28 = !DILocation(line: 35, column: 30, scope: !5)
!29 = !DILocation(line: 35, column: 46, scope: !5)
!30 = !DILocation(line: 35, column: 94, scope: !5)
!31 = !DILocation(line: 36, column: 18, scope: !5)
!32 = !DILocation(line: 38, column: 18, scope: !5)
!33 = !DILocation(line: 39, column: 18, scope: !5)
!34 = !DILocation(line: 40, column: 35, scope: !5)
!35 = !DILocation(line: 40, column: 31, scope: !5)
!36 = !DILocation(line: 40, column: 49, scope: !5)
!37 = !DILocation(line: 40, column: 42, scope: !5)
!38 = !DILocation(line: 40, column: 25, scope: !5)
!39 = !DILocation(line: 40, column: 61, scope: !5)
!40 = !DILocation(line: 40, column: 4, scope: !5)
