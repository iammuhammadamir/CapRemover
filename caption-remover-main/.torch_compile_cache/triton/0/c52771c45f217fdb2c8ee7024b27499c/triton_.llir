; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d910111213de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %16 = and i32 %15, 31, !dbg !10
  %17 = lshr i32 %15, 5, !dbg !10
  %18 = and i32 %17, 3, !dbg !10
  %urem = shl i32 %15, 2, !dbg !10
  %19 = and i32 %urem, 508, !dbg !10
  %20 = or i32 %19, 1, !dbg !10
  %21 = or i32 %19, 2, !dbg !10
  %22 = or i32 %19, 3, !dbg !10
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %24 = icmp slt i32 %23, %12, !dbg !12
  %25 = icmp ult i32 %19, 320, !dbg !13
  %.frozen = freeze i32 %23
  %.frozen15 = freeze i32 %9
  %26 = sdiv i32 %.frozen, %.frozen15, !dbg !14
  %27 = mul i32 %26, %.frozen15
  %.decomposed = sub i32 %.frozen, %27
  %28 = mul i32 %23, 320, !dbg !15
  %29 = add i32 %28, %19, !dbg !16
  %30 = sext i32 %29 to i64, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = and i1 %25, %24, !dbg !18
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #6, !dbg !19
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !19
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !19
  %extelt.offset = lshr i32 %34, 16, !dbg !19
  %extelt.offset1 = lshr i32 %35, 16, !dbg !19
  %36 = zext nneg i32 %19 to i64, !dbg !20
  %37 = getelementptr half, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #6, !dbg !21
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !21
  %extelt.offset2 = lshr i32 %39, 16, !dbg !21
  %extelt.offset3 = lshr i32 %40, 16, !dbg !21
  %41 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !22
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #6, !dbg !23
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %extelt.offset4 = lshr i32 %43, 16, !dbg !23
  %extelt.offset5 = lshr i32 %44, 16, !dbg !23
  %45 = mul i32 %11, %10, !dbg !24
  %46 = mul i32 %45, %19, !dbg !25
  %47 = mul i32 %45, %20, !dbg !25
  %48 = mul i32 %45, %21, !dbg !25
  %49 = mul i32 %45, %22, !dbg !25
  %50 = mul i32 %45, 320, !dbg !26
  %51 = mul i32 %50, %26, !dbg !27
  %52 = add i32 %51, %.decomposed, !dbg !28
  %53 = add i32 %52, %46, !dbg !29
  %54 = add i32 %52, %47, !dbg !29
  %55 = add i32 %52, %48, !dbg !29
  %56 = add i32 %52, %49, !dbg !29
  %57 = sext i32 %53 to i64, !dbg !30
  %58 = getelementptr half, ptr addrspace(1) %3, i64 %57, !dbg !30
  %59 = sext i32 %54 to i64, !dbg !30
  %60 = getelementptr half, ptr addrspace(1) %3, i64 %59, !dbg !30
  %61 = sext i32 %55 to i64, !dbg !30
  %62 = getelementptr half, ptr addrspace(1) %3, i64 %61, !dbg !30
  %63 = sext i32 %56 to i64, !dbg !30
  %64 = getelementptr half, ptr addrspace(1) %3, i64 %63, !dbg !30
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %58, i1 %32, i16 0, i1 %32) #6, !dbg !31
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %60, i1 %32, i16 0, i1 %32) #6, !dbg !31
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %62, i1 %32, i16 0, i1 %32) #6, !dbg !31
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %64, i1 %32, i16 0, i1 %32) #6, !dbg !31
  %69 = getelementptr half, ptr addrspace(1) %4, i64 %36, !dbg !32
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #6, !dbg !33
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !33
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !33
  %extelt.offset6 = lshr i32 %71, 16, !dbg !33
  %extelt.offset7 = lshr i32 %72, 16, !dbg !33
  %73 = getelementptr half, ptr addrspace(1) %5, i64 %57, !dbg !34
  %74 = getelementptr half, ptr addrspace(1) %5, i64 %59, !dbg !34
  %75 = getelementptr half, ptr addrspace(1) %5, i64 %61, !dbg !34
  %76 = getelementptr half, ptr addrspace(1) %5, i64 %63, !dbg !34
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 %32, i16 0, i1 %32) #6, !dbg !35
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %74, i1 %32, i16 0, i1 %32) #6, !dbg !35
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %75, i1 %32, i16 0, i1 %32) #6, !dbg !35
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %76, i1 %32, i16 0, i1 %32) #6, !dbg !35
  %81 = getelementptr half, ptr addrspace(1) %6, i64 %36, !dbg !36
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #6, !dbg !37
  %83 = getelementptr half, ptr addrspace(1) %7, i64 %36, !dbg !38
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #6, !dbg !39
  %85 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !19
  %86 = insertelement <2 x i32> %85, i32 %extelt.offset, i64 1, !dbg !19
  %87 = trunc <2 x i32> %86 to <2 x i16>, !dbg !19
  %88 = bitcast <2 x i16> %87 to <2 x half>, !dbg !19
  %89 = fpext <2 x half> %88 to <2 x float>, !dbg !40
  %90 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !21
  %91 = insertelement <2 x i32> %90, i32 %extelt.offset2, i64 1, !dbg !21
  %92 = trunc <2 x i32> %91 to <2 x i16>, !dbg !21
  %93 = bitcast <2 x i16> %92 to <2 x half>, !dbg !21
  %94 = fpext <2 x half> %93 to <2 x float>, !dbg !41
  %95 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !23
  %96 = insertelement <2 x i32> %95, i32 %extelt.offset4, i64 1, !dbg !23
  %97 = trunc <2 x i32> %96 to <2 x i16>, !dbg !23
  %98 = bitcast <2 x i16> %97 to <2 x half>, !dbg !23
  %99 = fpext <2 x half> %98 to <2 x float>, !dbg !42
  %100 = insertelement <2 x i16> poison, i16 %65, i64 0, !dbg !31
  %101 = insertelement <2 x i16> %100, i16 %66, i64 1, !dbg !31
  %102 = bitcast <2 x i16> %101 to <2 x half>, !dbg !31
  %103 = fpext <2 x half> %102 to <2 x float>, !dbg !43
  %104 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !33
  %105 = insertelement <2 x i32> %104, i32 %extelt.offset6, i64 1, !dbg !33
  %106 = trunc <2 x i32> %105 to <2 x i16>, !dbg !33
  %107 = bitcast <2 x i16> %106 to <2 x half>, !dbg !33
  %108 = fpext <2 x half> %107 to <2 x float>, !dbg !44
  %109 = insertelement <2 x i16> poison, i16 %77, i64 0, !dbg !35
  %110 = insertelement <2 x i16> %109, i16 %78, i64 1, !dbg !35
  %111 = bitcast <2 x i16> %110 to <2 x half>, !dbg !35
  %112 = fpext <2 x half> %111 to <2 x float>, !dbg !45
  %113 = fadd <2 x float> %89, %94, !dbg !46
  %114 = fmul <2 x float> %99, <float 1.250000e-01, float 1.250000e-01>, !dbg !47
  %115 = fadd <2 x float> %113, %114, !dbg !48
  %116 = fadd <2 x float> %103, %108, !dbg !49
  %117 = fmul <2 x float> %112, <float 1.250000e-01, float 1.250000e-01>, !dbg !50
  %118 = fadd <2 x float> %117, %116, !dbg !51
  %119 = fadd <2 x float> %115, %118, !dbg !52
  %120 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %121 = insertelement <2 x i32> %120, i32 %extelt.offset1, i64 1, !dbg !19
  %122 = trunc <2 x i32> %121 to <2 x i16>, !dbg !19
  %123 = bitcast <2 x i16> %122 to <2 x half>, !dbg !19
  %124 = fpext <2 x half> %123 to <2 x float>, !dbg !40
  %125 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !21
  %126 = insertelement <2 x i32> %125, i32 %extelt.offset3, i64 1, !dbg !21
  %127 = trunc <2 x i32> %126 to <2 x i16>, !dbg !21
  %128 = bitcast <2 x i16> %127 to <2 x half>, !dbg !21
  %129 = fpext <2 x half> %128 to <2 x float>, !dbg !41
  %130 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !23
  %131 = insertelement <2 x i32> %130, i32 %extelt.offset5, i64 1, !dbg !23
  %132 = trunc <2 x i32> %131 to <2 x i16>, !dbg !23
  %133 = bitcast <2 x i16> %132 to <2 x half>, !dbg !23
  %134 = fpext <2 x half> %133 to <2 x float>, !dbg !42
  %135 = insertelement <2 x i16> poison, i16 %67, i64 0, !dbg !31
  %136 = insertelement <2 x i16> %135, i16 %68, i64 1, !dbg !31
  %137 = bitcast <2 x i16> %136 to <2 x half>, !dbg !31
  %138 = fpext <2 x half> %137 to <2 x float>, !dbg !43
  %139 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !33
  %140 = insertelement <2 x i32> %139, i32 %extelt.offset7, i64 1, !dbg !33
  %141 = trunc <2 x i32> %140 to <2 x i16>, !dbg !33
  %142 = bitcast <2 x i16> %141 to <2 x half>, !dbg !33
  %143 = fpext <2 x half> %142 to <2 x float>, !dbg !44
  %144 = insertelement <2 x i16> poison, i16 %79, i64 0, !dbg !35
  %145 = insertelement <2 x i16> %144, i16 %80, i64 1, !dbg !35
  %146 = bitcast <2 x i16> %145 to <2 x half>, !dbg !35
  %147 = fpext <2 x half> %146 to <2 x float>, !dbg !45
  %148 = fadd <2 x float> %124, %129, !dbg !46
  %149 = fmul <2 x float> %134, <float 1.250000e-01, float 1.250000e-01>, !dbg !47
  %150 = fadd <2 x float> %148, %149, !dbg !48
  %151 = fadd <2 x float> %138, %143, !dbg !49
  %152 = fmul <2 x float> %147, <float 1.250000e-01, float 1.250000e-01>, !dbg !50
  %153 = fadd <2 x float> %151, %152, !dbg !51
  %154 = fadd <2 x float> %150, %153, !dbg !52
  %shift = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %155 = fadd <2 x float> %119, %shift, !dbg !53
  %156 = fadd <2 x float> %154, %155, !dbg !53
  %shift12 = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %157 = fadd <2 x float> %shift12, %156, !dbg !53
  %158 = extractelement <2 x float> %157, i64 0, !dbg !53
  %159 = select i1 %32, float %158, float 0.000000e+00, !dbg !53
  %160 = bitcast float %159 to i32, !dbg !59
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !59
  %162 = bitcast i32 %161 to float, !dbg !59
  %163 = fadd float %159, %162, !dbg !53
  %164 = bitcast float %163 to i32, !dbg !59
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !59
  %166 = bitcast i32 %165 to float, !dbg !59
  %167 = fadd float %163, %166, !dbg !53
  %168 = bitcast float %167 to i32, !dbg !59
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !59
  %170 = bitcast i32 %169 to float, !dbg !59
  %171 = fadd float %167, %170, !dbg !53
  %172 = bitcast float %171 to i32, !dbg !59
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !59
  %174 = bitcast i32 %173 to float, !dbg !59
  %175 = fadd float %171, %174, !dbg !53
  %176 = bitcast float %175 to i32, !dbg !59
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !59
  %178 = bitcast i32 %177 to float, !dbg !59
  %179 = fadd float %175, %178, !dbg !53
  %180 = icmp eq i32 %16, 0, !dbg !59
  %181 = zext nneg i32 %18 to i64, !dbg !59
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i64 %181, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, float %179, i1 %180) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %183 = icmp slt i32 %15, 4, !dbg !59
  %184 = sext i32 %15 to i64, !dbg !59
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184, !dbg !59
  %186 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %185, i1 %183) #6, !dbg !59
  %187 = bitcast float %186 to i32, !dbg !59
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !59
  %189 = bitcast i32 %188 to float, !dbg !59
  %190 = fadd float %186, %189, !dbg !53
  %191 = bitcast float %190 to i32, !dbg !59
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !59
  %193 = bitcast i32 %192 to float, !dbg !59
  %194 = fadd float %190, %193, !dbg !53
  %195 = and i32 %15, 3, !dbg !59
  %196 = icmp eq i32 %195, 0, !dbg !59
  %197 = and i1 %183, %196, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, float %194, i1 %197) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %198 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !59
  %199 = fadd float %198, 0.000000e+00, !dbg !61
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float 3.200000e+02) #6, !dbg !65
  %201 = insertelement <2 x float> poison, float %200, i64 0, !dbg !66
  %202 = shufflevector <2 x float> %201, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !66
  %203 = fsub <2 x float> %119, %202, !dbg !66
  %204 = fsub <2 x float> %154, %202, !dbg !66
  %205 = fmul <2 x float> %203, %203, !dbg !67
  %206 = fmul <2 x float> %204, %204, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %shift13 = shufflevector <2 x float> %205, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !70
  %207 = fadd <2 x float> %205, %shift13, !dbg !70
  %208 = fadd <2 x float> %206, %207, !dbg !70
  %shift14 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !70
  %209 = fadd <2 x float> %shift14, %208, !dbg !70
  %210 = extractelement <2 x float> %209, i64 0, !dbg !70
  %211 = select i1 %32, float %210, float 0.000000e+00, !dbg !70
  %212 = bitcast float %211 to i32, !dbg !68
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 16, i32 31), !dbg !68
  %214 = bitcast i32 %213 to float, !dbg !68
  %215 = fadd float %211, %214, !dbg !70
  %216 = bitcast float %215 to i32, !dbg !68
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !68
  %218 = bitcast i32 %217 to float, !dbg !68
  %219 = fadd float %215, %218, !dbg !70
  %220 = bitcast float %219 to i32, !dbg !68
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !68
  %222 = bitcast i32 %221 to float, !dbg !68
  %223 = fadd float %219, %222, !dbg !70
  %224 = bitcast float %223 to i32, !dbg !68
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !68
  %226 = bitcast i32 %225 to float, !dbg !68
  %227 = fadd float %223, %226, !dbg !70
  %228 = bitcast float %227 to i32, !dbg !68
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !68
  %230 = bitcast i32 %229 to float, !dbg !68
  %231 = fadd float %227, %230, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, float %231, i1 %180) #6, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %232 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %185, i1 %183) #6, !dbg !68
  %233 = bitcast float %232 to i32, !dbg !68
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !68
  %235 = bitcast i32 %234 to float, !dbg !68
  %236 = fadd float %232, %235, !dbg !70
  %237 = bitcast float %236 to i32, !dbg !68
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !68
  %239 = bitcast i32 %238 to float, !dbg !68
  %240 = fadd float %236, %239, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, float %240, i1 %197) #6, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %241 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !68
  %242 = fadd float %241, 0.000000e+00, !dbg !73
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float 3.200000e+02) #6, !dbg !75
  %244 = fadd float %243, 0x3EE4F8B580000000, !dbg !76
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not.i = icmp eq i32 %245, 0, !dbg !77
  br i1 %.not.i, label %248, label %246, !dbg !77

246:                                              ; preds = %14
  %247 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %244), !dbg !77
  br label %__nv_rsqrtf.exit, !dbg !77

248:                                              ; preds = %14
  %249 = tail call float @llvm.nvvm.rsqrt.approx.f(float %244), !dbg !77
  br label %__nv_rsqrtf.exit, !dbg !77

__nv_rsqrtf.exit:                                 ; preds = %246, %248
  %.0.i = phi float [ %247, %246 ], [ %249, %248 ], !dbg !77
  %250 = extractvalue { i32, i32 } %84, 1, !dbg !39
  %extelt.offset11 = lshr i32 %250, 16, !dbg !39
  %251 = extractvalue { i32, i32 } %84, 0, !dbg !39
  %extelt.offset10 = lshr i32 %251, 16, !dbg !39
  %252 = extractvalue { i32, i32 } %82, 1, !dbg !37
  %extelt.offset9 = lshr i32 %252, 16, !dbg !37
  %253 = extractvalue { i32, i32 } %82, 0, !dbg !37
  %extelt.offset8 = lshr i32 %253, 16, !dbg !37
  %254 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !78
  %255 = shufflevector <2 x float> %254, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !78
  %256 = fmul <2 x float> %203, %255, !dbg !78
  %257 = fmul <2 x float> %204, %255, !dbg !78
  %258 = fptrunc <2 x float> %119 to <2 x half>, !dbg !79
  %259 = fptrunc <2 x float> %154 to <2 x half>, !dbg !79
  %260 = bitcast <2 x half> %258 to i32, !dbg !79
  %261 = bitcast <2 x half> %259 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %260, i32 %261, ptr addrspace(1) %31, i1 %32) #6, !dbg !79
  %262 = getelementptr half, ptr addrspace(1) %8, i64 %30, !dbg !80
  %263 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !39
  %264 = insertelement <2 x i32> %263, i32 %extelt.offset10, i64 1, !dbg !39
  %265 = trunc <2 x i32> %264 to <2 x i16>, !dbg !39
  %266 = bitcast <2 x i16> %265 to <2 x half>, !dbg !39
  %267 = fpext <2 x half> %266 to <2 x float>, !dbg !81
  %268 = insertelement <2 x i32> poison, i32 %253, i64 0, !dbg !37
  %269 = insertelement <2 x i32> %268, i32 %extelt.offset8, i64 1, !dbg !37
  %270 = trunc <2 x i32> %269 to <2 x i16>, !dbg !37
  %271 = bitcast <2 x i16> %270 to <2 x half>, !dbg !37
  %272 = fpext <2 x half> %271 to <2 x float>, !dbg !82
  %273 = fmul <2 x float> %256, %272, !dbg !83
  %274 = fadd <2 x float> %273, %267, !dbg !84
  %275 = fptrunc <2 x float> %274 to <2 x half>, !dbg !85
  %276 = insertelement <2 x i32> poison, i32 %250, i64 0, !dbg !39
  %277 = insertelement <2 x i32> %276, i32 %extelt.offset11, i64 1, !dbg !39
  %278 = trunc <2 x i32> %277 to <2 x i16>, !dbg !39
  %279 = bitcast <2 x i16> %278 to <2 x half>, !dbg !39
  %280 = fpext <2 x half> %279 to <2 x float>, !dbg !81
  %281 = insertelement <2 x i32> poison, i32 %252, i64 0, !dbg !37
  %282 = insertelement <2 x i32> %281, i32 %extelt.offset9, i64 1, !dbg !37
  %283 = trunc <2 x i32> %282 to <2 x i16>, !dbg !37
  %284 = bitcast <2 x i16> %283 to <2 x half>, !dbg !37
  %285 = fpext <2 x half> %284 to <2 x float>, !dbg !82
  %286 = fmul <2 x float> %257, %285, !dbg !83
  %287 = fadd <2 x float> %286, %280, !dbg !84
  %288 = fptrunc <2 x float> %287 to <2 x half>, !dbg !85
  %289 = bitcast <2 x half> %275 to i32, !dbg !85
  %290 = bitcast <2 x half> %288 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %289, i32 %290, ptr addrspace(1) %262, i1 %32) #6, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "c6vthtidirwmzeduiimqylhggrxlqnfmsrs2mg7u7apejvsgjmgi.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/6v")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910111213de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910111213de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d910111213de", linkageName: "triton__0d1d2d3d4d5d6d7d8d910111213de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 24, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 21, scope: !7)
!13 = !DILocation(line: 29, column: 21, scope: !7)
!14 = !DILocation(line: 33, column: 20, scope: !7)
!15 = !DILocation(line: 34, column: 44, scope: !7)
!16 = !DILocation(line: 34, column: 40, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 58, scope: !7)
!19 = !DILocation(line: 34, column: 50, scope: !7)
!20 = !DILocation(line: 35, column: 30, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 36, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 46, scope: !7)
!24 = !DILocation(line: 37, column: 40, scope: !7)
!25 = !DILocation(line: 37, column: 44, scope: !7)
!26 = !DILocation(line: 37, column: 59, scope: !7)
!27 = !DILocation(line: 37, column: 63, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 51, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 69, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 70, scope: !7)
!36 = !DILocation(line: 40, column: 31, scope: !7)
!37 = !DILocation(line: 40, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 31, scope: !7)
!39 = !DILocation(line: 41, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 79, scope: !7)
!41 = !DILocation(line: 35, column: 86, scope: !7)
!42 = !DILocation(line: 36, column: 75, scope: !7)
!43 = !DILocation(line: 37, column: 128, scope: !7)
!44 = !DILocation(line: 38, column: 87, scope: !7)
!45 = !DILocation(line: 39, column: 129, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 18, scope: !7)
!49 = !DILocation(line: 48, column: 19, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 19, scope: !7)
!53 = !DILocation(line: 233, column: 15, scope: !54, inlinedAt: !57)
!54 = distinct !DILexicalBlockFile(scope: !56, file: !55, discriminator: 0)
!55 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!56 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!57 = !DILocation(line: 243, column: 36, scope: !54, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 59, scope: !54)
!59 = !DILocation(line: 243, column: 36, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 57, column: 59, scope: !56)
!61 = !DILocation(line: 17, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!64 = !DILocation(line: 57, column: 45, scope: !62)
!65 = !DILocation(line: 60, column: 20, scope: !7)
!66 = !DILocation(line: 61, column: 20, scope: !7)
!67 = !DILocation(line: 62, column: 20, scope: !7)
!68 = !DILocation(line: 243, column: 36, scope: !56, inlinedAt: !69)
!69 = !DILocation(line: 65, column: 59, scope: !56)
!70 = !DILocation(line: 233, column: 15, scope: !54, inlinedAt: !71)
!71 = !DILocation(line: 243, column: 36, scope: !54, inlinedAt: !72)
!72 = !DILocation(line: 65, column: 59, scope: !54)
!73 = !DILocation(line: 17, column: 15, scope: !62, inlinedAt: !74)
!74 = !DILocation(line: 65, column: 45, scope: !62)
!75 = !DILocation(line: 68, column: 20, scope: !7)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 71, column: 28, scope: !7)
!78 = !DILocation(line: 72, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 51, scope: !7)
!80 = !DILocation(line: 79, column: 25, scope: !7)
!81 = !DILocation(line: 41, column: 87, scope: !7)
!82 = !DILocation(line: 40, column: 87, scope: !7)
!83 = !DILocation(line: 74, column: 20, scope: !7)
!84 = !DILocation(line: 76, column: 20, scope: !7)
!85 = !DILocation(line: 79, column: 48, scope: !7)
!86 = !DILocation(line: 79, column: 4, scope: !7)
