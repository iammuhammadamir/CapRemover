; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = and i32 %9, 31, !dbg !8
  %11 = lshr i32 %9, 5, !dbg !8
  %12 = shl i32 %9, 3, !dbg !8
  %13 = and i32 %12, 24, !dbg !8
  %14 = and i32 %11, 3, !dbg !8
  %15 = or i32 %14, 4, !dbg !8
  %16 = or i32 %14, 8, !dbg !8
  %17 = or i32 %14, 12, !dbg !8
  %18 = or i32 %14, 16, !dbg !8
  %19 = or i32 %14, 20, !dbg !8
  %20 = or i32 %14, 24, !dbg !8
  %21 = or i32 %14, 28, !dbg !8
  %22 = lshr i32 %10, 2, !dbg !9
  %23 = shl nuw nsw i32 %14, 3, !dbg !9
  %24 = or i32 %23, %22, !dbg !9
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %27 = add i32 %26, 1, !dbg !12
  %28 = shl i32 %25, 5, !dbg !13
  %29 = mul i32 %28, %27, !dbg !14
  %30 = or i32 %29, %13, !dbg !15
  %31 = or i32 %29, %14, !dbg !15
  %32 = or i32 %29, %15, !dbg !15
  %33 = or i32 %29, %16, !dbg !15
  %34 = or i32 %29, %17, !dbg !15
  %35 = or i32 %29, %18, !dbg !15
  %36 = or i32 %29, %19, !dbg !15
  %37 = or i32 %29, %20, !dbg !15
  %38 = or i32 %29, %21, !dbg !15
  %39 = icmp slt i32 %30, 14080, !dbg !16
  %40 = icmp slt i32 %31, 14080, !dbg !16
  %41 = icmp slt i32 %32, 14080, !dbg !16
  %42 = icmp slt i32 %33, 14080, !dbg !16
  %43 = icmp slt i32 %34, 14080, !dbg !16
  %44 = icmp slt i32 %35, 14080, !dbg !16
  %45 = icmp slt i32 %36, 14080, !dbg !16
  %46 = icmp slt i32 %37, 14080, !dbg !16
  %47 = icmp slt i32 %38, 14080, !dbg !16
  %48 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %49 = shl i32 %48, 5, !dbg !18
  %50 = or i32 %49, %24, !dbg !19
  %51 = or i32 %49, %10, !dbg !19
  %52 = icmp slt i32 %50, %7, !dbg !20
  %53 = icmp slt i32 %51, %7, !dbg !20
  %54 = srem i32 %31, 640, !dbg !21
  %55 = srem i32 %32, 640, !dbg !21
  %56 = srem i32 %33, 640, !dbg !21
  %57 = srem i32 %34, 640, !dbg !21
  %58 = srem i32 %35, 640, !dbg !21
  %59 = srem i32 %36, 640, !dbg !21
  %60 = srem i32 %37, 640, !dbg !21
  %61 = srem i32 %38, 640, !dbg !21
  %62 = mul i32 %50, 14080, !dbg !22
  %63 = add i32 %62, %30, !dbg !23
  %64 = sext i32 %63 to i64, !dbg !24
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = and i1 %52, %39, !dbg !25
  %67 = and i1 %53, %40, !dbg !25
  %68 = and i1 %53, %41, !dbg !25
  %69 = and i1 %53, %42, !dbg !25
  %70 = and i1 %53, %43, !dbg !25
  %71 = and i1 %53, %44, !dbg !25
  %72 = and i1 %53, %45, !dbg !25
  %73 = and i1 %53, %46, !dbg !25
  %74 = and i1 %53, %47, !dbg !25
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %66) #2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !26
  %80 = trunc i32 %76 to i16, !dbg !26
  %extelt.offset = lshr i32 %76, 16, !dbg !26
  %81 = trunc i32 %extelt.offset to i16, !dbg !26
  %82 = trunc i32 %77 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %77, 16, !dbg !26
  %83 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %84 = trunc i32 %78 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %78, 16, !dbg !26
  %85 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %86 = trunc i32 %79 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %79, 16, !dbg !26
  %87 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %88 = mul nuw nsw i32 %13, 33, !dbg !27
  %89 = add nuw nsw i32 %24, %88, !dbg !27
  %90 = zext nneg i32 %89 to i64, !dbg !27
  %91 = getelementptr half, ptr addrspace(3) @global_smem, i64 %90, !dbg !27
  store i16 %80, ptr addrspace(3) %91, align 2, !dbg !27
  %92 = add nuw nsw i32 %88, 33, !dbg !27
  %93 = add nuw nsw i32 %92, %24, !dbg !27
  %94 = zext nneg i32 %93 to i64, !dbg !27
  %95 = getelementptr half, ptr addrspace(3) @global_smem, i64 %94, !dbg !27
  store i16 %81, ptr addrspace(3) %95, align 2, !dbg !27
  %96 = add nuw nsw i32 %88, 66, !dbg !27
  %97 = add nuw nsw i32 %96, %24, !dbg !27
  %98 = zext nneg i32 %97 to i64, !dbg !27
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !27
  store i16 %82, ptr addrspace(3) %99, align 2, !dbg !27
  %100 = add nuw nsw i32 %88, 99, !dbg !27
  %101 = add nuw nsw i32 %100, %24, !dbg !27
  %102 = zext nneg i32 %101 to i64, !dbg !27
  %103 = getelementptr half, ptr addrspace(3) @global_smem, i64 %102, !dbg !27
  store i16 %83, ptr addrspace(3) %103, align 2, !dbg !27
  %104 = add nuw nsw i32 %88, 132, !dbg !27
  %105 = add nuw nsw i32 %104, %24, !dbg !27
  %106 = zext nneg i32 %105 to i64, !dbg !27
  %107 = getelementptr half, ptr addrspace(3) @global_smem, i64 %106, !dbg !27
  store i16 %84, ptr addrspace(3) %107, align 2, !dbg !27
  %108 = add nuw nsw i32 %88, 165, !dbg !27
  %109 = add nuw nsw i32 %108, %24, !dbg !27
  %110 = zext nneg i32 %109 to i64, !dbg !27
  %111 = getelementptr half, ptr addrspace(3) @global_smem, i64 %110, !dbg !27
  store i16 %85, ptr addrspace(3) %111, align 2, !dbg !27
  %112 = add nuw nsw i32 %88, 198, !dbg !27
  %113 = add nuw nsw i32 %112, %24, !dbg !27
  %114 = zext nneg i32 %113 to i64, !dbg !27
  %115 = getelementptr half, ptr addrspace(3) @global_smem, i64 %114, !dbg !27
  store i16 %86, ptr addrspace(3) %115, align 2, !dbg !27
  %116 = add nuw nsw i32 %88, 231, !dbg !27
  %117 = add nuw nsw i32 %116, %24, !dbg !27
  %118 = zext nneg i32 %117 to i64, !dbg !27
  %119 = getelementptr half, ptr addrspace(3) @global_smem, i64 %118, !dbg !27
  store i16 %87, ptr addrspace(3) %119, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %120 = mul nuw nsw i32 %14, 33, !dbg !27
  %121 = add nuw nsw i32 %120, %10, !dbg !27
  %122 = zext nneg i32 %121 to i64, !dbg !27
  %123 = getelementptr half, ptr addrspace(3) @global_smem, i64 %122, !dbg !27
  %124 = load half, ptr addrspace(3) %123, align 2, !dbg !27
  %125 = mul nuw nsw i32 %15, 33, !dbg !27
  %126 = add nuw nsw i32 %125, %10, !dbg !27
  %127 = zext nneg i32 %126 to i64, !dbg !27
  %128 = getelementptr half, ptr addrspace(3) @global_smem, i64 %127, !dbg !27
  %129 = load half, ptr addrspace(3) %128, align 2, !dbg !27
  %130 = mul nuw nsw i32 %16, 33, !dbg !27
  %131 = add nuw nsw i32 %130, %10, !dbg !27
  %132 = zext nneg i32 %131 to i64, !dbg !27
  %133 = getelementptr half, ptr addrspace(3) @global_smem, i64 %132, !dbg !27
  %134 = load half, ptr addrspace(3) %133, align 2, !dbg !27
  %135 = mul nuw nsw i32 %17, 33, !dbg !27
  %136 = add nuw nsw i32 %135, %10, !dbg !27
  %137 = zext nneg i32 %136 to i64, !dbg !27
  %138 = getelementptr half, ptr addrspace(3) @global_smem, i64 %137, !dbg !27
  %139 = load half, ptr addrspace(3) %138, align 2, !dbg !27
  %140 = mul nuw nsw i32 %18, 33, !dbg !27
  %141 = add nuw nsw i32 %140, %10, !dbg !27
  %142 = zext nneg i32 %141 to i64, !dbg !27
  %143 = getelementptr half, ptr addrspace(3) @global_smem, i64 %142, !dbg !27
  %144 = load half, ptr addrspace(3) %143, align 2, !dbg !27
  %145 = mul nuw nsw i32 %19, 33, !dbg !27
  %146 = add nuw nsw i32 %145, %10, !dbg !27
  %147 = zext nneg i32 %146 to i64, !dbg !27
  %148 = getelementptr half, ptr addrspace(3) @global_smem, i64 %147, !dbg !27
  %149 = load half, ptr addrspace(3) %148, align 2, !dbg !27
  %150 = mul nuw nsw i32 %20, 33, !dbg !27
  %151 = add nuw nsw i32 %150, %10, !dbg !27
  %152 = zext nneg i32 %151 to i64, !dbg !27
  %153 = getelementptr half, ptr addrspace(3) @global_smem, i64 %152, !dbg !27
  %154 = load half, ptr addrspace(3) %153, align 2, !dbg !27
  %155 = mul nuw nsw i32 %21, 33, !dbg !27
  %156 = add nuw nsw i32 %155, %10, !dbg !27
  %157 = zext nneg i32 %156 to i64, !dbg !27
  %158 = getelementptr half, ptr addrspace(3) @global_smem, i64 %157, !dbg !27
  %159 = load half, ptr addrspace(3) %158, align 2, !dbg !27
  %160 = fpext half %124 to float, !dbg !28
  %161 = fpext half %129 to float, !dbg !28
  %162 = fpext half %134 to float, !dbg !28
  %163 = fpext half %139 to float, !dbg !28
  %164 = fpext half %144 to float, !dbg !28
  %165 = fpext half %149 to float, !dbg !28
  %166 = fpext half %154 to float, !dbg !28
  %167 = fpext half %159 to float, !dbg !28
  %168 = sext i32 %54 to i64, !dbg !29
  %169 = getelementptr half, ptr addrspace(1) %1, i64 %168, !dbg !29
  %170 = sext i32 %55 to i64, !dbg !29
  %171 = getelementptr half, ptr addrspace(1) %1, i64 %170, !dbg !29
  %172 = sext i32 %56 to i64, !dbg !29
  %173 = getelementptr half, ptr addrspace(1) %1, i64 %172, !dbg !29
  %174 = sext i32 %57 to i64, !dbg !29
  %175 = getelementptr half, ptr addrspace(1) %1, i64 %174, !dbg !29
  %176 = sext i32 %58 to i64, !dbg !29
  %177 = getelementptr half, ptr addrspace(1) %1, i64 %176, !dbg !29
  %178 = sext i32 %59 to i64, !dbg !29
  %179 = getelementptr half, ptr addrspace(1) %1, i64 %178, !dbg !29
  %180 = sext i32 %60 to i64, !dbg !29
  %181 = getelementptr half, ptr addrspace(1) %1, i64 %180, !dbg !29
  %182 = sext i32 %61 to i64, !dbg !29
  %183 = getelementptr half, ptr addrspace(1) %1, i64 %182, !dbg !29
  %184 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %169, i1 %40) #2, !dbg !30
  %185 = bitcast i16 %184 to half, !dbg !30
  %186 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %171, i1 %41) #2, !dbg !30
  %187 = bitcast i16 %186 to half, !dbg !30
  %188 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %173, i1 %42) #2, !dbg !30
  %189 = bitcast i16 %188 to half, !dbg !30
  %190 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %175, i1 %43) #2, !dbg !30
  %191 = bitcast i16 %190 to half, !dbg !30
  %192 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %177, i1 %44) #2, !dbg !30
  %193 = bitcast i16 %192 to half, !dbg !30
  %194 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %179, i1 %45) #2, !dbg !30
  %195 = bitcast i16 %194 to half, !dbg !30
  %196 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %181, i1 %46) #2, !dbg !30
  %197 = bitcast i16 %196 to half, !dbg !30
  %198 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %183, i1 %47) #2, !dbg !30
  %199 = bitcast i16 %198 to half, !dbg !30
  %200 = fpext half %185 to float, !dbg !31
  %201 = fpext half %187 to float, !dbg !31
  %202 = fpext half %189 to float, !dbg !31
  %203 = fpext half %191 to float, !dbg !31
  %204 = fpext half %193 to float, !dbg !31
  %205 = fpext half %195 to float, !dbg !31
  %206 = fpext half %197 to float, !dbg !31
  %207 = fpext half %199 to float, !dbg !31
  %208 = mul i32 %5, %4, !dbg !32
  %209 = mul i32 %31, %208, !dbg !33
  %210 = mul i32 %32, %208, !dbg !33
  %211 = mul i32 %33, %208, !dbg !33
  %212 = mul i32 %34, %208, !dbg !33
  %213 = mul i32 %35, %208, !dbg !33
  %214 = mul i32 %36, %208, !dbg !33
  %215 = mul i32 %37, %208, !dbg !33
  %216 = mul i32 %38, %208, !dbg !33
  %217 = add i32 %209, %51, !dbg !34
  %218 = add i32 %210, %51, !dbg !34
  %219 = add i32 %211, %51, !dbg !34
  %220 = add i32 %212, %51, !dbg !34
  %221 = add i32 %213, %51, !dbg !34
  %222 = add i32 %214, %51, !dbg !34
  %223 = add i32 %215, %51, !dbg !34
  %224 = add i32 %216, %51, !dbg !34
  %225 = sext i32 %217 to i64, !dbg !35
  %226 = getelementptr half, ptr addrspace(1) %2, i64 %225, !dbg !35
  %227 = sext i32 %218 to i64, !dbg !35
  %228 = getelementptr half, ptr addrspace(1) %2, i64 %227, !dbg !35
  %229 = sext i32 %219 to i64, !dbg !35
  %230 = getelementptr half, ptr addrspace(1) %2, i64 %229, !dbg !35
  %231 = sext i32 %220 to i64, !dbg !35
  %232 = getelementptr half, ptr addrspace(1) %2, i64 %231, !dbg !35
  %233 = sext i32 %221 to i64, !dbg !35
  %234 = getelementptr half, ptr addrspace(1) %2, i64 %233, !dbg !35
  %235 = sext i32 %222 to i64, !dbg !35
  %236 = getelementptr half, ptr addrspace(1) %2, i64 %235, !dbg !35
  %237 = sext i32 %223 to i64, !dbg !35
  %238 = getelementptr half, ptr addrspace(1) %2, i64 %237, !dbg !35
  %239 = sext i32 %224 to i64, !dbg !35
  %240 = getelementptr half, ptr addrspace(1) %2, i64 %239, !dbg !35
  %241 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %226, i1 %67) #2, !dbg !36
  %242 = bitcast i16 %241 to half, !dbg !36
  %243 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %228, i1 %68) #2, !dbg !36
  %244 = bitcast i16 %243 to half, !dbg !36
  %245 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %230, i1 %69) #2, !dbg !36
  %246 = bitcast i16 %245 to half, !dbg !36
  %247 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %232, i1 %70) #2, !dbg !36
  %248 = bitcast i16 %247 to half, !dbg !36
  %249 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %234, i1 %71) #2, !dbg !36
  %250 = bitcast i16 %249 to half, !dbg !36
  %251 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %236, i1 %72) #2, !dbg !36
  %252 = bitcast i16 %251 to half, !dbg !36
  %253 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %238, i1 %73) #2, !dbg !36
  %254 = bitcast i16 %253 to half, !dbg !36
  %255 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %240, i1 %74) #2, !dbg !36
  %256 = bitcast i16 %255 to half, !dbg !36
  %257 = fpext half %242 to float, !dbg !37
  %258 = fpext half %244 to float, !dbg !37
  %259 = fpext half %246 to float, !dbg !37
  %260 = fpext half %248 to float, !dbg !37
  %261 = fpext half %250 to float, !dbg !37
  %262 = fpext half %252 to float, !dbg !37
  %263 = fpext half %254 to float, !dbg !37
  %264 = fpext half %256 to float, !dbg !37
  %265 = fadd float %160, %200, !dbg !27
  %266 = fadd float %161, %201, !dbg !27
  %267 = fadd float %162, %202, !dbg !27
  %268 = fadd float %163, %203, !dbg !27
  %269 = fadd float %164, %204, !dbg !27
  %270 = fadd float %165, %205, !dbg !27
  %271 = fadd float %166, %206, !dbg !27
  %272 = fadd float %167, %207, !dbg !27
  %273 = fadd float %265, %257, !dbg !38
  %274 = fadd float %266, %258, !dbg !38
  %275 = fadd float %267, %259, !dbg !38
  %276 = fadd float %268, %260, !dbg !38
  %277 = fadd float %269, %261, !dbg !38
  %278 = fadd float %270, %262, !dbg !38
  %279 = fadd float %271, %263, !dbg !38
  %280 = fadd float %272, %264, !dbg !38
  %281 = getelementptr half, ptr addrspace(1) %3, i64 %225, !dbg !39
  %282 = getelementptr half, ptr addrspace(1) %3, i64 %227, !dbg !39
  %283 = getelementptr half, ptr addrspace(1) %3, i64 %229, !dbg !39
  %284 = getelementptr half, ptr addrspace(1) %3, i64 %231, !dbg !39
  %285 = getelementptr half, ptr addrspace(1) %3, i64 %233, !dbg !39
  %286 = getelementptr half, ptr addrspace(1) %3, i64 %235, !dbg !39
  %287 = getelementptr half, ptr addrspace(1) %3, i64 %237, !dbg !39
  %288 = getelementptr half, ptr addrspace(1) %3, i64 %239, !dbg !39
  %289 = fptrunc float %273 to half, !dbg !40
  %290 = fptrunc float %274 to half, !dbg !40
  %291 = fptrunc float %275 to half, !dbg !40
  %292 = fptrunc float %276 to half, !dbg !40
  %293 = fptrunc float %277 to half, !dbg !40
  %294 = fptrunc float %278 to half, !dbg !40
  %295 = fptrunc float %279 to half, !dbg !40
  %296 = fptrunc float %280 to half, !dbg !40
  %297 = bitcast half %289 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %297, ptr addrspace(1) %281, i1 %67) #2, !dbg !40
  %298 = bitcast half %290 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %298, ptr addrspace(1) %282, i1 %68) #2, !dbg !40
  %299 = bitcast half %291 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %299, ptr addrspace(1) %283, i1 %69) #2, !dbg !40
  %300 = bitcast half %292 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %300, ptr addrspace(1) %284, i1 %70) #2, !dbg !40
  %301 = bitcast half %293 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %301, ptr addrspace(1) %285, i1 %71) #2, !dbg !40
  %302 = bitcast half %294 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %302, ptr addrspace(1) %286, i1 %72) #2, !dbg !40
  %303 = bitcast half %295 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %303, ptr addrspace(1) %287, i1 %73) #2, !dbg !40
  %304 = bitcast half %296 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %304, ptr addrspace(1) %288, i1 %74) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ccbzo6emgken5gonniacp77wxptgxousgbm5wb4fvxtfppggfsrq.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/cb")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 30, column: 18, scope: !5)
!22 = !DILocation(line: 31, column: 42, scope: !5)
!23 = !DILocation(line: 31, column: 36, scope: !5)
!24 = !DILocation(line: 31, column: 30, scope: !5)
!25 = !DILocation(line: 31, column: 56, scope: !5)
!26 = !DILocation(line: 31, column: 48, scope: !5)
!27 = !DILocation(line: 34, column: 18, scope: !5)
!28 = !DILocation(line: 31, column: 96, scope: !5)
!29 = !DILocation(line: 32, column: 30, scope: !5)
!30 = !DILocation(line: 32, column: 35, scope: !5)
!31 = !DILocation(line: 32, column: 75, scope: !5)
!32 = !DILocation(line: 33, column: 40, scope: !5)
!33 = !DILocation(line: 33, column: 44, scope: !5)
!34 = !DILocation(line: 33, column: 36, scope: !5)
!35 = !DILocation(line: 33, column: 30, scope: !5)
!36 = !DILocation(line: 33, column: 50, scope: !5)
!37 = !DILocation(line: 33, column: 98, scope: !5)
!38 = !DILocation(line: 35, column: 18, scope: !5)
!39 = !DILocation(line: 36, column: 25, scope: !5)
!40 = !DILocation(line: 36, column: 51, scope: !5)
!41 = !DILocation(line: 36, column: 4, scope: !5)
