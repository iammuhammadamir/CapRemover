; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 127, !dbg !10
  %11 = shl nuw nsw i32 %10, 2, !dbg !10
  %12 = or i32 %10, 128, !dbg !10
  %13 = or i32 %10, 256, !dbg !10
  %14 = or i32 %10, 384, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !11
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #5, !dbg !12
  %17 = add i32 %16, 1, !dbg !13
  %18 = mul i32 %17, %15, !dbg !14
  %19 = icmp slt i32 %18, 7040, !dbg !15
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !16
  %21 = shl i32 %20, 10, !dbg !17
  %22 = or i32 %21, %11, !dbg !18
  %23 = or i32 %22, 512, !dbg !18
  %24 = icmp slt i32 %22, 2700, !dbg !19
  %25 = icmp slt i32 %23, 2700, !dbg !19
  %.frozen = freeze i32 %18
  %26 = sdiv i32 %.frozen, 320, !dbg !20
  %27 = mul i32 %26, 320
  %.decomposed = sub i32 %.frozen, %27
  %28 = mul i32 %18, 2700, !dbg !21
  %29 = add i32 %22, %28, !dbg !22
  %30 = add i32 %28, %23, !dbg !22
  %31 = sext i32 %29 to i64, !dbg !23
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr half, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = and i1 %19, %24, !dbg !24
  %36 = and i1 %25, %19, !dbg !24
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %35) #5, !dbg !25
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !25
  %40 = trunc i32 %38 to i16, !dbg !25
  %extelt.offset = lshr i32 %38, 16, !dbg !25
  %41 = trunc i32 %extelt.offset to i16, !dbg !25
  %42 = trunc i32 %39 to i16, !dbg !25
  %extelt.offset1 = lshr i32 %39, 16, !dbg !25
  %43 = trunc i32 %extelt.offset1 to i16, !dbg !25
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %36) #5, !dbg !25
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !25
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !25
  %47 = trunc i32 %45 to i16, !dbg !25
  %extelt.offset2 = lshr i32 %45, 16, !dbg !25
  %48 = trunc i32 %extelt.offset2 to i16, !dbg !25
  %49 = trunc i32 %46 to i16, !dbg !25
  %extelt.offset3 = lshr i32 %46, 16, !dbg !25
  %50 = trunc i32 %extelt.offset3 to i16, !dbg !25
  %51 = zext nneg i32 %11 to i64, !dbg !26
  %52 = getelementptr half, ptr addrspace(3) @global_smem, i64 %51, !dbg !26
  store i16 %40, ptr addrspace(3) %52, align 2, !dbg !26
  %53 = or i32 %11, 1, !dbg !26
  %54 = zext nneg i32 %53 to i64, !dbg !26
  %55 = getelementptr half, ptr addrspace(3) @global_smem, i64 %54, !dbg !26
  store i16 %41, ptr addrspace(3) %55, align 2, !dbg !26
  %56 = or i32 %11, 2, !dbg !26
  %57 = zext nneg i32 %56 to i64, !dbg !26
  %58 = getelementptr half, ptr addrspace(3) @global_smem, i64 %57, !dbg !26
  store i16 %42, ptr addrspace(3) %58, align 2, !dbg !26
  %59 = or i32 %11, 3, !dbg !26
  %60 = zext nneg i32 %59 to i64, !dbg !26
  %61 = getelementptr half, ptr addrspace(3) @global_smem, i64 %60, !dbg !26
  store i16 %43, ptr addrspace(3) %61, align 2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %62 = zext nneg i32 %10 to i64, !dbg !26
  %63 = getelementptr half, ptr addrspace(3) @global_smem, i64 %62, !dbg !26
  %64 = load <1 x half>, ptr addrspace(3) %63, align 2, !dbg !26
  %65 = zext nneg i32 %12 to i64, !dbg !26
  %66 = getelementptr half, ptr addrspace(3) @global_smem, i64 %65, !dbg !26
  %67 = load <1 x half>, ptr addrspace(3) %66, align 2, !dbg !26
  %68 = zext nneg i32 %13 to i64, !dbg !26
  %69 = getelementptr half, ptr addrspace(3) @global_smem, i64 %68, !dbg !26
  %70 = load <1 x half>, ptr addrspace(3) %69, align 2, !dbg !26
  %71 = zext nneg i32 %14 to i64, !dbg !26
  %72 = getelementptr half, ptr addrspace(3) @global_smem, i64 %71, !dbg !26
  %73 = load <1 x half>, ptr addrspace(3) %72, align 2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  store i16 %47, ptr addrspace(3) %52, align 2, !dbg !26
  store i16 %48, ptr addrspace(3) %55, align 2, !dbg !26
  store i16 %49, ptr addrspace(3) %58, align 2, !dbg !26
  store i16 %50, ptr addrspace(3) %61, align 2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %74 = load <1 x half>, ptr addrspace(3) %63, align 2, !dbg !26
  %75 = load <1 x half>, ptr addrspace(3) %66, align 2, !dbg !26
  %76 = load <1 x half>, ptr addrspace(3) %69, align 2, !dbg !26
  %77 = load <1 x half>, ptr addrspace(3) %72, align 2, !dbg !26
  %78 = shl nsw i32 %26, 5, !dbg !27
  %.lhs.trunc = trunc i32 %.decomposed to i16, !dbg !28
  %79 = sdiv i16 %.lhs.trunc, 10, !dbg !28
  %.sext = sext i16 %79 to i32, !dbg !28
  %80 = add nsw i32 %78, %.sext, !dbg !29
  %81 = sext i32 %80 to i64, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %19) #5, !dbg !31
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %19) #5, !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = sext i32 %.decomposed to i64, !dbg !34
  %88 = getelementptr half, ptr addrspace(1) %3, i64 %87, !dbg !34
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %19) #5, !dbg !35
  %90 = getelementptr half, ptr addrspace(1) %4, i64 %87, !dbg !36
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %90, i1 %19) #5, !dbg !37
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 2.700000e+04) #5, !dbg !38
  %93 = fadd float %92, 0x3EE4F8B580000000, !dbg !39
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %94, 0, !dbg !40
  br i1 %.not.i, label %97, label %95, !dbg !40

95:                                               ; preds = %8
  %96 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

97:                                               ; preds = %8
  %98 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %95, %97
  %.0.i = phi float [ %96, %95 ], [ %98, %97 ], !dbg !40
  %99 = extractelement <1 x half> %77, i64 0, !dbg !26
  %100 = fpext half %99 to float, !dbg !41
  %101 = bitcast i32 %83 to float, !dbg !31
  %102 = fsub float %100, %101, !dbg !42
  %103 = extractelement <1 x half> %76, i64 0, !dbg !26
  %104 = fpext half %103 to float, !dbg !41
  %105 = fsub float %104, %101, !dbg !42
  %106 = extractelement <1 x half> %75, i64 0, !dbg !26
  %107 = fpext half %106 to float, !dbg !41
  %108 = fsub float %107, %101, !dbg !42
  %109 = extractelement <1 x half> %74, i64 0, !dbg !26
  %110 = fpext half %109 to float, !dbg !41
  %111 = fsub float %110, %101, !dbg !42
  %112 = extractelement <1 x half> %73, i64 0, !dbg !26
  %113 = fpext half %112 to float, !dbg !41
  %114 = fsub float %113, %101, !dbg !42
  %115 = extractelement <1 x half> %70, i64 0, !dbg !26
  %116 = fpext half %115 to float, !dbg !41
  %117 = fsub float %116, %101, !dbg !42
  %118 = extractelement <1 x half> %67, i64 0, !dbg !26
  %119 = fpext half %118 to float, !dbg !41
  %120 = fsub float %119, %101, !dbg !42
  %121 = extractelement <1 x half> %64, i64 0, !dbg !26
  %122 = fpext half %121 to float, !dbg !41
  %123 = fsub float %122, %101, !dbg !42
  %124 = bitcast i16 %91 to half, !dbg !37
  %125 = fpext half %124 to float, !dbg !43
  %126 = bitcast i16 %89 to half, !dbg !35
  %127 = fpext half %126 to float, !dbg !44
  %128 = or i32 %21, %10, !dbg !10
  %129 = or i32 %128, 896, !dbg !18
  %130 = icmp slt i32 %129, 2700, !dbg !19
  %131 = and i1 %130, %19, !dbg !24
  %132 = or i32 %128, 768, !dbg !18
  %133 = icmp slt i32 %132, 2700, !dbg !19
  %134 = and i1 %133, %19, !dbg !24
  %135 = or i32 %128, 640, !dbg !18
  %136 = icmp slt i32 %135, 2700, !dbg !19
  %137 = and i1 %136, %19, !dbg !24
  %138 = or i32 %128, 512, !dbg !18
  %139 = icmp slt i32 %138, 2700, !dbg !19
  %140 = and i1 %139, %19, !dbg !24
  %141 = or i32 %21, %14, !dbg !18
  %142 = icmp slt i32 %141, 2700, !dbg !19
  %143 = and i1 %19, %142, !dbg !24
  %144 = or i32 %21, %13, !dbg !18
  %145 = icmp slt i32 %144, 2700, !dbg !19
  %146 = and i1 %19, %145, !dbg !24
  %147 = or i32 %21, %12, !dbg !18
  %148 = icmp slt i32 %147, 2700, !dbg !19
  %149 = and i1 %19, %148, !dbg !24
  %150 = icmp slt i32 %128, 2700, !dbg !19
  %151 = and i1 %19, %150, !dbg !24
  %152 = fmul float %123, %.0.i, !dbg !45
  %153 = fmul float %120, %.0.i, !dbg !45
  %154 = fmul float %117, %.0.i, !dbg !45
  %155 = fmul float %114, %.0.i, !dbg !45
  %156 = fmul float %111, %.0.i, !dbg !45
  %157 = fmul float %108, %.0.i, !dbg !45
  %158 = fmul float %105, %.0.i, !dbg !45
  %159 = fmul float %102, %.0.i, !dbg !45
  %160 = fmul float %152, %127, !dbg !46
  %161 = fmul float %153, %127, !dbg !46
  %162 = fmul float %154, %127, !dbg !46
  %163 = fmul float %155, %127, !dbg !46
  %164 = fmul float %156, %127, !dbg !46
  %165 = fmul float %157, %127, !dbg !46
  %166 = fmul float %158, %127, !dbg !46
  %167 = fmul float %159, %127, !dbg !46
  %168 = fadd float %160, %125, !dbg !47
  %169 = fadd float %161, %125, !dbg !47
  %170 = fadd float %162, %125, !dbg !47
  %171 = fadd float %163, %125, !dbg !47
  %172 = fadd float %164, %125, !dbg !47
  %173 = fadd float %165, %125, !dbg !47
  %174 = fadd float %166, %125, !dbg !47
  %175 = fadd float %167, %125, !dbg !47
  %176 = fsub float 0.000000e+00, %168, !dbg !48
  %177 = fsub float 0.000000e+00, %169, !dbg !48
  %178 = fsub float 0.000000e+00, %170, !dbg !48
  %179 = fsub float 0.000000e+00, %171, !dbg !48
  %180 = fsub float 0.000000e+00, %172, !dbg !48
  %181 = fsub float 0.000000e+00, %173, !dbg !48
  %182 = fsub float 0.000000e+00, %174, !dbg !48
  %183 = fsub float 0.000000e+00, %175, !dbg !48
  %184 = fmul float %176, 0x3FF7154760000000, !dbg !52
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #5, !dbg !52
  %186 = fmul float %177, 0x3FF7154760000000, !dbg !52
  %187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %186) #5, !dbg !52
  %188 = fmul float %178, 0x3FF7154760000000, !dbg !52
  %189 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %188) #5, !dbg !52
  %190 = fmul float %179, 0x3FF7154760000000, !dbg !52
  %191 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %190) #5, !dbg !52
  %192 = fmul float %180, 0x3FF7154760000000, !dbg !52
  %193 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %192) #5, !dbg !52
  %194 = fmul float %181, 0x3FF7154760000000, !dbg !52
  %195 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %194) #5, !dbg !52
  %196 = fmul float %182, 0x3FF7154760000000, !dbg !52
  %197 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %196) #5, !dbg !52
  %198 = fmul float %183, 0x3FF7154760000000, !dbg !52
  %199 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %198) #5, !dbg !52
  %200 = fadd float %185, 1.000000e+00, !dbg !53
  %201 = fadd float %187, 1.000000e+00, !dbg !53
  %202 = fadd float %189, 1.000000e+00, !dbg !53
  %203 = fadd float %191, 1.000000e+00, !dbg !53
  %204 = fadd float %193, 1.000000e+00, !dbg !53
  %205 = fadd float %195, 1.000000e+00, !dbg !53
  %206 = fadd float %197, 1.000000e+00, !dbg !53
  %207 = fadd float %199, 1.000000e+00, !dbg !53
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %200) #5, !dbg !54
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %201) #5, !dbg !54
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %202) #5, !dbg !54
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %203) #5, !dbg !54
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %204) #5, !dbg !54
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %205) #5, !dbg !54
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %206) #5, !dbg !54
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %207) #5, !dbg !54
  %216 = fmul float %168, %208, !dbg !55
  %217 = fmul float %169, %209, !dbg !55
  %218 = fmul float %170, %210, !dbg !55
  %219 = fmul float %171, %211, !dbg !55
  %220 = fmul float %172, %212, !dbg !55
  %221 = fmul float %173, %213, !dbg !55
  %222 = fmul float %174, %214, !dbg !55
  %223 = fmul float %175, %215, !dbg !55
  %224 = mul i32 %128, 320, !dbg !56
  %225 = mul i32 %147, 320, !dbg !56
  %226 = mul i32 %144, 320, !dbg !56
  %227 = mul i32 %141, 320, !dbg !56
  %228 = mul i32 %138, 320, !dbg !56
  %229 = mul i32 %135, 320, !dbg !56
  %230 = mul i32 %132, 320, !dbg !56
  %231 = mul i32 %129, 320, !dbg !56
  %232 = add i32 %.decomposed, %228, !dbg !57
  %233 = add i32 %.decomposed, %229, !dbg !57
  %234 = add i32 %.decomposed, %230, !dbg !57
  %235 = add i32 %.decomposed, %231, !dbg !57
  %236 = mul i32 %26, 864000, !dbg !58
  %237 = add i32 %236, %.decomposed, !dbg !57
  %238 = add i32 %237, %224, !dbg !59
  %239 = add i32 %237, %225, !dbg !59
  %240 = add i32 %237, %226, !dbg !59
  %241 = add i32 %237, %227, !dbg !59
  %242 = add i32 %232, %236, !dbg !59
  %243 = add i32 %233, %236, !dbg !59
  %244 = add i32 %234, %236, !dbg !59
  %245 = add i32 %235, %236, !dbg !59
  %246 = sext i32 %238 to i64, !dbg !60
  %247 = getelementptr half, ptr addrspace(1) %5, i64 %246, !dbg !60
  %248 = sext i32 %239 to i64, !dbg !60
  %249 = getelementptr half, ptr addrspace(1) %5, i64 %248, !dbg !60
  %250 = sext i32 %240 to i64, !dbg !60
  %251 = getelementptr half, ptr addrspace(1) %5, i64 %250, !dbg !60
  %252 = sext i32 %241 to i64, !dbg !60
  %253 = getelementptr half, ptr addrspace(1) %5, i64 %252, !dbg !60
  %254 = sext i32 %242 to i64, !dbg !60
  %255 = getelementptr half, ptr addrspace(1) %5, i64 %254, !dbg !60
  %256 = sext i32 %243 to i64, !dbg !60
  %257 = getelementptr half, ptr addrspace(1) %5, i64 %256, !dbg !60
  %258 = sext i32 %244 to i64, !dbg !60
  %259 = getelementptr half, ptr addrspace(1) %5, i64 %258, !dbg !60
  %260 = sext i32 %245 to i64, !dbg !60
  %261 = getelementptr half, ptr addrspace(1) %5, i64 %260, !dbg !60
  %262 = fptrunc float %216 to half, !dbg !26
  %263 = fptrunc float %217 to half, !dbg !26
  %264 = fptrunc float %218 to half, !dbg !26
  %265 = fptrunc float %219 to half, !dbg !26
  %266 = fptrunc float %220 to half, !dbg !26
  %267 = fptrunc float %221 to half, !dbg !26
  %268 = fptrunc float %222 to half, !dbg !26
  %269 = fptrunc float %223 to half, !dbg !26
  %270 = bitcast half %262 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %270, ptr addrspace(1) %247, i1 %151) #5, !dbg !26
  %271 = bitcast half %263 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %271, ptr addrspace(1) %249, i1 %149) #5, !dbg !26
  %272 = bitcast half %264 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %272, ptr addrspace(1) %251, i1 %146) #5, !dbg !26
  %273 = bitcast half %265 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %273, ptr addrspace(1) %253, i1 %143) #5, !dbg !26
  %274 = bitcast half %266 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %274, ptr addrspace(1) %255, i1 %140) #5, !dbg !26
  %275 = bitcast half %267 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %275, ptr addrspace(1) %257, i1 %137) #5, !dbg !26
  %276 = bitcast half %268 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %276, ptr addrspace(1) %259, i1 %134) #5, !dbg !26
  %277 = bitcast half %269 to i16, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %277, ptr addrspace(1) %261, i1 %131) #5, !dbg !26
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #2 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cqb32uiw36vwnyvtgujzwoc6yznuefj5hj5slb6u5za62hz3c3bq.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/qb")
!4 = !{ptr @triton__0d1d2d3d4d5d6de7, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6de7, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6de7", linkageName: "triton__0d1d2d3d4d5d6de7", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 44, scope: !7)
!11 = !DILocation(line: 23, column: 28, scope: !7)
!12 = !DILocation(line: 23, column: 48, scope: !7)
!13 = !DILocation(line: 23, column: 53, scope: !7)
!14 = !DILocation(line: 23, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 33, scope: !7)
!18 = !DILocation(line: 27, column: 23, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 20, scope: !7)
!21 = !DILocation(line: 33, column: 41, scope: !7)
!22 = !DILocation(line: 33, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 47, scope: !7)
!26 = !DILocation(line: 53, column: 62, scope: !7)
!27 = !DILocation(line: 34, column: 34, scope: !7)
!28 = !DILocation(line: 34, column: 47, scope: !7)
!29 = !DILocation(line: 34, column: 41, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 53, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 53, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 27, scope: !7)
!41 = !DILocation(line: 33, column: 95, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 76, scope: !7)
!44 = !DILocation(line: 36, column: 76, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 27, column: 30, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!51 = !DILocation(line: 50, column: 23, scope: !49)
!52 = !DILocation(line: 27, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 27, column: 20, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 27, column: 16, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 51, column: 20, scope: !7)
!56 = !DILocation(line: 53, column: 35, scope: !7)
!57 = !DILocation(line: 53, column: 31, scope: !7)
!58 = !DILocation(line: 53, column: 49, scope: !7)
!59 = !DILocation(line: 53, column: 42, scope: !7)
!60 = !DILocation(line: 53, column: 25, scope: !7)
!61 = !DILocation(line: 53, column: 4, scope: !7)
