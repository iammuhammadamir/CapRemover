; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5d67de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %10 = shl i32 %9, 3, !dbg !8
  %11 = and i32 %10, 1016, !dbg !8
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %13 = shl i32 %12, 10, !dbg !10
  %14 = or i32 %13, %11, !dbg !11
  %15 = or i32 %14, 1, !dbg !11
  %16 = or i32 %14, 2, !dbg !11
  %17 = or i32 %14, 3, !dbg !11
  %18 = or i32 %14, 4, !dbg !11
  %19 = or i32 %14, 5, !dbg !11
  %20 = or i32 %14, 6, !dbg !11
  %21 = or i32 %14, 7, !dbg !11
  %22 = icmp slt i32 %14, %7, !dbg !12
  %23 = sdiv i32 %14, %6, !dbg !13
  %24 = sdiv i32 %15, %6, !dbg !13
  %25 = sdiv i32 %16, %6, !dbg !13
  %26 = sdiv i32 %17, %6, !dbg !13
  %27 = sdiv i32 %18, %6, !dbg !13
  %28 = sdiv i32 %19, %6, !dbg !13
  %29 = sdiv i32 %20, %6, !dbg !13
  %30 = sdiv i32 %21, %6, !dbg !13
  %31 = srem i32 %23, 640, !dbg !14
  %32 = srem i32 %24, 640, !dbg !14
  %33 = srem i32 %25, 640, !dbg !14
  %34 = srem i32 %26, 640, !dbg !14
  %35 = srem i32 %27, 640, !dbg !14
  %36 = srem i32 %28, 640, !dbg !14
  %37 = srem i32 %29, 640, !dbg !14
  %38 = srem i32 %30, 640, !dbg !14
  %39 = sext i32 %14 to i64, !dbg !15
  %40 = getelementptr half, ptr addrspace(1) %0, i64 %39, !dbg !15
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #1, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !16
  %extelt.offset = lshr i32 %42, 16, !dbg !16
  %extelt.offset1 = lshr i32 %43, 16, !dbg !16
  %extelt.offset2 = lshr i32 %44, 16, !dbg !16
  %extelt.offset3 = lshr i32 %45, 16, !dbg !16
  %46 = sext i32 %31 to i64, !dbg !17
  %47 = getelementptr half, ptr addrspace(1) %1, i64 %46, !dbg !17
  %48 = sext i32 %32 to i64, !dbg !17
  %49 = getelementptr half, ptr addrspace(1) %1, i64 %48, !dbg !17
  %50 = sext i32 %33 to i64, !dbg !17
  %51 = getelementptr half, ptr addrspace(1) %1, i64 %50, !dbg !17
  %52 = sext i32 %34 to i64, !dbg !17
  %53 = getelementptr half, ptr addrspace(1) %1, i64 %52, !dbg !17
  %54 = sext i32 %35 to i64, !dbg !17
  %55 = getelementptr half, ptr addrspace(1) %1, i64 %54, !dbg !17
  %56 = sext i32 %36 to i64, !dbg !17
  %57 = getelementptr half, ptr addrspace(1) %1, i64 %56, !dbg !17
  %58 = sext i32 %37 to i64, !dbg !17
  %59 = getelementptr half, ptr addrspace(1) %1, i64 %58, !dbg !17
  %60 = sext i32 %38 to i64, !dbg !17
  %61 = getelementptr half, ptr addrspace(1) %1, i64 %60, !dbg !17
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %47, i1 %22) #1, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %49, i1 %22) #1, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %51, i1 %22) #1, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %53, i1 %22) #1, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %55, i1 %22) #1, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %57, i1 %22) #1, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %22) #1, !dbg !18
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %61, i1 %22) #1, !dbg !18
  %70 = getelementptr half, ptr addrspace(1) %2, i64 %39, !dbg !19
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %22) #1, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !20
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !20
  %extelt.offset4 = lshr i32 %72, 16, !dbg !20
  %extelt.offset5 = lshr i32 %73, 16, !dbg !20
  %extelt.offset6 = lshr i32 %74, 16, !dbg !20
  %extelt.offset7 = lshr i32 %75, 16, !dbg !20
  %76 = getelementptr half, ptr addrspace(1) %3, i64 %39, !dbg !21
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %22) #1, !dbg !22
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !22
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !22
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !22
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !22
  %extelt.offset8 = lshr i32 %78, 16, !dbg !22
  %extelt.offset9 = lshr i32 %79, 16, !dbg !22
  %extelt.offset10 = lshr i32 %80, 16, !dbg !22
  %extelt.offset11 = lshr i32 %81, 16, !dbg !22
  %82 = getelementptr half, ptr addrspace(1) %4, i64 %46, !dbg !23
  %83 = getelementptr half, ptr addrspace(1) %4, i64 %48, !dbg !23
  %84 = getelementptr half, ptr addrspace(1) %4, i64 %50, !dbg !23
  %85 = getelementptr half, ptr addrspace(1) %4, i64 %52, !dbg !23
  %86 = getelementptr half, ptr addrspace(1) %4, i64 %54, !dbg !23
  %87 = getelementptr half, ptr addrspace(1) %4, i64 %56, !dbg !23
  %88 = getelementptr half, ptr addrspace(1) %4, i64 %58, !dbg !23
  %89 = getelementptr half, ptr addrspace(1) %4, i64 %60, !dbg !23
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %82, i1 %22) #1, !dbg !24
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %83, i1 %22) #1, !dbg !24
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %84, i1 %22) #1, !dbg !24
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %85, i1 %22) #1, !dbg !24
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %86, i1 %22) #1, !dbg !24
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %22) #1, !dbg !24
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #1, !dbg !24
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %89, i1 %22) #1, !dbg !24
  %98 = getelementptr half, ptr addrspace(1) %5, i64 %39, !dbg !25
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %22) #1, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !26
  %extelt.offset12 = lshr i32 %100, 16, !dbg !26
  %extelt.offset13 = lshr i32 %101, 16, !dbg !26
  %extelt.offset14 = lshr i32 %102, 16, !dbg !26
  %extelt.offset15 = lshr i32 %103, 16, !dbg !26
  %104 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !16
  %105 = insertelement <2 x i32> %104, i32 %extelt.offset, i64 1, !dbg !16
  %106 = trunc <2 x i32> %105 to <2 x i16>, !dbg !16
  %107 = bitcast <2 x i16> %106 to <2 x half>, !dbg !16
  %108 = fpext <2 x half> %107 to <2 x float>, !dbg !27
  %109 = insertelement <2 x i16> poison, i16 %62, i64 0, !dbg !18
  %110 = insertelement <2 x i16> %109, i16 %63, i64 1, !dbg !18
  %111 = bitcast <2 x i16> %110 to <2 x half>, !dbg !18
  %112 = fpext <2 x half> %111 to <2 x float>, !dbg !28
  %113 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !20
  %114 = insertelement <2 x i32> %113, i32 %extelt.offset4, i64 1, !dbg !20
  %115 = trunc <2 x i32> %114 to <2 x i16>, !dbg !20
  %116 = bitcast <2 x i16> %115 to <2 x half>, !dbg !20
  %117 = fpext <2 x half> %116 to <2 x float>, !dbg !29
  %118 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !22
  %119 = insertelement <2 x i32> %118, i32 %extelt.offset8, i64 1, !dbg !22
  %120 = trunc <2 x i32> %119 to <2 x i16>, !dbg !22
  %121 = bitcast <2 x i16> %120 to <2 x half>, !dbg !22
  %122 = fpext <2 x half> %121 to <2 x float>, !dbg !30
  %123 = insertelement <2 x i16> poison, i16 %90, i64 0, !dbg !24
  %124 = insertelement <2 x i16> %123, i16 %91, i64 1, !dbg !24
  %125 = bitcast <2 x i16> %124 to <2 x half>, !dbg !24
  %126 = fpext <2 x half> %125 to <2 x float>, !dbg !31
  %127 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !26
  %128 = insertelement <2 x i32> %127, i32 %extelt.offset12, i64 1, !dbg !26
  %129 = trunc <2 x i32> %128 to <2 x i16>, !dbg !26
  %130 = bitcast <2 x i16> %129 to <2 x half>, !dbg !26
  %131 = fpext <2 x half> %130 to <2 x float>, !dbg !32
  %132 = fadd <2 x float> %112, %108, !dbg !33
  %133 = fmul <2 x float> %117, <float 1.250000e-01, float 1.250000e-01>, !dbg !34
  %134 = fadd <2 x float> %132, %133, !dbg !35
  %135 = fadd <2 x float> %126, %122, !dbg !36
  %136 = fmul <2 x float> %131, <float 1.250000e-01, float 1.250000e-01>, !dbg !37
  %137 = fadd <2 x float> %135, %136, !dbg !38
  %138 = fadd <2 x float> %134, %137, !dbg !39
  %139 = fptrunc <2 x float> %138 to <2 x half>, !dbg !40
  %140 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !16
  %141 = insertelement <2 x i32> %140, i32 %extelt.offset1, i64 1, !dbg !16
  %142 = trunc <2 x i32> %141 to <2 x i16>, !dbg !16
  %143 = bitcast <2 x i16> %142 to <2 x half>, !dbg !16
  %144 = fpext <2 x half> %143 to <2 x float>, !dbg !27
  %145 = insertelement <2 x i16> poison, i16 %64, i64 0, !dbg !18
  %146 = insertelement <2 x i16> %145, i16 %65, i64 1, !dbg !18
  %147 = bitcast <2 x i16> %146 to <2 x half>, !dbg !18
  %148 = fpext <2 x half> %147 to <2 x float>, !dbg !28
  %149 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !20
  %150 = insertelement <2 x i32> %149, i32 %extelt.offset5, i64 1, !dbg !20
  %151 = trunc <2 x i32> %150 to <2 x i16>, !dbg !20
  %152 = bitcast <2 x i16> %151 to <2 x half>, !dbg !20
  %153 = fpext <2 x half> %152 to <2 x float>, !dbg !29
  %154 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !22
  %155 = insertelement <2 x i32> %154, i32 %extelt.offset9, i64 1, !dbg !22
  %156 = trunc <2 x i32> %155 to <2 x i16>, !dbg !22
  %157 = bitcast <2 x i16> %156 to <2 x half>, !dbg !22
  %158 = fpext <2 x half> %157 to <2 x float>, !dbg !30
  %159 = insertelement <2 x i16> poison, i16 %92, i64 0, !dbg !24
  %160 = insertelement <2 x i16> %159, i16 %93, i64 1, !dbg !24
  %161 = bitcast <2 x i16> %160 to <2 x half>, !dbg !24
  %162 = fpext <2 x half> %161 to <2 x float>, !dbg !31
  %163 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !26
  %164 = insertelement <2 x i32> %163, i32 %extelt.offset13, i64 1, !dbg !26
  %165 = trunc <2 x i32> %164 to <2 x i16>, !dbg !26
  %166 = bitcast <2 x i16> %165 to <2 x half>, !dbg !26
  %167 = fpext <2 x half> %166 to <2 x float>, !dbg !32
  %168 = fadd <2 x float> %144, %148, !dbg !33
  %169 = fmul <2 x float> %153, <float 1.250000e-01, float 1.250000e-01>, !dbg !34
  %170 = fadd <2 x float> %168, %169, !dbg !35
  %171 = fadd <2 x float> %158, %162, !dbg !36
  %172 = fmul <2 x float> %167, <float 1.250000e-01, float 1.250000e-01>, !dbg !37
  %173 = fadd <2 x float> %171, %172, !dbg !38
  %174 = fadd <2 x float> %170, %173, !dbg !39
  %175 = fptrunc <2 x float> %174 to <2 x half>, !dbg !40
  %176 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !16
  %177 = insertelement <2 x i32> %176, i32 %extelt.offset2, i64 1, !dbg !16
  %178 = trunc <2 x i32> %177 to <2 x i16>, !dbg !16
  %179 = bitcast <2 x i16> %178 to <2 x half>, !dbg !16
  %180 = fpext <2 x half> %179 to <2 x float>, !dbg !27
  %181 = insertelement <2 x i16> poison, i16 %66, i64 0, !dbg !18
  %182 = insertelement <2 x i16> %181, i16 %67, i64 1, !dbg !18
  %183 = bitcast <2 x i16> %182 to <2 x half>, !dbg !18
  %184 = fpext <2 x half> %183 to <2 x float>, !dbg !28
  %185 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !20
  %186 = insertelement <2 x i32> %185, i32 %extelt.offset6, i64 1, !dbg !20
  %187 = trunc <2 x i32> %186 to <2 x i16>, !dbg !20
  %188 = bitcast <2 x i16> %187 to <2 x half>, !dbg !20
  %189 = fpext <2 x half> %188 to <2 x float>, !dbg !29
  %190 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !22
  %191 = insertelement <2 x i32> %190, i32 %extelt.offset10, i64 1, !dbg !22
  %192 = trunc <2 x i32> %191 to <2 x i16>, !dbg !22
  %193 = bitcast <2 x i16> %192 to <2 x half>, !dbg !22
  %194 = fpext <2 x half> %193 to <2 x float>, !dbg !30
  %195 = insertelement <2 x i16> poison, i16 %94, i64 0, !dbg !24
  %196 = insertelement <2 x i16> %195, i16 %95, i64 1, !dbg !24
  %197 = bitcast <2 x i16> %196 to <2 x half>, !dbg !24
  %198 = fpext <2 x half> %197 to <2 x float>, !dbg !31
  %199 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !26
  %200 = insertelement <2 x i32> %199, i32 %extelt.offset14, i64 1, !dbg !26
  %201 = trunc <2 x i32> %200 to <2 x i16>, !dbg !26
  %202 = bitcast <2 x i16> %201 to <2 x half>, !dbg !26
  %203 = fpext <2 x half> %202 to <2 x float>, !dbg !32
  %204 = fadd <2 x float> %180, %184, !dbg !33
  %205 = fmul <2 x float> %189, <float 1.250000e-01, float 1.250000e-01>, !dbg !34
  %206 = fadd <2 x float> %204, %205, !dbg !35
  %207 = fadd <2 x float> %194, %198, !dbg !36
  %208 = fmul <2 x float> %203, <float 1.250000e-01, float 1.250000e-01>, !dbg !37
  %209 = fadd <2 x float> %207, %208, !dbg !38
  %210 = fadd <2 x float> %206, %209, !dbg !39
  %211 = fptrunc <2 x float> %210 to <2 x half>, !dbg !40
  %212 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !16
  %213 = insertelement <2 x i32> %212, i32 %extelt.offset3, i64 1, !dbg !16
  %214 = trunc <2 x i32> %213 to <2 x i16>, !dbg !16
  %215 = bitcast <2 x i16> %214 to <2 x half>, !dbg !16
  %216 = fpext <2 x half> %215 to <2 x float>, !dbg !27
  %217 = insertelement <2 x i16> poison, i16 %68, i64 0, !dbg !18
  %218 = insertelement <2 x i16> %217, i16 %69, i64 1, !dbg !18
  %219 = bitcast <2 x i16> %218 to <2 x half>, !dbg !18
  %220 = fpext <2 x half> %219 to <2 x float>, !dbg !28
  %221 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !20
  %222 = insertelement <2 x i32> %221, i32 %extelt.offset7, i64 1, !dbg !20
  %223 = trunc <2 x i32> %222 to <2 x i16>, !dbg !20
  %224 = bitcast <2 x i16> %223 to <2 x half>, !dbg !20
  %225 = fpext <2 x half> %224 to <2 x float>, !dbg !29
  %226 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !22
  %227 = insertelement <2 x i32> %226, i32 %extelt.offset11, i64 1, !dbg !22
  %228 = trunc <2 x i32> %227 to <2 x i16>, !dbg !22
  %229 = bitcast <2 x i16> %228 to <2 x half>, !dbg !22
  %230 = fpext <2 x half> %229 to <2 x float>, !dbg !30
  %231 = insertelement <2 x i16> poison, i16 %96, i64 0, !dbg !24
  %232 = insertelement <2 x i16> %231, i16 %97, i64 1, !dbg !24
  %233 = bitcast <2 x i16> %232 to <2 x half>, !dbg !24
  %234 = fpext <2 x half> %233 to <2 x float>, !dbg !31
  %235 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !26
  %236 = insertelement <2 x i32> %235, i32 %extelt.offset15, i64 1, !dbg !26
  %237 = trunc <2 x i32> %236 to <2 x i16>, !dbg !26
  %238 = bitcast <2 x i16> %237 to <2 x half>, !dbg !26
  %239 = fpext <2 x half> %238 to <2 x float>, !dbg !32
  %240 = fadd <2 x float> %216, %220, !dbg !33
  %241 = fmul <2 x float> %225, <float 1.250000e-01, float 1.250000e-01>, !dbg !34
  %242 = fadd <2 x float> %240, %241, !dbg !35
  %243 = fadd <2 x float> %230, %234, !dbg !36
  %244 = fmul <2 x float> %239, <float 1.250000e-01, float 1.250000e-01>, !dbg !37
  %245 = fadd <2 x float> %243, %244, !dbg !38
  %246 = fadd <2 x float> %242, %245, !dbg !39
  %247 = fptrunc <2 x float> %246 to <2 x half>, !dbg !40
  %248 = bitcast <2 x half> %139 to i32, !dbg !40
  %249 = bitcast <2 x half> %175 to i32, !dbg !40
  %250 = bitcast <2 x half> %211 to i32, !dbg !40
  %251 = bitcast <2 x half> %247 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %248, i32 %249, i32 %250, i32 %251, ptr addrspace(1) %40, i1 %22) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cd2w7zftdelavb5xrmecbpv7h7rfwicgv3m5onfyh55pwaxvtstc.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/d2")
!3 = !{ptr @triton__0d1d2d3d4d5d67de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d67de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d67de", linkageName: "triton__0d1d2d3d4d5d67de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 36, scope: !5)
!9 = !DILocation(line: 21, column: 28, scope: !5)
!10 = !DILocation(line: 21, column: 33, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 23, column: 21, scope: !5)
!13 = !DILocation(line: 25, column: 20, scope: !5)
!14 = !DILocation(line: 25, column: 27, scope: !5)
!15 = !DILocation(line: 26, column: 34, scope: !5)
!16 = !DILocation(line: 26, column: 39, scope: !5)
!17 = !DILocation(line: 27, column: 30, scope: !5)
!18 = !DILocation(line: 27, column: 35, scope: !5)
!19 = !DILocation(line: 28, column: 30, scope: !5)
!20 = !DILocation(line: 28, column: 35, scope: !5)
!21 = !DILocation(line: 29, column: 30, scope: !5)
!22 = !DILocation(line: 29, column: 35, scope: !5)
!23 = !DILocation(line: 30, column: 30, scope: !5)
!24 = !DILocation(line: 30, column: 35, scope: !5)
!25 = !DILocation(line: 31, column: 31, scope: !5)
!26 = !DILocation(line: 31, column: 36, scope: !5)
!27 = !DILocation(line: 26, column: 79, scope: !5)
!28 = !DILocation(line: 27, column: 75, scope: !5)
!29 = !DILocation(line: 28, column: 75, scope: !5)
!30 = !DILocation(line: 29, column: 75, scope: !5)
!31 = !DILocation(line: 30, column: 75, scope: !5)
!32 = !DILocation(line: 31, column: 76, scope: !5)
!33 = !DILocation(line: 32, column: 18, scope: !5)
!34 = !DILocation(line: 34, column: 18, scope: !5)
!35 = !DILocation(line: 35, column: 18, scope: !5)
!36 = !DILocation(line: 36, column: 18, scope: !5)
!37 = !DILocation(line: 37, column: 20, scope: !5)
!38 = !DILocation(line: 38, column: 19, scope: !5)
!39 = !DILocation(line: 39, column: 19, scope: !5)
!40 = !DILocation(line: 42, column: 40, scope: !5)
!41 = !DILocation(line: 42, column: 4, scope: !5)
