; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d67de8910de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %13 = shl i32 %12, 3, !dbg !10
  %14 = and i32 %13, 1016, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %16 = shl i32 %15, 10, !dbg !12
  %17 = or i32 %16, %14, !dbg !13
  %18 = or i32 %17, 1, !dbg !13
  %19 = or i32 %17, 2, !dbg !13
  %20 = or i32 %17, 3, !dbg !13
  %21 = or i32 %17, 4, !dbg !13
  %22 = or i32 %17, 5, !dbg !13
  %23 = or i32 %17, 6, !dbg !13
  %24 = or i32 %17, 7, !dbg !13
  %25 = icmp slt i32 %17, %10, !dbg !14
  %26 = sdiv i32 %17, %6, !dbg !15
  %27 = sdiv i32 %18, %6, !dbg !15
  %28 = sdiv i32 %19, %6, !dbg !15
  %29 = sdiv i32 %20, %6, !dbg !15
  %30 = sdiv i32 %21, %6, !dbg !15
  %31 = sdiv i32 %22, %6, !dbg !15
  %32 = sdiv i32 %23, %6, !dbg !15
  %33 = sdiv i32 %24, %6, !dbg !15
  %34 = srem i32 %26, 320, !dbg !16
  %35 = srem i32 %27, 320, !dbg !16
  %36 = srem i32 %28, 320, !dbg !16
  %37 = srem i32 %29, 320, !dbg !16
  %38 = srem i32 %30, 320, !dbg !16
  %39 = srem i32 %31, 320, !dbg !16
  %40 = srem i32 %32, 320, !dbg !16
  %41 = srem i32 %33, 320, !dbg !16
  %42 = sdiv i32 %17, %7, !dbg !17
  %43 = sext i32 %17 to i64, !dbg !18
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %43, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #4, !dbg !19
  %46 = shl i32 %42, 5, !dbg !20
  %.lhs.trunc = trunc i32 %34 to i16, !dbg !21
  %47 = sdiv i16 %.lhs.trunc, 10, !dbg !21
  %.sext = sext i16 %47 to i32, !dbg !21
  %.lhs.trunc25 = trunc i32 %35 to i16, !dbg !21
  %48 = sdiv i16 %.lhs.trunc25, 10, !dbg !21
  %.sext26 = sext i16 %48 to i32, !dbg !21
  %.lhs.trunc27 = trunc i32 %36 to i16, !dbg !21
  %49 = sdiv i16 %.lhs.trunc27, 10, !dbg !21
  %.sext28 = sext i16 %49 to i32, !dbg !21
  %.lhs.trunc29 = trunc i32 %37 to i16, !dbg !21
  %50 = sdiv i16 %.lhs.trunc29, 10, !dbg !21
  %.sext30 = sext i16 %50 to i32, !dbg !21
  %.lhs.trunc31 = trunc i32 %38 to i16, !dbg !21
  %51 = sdiv i16 %.lhs.trunc31, 10, !dbg !21
  %.sext32 = sext i16 %51 to i32, !dbg !21
  %.lhs.trunc33 = trunc i32 %39 to i16, !dbg !21
  %52 = sdiv i16 %.lhs.trunc33, 10, !dbg !21
  %.sext34 = sext i16 %52 to i32, !dbg !21
  %.lhs.trunc35 = trunc i32 %40 to i16, !dbg !21
  %53 = sdiv i16 %.lhs.trunc35, 10, !dbg !21
  %.sext36 = sext i16 %53 to i32, !dbg !21
  %.lhs.trunc37 = trunc i32 %41 to i16, !dbg !21
  %54 = sdiv i16 %.lhs.trunc37, 10, !dbg !21
  %.sext38 = sext i16 %54 to i32, !dbg !21
  %55 = add i32 %46, %.sext, !dbg !22
  %56 = add i32 %46, %.sext26, !dbg !22
  %57 = add i32 %46, %.sext28, !dbg !22
  %58 = add i32 %46, %.sext30, !dbg !22
  %59 = add i32 %46, %.sext32, !dbg !22
  %60 = add i32 %46, %.sext34, !dbg !22
  %61 = add i32 %46, %.sext36, !dbg !22
  %62 = add i32 %46, %.sext38, !dbg !22
  %63 = sext i32 %55 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !23
  %65 = sext i32 %56 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !23
  %67 = sext i32 %57 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !23
  %69 = sext i32 %58 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !23
  %71 = sext i32 %59 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !23
  %73 = sext i32 %60 to i64, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !23
  %75 = sext i32 %61 to i64, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !23
  %77 = sext i32 %62 to i64, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !23
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %25) #4, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %25) #4, !dbg !24
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #4, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %25) #4, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %25) #4, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %25) #4, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %25) #4, !dbg !24
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %25) #4, !dbg !24
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !25
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !25
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !25
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %25) #4, !dbg !26
  %96 = bitcast i32 %95 to float, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %25) #4, !dbg !26
  %98 = bitcast i32 %97 to float, !dbg !26
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %25) #4, !dbg !26
  %100 = bitcast i32 %99 to float, !dbg !26
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %25) #4, !dbg !26
  %102 = bitcast i32 %101 to float, !dbg !26
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %25) #4, !dbg !26
  %104 = bitcast i32 %103 to float, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %25) #4, !dbg !26
  %106 = bitcast i32 %105 to float, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %25) #4, !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %25) #4, !dbg !26
  %110 = bitcast i32 %109 to float, !dbg !26
  %111 = sext i32 %34 to i64, !dbg !27
  %112 = getelementptr half, ptr addrspace(1) %3, i64 %111, !dbg !27
  %113 = sext i32 %35 to i64, !dbg !27
  %114 = getelementptr half, ptr addrspace(1) %3, i64 %113, !dbg !27
  %115 = sext i32 %36 to i64, !dbg !27
  %116 = getelementptr half, ptr addrspace(1) %3, i64 %115, !dbg !27
  %117 = sext i32 %37 to i64, !dbg !27
  %118 = getelementptr half, ptr addrspace(1) %3, i64 %117, !dbg !27
  %119 = sext i32 %38 to i64, !dbg !27
  %120 = getelementptr half, ptr addrspace(1) %3, i64 %119, !dbg !27
  %121 = sext i32 %39 to i64, !dbg !27
  %122 = getelementptr half, ptr addrspace(1) %3, i64 %121, !dbg !27
  %123 = sext i32 %40 to i64, !dbg !27
  %124 = getelementptr half, ptr addrspace(1) %3, i64 %123, !dbg !27
  %125 = sext i32 %41 to i64, !dbg !27
  %126 = getelementptr half, ptr addrspace(1) %3, i64 %125, !dbg !27
  %127 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %112, i1 %25) #4, !dbg !28
  %128 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %114, i1 %25) #4, !dbg !28
  %129 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %116, i1 %25) #4, !dbg !28
  %130 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %118, i1 %25) #4, !dbg !28
  %131 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %120, i1 %25) #4, !dbg !28
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %122, i1 %25) #4, !dbg !28
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %124, i1 %25) #4, !dbg !28
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %126, i1 %25) #4, !dbg !28
  %135 = getelementptr half, ptr addrspace(1) %4, i64 %111, !dbg !29
  %136 = getelementptr half, ptr addrspace(1) %4, i64 %113, !dbg !29
  %137 = getelementptr half, ptr addrspace(1) %4, i64 %115, !dbg !29
  %138 = getelementptr half, ptr addrspace(1) %4, i64 %117, !dbg !29
  %139 = getelementptr half, ptr addrspace(1) %4, i64 %119, !dbg !29
  %140 = getelementptr half, ptr addrspace(1) %4, i64 %121, !dbg !29
  %141 = getelementptr half, ptr addrspace(1) %4, i64 %123, !dbg !29
  %142 = getelementptr half, ptr addrspace(1) %4, i64 %125, !dbg !29
  %143 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %135, i1 %25) #4, !dbg !30
  %144 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %136, i1 %25) #4, !dbg !30
  %145 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %137, i1 %25) #4, !dbg !30
  %146 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %138, i1 %25) #4, !dbg !30
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %139, i1 %25) #4, !dbg !30
  %148 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %140, i1 %25) #4, !dbg !30
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %141, i1 %25) #4, !dbg !30
  %150 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %142, i1 %25) #4, !dbg !30
  %151 = mul i32 %8, 10, !dbg !31
  %152 = mul i32 %151, %9, !dbg !32
  %153 = sitofp i32 %152 to float, !dbg !33
  %154 = fcmp olt float %153, 0.000000e+00, !dbg !34
  %155 = select i1 %154, float 0.000000e+00, float %153, !dbg !38
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %155) #4, !dbg !39
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %155) #4, !dbg !39
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %155) #4, !dbg !39
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %155) #4, !dbg !39
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %155) #4, !dbg !39
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %155) #4, !dbg !39
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %155) #4, !dbg !39
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %155) #4, !dbg !39
  %164 = fadd float %156, 0x3EB0C6F7A0000000, !dbg !40
  %165 = fadd float %157, 0x3EB0C6F7A0000000, !dbg !40
  %166 = fadd float %158, 0x3EB0C6F7A0000000, !dbg !40
  %167 = fadd float %159, 0x3EB0C6F7A0000000, !dbg !40
  %168 = fadd float %160, 0x3EB0C6F7A0000000, !dbg !40
  %169 = fadd float %161, 0x3EB0C6F7A0000000, !dbg !40
  %170 = fadd float %162, 0x3EB0C6F7A0000000, !dbg !40
  %171 = fadd float %163, 0x3EB0C6F7A0000000, !dbg !40
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %172, 0, !dbg !41
  br i1 %.not.i, label %175, label %173, !dbg !41

173:                                              ; preds = %11
  %174 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %164), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

175:                                              ; preds = %11
  %176 = tail call float @llvm.nvvm.rsqrt.approx.f(float %164), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %173, %175
  %.0.i = phi float [ %174, %173 ], [ %176, %175 ], !dbg !41
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i4 = icmp eq i32 %177, 0, !dbg !41
  br i1 %.not.i4, label %180, label %178, !dbg !41

178:                                              ; preds = %__nv_rsqrtf.exit
  %179 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

180:                                              ; preds = %__nv_rsqrtf.exit
  %181 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

__nv_rsqrtf.exit6:                                ; preds = %178, %180
  %.0.i5 = phi float [ %179, %178 ], [ %181, %180 ], !dbg !41
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i7 = icmp eq i32 %182, 0, !dbg !41
  br i1 %.not.i7, label %185, label %183, !dbg !41

183:                                              ; preds = %__nv_rsqrtf.exit6
  %184 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

185:                                              ; preds = %__nv_rsqrtf.exit6
  %186 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

__nv_rsqrtf.exit9:                                ; preds = %183, %185
  %.0.i8 = phi float [ %184, %183 ], [ %186, %185 ], !dbg !41
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i10 = icmp eq i32 %187, 0, !dbg !41
  br i1 %.not.i10, label %190, label %188, !dbg !41

188:                                              ; preds = %__nv_rsqrtf.exit9
  %189 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !41
  br label %__nv_rsqrtf.exit12, !dbg !41

190:                                              ; preds = %__nv_rsqrtf.exit9
  %191 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !41
  br label %__nv_rsqrtf.exit12, !dbg !41

__nv_rsqrtf.exit12:                               ; preds = %188, %190
  %.0.i11 = phi float [ %189, %188 ], [ %191, %190 ], !dbg !41
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i13 = icmp eq i32 %192, 0, !dbg !41
  br i1 %.not.i13, label %195, label %193, !dbg !41

193:                                              ; preds = %__nv_rsqrtf.exit12
  %194 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %168), !dbg !41
  br label %__nv_rsqrtf.exit15, !dbg !41

195:                                              ; preds = %__nv_rsqrtf.exit12
  %196 = tail call float @llvm.nvvm.rsqrt.approx.f(float %168), !dbg !41
  br label %__nv_rsqrtf.exit15, !dbg !41

__nv_rsqrtf.exit15:                               ; preds = %193, %195
  %.0.i14 = phi float [ %194, %193 ], [ %196, %195 ], !dbg !41
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i16 = icmp eq i32 %197, 0, !dbg !41
  br i1 %.not.i16, label %200, label %198, !dbg !41

198:                                              ; preds = %__nv_rsqrtf.exit15
  %199 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !41
  br label %__nv_rsqrtf.exit18, !dbg !41

200:                                              ; preds = %__nv_rsqrtf.exit15
  %201 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !41
  br label %__nv_rsqrtf.exit18, !dbg !41

__nv_rsqrtf.exit18:                               ; preds = %198, %200
  %.0.i17 = phi float [ %199, %198 ], [ %201, %200 ], !dbg !41
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i19 = icmp eq i32 %202, 0, !dbg !41
  br i1 %.not.i19, label %205, label %203, !dbg !41

203:                                              ; preds = %__nv_rsqrtf.exit18
  %204 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %170), !dbg !41
  br label %__nv_rsqrtf.exit21, !dbg !41

205:                                              ; preds = %__nv_rsqrtf.exit18
  %206 = tail call float @llvm.nvvm.rsqrt.approx.f(float %170), !dbg !41
  br label %__nv_rsqrtf.exit21, !dbg !41

__nv_rsqrtf.exit21:                               ; preds = %203, %205
  %.0.i20 = phi float [ %204, %203 ], [ %206, %205 ], !dbg !41
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i22 = icmp eq i32 %207, 0, !dbg !41
  br i1 %.not.i22, label %210, label %208, !dbg !41

208:                                              ; preds = %__nv_rsqrtf.exit21
  %209 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %171), !dbg !41
  br label %__nv_rsqrtf.exit24, !dbg !41

210:                                              ; preds = %__nv_rsqrtf.exit21
  %211 = tail call float @llvm.nvvm.rsqrt.approx.f(float %171), !dbg !41
  br label %__nv_rsqrtf.exit24, !dbg !41

__nv_rsqrtf.exit24:                               ; preds = %208, %210
  %.0.i23 = phi float [ %209, %208 ], [ %211, %210 ], !dbg !41
  %212 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !19
  %extelt.offset3 = lshr i32 %212, 16, !dbg !19
  %213 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !24
  %214 = insertelement <2 x i32> %213, i32 %86, i64 1, !dbg !24
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !24
  %216 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !19
  %extelt.offset2 = lshr i32 %216, 16, !dbg !19
  %217 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !24
  %218 = insertelement <2 x i32> %217, i32 %84, i64 1, !dbg !24
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !24
  %220 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !19
  %extelt.offset1 = lshr i32 %220, 16, !dbg !19
  %221 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !24
  %222 = insertelement <2 x i32> %221, i32 %82, i64 1, !dbg !24
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !24
  %224 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !19
  %extelt.offset = lshr i32 %224, 16, !dbg !19
  %225 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !24
  %226 = insertelement <2 x i32> %225, i32 %80, i64 1, !dbg !24
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !24
  %228 = insertelement <2 x i16> poison, i16 %149, i64 0, !dbg !30
  %229 = insertelement <2 x i16> %228, i16 %150, i64 1, !dbg !30
  %230 = bitcast <2 x i16> %229 to <2 x half>, !dbg !30
  %231 = insertelement <2 x i16> poison, i16 %147, i64 0, !dbg !30
  %232 = insertelement <2 x i16> %231, i16 %148, i64 1, !dbg !30
  %233 = bitcast <2 x i16> %232 to <2 x half>, !dbg !30
  %234 = insertelement <2 x i16> poison, i16 %145, i64 0, !dbg !30
  %235 = insertelement <2 x i16> %234, i16 %146, i64 1, !dbg !30
  %236 = bitcast <2 x i16> %235 to <2 x half>, !dbg !30
  %237 = insertelement <2 x i16> poison, i16 %143, i64 0, !dbg !30
  %238 = insertelement <2 x i16> %237, i16 %144, i64 1, !dbg !30
  %239 = bitcast <2 x i16> %238 to <2 x half>, !dbg !30
  %240 = insertelement <2 x i16> poison, i16 %133, i64 0, !dbg !28
  %241 = insertelement <2 x i16> %240, i16 %134, i64 1, !dbg !28
  %242 = bitcast <2 x i16> %241 to <2 x half>, !dbg !28
  %243 = insertelement <2 x i16> poison, i16 %131, i64 0, !dbg !28
  %244 = insertelement <2 x i16> %243, i16 %132, i64 1, !dbg !28
  %245 = bitcast <2 x i16> %244 to <2 x half>, !dbg !28
  %246 = insertelement <2 x i16> poison, i16 %129, i64 0, !dbg !28
  %247 = insertelement <2 x i16> %246, i16 %130, i64 1, !dbg !28
  %248 = bitcast <2 x i16> %247 to <2 x half>, !dbg !28
  %249 = insertelement <2 x i16> poison, i16 %127, i64 0, !dbg !28
  %250 = insertelement <2 x i16> %249, i16 %128, i64 1, !dbg !28
  %251 = bitcast <2 x i16> %250 to <2 x half>, !dbg !28
  %252 = getelementptr half, ptr addrspace(1) %5, i64 %43, !dbg !42
  %253 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !19
  %254 = insertelement <2 x i32> %253, i32 %extelt.offset, i64 1, !dbg !19
  %255 = trunc <2 x i32> %254 to <2 x i16>, !dbg !19
  %256 = bitcast <2 x i16> %255 to <2 x half>, !dbg !19
  %257 = fpext <2 x half> %256 to <2 x float>, !dbg !43
  %258 = fsub <2 x float> %257, %227, !dbg !44
  %259 = fpext <2 x half> %239 to <2 x float>, !dbg !45
  %260 = fpext <2 x half> %251 to <2 x float>, !dbg !46
  %261 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !47
  %262 = insertelement <2 x float> %261, float %.0.i5, i64 1, !dbg !47
  %263 = fmul <2 x float> %258, %262, !dbg !47
  %264 = fmul <2 x float> %263, %260, !dbg !48
  %265 = fadd <2 x float> %264, %259, !dbg !49
  %266 = fptrunc <2 x float> %265 to <2 x half>, !dbg !50
  %267 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !19
  %268 = insertelement <2 x i32> %267, i32 %extelt.offset1, i64 1, !dbg !19
  %269 = trunc <2 x i32> %268 to <2 x i16>, !dbg !19
  %270 = bitcast <2 x i16> %269 to <2 x half>, !dbg !19
  %271 = fpext <2 x half> %270 to <2 x float>, !dbg !43
  %272 = fsub <2 x float> %271, %223, !dbg !44
  %273 = fpext <2 x half> %236 to <2 x float>, !dbg !45
  %274 = fpext <2 x half> %248 to <2 x float>, !dbg !46
  %275 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !47
  %276 = insertelement <2 x float> %275, float %.0.i11, i64 1, !dbg !47
  %277 = fmul <2 x float> %272, %276, !dbg !47
  %278 = fmul <2 x float> %277, %274, !dbg !48
  %279 = fadd <2 x float> %278, %273, !dbg !49
  %280 = fptrunc <2 x float> %279 to <2 x half>, !dbg !50
  %281 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !19
  %282 = insertelement <2 x i32> %281, i32 %extelt.offset2, i64 1, !dbg !19
  %283 = trunc <2 x i32> %282 to <2 x i16>, !dbg !19
  %284 = bitcast <2 x i16> %283 to <2 x half>, !dbg !19
  %285 = fpext <2 x half> %284 to <2 x float>, !dbg !43
  %286 = fsub <2 x float> %285, %219, !dbg !44
  %287 = fpext <2 x half> %233 to <2 x float>, !dbg !45
  %288 = fpext <2 x half> %245 to <2 x float>, !dbg !46
  %289 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !47
  %290 = insertelement <2 x float> %289, float %.0.i17, i64 1, !dbg !47
  %291 = fmul <2 x float> %286, %290, !dbg !47
  %292 = fmul <2 x float> %291, %288, !dbg !48
  %293 = fadd <2 x float> %292, %287, !dbg !49
  %294 = fptrunc <2 x float> %293 to <2 x half>, !dbg !50
  %295 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !19
  %296 = insertelement <2 x i32> %295, i32 %extelt.offset3, i64 1, !dbg !19
  %297 = trunc <2 x i32> %296 to <2 x i16>, !dbg !19
  %298 = bitcast <2 x i16> %297 to <2 x half>, !dbg !19
  %299 = fpext <2 x half> %298 to <2 x float>, !dbg !43
  %300 = fsub <2 x float> %299, %215, !dbg !44
  %301 = fpext <2 x half> %230 to <2 x float>, !dbg !45
  %302 = fpext <2 x half> %242 to <2 x float>, !dbg !46
  %303 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !47
  %304 = insertelement <2 x float> %303, float %.0.i23, i64 1, !dbg !47
  %305 = fmul <2 x float> %300, %304, !dbg !47
  %306 = fmul <2 x float> %305, %302, !dbg !48
  %307 = fadd <2 x float> %306, %301, !dbg !49
  %308 = fptrunc <2 x float> %307 to <2 x half>, !dbg !50
  %309 = bitcast <2 x half> %266 to i32, !dbg !50
  %310 = bitcast <2 x half> %280 to i32, !dbg !50
  %311 = bitcast <2 x half> %294 to i32, !dbg !50
  %312 = bitcast <2 x half> %308 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %309, i32 %310, i32 %311, i32 %312, ptr addrspace(1) %252, i1 %25) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #1 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "curlgtddqnhoxwxtcfpavnptzdxanq2ntksrnld774bjxp2plsx3.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/ur")
!4 = !{ptr @triton__0d1d2d3d4d5d67de8910de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d67de8910de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d67de8910de", linkageName: "triton__0d1d2d3d4d5d67de8910de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 36, scope: !7)
!11 = !DILocation(line: 21, column: 28, scope: !7)
!12 = !DILocation(line: 21, column: 33, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 20, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 20, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 47, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 53, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 53, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 36, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 14, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!37 = !DILocation(line: 38, column: 40, scope: !35)
!38 = !DILocation(line: 48, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 28, scope: !7)
!42 = !DILocation(line: 49, column: 25, scope: !7)
!43 = !DILocation(line: 27, column: 75, scope: !7)
!44 = !DILocation(line: 33, column: 18, scope: !7)
!45 = !DILocation(line: 31, column: 76, scope: !7)
!46 = !DILocation(line: 30, column: 76, scope: !7)
!47 = !DILocation(line: 43, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 37, scope: !7)
!51 = !DILocation(line: 49, column: 4, scope: !7)
