; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7d8d910111213de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %16 = lshr i32 %15, 5, !dbg !10
  %urem = and i32 %15, 255, !dbg !10
  %17 = or i32 %urem, 256, !dbg !10
  %18 = or i32 %urem, 512, !dbg !10
  %19 = or i32 %urem, 768, !dbg !10
  %20 = shl nuw nsw i32 %urem, 2, !dbg !10
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %22 = icmp slt i32 %21, %12, !dbg !12
  %.frozen = freeze i32 %21
  %.frozen95 = freeze i32 %9
  %23 = sdiv i32 %.frozen, %.frozen95, !dbg !13
  %24 = mul i32 %23, %.frozen95
  %.decomposed = sub i32 %.frozen, %24
  %25 = mul i32 %21, 1280, !dbg !14
  %26 = mul i32 %11, %10, !dbg !15
  %27 = mul i32 %26, 1280, !dbg !16
  %28 = mul i32 %27, %23, !dbg !17
  %29 = add i32 %28, %.decomposed
  %30 = zext nneg i32 %urem to i64
  %31 = getelementptr half, ptr addrspace(3) @global_smem, i64 %30
  %32 = zext nneg i32 %17 to i64
  %33 = getelementptr half, ptr addrspace(3) @global_smem, i64 %32
  %34 = zext nneg i32 %18 to i64
  %35 = getelementptr half, ptr addrspace(3) @global_smem, i64 %34
  %36 = zext nneg i32 %19 to i64
  %37 = getelementptr half, ptr addrspace(3) @global_smem, i64 %36
  %38 = zext nneg i32 %20 to i64
  %39 = getelementptr half, ptr addrspace(3) @global_smem, i64 %38
  %40 = shl nuw nsw i32 %urem, 3
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr half, ptr addrspace(3) @global_smem, i64 %41
  %43 = or i32 %40, 2
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr half, ptr addrspace(3) @global_smem, i64 %44
  %46 = or i32 %40, 4
  %47 = zext nneg i32 %46 to i64
  %48 = getelementptr half, ptr addrspace(3) @global_smem, i64 %47
  %49 = or i32 %40, 6
  %50 = zext nneg i32 %49 to i64
  %51 = getelementptr half, ptr addrspace(3) @global_smem, i64 %50
  %52 = shl nuw nsw i32 %urem, 1
  %53 = zext nneg i32 %52 to i64
  %54 = getelementptr half, ptr addrspace(3) @global_smem, i64 %53
  %55 = shl nuw nsw i32 %17, 1
  %56 = zext nneg i32 %55 to i64
  %57 = getelementptr half, ptr addrspace(3) @global_smem, i64 %56
  %58 = shl nuw nsw i32 %18, 1
  %59 = zext nneg i32 %58 to i64
  %60 = getelementptr half, ptr addrspace(3) @global_smem, i64 %59
  %61 = shl nuw nsw i32 %19, 1
  %62 = zext nneg i32 %61 to i64
  %63 = getelementptr half, ptr addrspace(3) @global_smem, i64 %62
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %59
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62
  %72 = getelementptr inbounds <4 x half>, ptr addrspace(3) %39, i64 0, i64 2
  %73 = insertelement <4 x i1> poison, i1 %22, i64 0, !dbg !18
  br label %74, !dbg !19

74:                                               ; preds = %14, %._crit_edge
  %75 = phi float [ 0.000000e+00, %14 ], [ %320, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %14 ], [ %321, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %14 ], [ %322, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %14 ], [ %323, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %14 ], [ %316, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %14 ], [ %317, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %14 ], [ %318, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %14 ], [ %319, %._crit_edge ]
  %83 = phi i1 [ true, %14 ], [ false, %._crit_edge ]
  %84 = phi i32 [ 0, %14 ], [ 1024, %._crit_edge ]
  %85 = phi <4 x float> [ zeroinitializer, %14 ], [ %315, %._crit_edge ]
  %86 = or i32 %84, %urem, !dbg !20
  %87 = or i32 %84, %17, !dbg !20
  %88 = or i32 %84, %18, !dbg !20
  %89 = or i32 %84, %19, !dbg !20
  %90 = or i32 %84, %20, !dbg !20
  %91 = icmp ult i32 %87, 1280, !dbg !21
  %92 = icmp ult i32 %88, 1280, !dbg !21
  %93 = icmp ult i32 %89, 1280, !dbg !21
  %94 = icmp ult i32 %90, 1280, !dbg !21
  %95 = add i32 %90, %25, !dbg !22
  %96 = sext i32 %95 to i64, !dbg !23
  %97 = getelementptr half, ptr addrspace(1) %0, i64 %96, !dbg !23
  %98 = and i1 %22, %91, !dbg !24
  %99 = and i1 %22, %92, !dbg !24
  %100 = and i1 %22, %93, !dbg !24
  %101 = and i1 %22, %94, !dbg !24
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %97, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #6, !dbg !25
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !25
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !25
  %extelt.offset7 = lshr i32 %103, 16, !dbg !25
  %extelt.offset8 = lshr i32 %104, 16, !dbg !25
  %105 = zext nneg i32 %90 to i64, !dbg !26
  %106 = getelementptr half, ptr addrspace(1) %1, i64 %105, !dbg !26
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %106, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #6, !dbg !27
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !27
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !27
  %extelt.offset9 = lshr i32 %108, 16, !dbg !27
  %extelt.offset10 = lshr i32 %109, 16, !dbg !27
  %110 = getelementptr half, ptr addrspace(1) %2, i64 %96, !dbg !28
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %110, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #6, !dbg !29
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !29
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !29
  %extelt.offset11 = lshr i32 %112, 16, !dbg !29
  %extelt.offset12 = lshr i32 %113, 16, !dbg !29
  %114 = mul i32 %86, %26, !dbg !30
  %115 = mul i32 %87, %26, !dbg !30
  %116 = mul i32 %88, %26, !dbg !30
  %117 = mul i32 %89, %26, !dbg !30
  %118 = add i32 %29, %114, !dbg !31
  %119 = add i32 %29, %115, !dbg !31
  %120 = add i32 %29, %116, !dbg !31
  %121 = add i32 %29, %117, !dbg !31
  %122 = sext i32 %118 to i64, !dbg !32
  %123 = getelementptr half, ptr addrspace(1) %3, i64 %122, !dbg !32
  %124 = sext i32 %119 to i64, !dbg !32
  %125 = getelementptr half, ptr addrspace(1) %3, i64 %124, !dbg !32
  %126 = sext i32 %120 to i64, !dbg !32
  %127 = getelementptr half, ptr addrspace(1) %3, i64 %126, !dbg !32
  %128 = sext i32 %121 to i64, !dbg !32
  %129 = getelementptr half, ptr addrspace(1) %3, i64 %128, !dbg !32
  %130 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %123, i1 %22, i16 0, i1 %22) #6, !dbg !33
  %131 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %125, i1 %98, i16 0, i1 %98) #6, !dbg !33
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %127, i1 %99, i16 0, i1 %99) #6, !dbg !33
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %129, i1 %100, i16 0, i1 %100) #6, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %134 = getelementptr half, ptr addrspace(1) %4, i64 %105, !dbg !35
  %135 = getelementptr half, ptr addrspace(1) %5, i64 %122, !dbg !36
  %136 = getelementptr half, ptr addrspace(1) %5, i64 %124, !dbg !36
  %137 = getelementptr half, ptr addrspace(1) %5, i64 %126, !dbg !36
  %138 = getelementptr half, ptr addrspace(1) %5, i64 %128, !dbg !36
  %139 = insertelement <4 x i16> poison, i16 %130, i64 0, !dbg !33
  %140 = insertelement <4 x i16> %139, i16 %131, i64 1, !dbg !33
  %141 = insertelement <4 x i16> %140, i16 %132, i64 2, !dbg !33
  %142 = insertelement <4 x i16> %141, i16 %133, i64 3, !dbg !33
  %143 = bitcast <4 x i16> %142 to <4 x half>, !dbg !33
  %144 = shufflevector <4 x half> %143, <4 x half> poison, <1 x i32> zeroinitializer, !dbg !34
  store <1 x half> %144, ptr addrspace(3) %31, align 2, !dbg !34
  %145 = shufflevector <4 x half> %143, <4 x half> poison, <1 x i32> <i32 1>, !dbg !34
  store <1 x half> %145, ptr addrspace(3) %33, align 2, !dbg !34
  %146 = shufflevector <4 x half> %143, <4 x half> poison, <1 x i32> <i32 2>, !dbg !34
  store <1 x half> %146, ptr addrspace(3) %35, align 2, !dbg !34
  %147 = shufflevector <4 x half> %143, <4 x half> poison, <1 x i32> <i32 3>, !dbg !34
  store <1 x half> %147, ptr addrspace(3) %37, align 2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %148 = fpext <4 x half> %143 to <4 x float>, !dbg !34
  %149 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !25
  %150 = insertelement <2 x i32> %149, i32 %extelt.offset8, i64 1, !dbg !25
  %151 = trunc <2 x i32> %150 to <2 x i16>, !dbg !25
  %152 = bitcast <2 x i16> %151 to <2 x half>, !dbg !25
  %153 = fpext <2 x half> %152 to <2 x float>, !dbg !37
  %154 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !27
  %155 = insertelement <2 x i32> %154, i32 %extelt.offset10, i64 1, !dbg !27
  %156 = trunc <2 x i32> %155 to <2 x i16>, !dbg !27
  %157 = bitcast <2 x i16> %156 to <2 x half>, !dbg !27
  %158 = fpext <2 x half> %157 to <2 x float>, !dbg !38
  %159 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !29
  %160 = insertelement <2 x i32> %159, i32 %extelt.offset12, i64 1, !dbg !29
  %161 = trunc <2 x i32> %160 to <2 x i16>, !dbg !29
  %162 = bitcast <2 x i16> %161 to <2 x half>, !dbg !29
  %163 = fpext <2 x half> %162 to <2 x float>, !dbg !39
  %164 = fadd <2 x float> %153, %158, !dbg !40
  %165 = fmul <2 x float> %163, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %166 = fadd <2 x float> %164, %165, !dbg !42
  %167 = shufflevector <2 x float> %166, <2 x float> poison, <1 x i32> zeroinitializer, !dbg !42
  %168 = shufflevector <2 x float> %166, <2 x float> poison, <1 x i32> <i32 1>, !dbg !42
  %169 = load <2 x half>, ptr addrspace(3) %72, align 4, !dbg !34
  %170 = fpext <2 x half> %169 to <2 x float>, !dbg !34
  %171 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !25
  %172 = insertelement <2 x i32> %171, i32 %extelt.offset7, i64 1, !dbg !25
  %173 = trunc <2 x i32> %172 to <2 x i16>, !dbg !25
  %174 = bitcast <2 x i16> %173 to <2 x half>, !dbg !25
  %175 = fpext <2 x half> %174 to <2 x float>, !dbg !37
  %176 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !27
  %177 = insertelement <2 x i32> %176, i32 %extelt.offset9, i64 1, !dbg !27
  %178 = trunc <2 x i32> %177 to <2 x i16>, !dbg !27
  %179 = bitcast <2 x i16> %178 to <2 x half>, !dbg !27
  %180 = fpext <2 x half> %179 to <2 x float>, !dbg !38
  %181 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !29
  %182 = insertelement <2 x i32> %181, i32 %extelt.offset11, i64 1, !dbg !29
  %183 = trunc <2 x i32> %182 to <2 x i16>, !dbg !29
  %184 = bitcast <2 x i16> %183 to <2 x half>, !dbg !29
  %185 = fpext <2 x half> %184 to <2 x float>, !dbg !39
  %186 = fadd <2 x float> %175, %180, !dbg !40
  %187 = fmul <2 x float> %185, <float 1.250000e-01, float 1.250000e-01>, !dbg !41
  %188 = fadd <2 x float> %186, %187, !dbg !42
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <1 x i32> zeroinitializer, !dbg !42
  %190 = shufflevector <2 x float> %188, <2 x float> poison, <1 x i32> <i32 1>, !dbg !42
  %191 = load <2 x half>, ptr addrspace(3) %39, align 8, !dbg !34
  %192 = fpext <2 x half> %191 to <2 x float>, !dbg !34
  %193 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %134, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #6, !dbg !43
  %194 = extractvalue { i32, i32 } %193, 0, !dbg !43
  %195 = extractvalue { i32, i32 } %193, 1, !dbg !43
  %extelt.offset13 = lshr i32 %194, 16, !dbg !43
  %196 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !43
  %197 = insertelement <2 x i32> %196, i32 %extelt.offset13, i64 1, !dbg !43
  %198 = trunc <2 x i32> %197 to <2 x i16>, !dbg !43
  %199 = bitcast <2 x i16> %198 to <2 x half>, !dbg !43
  %extelt.offset14 = lshr i32 %195, 16, !dbg !43
  %200 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !43
  %201 = insertelement <2 x i32> %200, i32 %extelt.offset14, i64 1, !dbg !43
  %202 = trunc <2 x i32> %201 to <2 x i16>, !dbg !43
  %203 = bitcast <2 x i16> %202 to <2 x half>, !dbg !43
  %204 = fpext <2 x half> %199 to <2 x float>, !dbg !44
  %205 = fpext <2 x half> %203 to <2 x float>, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %206 = shufflevector <2 x half> %199, <2 x half> poison, <1 x i32> zeroinitializer, !dbg !45
  store <1 x half> %206, ptr addrspace(3) %42, align 2, !dbg !45
  %207 = shufflevector <2 x half> %199, <2 x half> poison, <1 x i32> <i32 1>, !dbg !45
  store <1 x half> %207, ptr addrspace(3) %45, align 2, !dbg !45
  %208 = shufflevector <2 x half> %203, <2 x half> poison, <1 x i32> zeroinitializer, !dbg !45
  store <1 x half> %208, ptr addrspace(3) %48, align 2, !dbg !45
  %209 = shufflevector <2 x half> %203, <2 x half> poison, <1 x i32> <i32 1>, !dbg !45
  store <1 x half> %209, ptr addrspace(3) %51, align 2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %210 = load half, ptr addrspace(3) %54, align 2, !dbg !45
  %211 = load half, ptr addrspace(3) %57, align 2, !dbg !45
  %212 = load half, ptr addrspace(3) %60, align 2, !dbg !45
  %213 = load half, ptr addrspace(3) %63, align 2, !dbg !45
  %214 = insertelement <4 x half> poison, half %210, i64 0, !dbg !44
  %215 = insertelement <4 x half> %214, half %211, i64 1, !dbg !44
  %216 = insertelement <4 x half> %215, half %212, i64 2, !dbg !44
  %217 = insertelement <4 x half> %216, half %213, i64 3, !dbg !44
  %218 = fpext <4 x half> %217 to <4 x float>, !dbg !44
  %219 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %135, i1 %22, i16 0, i1 %22) #6, !dbg !46
  %220 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %136, i1 %98, i16 0, i1 %98) #6, !dbg !46
  %221 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %137, i1 %99, i16 0, i1 %99) #6, !dbg !46
  %222 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %138, i1 %100, i16 0, i1 %100) #6, !dbg !46
  %223 = insertelement <4 x i16> poison, i16 %219, i64 0, !dbg !46
  %224 = insertelement <4 x i16> %223, i16 %220, i64 1, !dbg !46
  %225 = insertelement <4 x i16> %224, i16 %221, i64 2, !dbg !46
  %226 = insertelement <4 x i16> %225, i16 %222, i64 3, !dbg !46
  %227 = bitcast <4 x i16> %226 to <4 x half>, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %228 = shufflevector <4 x half> %227, <4 x half> poison, <1 x i32> zeroinitializer, !dbg !47
  store <1 x half> %228, ptr addrspace(3) %31, align 2, !dbg !47
  %229 = shufflevector <4 x half> %227, <4 x half> poison, <1 x i32> <i32 1>, !dbg !47
  store <1 x half> %229, ptr addrspace(3) %33, align 2, !dbg !47
  %230 = shufflevector <4 x half> %227, <4 x half> poison, <1 x i32> <i32 2>, !dbg !47
  store <1 x half> %230, ptr addrspace(3) %35, align 2, !dbg !47
  %231 = shufflevector <4 x half> %227, <4 x half> poison, <1 x i32> <i32 3>, !dbg !47
  store <1 x half> %231, ptr addrspace(3) %37, align 2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %232 = load <2 x half>, ptr addrspace(3) %39, align 8, !dbg !47
  %233 = load <2 x half>, ptr addrspace(3) %72, align 4, !dbg !47
  %234 = fpext <2 x half> %232 to <2 x float>, !dbg !48
  %235 = fpext <2 x half> %233 to <2 x float>, !dbg !48
  %236 = fpext <4 x half> %227 to <4 x float>, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  store <1 x float> %189, ptr addrspace(3) %64, align 4, !dbg !42
  store <1 x float> %190, ptr addrspace(3) %65, align 4, !dbg !42
  store <1 x float> %167, ptr addrspace(3) %66, align 4, !dbg !42
  store <1 x float> %168, ptr addrspace(3) %67, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %237 = load float, ptr addrspace(3) %68, align 4, !dbg !42
  %238 = load float, ptr addrspace(3) %69, align 4, !dbg !42
  %239 = load float, ptr addrspace(3) %70, align 4, !dbg !42
  %240 = load float, ptr addrspace(3) %71, align 4, !dbg !42
  %241 = fadd <2 x float> %192, %204, !dbg !45
  %242 = fadd <2 x float> %170, %205, !dbg !45
  %243 = fadd <4 x float> %148, %218, !dbg !45
  %244 = fmul <2 x float> %234, <float 1.250000e-01, float 1.250000e-01>, !dbg !49
  %245 = fmul <2 x float> %235, <float 1.250000e-01, float 1.250000e-01>, !dbg !49
  %246 = fmul <4 x float> %236, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !49
  %247 = fadd <2 x float> %241, %244, !dbg !50
  %248 = fadd <2 x float> %242, %245, !dbg !50
  %249 = fadd <4 x float> %243, %246, !dbg !50
  %250 = fadd <2 x float> %188, %247, !dbg !51
  %251 = fadd <2 x float> %166, %248, !dbg !51
  %252 = insertelement <4 x float> poison, float %237, i64 0, !dbg !51
  %253 = insertelement <4 x float> %252, float %238, i64 1, !dbg !51
  %254 = insertelement <4 x float> %253, float %239, i64 2, !dbg !51
  %255 = insertelement <4 x float> %254, float %240, i64 3, !dbg !51
  %256 = fadd <4 x float> %249, %255, !dbg !51
  br i1 %83, label %._crit_edge, label %257, !dbg !52

257:                                              ; preds = %74
  %258 = fsub <4 x float> %256, %85, !dbg !56
  %259 = extractelement <4 x float> %258, i64 0, !dbg !56
  %260 = fsub <4 x float> %256, %85, !dbg !56
  %261 = extractelement <4 x float> %260, i64 1, !dbg !56
  %262 = fsub <4 x float> %256, %85, !dbg !56
  %263 = extractelement <4 x float> %262, i64 2, !dbg !56
  %264 = fsub <4 x float> %256, %85, !dbg !56
  %265 = extractelement <4 x float> %264, i64 3, !dbg !56
  %266 = fadd float %75, 1.000000e+00, !dbg !57
  %267 = fadd float %76, 1.000000e+00, !dbg !57
  %268 = fadd float %77, 1.000000e+00, !dbg !57
  %269 = fadd float %78, 1.000000e+00, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %270 = insertelement <1 x float> undef, float %266, i64 0, !dbg !57
  store <1 x float> %270, ptr addrspace(3) %68, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %271 = load float, ptr addrspace(3) %68, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %272 = insertelement <1 x float> undef, float %267, i64 0, !dbg !57
  store <1 x float> %272, ptr addrspace(3) %68, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %273 = load float, ptr addrspace(3) %68, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %274 = insertelement <1 x float> undef, float %268, i64 0, !dbg !57
  store <1 x float> %274, ptr addrspace(3) %68, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %275 = load float, ptr addrspace(3) %68, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %276 = insertelement <1 x float> undef, float %269, i64 0, !dbg !57
  store <1 x float> %276, ptr addrspace(3) %68, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %277 = load float, ptr addrspace(3) %68, align 4, !dbg !57
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %271) #6, !dbg !58
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %273) #6, !dbg !58
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %275) #6, !dbg !58
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %277) #6, !dbg !58
  %282 = insertelement <4 x float> poison, float %278, i64 0, !dbg !59
  %283 = insertelement <4 x float> %282, float %279, i64 1, !dbg !59
  %284 = insertelement <4 x float> %283, float %280, i64 2, !dbg !59
  %285 = insertelement <4 x float> %284, float %281, i64 3, !dbg !59
  %286 = fadd <4 x float> %85, %285, !dbg !59
  %287 = fsub <4 x float> %256, %286, !dbg !60
  %288 = fsub <4 x float> %256, %286, !dbg !60
  %289 = fsub <4 x float> %256, %286, !dbg !60
  %290 = fsub <4 x float> %256, %286, !dbg !60
  %291 = fmul <4 x float> %258, %287, !dbg !61
  %292 = extractelement <4 x float> %291, i64 0, !dbg !61
  %293 = fmul <4 x float> %260, %288, !dbg !61
  %294 = extractelement <4 x float> %293, i64 1, !dbg !61
  %295 = fmul <4 x float> %262, %289, !dbg !61
  %296 = extractelement <4 x float> %295, i64 2, !dbg !61
  %297 = fmul <4 x float> %264, %290, !dbg !61
  %298 = extractelement <4 x float> %297, i64 3, !dbg !61
  %299 = fadd float %79, %292, !dbg !62
  %300 = fadd float %80, %294, !dbg !62
  %301 = fadd float %81, %296, !dbg !62
  %302 = fadd float %82, %298, !dbg !62
  br label %._crit_edge, !dbg !52

._crit_edge:                                      ; preds = %74, %257
  %303 = phi float [ %266, %257 ], [ 1.000000e+00, %74 ]
  %304 = phi float [ %267, %257 ], [ 1.000000e+00, %74 ]
  %305 = phi float [ %268, %257 ], [ 1.000000e+00, %74 ]
  %306 = phi float [ %269, %257 ], [ 1.000000e+00, %74 ]
  %307 = phi float [ %299, %257 ], [ 0.000000e+00, %74 ]
  %308 = phi float [ %300, %257 ], [ 0.000000e+00, %74 ]
  %309 = phi float [ %301, %257 ], [ 0.000000e+00, %74 ]
  %310 = phi float [ %302, %257 ], [ 0.000000e+00, %74 ]
  %311 = phi <4 x float> [ %286, %257 ], [ %256, %74 ]
  %312 = insertelement <4 x i1> %73, i1 %98, i64 1, !dbg !18
  %313 = insertelement <4 x i1> %312, i1 %99, i64 2, !dbg !18
  %314 = insertelement <4 x i1> %313, i1 %100, i64 3, !dbg !18
  %315 = select <4 x i1> %314, <4 x float> %311, <4 x float> %85, !dbg !18
  %316 = select i1 %22, float %307, float %79, !dbg !63
  %317 = select i1 %98, float %308, float %80, !dbg !63
  %318 = select i1 %99, float %309, float %81, !dbg !63
  %319 = select i1 %100, float %310, float %82, !dbg !63
  %320 = select i1 %22, float %303, float %75, !dbg !64
  %321 = select i1 %98, float %304, float %76, !dbg !64
  %322 = select i1 %99, float %305, float %77, !dbg !64
  %323 = select i1 %100, float %306, float %78, !dbg !64
  %324 = fptrunc <2 x float> %250 to <2 x half>, !dbg !47
  %325 = fptrunc <2 x float> %251 to <2 x half>, !dbg !47
  %326 = bitcast <2 x half> %324 to i32, !dbg !47
  %327 = bitcast <2 x half> %325 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %326, i32 %327, ptr addrspace(1) %97, i1 %101) #6, !dbg !47
  br i1 %83, label %74, label %328, !dbg !19

328:                                              ; preds = %._crit_edge
  %329 = and i32 %15, 31, !dbg !10
  %330 = and i32 %16, 7, !dbg !10
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %331 = insertelement <1 x float> undef, float %320, i64 0, !dbg !19
  store <1 x float> %331, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %332 = load float, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %333 = insertelement <1 x float> undef, float %321, i64 0, !dbg !19
  store <1 x float> %333, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %334 = load float, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %335 = insertelement <1 x float> undef, float %322, i64 0, !dbg !19
  store <1 x float> %335, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %336 = load float, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %337 = insertelement <1 x float> undef, float %323, i64 0, !dbg !19
  store <1 x float> %337, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %338 = load float, ptr addrspace(3) %68, align 4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %339 = extractelement <4 x float> %315, i64 0, !dbg !67
  %340 = extractelement <4 x float> %315, i64 1, !dbg !67
  %341 = fsub float %340, %339, !dbg !67
  %342 = fadd float %332, %334, !dbg !71
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !72
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %334, float %342) #6, !dbg !73
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !74
  %346 = fmul float %341, %345, !dbg !75
  %347 = fadd float %339, %346, !dbg !76
  %348 = fadd float %316, %317, !dbg !77
  %349 = fmul float %341, %341, !dbg !78
  %350 = fmul float %349, %332, !dbg !79
  %351 = fmul float %350, %345, !dbg !80
  %352 = fadd float %348, %351, !dbg !81
  %353 = extractelement <4 x float> %315, i64 2, !dbg !67
  %354 = fsub float %353, %347, !dbg !67
  %355 = fadd float %342, %336, !dbg !71
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !72
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %336, float %355) #6, !dbg !73
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !74
  %359 = fmul float %358, %354, !dbg !75
  %360 = fadd float %347, %359, !dbg !76
  %361 = fadd float %318, %352, !dbg !77
  %362 = fmul float %354, %354, !dbg !78
  %363 = fmul float %342, %362, !dbg !79
  %364 = fmul float %358, %363, !dbg !80
  %365 = fadd float %361, %364, !dbg !81
  %366 = extractelement <4 x float> %315, i64 3, !dbg !67
  %367 = fsub float %366, %360, !dbg !67
  %368 = fadd float %355, %338, !dbg !71
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !72
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %368) #6, !dbg !73
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !74
  %372 = fmul float %371, %367, !dbg !75
  %373 = fadd float %360, %372, !dbg !76
  %374 = fadd float %319, %365, !dbg !77
  %375 = fmul float %367, %367, !dbg !78
  %376 = fmul float %355, %375, !dbg !79
  %377 = fmul float %371, %376, !dbg !80
  %378 = fadd float %374, %377, !dbg !81
  %379 = bitcast float %373 to i32, !dbg !65
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 16, i32 31), !dbg !65
  %381 = bitcast i32 %380 to float, !dbg !65
  %382 = bitcast float %378 to i32, !dbg !65
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 16, i32 31), !dbg !65
  %384 = bitcast i32 %383 to float, !dbg !65
  %385 = bitcast float %368 to i32, !dbg !65
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 16, i32 31), !dbg !65
  %387 = bitcast i32 %386 to float, !dbg !65
  %388 = fsub float %381, %373, !dbg !67
  %389 = fadd float %368, %387, !dbg !71
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !72
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float %389) #6, !dbg !73
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !74
  %393 = fmul float %392, %388, !dbg !75
  %394 = fadd float %373, %393, !dbg !76
  %395 = fadd float %378, %384, !dbg !77
  %396 = fmul float %388, %388, !dbg !78
  %397 = fmul float %368, %396, !dbg !79
  %398 = fmul float %392, %397, !dbg !80
  %399 = fadd float %395, %398, !dbg !81
  %400 = bitcast float %394 to i32, !dbg !65
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 8, i32 31), !dbg !65
  %402 = bitcast i32 %401 to float, !dbg !65
  %403 = bitcast float %399 to i32, !dbg !65
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 8, i32 31), !dbg !65
  %405 = bitcast i32 %404 to float, !dbg !65
  %406 = bitcast float %389 to i32, !dbg !65
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 8, i32 31), !dbg !65
  %408 = bitcast i32 %407 to float, !dbg !65
  %409 = fsub float %402, %394, !dbg !67
  %410 = fadd float %389, %408, !dbg !71
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !72
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float %410) #6, !dbg !73
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !74
  %414 = fmul float %409, %413, !dbg !75
  %415 = fadd float %394, %414, !dbg !76
  %416 = fadd float %399, %405, !dbg !77
  %417 = fmul float %409, %409, !dbg !78
  %418 = fmul float %389, %417, !dbg !79
  %419 = fmul float %413, %418, !dbg !80
  %420 = fadd float %416, %419, !dbg !81
  %421 = bitcast float %415 to i32, !dbg !65
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 4, i32 31), !dbg !65
  %423 = bitcast i32 %422 to float, !dbg !65
  %424 = bitcast float %420 to i32, !dbg !65
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 4, i32 31), !dbg !65
  %426 = bitcast i32 %425 to float, !dbg !65
  %427 = bitcast float %410 to i32, !dbg !65
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 4, i32 31), !dbg !65
  %429 = bitcast i32 %428 to float, !dbg !65
  %430 = fsub float %423, %415, !dbg !67
  %431 = fadd float %410, %429, !dbg !71
  %432 = fcmp oeq float %431, 0.000000e+00, !dbg !72
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %431) #6, !dbg !73
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !74
  %435 = fmul float %430, %434, !dbg !75
  %436 = fadd float %415, %435, !dbg !76
  %437 = fadd float %420, %426, !dbg !77
  %438 = fmul float %430, %430, !dbg !78
  %439 = fmul float %410, %438, !dbg !79
  %440 = fmul float %434, %439, !dbg !80
  %441 = fadd float %437, %440, !dbg !81
  %442 = bitcast float %436 to i32, !dbg !65
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 2, i32 31), !dbg !65
  %444 = bitcast i32 %443 to float, !dbg !65
  %445 = bitcast float %441 to i32, !dbg !65
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !65
  %447 = bitcast i32 %446 to float, !dbg !65
  %448 = bitcast float %431 to i32, !dbg !65
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !65
  %450 = bitcast i32 %449 to float, !dbg !65
  %451 = fsub float %444, %436, !dbg !67
  %452 = fadd float %431, %450, !dbg !71
  %453 = fcmp oeq float %452, 0.000000e+00, !dbg !72
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %452) #6, !dbg !73
  %455 = select i1 %453, float 0.000000e+00, float %454, !dbg !74
  %456 = fmul float %451, %455, !dbg !75
  %457 = fadd float %436, %456, !dbg !76
  %458 = fadd float %441, %447, !dbg !77
  %459 = fmul float %451, %451, !dbg !78
  %460 = fmul float %431, %459, !dbg !79
  %461 = fmul float %455, %460, !dbg !80
  %462 = fadd float %458, %461, !dbg !81
  %463 = bitcast float %457 to i32, !dbg !65
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 1, i32 31), !dbg !65
  %465 = bitcast i32 %464 to float, !dbg !65
  %466 = bitcast float %462 to i32, !dbg !65
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 1, i32 31), !dbg !65
  %468 = bitcast i32 %467 to float, !dbg !65
  %469 = bitcast float %452 to i32, !dbg !65
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 1, i32 31), !dbg !65
  %471 = bitcast i32 %470 to float, !dbg !65
  %472 = fsub float %465, %457, !dbg !67
  %473 = fadd float %452, %471, !dbg !71
  %474 = fcmp oeq float %473, 0.000000e+00, !dbg !72
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %471, float %473) #6, !dbg !73
  %476 = select i1 %474, float 0.000000e+00, float %475, !dbg !74
  %477 = fmul float %472, %476, !dbg !75
  %478 = fadd float %457, %477, !dbg !76
  %479 = fadd float %462, %468, !dbg !77
  %480 = fmul float %472, %472, !dbg !78
  %481 = fmul float %452, %480, !dbg !79
  %482 = fmul float %476, %481, !dbg !80
  %483 = fadd float %479, %482, !dbg !81
  %484 = icmp eq i32 %329, 0, !dbg !65
  %485 = zext nneg i32 %330 to i64, !dbg !65
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i64 %485, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, float %478, i1 %484) #6, !dbg !65
  %487 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %485, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, float %483, i1 %484) #6, !dbg !65
  %488 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %485, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, float %473, i1 %484) #6, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %489 = icmp slt i32 %15, 8, !dbg !65
  %490 = sext i32 %15 to i64, !dbg !65
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i64 %490, !dbg !65
  %492 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %491, i1 %489) #6, !dbg !65
  %493 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %490, !dbg !65
  %494 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %493, i1 %489) #6, !dbg !65
  %495 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %490, !dbg !65
  %496 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %495, i1 %489) #6, !dbg !65
  %497 = bitcast float %492 to i32, !dbg !65
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 4, i32 31), !dbg !65
  %499 = bitcast i32 %498 to float, !dbg !65
  %500 = bitcast float %494 to i32, !dbg !65
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 4, i32 31), !dbg !65
  %502 = bitcast i32 %501 to float, !dbg !65
  %503 = bitcast float %496 to i32, !dbg !65
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 4, i32 31), !dbg !65
  %505 = bitcast i32 %504 to float, !dbg !65
  %506 = fsub float %499, %492, !dbg !67
  %507 = fadd float %496, %505, !dbg !71
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !72
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %505, float %507) #6, !dbg !73
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !74
  %511 = fmul float %506, %510, !dbg !75
  %512 = fadd float %492, %511, !dbg !76
  %513 = fadd float %494, %502, !dbg !77
  %514 = fmul float %506, %506, !dbg !78
  %515 = fmul float %496, %514, !dbg !79
  %516 = fmul float %515, %510, !dbg !80
  %517 = fadd float %513, %516, !dbg !81
  %518 = bitcast float %512 to i32, !dbg !65
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !65
  %520 = bitcast i32 %519 to float, !dbg !65
  %521 = bitcast float %517 to i32, !dbg !65
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 2, i32 31), !dbg !65
  %523 = bitcast i32 %522 to float, !dbg !65
  %524 = bitcast float %507 to i32, !dbg !65
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 2, i32 31), !dbg !65
  %526 = bitcast i32 %525 to float, !dbg !65
  %527 = fsub float %520, %512, !dbg !67
  %528 = fadd float %507, %526, !dbg !71
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !72
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %528) #6, !dbg !73
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !74
  %532 = fmul float %527, %531, !dbg !75
  %533 = fadd float %512, %532, !dbg !76
  %534 = fadd float %517, %523, !dbg !77
  %535 = fmul float %527, %527, !dbg !78
  %536 = fmul float %507, %535, !dbg !79
  %537 = fmul float %531, %536, !dbg !80
  %538 = fadd float %534, %537, !dbg !81
  %539 = bitcast float %533 to i32, !dbg !65
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !65
  %541 = bitcast i32 %540 to float, !dbg !65
  %542 = bitcast float %538 to i32, !dbg !65
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 1, i32 31), !dbg !65
  %544 = bitcast i32 %543 to float, !dbg !65
  %545 = bitcast float %528 to i32, !dbg !65
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 1, i32 31), !dbg !65
  %547 = bitcast i32 %546 to float, !dbg !65
  %548 = fsub float %541, %533, !dbg !67
  %549 = fadd float %528, %547, !dbg !71
  %550 = fcmp oeq float %549, 0.000000e+00, !dbg !72
  %551 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %547, float %549) #6, !dbg !73
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !74
  %553 = fmul float %548, %552, !dbg !75
  %554 = fadd float %533, %553, !dbg !76
  %555 = fadd float %538, %544, !dbg !77
  %556 = fmul float %548, %548, !dbg !78
  %557 = fmul float %528, %556, !dbg !79
  %558 = fmul float %552, %557, !dbg !80
  %559 = fadd float %555, %558, !dbg !81
  %560 = and i32 %15, 7, !dbg !65
  %561 = icmp eq i32 %560, 0, !dbg !65
  %562 = and i1 %489, %561, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, float %554, i1 %562) #6, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, float %559, i1 %562) #6, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, float %549, i1 %562) #6, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %563 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !65
  %564 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %565 = insertelement <1 x float> undef, float %563, i64 0, !dbg !82
  store <1 x float> %565, ptr addrspace(3) @global_smem, align 4, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %566 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !82
  %567 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %564, float 1.280000e+03) #6, !dbg !83
  %568 = fadd float %567, 0x3EE4F8B580000000, !dbg !84
  %569 = add i32 %20, %25, !dbg !85
  %570 = sext i32 %569 to i64, !dbg !86
  %571 = getelementptr half, ptr addrspace(1) %0, i64 %570, !dbg !86
  %572 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %571, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !87
  %573 = extractvalue { i32, i32 } %572, 0, !dbg !87
  %574 = extractvalue { i32, i32 } %572, 1, !dbg !87
  %extelt.offset = lshr i32 %573, 16, !dbg !87
  %extelt.offset2 = lshr i32 %574, 16, !dbg !87
  %575 = getelementptr half, ptr addrspace(1) %6, i64 %38, !dbg !88
  %576 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %575, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !89
  %577 = extractvalue { i32, i32 } %576, 0, !dbg !89
  %578 = extractvalue { i32, i32 } %576, 1, !dbg !89
  %extelt.offset3 = lshr i32 %577, 16, !dbg !89
  %extelt.offset4 = lshr i32 %578, 16, !dbg !89
  %579 = getelementptr half, ptr addrspace(1) %7, i64 %38, !dbg !90
  %580 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %579, i1 true, i32 0, i1 true, i32 0, i1 true) #6, !dbg !91
  %581 = extractvalue { i32, i32 } %580, 0, !dbg !91
  %582 = extractvalue { i32, i32 } %580, 1, !dbg !91
  %extelt.offset5 = lshr i32 %581, 16, !dbg !91
  %583 = insertelement <2 x i32> poison, i32 %573, i64 0, !dbg !87
  %584 = insertelement <2 x i32> %583, i32 %extelt.offset, i64 1, !dbg !87
  %585 = trunc <2 x i32> %584 to <2 x i16>, !dbg !87
  %586 = bitcast <2 x i16> %585 to <2 x half>, !dbg !87
  %587 = fpext <2 x half> %586 to <2 x float>, !dbg !92
  %588 = insertelement <2 x i32> poison, i32 %577, i64 0, !dbg !89
  %589 = insertelement <2 x i32> %588, i32 %extelt.offset3, i64 1, !dbg !89
  %590 = trunc <2 x i32> %589 to <2 x i16>, !dbg !89
  %591 = bitcast <2 x i16> %590 to <2 x half>, !dbg !89
  %592 = fpext <2 x half> %591 to <2 x float>, !dbg !93
  %593 = insertelement <2 x i32> poison, i32 %581, i64 0, !dbg !91
  %594 = insertelement <2 x i32> %593, i32 %extelt.offset5, i64 1, !dbg !91
  %595 = trunc <2 x i32> %594 to <2 x i16>, !dbg !91
  %596 = bitcast <2 x i16> %595 to <2 x half>, !dbg !91
  %extelt.offset6 = lshr i32 %582, 16, !dbg !91
  %597 = insertelement <2 x i32> poison, i32 %574, i64 0, !dbg !87
  %598 = insertelement <2 x i32> %597, i32 %extelt.offset2, i64 1, !dbg !87
  %599 = trunc <2 x i32> %598 to <2 x i16>, !dbg !87
  %600 = bitcast <2 x i16> %599 to <2 x half>, !dbg !87
  %601 = fpext <2 x half> %600 to <2 x float>, !dbg !92
  %602 = insertelement <2 x i32> poison, i32 %578, i64 0, !dbg !89
  %603 = insertelement <2 x i32> %602, i32 %extelt.offset4, i64 1, !dbg !89
  %604 = trunc <2 x i32> %603 to <2 x i16>, !dbg !89
  %605 = bitcast <2 x i16> %604 to <2 x half>, !dbg !89
  %606 = fpext <2 x half> %605 to <2 x float>, !dbg !93
  %607 = insertelement <2 x i32> poison, i32 %582, i64 0, !dbg !91
  %608 = insertelement <2 x i32> %607, i32 %extelt.offset6, i64 1, !dbg !91
  %609 = trunc <2 x i32> %608 to <2 x i16>, !dbg !91
  %610 = bitcast <2 x i16> %609 to <2 x half>, !dbg !91
  %611 = fpext <2 x half> %596 to <2 x float>, !dbg !94
  %612 = fpext <2 x half> %610 to <2 x float>, !dbg !94
  %613 = insertelement <2 x float> poison, float %566, i64 0, !dbg !82
  %614 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !82
  %615 = fsub <2 x float> %587, %614, !dbg !82
  %616 = fsub <2 x float> %601, %614, !dbg !82
  %617 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !95
  %.not.i = icmp eq i32 %617, 0, !dbg !95
  br i1 %.not.i, label %620, label %618, !dbg !95

618:                                              ; preds = %328
  %619 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %568), !dbg !95
  br label %__nv_rsqrtf.exit, !dbg !95

620:                                              ; preds = %328
  %621 = tail call float @llvm.nvvm.rsqrt.approx.f(float %568), !dbg !95
  br label %__nv_rsqrtf.exit, !dbg !95

__nv_rsqrtf.exit:                                 ; preds = %618, %620
  %.0.i = phi float [ %619, %618 ], [ %621, %620 ], !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %622 = insertelement <1 x float> undef, float %.0.i, i64 0, !dbg !96
  store <1 x float> %622, ptr addrspace(3) @global_smem, align 4, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %623 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !96
  %624 = getelementptr half, ptr addrspace(1) %8, i64 %570, !dbg !97
  %625 = insertelement <2 x float> poison, float %623, i64 0, !dbg !96
  %626 = shufflevector <2 x float> %625, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !96
  %627 = fmul <2 x float> %615, %626, !dbg !96
  %628 = fmul <2 x float> %627, %592, !dbg !98
  %629 = fadd <2 x float> %628, %611, !dbg !99
  %630 = fptrunc <2 x float> %629 to <2 x half>, !dbg !100
  %631 = fmul <2 x float> %616, %626, !dbg !96
  %632 = fmul <2 x float> %631, %606, !dbg !98
  %633 = fadd <2 x float> %632, %612, !dbg !99
  %634 = fptrunc <2 x float> %633 to <2 x half>, !dbg !100
  %635 = bitcast <2 x half> %630 to i32, !dbg !100
  %636 = bitcast <2 x half> %634 to i32, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %635, i32 %636, ptr addrspace(1) %624, i1 %22) #6, !dbg !100
  %637 = or i32 %20, 1024, !dbg !101
  %638 = icmp ult i32 %637, 1280, !dbg !102
  %639 = add i32 %637, %25, !dbg !85
  %640 = sext i32 %639 to i64, !dbg !86
  %641 = getelementptr half, ptr addrspace(1) %0, i64 %640, !dbg !86
  %642 = and i1 %22, %638, !dbg !103
  %643 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %641, i1 %642, i32 0, i1 %642, i32 0, i1 %642) #6, !dbg !87
  %644 = zext nneg i32 %637 to i64, !dbg !88
  %645 = getelementptr half, ptr addrspace(1) %6, i64 %644, !dbg !88
  %646 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %645, i1 %638, i32 0, i1 %638, i32 0, i1 %638) #6, !dbg !89
  %647 = getelementptr half, ptr addrspace(1) %7, i64 %644, !dbg !90
  %648 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %647, i1 %638, i32 0, i1 %638, i32 0, i1 %638) #6, !dbg !91
  %649 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !95
  %.not.i.1 = icmp eq i32 %649, 0, !dbg !95
  br i1 %.not.i.1, label %652, label %650, !dbg !95

650:                                              ; preds = %__nv_rsqrtf.exit
  %651 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %568), !dbg !95
  br label %__nv_rsqrtf.exit.1, !dbg !95

652:                                              ; preds = %__nv_rsqrtf.exit
  %653 = tail call float @llvm.nvvm.rsqrt.approx.f(float %568), !dbg !95
  br label %__nv_rsqrtf.exit.1, !dbg !95

__nv_rsqrtf.exit.1:                               ; preds = %652, %650
  %.0.i.1 = phi float [ %651, %650 ], [ %653, %652 ], !dbg !95
  %654 = extractvalue { i32, i32 } %643, 1, !dbg !87
  %extelt.offset2.1 = lshr i32 %654, 16, !dbg !87
  %655 = extractvalue { i32, i32 } %643, 0, !dbg !87
  %extelt.offset.1 = lshr i32 %655, 16, !dbg !87
  %656 = extractvalue { i32, i32 } %648, 1, !dbg !91
  %extelt.offset6.1 = lshr i32 %656, 16, !dbg !91
  %657 = extractvalue { i32, i32 } %648, 0, !dbg !91
  %extelt.offset5.1 = lshr i32 %657, 16, !dbg !91
  %658 = extractvalue { i32, i32 } %646, 1, !dbg !89
  %extelt.offset4.1 = lshr i32 %658, 16, !dbg !89
  %659 = extractvalue { i32, i32 } %646, 0, !dbg !89
  %extelt.offset3.1 = lshr i32 %659, 16, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %660 = insertelement <1 x float> undef, float %.0.i.1, i64 0, !dbg !96
  store <1 x float> %660, ptr addrspace(3) @global_smem, align 4, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %661 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !96
  %662 = getelementptr half, ptr addrspace(1) %8, i64 %640, !dbg !97
  %663 = insertelement <2 x i32> poison, i32 %655, i64 0, !dbg !87
  %664 = insertelement <2 x i32> %663, i32 %extelt.offset.1, i64 1, !dbg !87
  %665 = trunc <2 x i32> %664 to <2 x i16>, !dbg !87
  %666 = bitcast <2 x i16> %665 to <2 x half>, !dbg !87
  %667 = fpext <2 x half> %666 to <2 x float>, !dbg !92
  %668 = fsub <2 x float> %667, %614, !dbg !82
  %669 = insertelement <2 x i32> poison, i32 %657, i64 0, !dbg !91
  %670 = insertelement <2 x i32> %669, i32 %extelt.offset5.1, i64 1, !dbg !91
  %671 = trunc <2 x i32> %670 to <2 x i16>, !dbg !91
  %672 = bitcast <2 x i16> %671 to <2 x half>, !dbg !91
  %673 = fpext <2 x half> %672 to <2 x float>, !dbg !94
  %674 = insertelement <2 x i32> poison, i32 %659, i64 0, !dbg !89
  %675 = insertelement <2 x i32> %674, i32 %extelt.offset3.1, i64 1, !dbg !89
  %676 = trunc <2 x i32> %675 to <2 x i16>, !dbg !89
  %677 = bitcast <2 x i16> %676 to <2 x half>, !dbg !89
  %678 = fpext <2 x half> %677 to <2 x float>, !dbg !93
  %679 = insertelement <2 x float> poison, float %661, i64 0, !dbg !96
  %680 = shufflevector <2 x float> %679, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !96
  %681 = fmul <2 x float> %668, %680, !dbg !96
  %682 = fmul <2 x float> %681, %678, !dbg !98
  %683 = fadd <2 x float> %682, %673, !dbg !99
  %684 = fptrunc <2 x float> %683 to <2 x half>, !dbg !100
  %685 = insertelement <2 x i32> poison, i32 %654, i64 0, !dbg !87
  %686 = insertelement <2 x i32> %685, i32 %extelt.offset2.1, i64 1, !dbg !87
  %687 = trunc <2 x i32> %686 to <2 x i16>, !dbg !87
  %688 = bitcast <2 x i16> %687 to <2 x half>, !dbg !87
  %689 = fpext <2 x half> %688 to <2 x float>, !dbg !92
  %690 = fsub <2 x float> %689, %614, !dbg !82
  %691 = insertelement <2 x i32> poison, i32 %656, i64 0, !dbg !91
  %692 = insertelement <2 x i32> %691, i32 %extelt.offset6.1, i64 1, !dbg !91
  %693 = trunc <2 x i32> %692 to <2 x i16>, !dbg !91
  %694 = bitcast <2 x i16> %693 to <2 x half>, !dbg !91
  %695 = fpext <2 x half> %694 to <2 x float>, !dbg !94
  %696 = insertelement <2 x i32> poison, i32 %658, i64 0, !dbg !89
  %697 = insertelement <2 x i32> %696, i32 %extelt.offset4.1, i64 1, !dbg !89
  %698 = trunc <2 x i32> %697 to <2 x i16>, !dbg !89
  %699 = bitcast <2 x i16> %698 to <2 x half>, !dbg !89
  %700 = fpext <2 x half> %699 to <2 x float>, !dbg !93
  %701 = fmul <2 x float> %690, %680, !dbg !96
  %702 = fmul <2 x float> %701, %700, !dbg !98
  %703 = fadd <2 x float> %702, %695, !dbg !99
  %704 = fptrunc <2 x float> %703 to <2 x half>, !dbg !100
  %705 = bitcast <2 x half> %684 to i32, !dbg !100
  %706 = bitcast <2 x half> %704 to i32, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %705, i32 %706, ptr addrspace(1) %662, i1 %642) #6, !dbg !100
  ret void, !dbg !104
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cq5jony7ax7qzw2tj6kzel3ykhottcsgfhy5s6vgxrpahbywgo6k.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/q5")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910111213de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7d8d910111213de, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d8d910111213de", linkageName: "triton__0d1d2d3d4d5d6d7d8d910111213de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 22, column: 28, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 28, column: 20, scope: !7)
!14 = !DILocation(line: 36, column: 49, scope: !7)
!15 = !DILocation(line: 39, column: 44, scope: !7)
!16 = !DILocation(line: 39, column: 64, scope: !7)
!17 = !DILocation(line: 39, column: 68, scope: !7)
!18 = !DILocation(line: 57, column: 62, scope: !7)
!19 = !DILocation(line: 32, column: 36, scope: !7)
!20 = !DILocation(line: 33, column: 27, scope: !7)
!21 = !DILocation(line: 34, column: 25, scope: !7)
!22 = !DILocation(line: 36, column: 44, scope: !7)
!23 = !DILocation(line: 36, column: 38, scope: !7)
!24 = !DILocation(line: 36, column: 63, scope: !7)
!25 = !DILocation(line: 36, column: 55, scope: !7)
!26 = !DILocation(line: 37, column: 34, scope: !7)
!27 = !DILocation(line: 37, column: 39, scope: !7)
!28 = !DILocation(line: 38, column: 34, scope: !7)
!29 = !DILocation(line: 38, column: 51, scope: !7)
!30 = !DILocation(line: 39, column: 48, scope: !7)
!31 = !DILocation(line: 39, column: 55, scope: !7)
!32 = !DILocation(line: 39, column: 34, scope: !7)
!33 = !DILocation(line: 39, column: 74, scope: !7)
!34 = !DILocation(line: 39, column: 133, scope: !7)
!35 = !DILocation(line: 40, column: 35, scope: !7)
!36 = !DILocation(line: 41, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 115, scope: !7)
!38 = !DILocation(line: 37, column: 90, scope: !7)
!39 = !DILocation(line: 38, column: 111, scope: !7)
!40 = !DILocation(line: 42, column: 22, scope: !7)
!41 = !DILocation(line: 44, column: 22, scope: !7)
!42 = !DILocation(line: 45, column: 22, scope: !7)
!43 = !DILocation(line: 40, column: 40, scope: !7)
!44 = !DILocation(line: 40, column: 91, scope: !7)
!45 = !DILocation(line: 48, column: 23, scope: !7)
!46 = !DILocation(line: 41, column: 75, scope: !7)
!47 = !DILocation(line: 60, column: 56, scope: !7)
!48 = !DILocation(line: 41, column: 134, scope: !7)
!49 = !DILocation(line: 49, column: 24, scope: !7)
!50 = !DILocation(line: 50, column: 24, scope: !7)
!51 = !DILocation(line: 51, column: 23, scope: !7)
!52 = !DILocation(line: 105, column: 7, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!55 = !DILocation(line: 55, column: 55, scope: !53)
!56 = !DILocation(line: 110, column: 24, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 111, column: 30, scope: !53, inlinedAt: !55)
!58 = !DILocation(line: 112, column: 34, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 112, column: 26, scope: !53, inlinedAt: !55)
!60 = !DILocation(line: 113, column: 39, scope: !53, inlinedAt: !55)
!61 = !DILocation(line: 113, column: 31, scope: !53, inlinedAt: !55)
!62 = !DILocation(line: 113, column: 22, scope: !53, inlinedAt: !55)
!63 = !DILocation(line: 58, column: 58, scope: !7)
!64 = !DILocation(line: 59, column: 66, scope: !7)
!65 = !DILocation(line: 131, column: 46, scope: !53, inlinedAt: !66)
!66 = !DILocation(line: 62, column: 44, scope: !53)
!67 = !DILocation(line: 119, column: 21, scope: !68, inlinedAt: !69)
!68 = distinct !DILexicalBlockFile(scope: !53, file: !54, discriminator: 0)
!69 = !DILocation(line: 131, column: 46, scope: !68, inlinedAt: !70)
!70 = !DILocation(line: 62, column: 44, scope: !68)
!71 = !DILocation(line: 120, column: 28, scope: !68, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 39, scope: !68, inlinedAt: !69)
!73 = !DILocation(line: 121, column: 60, scope: !68, inlinedAt: !69)
!74 = !DILocation(line: 121, column: 49, scope: !68, inlinedAt: !69)
!75 = !DILocation(line: 123, column: 25, scope: !68, inlinedAt: !69)
!76 = !DILocation(line: 123, column: 17, scope: !68, inlinedAt: !69)
!77 = !DILocation(line: 124, column: 15, scope: !68, inlinedAt: !69)
!78 = !DILocation(line: 124, column: 30, scope: !68, inlinedAt: !69)
!79 = !DILocation(line: 124, column: 38, scope: !68, inlinedAt: !69)
!80 = !DILocation(line: 124, column: 49, scope: !68, inlinedAt: !69)
!81 = !DILocation(line: 124, column: 22, scope: !68, inlinedAt: !69)
!82 = !DILocation(line: 75, column: 24, scope: !7)
!83 = !DILocation(line: 77, column: 24, scope: !7)
!84 = !DILocation(line: 79, column: 24, scope: !7)
!85 = !DILocation(line: 71, column: 45, scope: !7)
!86 = !DILocation(line: 71, column: 39, scope: !7)
!87 = !DILocation(line: 71, column: 56, scope: !7)
!88 = !DILocation(line: 72, column: 35, scope: !7)
!89 = !DILocation(line: 72, column: 40, scope: !7)
!90 = !DILocation(line: 73, column: 35, scope: !7)
!91 = !DILocation(line: 73, column: 40, scope: !7)
!92 = !DILocation(line: 71, column: 116, scope: !7)
!93 = !DILocation(line: 72, column: 91, scope: !7)
!94 = !DILocation(line: 73, column: 91, scope: !7)
!95 = !DILocation(line: 80, column: 32, scope: !7)
!96 = !DILocation(line: 81, column: 24, scope: !7)
!97 = !DILocation(line: 87, column: 29, scope: !7)
!98 = !DILocation(line: 83, column: 24, scope: !7)
!99 = !DILocation(line: 85, column: 24, scope: !7)
!100 = !DILocation(line: 87, column: 53, scope: !7)
!101 = !DILocation(line: 68, column: 27, scope: !7)
!102 = !DILocation(line: 69, column: 25, scope: !7)
!103 = !DILocation(line: 71, column: 64, scope: !7)
!104 = !DILocation(line: 67, column: 4, scope: !7)
