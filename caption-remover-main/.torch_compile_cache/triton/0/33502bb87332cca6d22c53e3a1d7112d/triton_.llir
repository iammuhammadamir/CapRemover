; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d45de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = lshr i32 %7, 5, !dbg !8
  %9 = and i32 %8, 7, !dbg !8
  %10 = shl i32 %7, 3, !dbg !9
  %11 = and i32 %10, 248, !dbg !9
  %urem = and i32 %7, 255, !dbg !9
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %14 = add i32 %13, 1, !dbg !12
  %15 = shl i32 %12, 4, !dbg !13
  %16 = mul i32 %15, %14, !dbg !14
  %17 = or i32 %16, %9, !dbg !15
  %18 = or i32 %17, 8, !dbg !15
  %19 = or i32 %16, 1, !dbg !15
  %20 = or i32 %16, 2, !dbg !15
  %21 = or i32 %16, 3, !dbg !15
  %22 = or i32 %16, 4, !dbg !15
  %23 = or i32 %16, 5, !dbg !15
  %24 = or i32 %16, 6, !dbg !15
  %25 = or i32 %16, 7, !dbg !15
  %26 = or i32 %16, 8, !dbg !15
  %27 = or i32 %16, 9, !dbg !15
  %28 = or i32 %16, 10, !dbg !15
  %29 = or i32 %16, 11, !dbg !15
  %30 = or i32 %16, 12, !dbg !15
  %31 = or i32 %16, 13, !dbg !15
  %32 = or i32 %16, 14, !dbg !15
  %33 = or i32 %16, 15, !dbg !15
  %34 = icmp slt i32 %17, 14850, !dbg !16
  %35 = icmp slt i32 %18, 14850, !dbg !16
  %36 = icmp slt i32 %16, 14850, !dbg !16
  %37 = icmp slt i32 %19, 14850, !dbg !16
  %38 = icmp slt i32 %20, 14850, !dbg !16
  %39 = icmp slt i32 %21, 14850, !dbg !16
  %40 = icmp slt i32 %22, 14850, !dbg !16
  %41 = icmp slt i32 %23, 14850, !dbg !16
  %42 = icmp slt i32 %24, 14850, !dbg !16
  %43 = icmp slt i32 %25, 14850, !dbg !16
  %44 = icmp slt i32 %26, 14850, !dbg !16
  %45 = icmp slt i32 %27, 14850, !dbg !16
  %46 = icmp slt i32 %28, 14850, !dbg !16
  %47 = icmp slt i32 %29, 14850, !dbg !16
  %48 = icmp slt i32 %30, 14850, !dbg !16
  %49 = icmp slt i32 %31, 14850, !dbg !16
  %50 = icmp slt i32 %32, 14850, !dbg !16
  %51 = icmp slt i32 %33, 14850, !dbg !16
  %52 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %53 = shl i32 %52, 8, !dbg !18
  %54 = or i32 %53, %11, !dbg !19
  %55 = or i32 %53, %urem, !dbg !19
  %56 = icmp slt i32 %54, 320, !dbg !20
  %57 = icmp slt i32 %55, 320, !dbg !20
  %.frozen = freeze i32 %16
  %58 = sdiv i32 %.frozen, 675, !dbg !21
  %59 = mul i32 %58, 675
  %.decomposed = sub i32 %.frozen, %59
  %.frozen16 = freeze i32 %19
  %60 = sdiv i32 %.frozen16, 675, !dbg !21
  %61 = mul i32 %60, 675
  %.decomposed17 = sub i32 %.frozen16, %61
  %.frozen18 = freeze i32 %20
  %62 = sdiv i32 %.frozen18, 675, !dbg !21
  %63 = mul i32 %62, 675
  %.decomposed19 = sub i32 %.frozen18, %63
  %.frozen20 = freeze i32 %21
  %64 = sdiv i32 %.frozen20, 675, !dbg !21
  %65 = mul i32 %64, 675
  %.decomposed21 = sub i32 %.frozen20, %65
  %.frozen22 = freeze i32 %22
  %66 = sdiv i32 %.frozen22, 675, !dbg !21
  %67 = mul i32 %66, 675
  %.decomposed23 = sub i32 %.frozen22, %67
  %.frozen24 = freeze i32 %23
  %68 = sdiv i32 %.frozen24, 675, !dbg !21
  %69 = mul i32 %68, 675
  %.decomposed25 = sub i32 %.frozen24, %69
  %.frozen26 = freeze i32 %24
  %70 = sdiv i32 %.frozen26, 675, !dbg !21
  %71 = mul i32 %70, 675
  %.decomposed27 = sub i32 %.frozen26, %71
  %.frozen28 = freeze i32 %25
  %72 = sdiv i32 %.frozen28, 675, !dbg !21
  %73 = mul i32 %72, 675
  %.decomposed29 = sub i32 %.frozen28, %73
  %.frozen30 = freeze i32 %26
  %74 = sdiv i32 %.frozen30, 675, !dbg !21
  %75 = mul i32 %74, 675
  %.decomposed31 = sub i32 %.frozen30, %75
  %.frozen32 = freeze i32 %27
  %76 = sdiv i32 %.frozen32, 675, !dbg !21
  %77 = mul i32 %76, 675
  %.decomposed33 = sub i32 %.frozen32, %77
  %.frozen34 = freeze i32 %28
  %78 = sdiv i32 %.frozen34, 675, !dbg !21
  %79 = mul i32 %78, 675
  %.decomposed35 = sub i32 %.frozen34, %79
  %.frozen36 = freeze i32 %29
  %80 = sdiv i32 %.frozen36, 675, !dbg !21
  %81 = mul i32 %80, 675
  %.decomposed37 = sub i32 %.frozen36, %81
  %.frozen38 = freeze i32 %30
  %82 = sdiv i32 %.frozen38, 675, !dbg !21
  %83 = mul i32 %82, 675
  %.decomposed39 = sub i32 %.frozen38, %83
  %.frozen40 = freeze i32 %31
  %84 = sdiv i32 %.frozen40, 675, !dbg !21
  %85 = mul i32 %84, 675
  %.decomposed41 = sub i32 %.frozen40, %85
  %.frozen42 = freeze i32 %32
  %86 = sdiv i32 %.frozen42, 675, !dbg !21
  %87 = mul i32 %86, 675
  %.decomposed43 = sub i32 %.frozen42, %87
  %.frozen44 = freeze i32 %33
  %88 = sdiv i32 %.frozen44, 675, !dbg !21
  %89 = mul i32 %88, 675
  %.decomposed45 = sub i32 %.frozen44, %89
  %90 = mul i32 %17, 320, !dbg !22
  %91 = mul i32 %18, 320, !dbg !22
  %92 = add i32 %90, %54, !dbg !23
  %93 = add i32 %91, %54, !dbg !23
  %94 = sext i32 %92 to i64, !dbg !24
  %95 = getelementptr half, ptr addrspace(1) %0, i64 %94, !dbg !24
  %96 = sext i32 %93 to i64, !dbg !24
  %97 = getelementptr half, ptr addrspace(1) %0, i64 %96, !dbg !24
  %98 = and i1 %56, %34, !dbg !25
  %99 = and i1 %56, %35, !dbg !25
  %100 = and i1 %36, %57, !dbg !25
  %101 = and i1 %57, %37, !dbg !25
  %102 = and i1 %57, %38, !dbg !25
  %103 = and i1 %57, %39, !dbg !25
  %104 = and i1 %57, %40, !dbg !25
  %105 = and i1 %57, %41, !dbg !25
  %106 = and i1 %57, %42, !dbg !25
  %107 = and i1 %57, %43, !dbg !25
  %108 = and i1 %57, %44, !dbg !25
  %109 = and i1 %57, %45, !dbg !25
  %110 = and i1 %57, %46, !dbg !25
  %111 = and i1 %57, %47, !dbg !25
  %112 = and i1 %57, %48, !dbg !25
  %113 = and i1 %57, %49, !dbg !25
  %114 = and i1 %57, %50, !dbg !25
  %115 = and i1 %57, %51, !dbg !25
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %98) #2, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !26
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !26
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !26
  %121 = trunc i32 %117 to i16, !dbg !26
  %extelt.offset = lshr i32 %117, 16, !dbg !26
  %122 = trunc i32 %extelt.offset to i16, !dbg !26
  %123 = trunc i32 %118 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %118, 16, !dbg !26
  %124 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %125 = trunc i32 %119 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %119, 16, !dbg !26
  %126 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %127 = trunc i32 %120 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %120, 16, !dbg !26
  %128 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %99) #2, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !26
  %134 = trunc i32 %130 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %130, 16, !dbg !26
  %135 = trunc i32 %extelt.offset4 to i16, !dbg !26
  %136 = trunc i32 %131 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %131, 16, !dbg !26
  %137 = trunc i32 %extelt.offset5 to i16, !dbg !26
  %138 = trunc i32 %132 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %132, 16, !dbg !26
  %139 = trunc i32 %extelt.offset6 to i16, !dbg !26
  %140 = trunc i32 %133 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %133, 16, !dbg !26
  %141 = trunc i32 %extelt.offset7 to i16, !dbg !26
  %142 = mul nuw nsw i32 %9, 257, !dbg !27
  %143 = add nuw nsw i32 %142, %11, !dbg !27
  %144 = zext nneg i32 %143 to i64, !dbg !27
  %145 = getelementptr half, ptr addrspace(3) @global_smem, i64 %144, !dbg !27
  store i16 %121, ptr addrspace(3) %145, align 2, !dbg !27
  %146 = or i32 %11, 1, !dbg !27
  %147 = add nuw nsw i32 %146, %142, !dbg !27
  %148 = zext nneg i32 %147 to i64, !dbg !27
  %149 = getelementptr half, ptr addrspace(3) @global_smem, i64 %148, !dbg !27
  store i16 %122, ptr addrspace(3) %149, align 2, !dbg !27
  %150 = or i32 %11, 2, !dbg !27
  %151 = add nuw nsw i32 %150, %142, !dbg !27
  %152 = zext nneg i32 %151 to i64, !dbg !27
  %153 = getelementptr half, ptr addrspace(3) @global_smem, i64 %152, !dbg !27
  store i16 %123, ptr addrspace(3) %153, align 2, !dbg !27
  %154 = or i32 %11, 3, !dbg !27
  %155 = add nuw nsw i32 %154, %142, !dbg !27
  %156 = zext nneg i32 %155 to i64, !dbg !27
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i64 %156, !dbg !27
  store i16 %124, ptr addrspace(3) %157, align 2, !dbg !27
  %158 = or i32 %11, 4, !dbg !27
  %159 = add nuw nsw i32 %158, %142, !dbg !27
  %160 = zext nneg i32 %159 to i64, !dbg !27
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i64 %160, !dbg !27
  store i16 %125, ptr addrspace(3) %161, align 2, !dbg !27
  %162 = or i32 %11, 5, !dbg !27
  %163 = add nuw nsw i32 %162, %142, !dbg !27
  %164 = zext nneg i32 %163 to i64, !dbg !27
  %165 = getelementptr half, ptr addrspace(3) @global_smem, i64 %164, !dbg !27
  store i16 %126, ptr addrspace(3) %165, align 2, !dbg !27
  %166 = or i32 %11, 6, !dbg !27
  %167 = add nuw nsw i32 %166, %142, !dbg !27
  %168 = zext nneg i32 %167 to i64, !dbg !27
  %169 = getelementptr half, ptr addrspace(3) @global_smem, i64 %168, !dbg !27
  store i16 %127, ptr addrspace(3) %169, align 2, !dbg !27
  %170 = or i32 %11, 7, !dbg !27
  %171 = add nuw nsw i32 %170, %142, !dbg !27
  %172 = zext nneg i32 %171 to i64, !dbg !27
  %173 = getelementptr half, ptr addrspace(3) @global_smem, i64 %172, !dbg !27
  store i16 %128, ptr addrspace(3) %173, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %174 = zext nneg i32 %urem to i64, !dbg !27
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !27
  %176 = load half, ptr addrspace(3) %175, align 2, !dbg !27
  %177 = add nuw nsw i32 %urem, 257, !dbg !27
  %178 = zext nneg i32 %177 to i64, !dbg !27
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i64 %178, !dbg !27
  %180 = load half, ptr addrspace(3) %179, align 2, !dbg !27
  %181 = add nuw nsw i32 %urem, 514, !dbg !27
  %182 = zext nneg i32 %181 to i64, !dbg !27
  %183 = getelementptr half, ptr addrspace(3) @global_smem, i64 %182, !dbg !27
  %184 = load half, ptr addrspace(3) %183, align 2, !dbg !27
  %185 = add nuw nsw i32 %urem, 771, !dbg !27
  %186 = zext nneg i32 %185 to i64, !dbg !27
  %187 = getelementptr half, ptr addrspace(3) @global_smem, i64 %186, !dbg !27
  %188 = load half, ptr addrspace(3) %187, align 2, !dbg !27
  %189 = add nuw nsw i32 %urem, 1028, !dbg !27
  %190 = zext nneg i32 %189 to i64, !dbg !27
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !27
  %192 = load half, ptr addrspace(3) %191, align 2, !dbg !27
  %193 = add nuw nsw i32 %urem, 1285, !dbg !27
  %194 = zext nneg i32 %193 to i64, !dbg !27
  %195 = getelementptr half, ptr addrspace(3) @global_smem, i64 %194, !dbg !27
  %196 = load half, ptr addrspace(3) %195, align 2, !dbg !27
  %197 = add nuw nsw i32 %urem, 1542, !dbg !27
  %198 = zext nneg i32 %197 to i64, !dbg !27
  %199 = getelementptr half, ptr addrspace(3) @global_smem, i64 %198, !dbg !27
  %200 = load half, ptr addrspace(3) %199, align 2, !dbg !27
  %201 = add nuw nsw i32 %urem, 1799, !dbg !27
  %202 = zext nneg i32 %201 to i64, !dbg !27
  %203 = getelementptr half, ptr addrspace(3) @global_smem, i64 %202, !dbg !27
  %204 = load half, ptr addrspace(3) %203, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  store i16 %134, ptr addrspace(3) %145, align 2, !dbg !27
  store i16 %135, ptr addrspace(3) %149, align 2, !dbg !27
  store i16 %136, ptr addrspace(3) %153, align 2, !dbg !27
  store i16 %137, ptr addrspace(3) %157, align 2, !dbg !27
  store i16 %138, ptr addrspace(3) %161, align 2, !dbg !27
  store i16 %139, ptr addrspace(3) %165, align 2, !dbg !27
  store i16 %140, ptr addrspace(3) %169, align 2, !dbg !27
  store i16 %141, ptr addrspace(3) %173, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %205 = load half, ptr addrspace(3) %175, align 2, !dbg !27
  %206 = load half, ptr addrspace(3) %179, align 2, !dbg !27
  %207 = load half, ptr addrspace(3) %183, align 2, !dbg !27
  %208 = load half, ptr addrspace(3) %187, align 2, !dbg !27
  %209 = load half, ptr addrspace(3) %191, align 2, !dbg !27
  %210 = load half, ptr addrspace(3) %195, align 2, !dbg !27
  %211 = load half, ptr addrspace(3) %199, align 2, !dbg !27
  %212 = load half, ptr addrspace(3) %203, align 2, !dbg !27
  %213 = fpext half %176 to float, !dbg !27
  %214 = fpext half %180 to float, !dbg !27
  %215 = fpext half %184 to float, !dbg !27
  %216 = fpext half %188 to float, !dbg !27
  %217 = fpext half %192 to float, !dbg !27
  %218 = fpext half %196 to float, !dbg !27
  %219 = fpext half %200 to float, !dbg !27
  %220 = fpext half %204 to float, !dbg !27
  %221 = fpext half %205 to float, !dbg !27
  %222 = fpext half %206 to float, !dbg !27
  %223 = fpext half %207 to float, !dbg !27
  %224 = fpext half %208 to float, !dbg !27
  %225 = fpext half %209 to float, !dbg !27
  %226 = fpext half %210 to float, !dbg !27
  %227 = fpext half %211 to float, !dbg !27
  %228 = fpext half %212 to float, !dbg !27
  %229 = sext i32 %55 to i64, !dbg !28
  %230 = getelementptr half, ptr addrspace(1) %1, i64 %229, !dbg !28
  %231 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %230, i1 %57) #2, !dbg !29
  %232 = bitcast i16 %231 to half, !dbg !29
  %233 = fpext half %232 to float, !dbg !30
  %234 = getelementptr half, ptr addrspace(1) %2, i64 %94, !dbg !31
  %235 = getelementptr half, ptr addrspace(1) %2, i64 %96, !dbg !31
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %234, i1 %98) #2, !dbg !32
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !32
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !32
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !32
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !32
  %241 = trunc i32 %237 to i16, !dbg !32
  %extelt.offset8 = lshr i32 %237, 16, !dbg !32
  %242 = trunc i32 %extelt.offset8 to i16, !dbg !32
  %243 = trunc i32 %238 to i16, !dbg !32
  %extelt.offset9 = lshr i32 %238, 16, !dbg !32
  %244 = trunc i32 %extelt.offset9 to i16, !dbg !32
  %245 = trunc i32 %239 to i16, !dbg !32
  %extelt.offset10 = lshr i32 %239, 16, !dbg !32
  %246 = trunc i32 %extelt.offset10 to i16, !dbg !32
  %247 = trunc i32 %240 to i16, !dbg !32
  %extelt.offset11 = lshr i32 %240, 16, !dbg !32
  %248 = trunc i32 %extelt.offset11 to i16, !dbg !32
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %235, i1 %99) #2, !dbg !32
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !32
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !32
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !32
  %254 = trunc i32 %250 to i16, !dbg !32
  %extelt.offset12 = lshr i32 %250, 16, !dbg !32
  %255 = trunc i32 %extelt.offset12 to i16, !dbg !32
  %256 = trunc i32 %251 to i16, !dbg !32
  %extelt.offset13 = lshr i32 %251, 16, !dbg !32
  %257 = trunc i32 %extelt.offset13 to i16, !dbg !32
  %258 = trunc i32 %252 to i16, !dbg !32
  %extelt.offset14 = lshr i32 %252, 16, !dbg !32
  %259 = trunc i32 %extelt.offset14 to i16, !dbg !32
  %260 = trunc i32 %253 to i16, !dbg !32
  %extelt.offset15 = lshr i32 %253, 16, !dbg !32
  %261 = trunc i32 %extelt.offset15 to i16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  store i16 %241, ptr addrspace(3) %145, align 2, !dbg !33
  store i16 %242, ptr addrspace(3) %149, align 2, !dbg !33
  store i16 %243, ptr addrspace(3) %153, align 2, !dbg !33
  store i16 %244, ptr addrspace(3) %157, align 2, !dbg !33
  store i16 %245, ptr addrspace(3) %161, align 2, !dbg !33
  store i16 %246, ptr addrspace(3) %165, align 2, !dbg !33
  store i16 %247, ptr addrspace(3) %169, align 2, !dbg !33
  store i16 %248, ptr addrspace(3) %173, align 2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %262 = load half, ptr addrspace(3) %175, align 2, !dbg !33
  %263 = load half, ptr addrspace(3) %179, align 2, !dbg !33
  %264 = load half, ptr addrspace(3) %183, align 2, !dbg !33
  %265 = load half, ptr addrspace(3) %187, align 2, !dbg !33
  %266 = load half, ptr addrspace(3) %191, align 2, !dbg !33
  %267 = load half, ptr addrspace(3) %195, align 2, !dbg !33
  %268 = load half, ptr addrspace(3) %199, align 2, !dbg !33
  %269 = load half, ptr addrspace(3) %203, align 2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  store i16 %254, ptr addrspace(3) %145, align 2, !dbg !33
  store i16 %255, ptr addrspace(3) %149, align 2, !dbg !33
  store i16 %256, ptr addrspace(3) %153, align 2, !dbg !33
  store i16 %257, ptr addrspace(3) %157, align 2, !dbg !33
  store i16 %258, ptr addrspace(3) %161, align 2, !dbg !33
  store i16 %259, ptr addrspace(3) %165, align 2, !dbg !33
  store i16 %260, ptr addrspace(3) %169, align 2, !dbg !33
  store i16 %261, ptr addrspace(3) %173, align 2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %270 = load half, ptr addrspace(3) %175, align 2, !dbg !33
  %271 = load half, ptr addrspace(3) %179, align 2, !dbg !33
  %272 = load half, ptr addrspace(3) %183, align 2, !dbg !33
  %273 = load half, ptr addrspace(3) %187, align 2, !dbg !33
  %274 = load half, ptr addrspace(3) %191, align 2, !dbg !33
  %275 = load half, ptr addrspace(3) %195, align 2, !dbg !33
  %276 = load half, ptr addrspace(3) %199, align 2, !dbg !33
  %277 = load half, ptr addrspace(3) %203, align 2, !dbg !33
  %278 = fpext half %262 to float, !dbg !34
  %279 = fpext half %263 to float, !dbg !34
  %280 = fpext half %264 to float, !dbg !34
  %281 = fpext half %265 to float, !dbg !34
  %282 = fpext half %266 to float, !dbg !34
  %283 = fpext half %267 to float, !dbg !34
  %284 = fpext half %268 to float, !dbg !34
  %285 = fpext half %269 to float, !dbg !34
  %286 = fpext half %270 to float, !dbg !34
  %287 = fpext half %271 to float, !dbg !34
  %288 = fpext half %272 to float, !dbg !34
  %289 = fpext half %273 to float, !dbg !34
  %290 = fpext half %274 to float, !dbg !34
  %291 = fpext half %275 to float, !dbg !34
  %292 = fpext half %276 to float, !dbg !34
  %293 = fpext half %277 to float, !dbg !34
  %294 = fadd float %213, %233, !dbg !35
  %295 = fadd float %214, %233, !dbg !35
  %296 = fadd float %215, %233, !dbg !35
  %297 = fadd float %216, %233, !dbg !35
  %298 = fadd float %217, %233, !dbg !35
  %299 = fadd float %218, %233, !dbg !35
  %300 = fadd float %219, %233, !dbg !35
  %301 = fadd float %220, %233, !dbg !35
  %302 = fadd float %221, %233, !dbg !35
  %303 = fadd float %222, %233, !dbg !35
  %304 = fadd float %223, %233, !dbg !35
  %305 = fadd float %224, %233, !dbg !35
  %306 = fadd float %225, %233, !dbg !35
  %307 = fadd float %226, %233, !dbg !35
  %308 = fadd float %227, %233, !dbg !35
  %309 = fadd float %228, %233, !dbg !35
  %310 = fmul float %278, 1.250000e-01, !dbg !36
  %311 = fmul float %279, 1.250000e-01, !dbg !36
  %312 = fmul float %280, 1.250000e-01, !dbg !36
  %313 = fmul float %281, 1.250000e-01, !dbg !36
  %314 = fmul float %282, 1.250000e-01, !dbg !36
  %315 = fmul float %283, 1.250000e-01, !dbg !36
  %316 = fmul float %284, 1.250000e-01, !dbg !36
  %317 = fmul float %285, 1.250000e-01, !dbg !36
  %318 = fmul float %286, 1.250000e-01, !dbg !36
  %319 = fmul float %287, 1.250000e-01, !dbg !36
  %320 = fmul float %288, 1.250000e-01, !dbg !36
  %321 = fmul float %289, 1.250000e-01, !dbg !36
  %322 = fmul float %290, 1.250000e-01, !dbg !36
  %323 = fmul float %291, 1.250000e-01, !dbg !36
  %324 = fmul float %292, 1.250000e-01, !dbg !36
  %325 = fmul float %293, 1.250000e-01, !dbg !36
  %326 = fadd float %294, %310, !dbg !37
  %327 = fadd float %295, %311, !dbg !37
  %328 = fadd float %296, %312, !dbg !37
  %329 = fadd float %297, %313, !dbg !37
  %330 = fadd float %298, %314, !dbg !37
  %331 = fadd float %299, %315, !dbg !37
  %332 = fadd float %300, %316, !dbg !37
  %333 = fadd float %301, %317, !dbg !37
  %334 = fadd float %302, %318, !dbg !37
  %335 = fadd float %303, %319, !dbg !37
  %336 = fadd float %304, %320, !dbg !37
  %337 = fadd float %305, %321, !dbg !37
  %338 = fadd float %306, %322, !dbg !37
  %339 = fadd float %307, %323, !dbg !37
  %340 = fadd float %308, %324, !dbg !37
  %341 = fadd float %309, %325, !dbg !37
  %342 = mul i32 %55, 675, !dbg !38
  %343 = add i32 %342, %.decomposed, !dbg !39
  %344 = add i32 %.decomposed17, %342, !dbg !39
  %345 = add i32 %.decomposed19, %342, !dbg !39
  %346 = add i32 %.decomposed21, %342, !dbg !39
  %347 = add i32 %.decomposed23, %342, !dbg !39
  %348 = add i32 %.decomposed25, %342, !dbg !39
  %349 = add i32 %.decomposed27, %342, !dbg !39
  %350 = add i32 %.decomposed29, %342, !dbg !39
  %351 = add i32 %.decomposed31, %342, !dbg !39
  %352 = add i32 %.decomposed33, %342, !dbg !39
  %353 = add i32 %.decomposed35, %342, !dbg !39
  %354 = add i32 %.decomposed37, %342, !dbg !39
  %355 = add i32 %.decomposed39, %342, !dbg !39
  %356 = add i32 %.decomposed41, %342, !dbg !39
  %357 = add i32 %.decomposed43, %342, !dbg !39
  %358 = add i32 %.decomposed45, %342, !dbg !39
  %359 = mul i32 %58, 216000, !dbg !40
  %360 = mul i32 %60, 216000, !dbg !40
  %361 = mul i32 %62, 216000, !dbg !40
  %362 = mul i32 %64, 216000, !dbg !40
  %363 = mul i32 %66, 216000, !dbg !40
  %364 = mul i32 %68, 216000, !dbg !40
  %365 = mul i32 %70, 216000, !dbg !40
  %366 = mul i32 %72, 216000, !dbg !40
  %367 = mul i32 %74, 216000, !dbg !40
  %368 = mul i32 %76, 216000, !dbg !40
  %369 = mul i32 %78, 216000, !dbg !40
  %370 = mul i32 %80, 216000, !dbg !40
  %371 = mul i32 %82, 216000, !dbg !40
  %372 = mul i32 %84, 216000, !dbg !40
  %373 = mul i32 %86, 216000, !dbg !40
  %374 = mul i32 %88, 216000, !dbg !40
  %375 = add i32 %343, %359, !dbg !41
  %376 = add i32 %344, %360, !dbg !41
  %377 = add i32 %345, %361, !dbg !41
  %378 = add i32 %346, %362, !dbg !41
  %379 = add i32 %347, %363, !dbg !41
  %380 = add i32 %348, %364, !dbg !41
  %381 = add i32 %349, %365, !dbg !41
  %382 = add i32 %350, %366, !dbg !41
  %383 = add i32 %351, %367, !dbg !41
  %384 = add i32 %352, %368, !dbg !41
  %385 = add i32 %353, %369, !dbg !41
  %386 = add i32 %354, %370, !dbg !41
  %387 = add i32 %355, %371, !dbg !41
  %388 = add i32 %356, %372, !dbg !41
  %389 = add i32 %357, %373, !dbg !41
  %390 = add i32 %358, %374, !dbg !41
  %391 = sext i32 %375 to i64, !dbg !42
  %392 = getelementptr half, ptr addrspace(1) %3, i64 %391, !dbg !42
  %393 = sext i32 %376 to i64, !dbg !42
  %394 = getelementptr half, ptr addrspace(1) %3, i64 %393, !dbg !42
  %395 = sext i32 %377 to i64, !dbg !42
  %396 = getelementptr half, ptr addrspace(1) %3, i64 %395, !dbg !42
  %397 = sext i32 %378 to i64, !dbg !42
  %398 = getelementptr half, ptr addrspace(1) %3, i64 %397, !dbg !42
  %399 = sext i32 %379 to i64, !dbg !42
  %400 = getelementptr half, ptr addrspace(1) %3, i64 %399, !dbg !42
  %401 = sext i32 %380 to i64, !dbg !42
  %402 = getelementptr half, ptr addrspace(1) %3, i64 %401, !dbg !42
  %403 = sext i32 %381 to i64, !dbg !42
  %404 = getelementptr half, ptr addrspace(1) %3, i64 %403, !dbg !42
  %405 = sext i32 %382 to i64, !dbg !42
  %406 = getelementptr half, ptr addrspace(1) %3, i64 %405, !dbg !42
  %407 = sext i32 %383 to i64, !dbg !42
  %408 = getelementptr half, ptr addrspace(1) %3, i64 %407, !dbg !42
  %409 = sext i32 %384 to i64, !dbg !42
  %410 = getelementptr half, ptr addrspace(1) %3, i64 %409, !dbg !42
  %411 = sext i32 %385 to i64, !dbg !42
  %412 = getelementptr half, ptr addrspace(1) %3, i64 %411, !dbg !42
  %413 = sext i32 %386 to i64, !dbg !42
  %414 = getelementptr half, ptr addrspace(1) %3, i64 %413, !dbg !42
  %415 = sext i32 %387 to i64, !dbg !42
  %416 = getelementptr half, ptr addrspace(1) %3, i64 %415, !dbg !42
  %417 = sext i32 %388 to i64, !dbg !42
  %418 = getelementptr half, ptr addrspace(1) %3, i64 %417, !dbg !42
  %419 = sext i32 %389 to i64, !dbg !42
  %420 = getelementptr half, ptr addrspace(1) %3, i64 %419, !dbg !42
  %421 = sext i32 %390 to i64, !dbg !42
  %422 = getelementptr half, ptr addrspace(1) %3, i64 %421, !dbg !42
  %423 = fptrunc float %326 to half, !dbg !33
  %424 = fptrunc float %327 to half, !dbg !33
  %425 = fptrunc float %328 to half, !dbg !33
  %426 = fptrunc float %329 to half, !dbg !33
  %427 = fptrunc float %330 to half, !dbg !33
  %428 = fptrunc float %331 to half, !dbg !33
  %429 = fptrunc float %332 to half, !dbg !33
  %430 = fptrunc float %333 to half, !dbg !33
  %431 = fptrunc float %334 to half, !dbg !33
  %432 = fptrunc float %335 to half, !dbg !33
  %433 = fptrunc float %336 to half, !dbg !33
  %434 = fptrunc float %337 to half, !dbg !33
  %435 = fptrunc float %338 to half, !dbg !33
  %436 = fptrunc float %339 to half, !dbg !33
  %437 = fptrunc float %340 to half, !dbg !33
  %438 = fptrunc float %341 to half, !dbg !33
  %439 = bitcast half %423 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %439, ptr addrspace(1) %392, i1 %100) #2, !dbg !33
  %440 = bitcast half %424 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %440, ptr addrspace(1) %394, i1 %101) #2, !dbg !33
  %441 = bitcast half %425 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %441, ptr addrspace(1) %396, i1 %102) #2, !dbg !33
  %442 = bitcast half %426 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %442, ptr addrspace(1) %398, i1 %103) #2, !dbg !33
  %443 = bitcast half %427 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %443, ptr addrspace(1) %400, i1 %104) #2, !dbg !33
  %444 = bitcast half %428 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %444, ptr addrspace(1) %402, i1 %105) #2, !dbg !33
  %445 = bitcast half %429 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %445, ptr addrspace(1) %404, i1 %106) #2, !dbg !33
  %446 = bitcast half %430 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %446, ptr addrspace(1) %406, i1 %107) #2, !dbg !33
  %447 = bitcast half %431 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %447, ptr addrspace(1) %408, i1 %108) #2, !dbg !33
  %448 = bitcast half %432 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %448, ptr addrspace(1) %410, i1 %109) #2, !dbg !33
  %449 = bitcast half %433 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %449, ptr addrspace(1) %412, i1 %110) #2, !dbg !33
  %450 = bitcast half %434 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %450, ptr addrspace(1) %414, i1 %111) #2, !dbg !33
  %451 = bitcast half %435 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %451, ptr addrspace(1) %416, i1 %112) #2, !dbg !33
  %452 = bitcast half %436 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %452, ptr addrspace(1) %418, i1 %113) #2, !dbg !33
  %453 = bitcast half %437 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %453, ptr addrspace(1) %420, i1 %114) #2, !dbg !33
  %454 = bitcast half %438 to i16, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %454, ptr addrspace(1) %422, i1 %115) #2, !dbg !33
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cflmorxwram7b53hs73bzvriztaxm7ly3y2s7goaejppuevdgnlk.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/fl")
!3 = !{ptr @triton__0d1d2d3d45de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d45de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d45de", linkageName: "triton__0d1d2d3d45de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 40, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 54, scope: !5)
!26 = !DILocation(line: 33, column: 46, scope: !5)
!27 = !DILocation(line: 33, column: 94, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 34, column: 35, scope: !5)
!30 = !DILocation(line: 34, column: 75, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 40, column: 61, scope: !5)
!34 = !DILocation(line: 35, column: 94, scope: !5)
!35 = !DILocation(line: 36, column: 18, scope: !5)
!36 = !DILocation(line: 38, column: 18, scope: !5)
!37 = !DILocation(line: 39, column: 18, scope: !5)
!38 = !DILocation(line: 40, column: 35, scope: !5)
!39 = !DILocation(line: 40, column: 31, scope: !5)
!40 = !DILocation(line: 40, column: 49, scope: !5)
!41 = !DILocation(line: 40, column: 42, scope: !5)
!42 = !DILocation(line: 40, column: 25, scope: !5)
!43 = !DILocation(line: 40, column: 4, scope: !5)
