; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = and i32 %9, 7, !dbg !8
  %11 = lshr i32 %8, 1, !dbg !8
  %12 = shl nuw nsw i32 %10, 4, !dbg !8
  %13 = or i32 %12, %11, !dbg !8
  %14 = or i32 %13, 128, !dbg !8
  %15 = shl nuw nsw i32 %8, 3, !dbg !8
  %16 = shl i32 %7, 3, !dbg !9
  %17 = and i32 %16, 8, !dbg !9
  %18 = or i32 %10, 8, !dbg !9
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %21 = add i32 %20, 1, !dbg !12
  %22 = shl i32 %19, 8, !dbg !13
  %23 = mul i32 %22, %21, !dbg !14
  %24 = or i32 %23, %13, !dbg !15
  %25 = or i32 %23, %14, !dbg !15
  %26 = or i32 %23, %15, !dbg !15
  %27 = icmp slt i32 %24, 4048, !dbg !16
  %28 = icmp slt i32 %25, 4048, !dbg !16
  %29 = icmp slt i32 %26, 4048, !dbg !16
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %31 = shl i32 %30, 4, !dbg !18
  %32 = or i32 %31, %17, !dbg !19
  %33 = or i32 %31, %10, !dbg !19
  %34 = or i32 %31, %18, !dbg !19
  %35 = icmp slt i32 %32, 1280, !dbg !20
  %36 = icmp slt i32 %33, 1280, !dbg !20
  %37 = icmp slt i32 %34, 1280, !dbg !20
  %.frozen = freeze i32 %26
  %38 = sdiv i32 %.frozen, 184, !dbg !21
  %39 = mul i32 %38, 184
  %.decomposed = sub i32 %.frozen, %39
  %40 = mul i32 %24, 1280, !dbg !22
  %41 = mul i32 %25, 1280, !dbg !22
  %42 = add i32 %40, %32, !dbg !23
  %43 = add i32 %41, %32, !dbg !23
  %44 = sext i32 %42 to i64, !dbg !24
  %45 = getelementptr half, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %43 to i64, !dbg !24
  %47 = getelementptr half, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = and i1 %35, %27, !dbg !25
  %49 = and i1 %35, %28, !dbg !25
  %50 = and i1 %36, %29, !dbg !25
  %51 = and i1 %37, %29, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %48) #2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %49) #2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = trunc i32 %58 to i16, !dbg !26
  %63 = bitcast i16 %62 to half, !dbg !26
  %64 = trunc i32 %59 to i16, !dbg !26
  %65 = bitcast i16 %64 to half, !dbg !26
  %66 = trunc i32 %60 to i16, !dbg !26
  %67 = bitcast i16 %66 to half, !dbg !26
  %68 = trunc i32 %61 to i16, !dbg !26
  %69 = bitcast i16 %68 to half, !dbg !26
  %70 = fpext half %63 to float, !dbg !27
  %71 = fpext half %65 to float, !dbg !27
  %72 = fpext half %67 to float, !dbg !27
  %73 = fpext half %69 to float, !dbg !27
  %74 = sext i32 %32 to i64, !dbg !28
  %75 = getelementptr half, ptr addrspace(1) %1, i64 %74, !dbg !28
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %35) #2, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !29
  %extelt.offset8 = lshr i32 %77, 16, !dbg !29
  %81 = trunc i32 %extelt.offset8 to i16, !dbg !29
  %82 = bitcast i16 %81 to half, !dbg !29
  %extelt.offset9 = lshr i32 %78, 16, !dbg !29
  %83 = trunc i32 %extelt.offset9 to i16, !dbg !29
  %84 = bitcast i16 %83 to half, !dbg !29
  %extelt.offset10 = lshr i32 %79, 16, !dbg !29
  %85 = trunc i32 %extelt.offset10 to i16, !dbg !29
  %86 = bitcast i16 %85 to half, !dbg !29
  %extelt.offset11 = lshr i32 %80, 16, !dbg !29
  %87 = trunc i32 %extelt.offset11 to i16, !dbg !29
  %88 = bitcast i16 %87 to half, !dbg !29
  %89 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !26
  %90 = insertelement <2 x i32> %89, i32 %77, i64 1, !dbg !26
  %91 = trunc <2 x i32> %90 to <2 x i16>, !dbg !26
  %92 = bitcast <2 x i16> %91 to <2 x half>, !dbg !26
  %93 = fpext <2 x half> %92 to <2 x float>, !dbg !27
  %94 = fpext half %82 to float, !dbg !30
  %95 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !26
  %96 = insertelement <2 x i32> %95, i32 %78, i64 1, !dbg !26
  %97 = trunc <2 x i32> %96 to <2 x i16>, !dbg !26
  %98 = bitcast <2 x i16> %97 to <2 x half>, !dbg !26
  %99 = fpext <2 x half> %98 to <2 x float>, !dbg !27
  %100 = fpext half %84 to float, !dbg !30
  %101 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !26
  %102 = insertelement <2 x i32> %101, i32 %79, i64 1, !dbg !26
  %103 = trunc <2 x i32> %102 to <2 x i16>, !dbg !26
  %104 = bitcast <2 x i16> %103 to <2 x half>, !dbg !26
  %105 = fpext <2 x half> %104 to <2 x float>, !dbg !27
  %106 = fpext half %86 to float, !dbg !30
  %107 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !26
  %108 = insertelement <2 x i32> %107, i32 %80, i64 1, !dbg !26
  %109 = trunc <2 x i32> %108 to <2 x i16>, !dbg !26
  %110 = bitcast <2 x i16> %109 to <2 x half>, !dbg !26
  %111 = fpext <2 x half> %110 to <2 x float>, !dbg !27
  %112 = fpext half %88 to float, !dbg !30
  %113 = getelementptr half, ptr addrspace(1) %2, i64 %44, !dbg !31
  %114 = getelementptr half, ptr addrspace(1) %2, i64 %46, !dbg !31
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %48) #2, !dbg !32
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !32
  %120 = trunc i32 %116 to i16, !dbg !32
  %121 = bitcast i16 %120 to half, !dbg !32
  %122 = trunc i32 %117 to i16, !dbg !32
  %123 = bitcast i16 %122 to half, !dbg !32
  %124 = trunc i32 %118 to i16, !dbg !32
  %125 = bitcast i16 %124 to half, !dbg !32
  %126 = trunc i32 %119 to i16, !dbg !32
  %127 = bitcast i16 %126 to half, !dbg !32
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %49) #2, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !32
  %133 = trunc i32 %129 to i16, !dbg !32
  %134 = bitcast i16 %133 to half, !dbg !32
  %135 = trunc i32 %130 to i16, !dbg !32
  %136 = bitcast i16 %135 to half, !dbg !32
  %137 = trunc i32 %131 to i16, !dbg !32
  %138 = bitcast i16 %137 to half, !dbg !32
  %139 = trunc i32 %132 to i16, !dbg !32
  %140 = bitcast i16 %139 to half, !dbg !32
  %141 = fpext half %121 to float, !dbg !33
  %142 = fpext half %123 to float, !dbg !33
  %143 = fpext half %125 to float, !dbg !33
  %144 = fpext half %127 to float, !dbg !33
  %145 = fpext half %134 to float, !dbg !33
  %146 = fpext half %136 to float, !dbg !33
  %147 = fpext half %138 to float, !dbg !33
  %148 = fpext half %140 to float, !dbg !33
  %149 = extractelement <2 x float> %93, i64 0, !dbg !34
  %150 = extractelement <2 x float> %93, i64 1, !dbg !34
  %151 = fadd float %149, %150, !dbg !34
  %152 = extractelement <2 x float> %99, i64 0, !dbg !34
  %153 = extractelement <2 x float> %99, i64 1, !dbg !34
  %154 = fadd float %152, %153, !dbg !34
  %155 = extractelement <2 x float> %105, i64 0, !dbg !34
  %156 = extractelement <2 x float> %105, i64 1, !dbg !34
  %157 = fadd float %155, %156, !dbg !34
  %158 = extractelement <2 x float> %111, i64 0, !dbg !34
  %159 = extractelement <2 x float> %111, i64 1, !dbg !34
  %160 = fadd float %158, %159, !dbg !34
  %161 = fadd float %150, %70, !dbg !34
  %162 = fadd float %153, %71, !dbg !34
  %163 = fadd float %156, %72, !dbg !34
  %164 = fadd float %159, %73, !dbg !34
  %165 = fmul float %141, 1.250000e-01, !dbg !35
  %166 = insertelement <2 x i32> %89, i32 %116, i64 1, !dbg !26
  %167 = lshr <2 x i32> %166, <i32 16, i32 16>, !dbg !26
  %168 = trunc <2 x i32> %167 to <2 x i16>, !dbg !26
  %169 = bitcast <2 x i16> %168 to <2 x half>, !dbg !26
  %170 = fpext <2 x half> %169 to <2 x float>, !dbg !27
  %171 = fmul float %142, 1.250000e-01, !dbg !35
  %172 = insertelement <2 x i32> %95, i32 %117, i64 1, !dbg !26
  %173 = lshr <2 x i32> %172, <i32 16, i32 16>, !dbg !26
  %174 = trunc <2 x i32> %173 to <2 x i16>, !dbg !26
  %175 = bitcast <2 x i16> %174 to <2 x half>, !dbg !26
  %176 = fpext <2 x half> %175 to <2 x float>, !dbg !27
  %177 = fmul float %143, 1.250000e-01, !dbg !35
  %178 = insertelement <2 x i32> %101, i32 %118, i64 1, !dbg !26
  %179 = lshr <2 x i32> %178, <i32 16, i32 16>, !dbg !26
  %180 = trunc <2 x i32> %179 to <2 x i16>, !dbg !26
  %181 = bitcast <2 x i16> %180 to <2 x half>, !dbg !26
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !27
  %183 = fmul float %144, 1.250000e-01, !dbg !35
  %184 = insertelement <2 x i32> %107, i32 %119, i64 1, !dbg !26
  %185 = lshr <2 x i32> %184, <i32 16, i32 16>, !dbg !26
  %186 = trunc <2 x i32> %185 to <2 x i16>, !dbg !26
  %187 = bitcast <2 x i16> %186 to <2 x half>, !dbg !26
  %188 = fpext <2 x half> %187 to <2 x float>, !dbg !27
  %189 = fmul float %145, 1.250000e-01, !dbg !35
  %190 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !26
  %191 = insertelement <2 x i32> %190, i32 %129, i64 1, !dbg !26
  %192 = lshr <2 x i32> %191, <i32 16, i32 16>, !dbg !26
  %193 = trunc <2 x i32> %192 to <2 x i16>, !dbg !26
  %194 = bitcast <2 x i16> %193 to <2 x half>, !dbg !26
  %195 = fpext <2 x half> %194 to <2 x float>, !dbg !27
  %196 = fmul float %146, 1.250000e-01, !dbg !35
  %197 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !26
  %198 = insertelement <2 x i32> %197, i32 %130, i64 1, !dbg !26
  %199 = lshr <2 x i32> %198, <i32 16, i32 16>, !dbg !26
  %200 = trunc <2 x i32> %199 to <2 x i16>, !dbg !26
  %201 = bitcast <2 x i16> %200 to <2 x half>, !dbg !26
  %202 = fpext <2 x half> %201 to <2 x float>, !dbg !27
  %203 = fmul float %147, 1.250000e-01, !dbg !35
  %204 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !26
  %205 = insertelement <2 x i32> %204, i32 %131, i64 1, !dbg !26
  %206 = lshr <2 x i32> %205, <i32 16, i32 16>, !dbg !26
  %207 = trunc <2 x i32> %206 to <2 x i16>, !dbg !26
  %208 = bitcast <2 x i16> %207 to <2 x half>, !dbg !26
  %209 = fpext <2 x half> %208 to <2 x float>, !dbg !27
  %210 = fmul float %148, 1.250000e-01, !dbg !35
  %211 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !26
  %212 = insertelement <2 x i32> %211, i32 %132, i64 1, !dbg !26
  %213 = lshr <2 x i32> %212, <i32 16, i32 16>, !dbg !26
  %214 = trunc <2 x i32> %213 to <2 x i16>, !dbg !26
  %215 = bitcast <2 x i16> %214 to <2 x half>, !dbg !26
  %216 = fpext <2 x half> %215 to <2 x float>, !dbg !27
  %217 = fadd float %151, %165, !dbg !36
  %218 = extractelement <2 x float> %170, i64 0, !dbg !36
  %219 = fadd float %218, %94, !dbg !36
  %220 = extractelement <2 x float> %170, i64 1, !dbg !36
  %221 = fmul float %220, 1.250000e-01, !dbg !36
  %222 = fadd float %219, %221, !dbg !36
  %223 = fadd float %154, %171, !dbg !36
  %224 = extractelement <2 x float> %176, i64 0, !dbg !36
  %225 = fadd float %224, %100, !dbg !36
  %226 = extractelement <2 x float> %176, i64 1, !dbg !36
  %227 = fmul float %226, 1.250000e-01, !dbg !36
  %228 = fadd float %225, %227, !dbg !36
  %229 = fadd float %157, %177, !dbg !36
  %230 = extractelement <2 x float> %182, i64 0, !dbg !36
  %231 = fadd float %230, %106, !dbg !36
  %232 = extractelement <2 x float> %182, i64 1, !dbg !36
  %233 = fmul float %232, 1.250000e-01, !dbg !36
  %234 = fadd float %231, %233, !dbg !36
  %235 = fadd float %160, %183, !dbg !36
  %236 = extractelement <2 x float> %188, i64 0, !dbg !36
  %237 = fadd float %236, %112, !dbg !36
  %238 = extractelement <2 x float> %188, i64 1, !dbg !36
  %239 = fmul float %238, 1.250000e-01, !dbg !36
  %240 = fadd float %237, %239, !dbg !36
  %241 = fadd float %161, %189, !dbg !36
  %242 = extractelement <2 x float> %195, i64 0, !dbg !36
  %243 = fadd float %242, %94, !dbg !36
  %244 = extractelement <2 x float> %195, i64 1, !dbg !36
  %245 = fmul float %244, 1.250000e-01, !dbg !36
  %246 = fadd float %243, %245, !dbg !36
  %247 = fadd float %162, %196, !dbg !36
  %248 = extractelement <2 x float> %202, i64 0, !dbg !36
  %249 = fadd float %248, %100, !dbg !36
  %250 = extractelement <2 x float> %202, i64 1, !dbg !36
  %251 = fmul float %250, 1.250000e-01, !dbg !36
  %252 = fadd float %249, %251, !dbg !36
  %253 = fadd float %163, %203, !dbg !36
  %254 = extractelement <2 x float> %209, i64 0, !dbg !36
  %255 = fadd float %254, %106, !dbg !36
  %256 = extractelement <2 x float> %209, i64 1, !dbg !36
  %257 = fmul float %256, 1.250000e-01, !dbg !36
  %258 = fadd float %255, %257, !dbg !36
  %259 = fadd float %164, %210, !dbg !36
  %260 = extractelement <2 x float> %216, i64 0, !dbg !36
  %261 = fadd float %260, %112, !dbg !36
  %262 = extractelement <2 x float> %216, i64 1, !dbg !36
  %263 = fmul float %262, 1.250000e-01, !dbg !36
  %264 = fadd float %261, %263, !dbg !36
  %265 = mul i32 %33, 184, !dbg !37
  %266 = mul i32 %34, 184, !dbg !37
  %267 = mul i32 %38, 235520, !dbg !38
  %268 = add i32 %267, %.decomposed, !dbg !39
  %269 = add i32 %268, %265, !dbg !40
  %270 = add i32 %268, %266, !dbg !40
  %271 = sext i32 %269 to i64, !dbg !41
  %272 = getelementptr half, ptr addrspace(1) %3, i64 %271, !dbg !41
  %273 = sext i32 %270 to i64, !dbg !41
  %274 = getelementptr half, ptr addrspace(1) %3, i64 %273, !dbg !41
  %275 = fptrunc float %217 to half, !dbg !42
  %276 = fptrunc float %222 to half, !dbg !42
  %277 = fptrunc float %223 to half, !dbg !42
  %278 = fptrunc float %228 to half, !dbg !42
  %279 = fptrunc float %229 to half, !dbg !42
  %280 = fptrunc float %234 to half, !dbg !42
  %281 = fptrunc float %235 to half, !dbg !42
  %282 = fptrunc float %240 to half, !dbg !42
  %283 = fptrunc float %241 to half, !dbg !42
  %284 = fptrunc float %246 to half, !dbg !42
  %285 = fptrunc float %247 to half, !dbg !42
  %286 = fptrunc float %252 to half, !dbg !42
  %287 = fptrunc float %253 to half, !dbg !42
  %288 = fptrunc float %258 to half, !dbg !42
  %289 = fptrunc float %259 to half, !dbg !42
  %290 = fptrunc float %264 to half, !dbg !42
  %291 = mul nuw nsw i32 %17, 264, !dbg !42
  %292 = add nuw nsw i32 %13, %291, !dbg !42
  %293 = zext nneg i32 %292 to i64, !dbg !42
  %294 = getelementptr half, ptr addrspace(3) @global_smem, i64 %293, !dbg !42
  %295 = insertelement <1 x half> undef, half %275, i64 0, !dbg !42
  store <1 x half> %295, ptr addrspace(3) %294, align 2, !dbg !42
  %296 = add nuw nsw i32 %291, 264, !dbg !42
  %297 = add nuw nsw i32 %296, %13, !dbg !42
  %298 = zext nneg i32 %297 to i64, !dbg !42
  %299 = getelementptr half, ptr addrspace(3) @global_smem, i64 %298, !dbg !42
  %300 = insertelement <1 x half> undef, half %276, i64 0, !dbg !42
  store <1 x half> %300, ptr addrspace(3) %299, align 2, !dbg !42
  %301 = add nuw nsw i32 %291, 528, !dbg !42
  %302 = add nuw nsw i32 %301, %13, !dbg !42
  %303 = zext nneg i32 %302 to i64, !dbg !42
  %304 = getelementptr half, ptr addrspace(3) @global_smem, i64 %303, !dbg !42
  %305 = insertelement <1 x half> undef, half %277, i64 0, !dbg !42
  store <1 x half> %305, ptr addrspace(3) %304, align 2, !dbg !42
  %306 = add nuw nsw i32 %291, 792, !dbg !42
  %307 = add nuw nsw i32 %306, %13, !dbg !42
  %308 = zext nneg i32 %307 to i64, !dbg !42
  %309 = getelementptr half, ptr addrspace(3) @global_smem, i64 %308, !dbg !42
  %310 = insertelement <1 x half> undef, half %278, i64 0, !dbg !42
  store <1 x half> %310, ptr addrspace(3) %309, align 2, !dbg !42
  %311 = add nuw nsw i32 %291, 1056, !dbg !42
  %312 = add nuw nsw i32 %311, %13, !dbg !42
  %313 = zext nneg i32 %312 to i64, !dbg !42
  %314 = getelementptr half, ptr addrspace(3) @global_smem, i64 %313, !dbg !42
  %315 = insertelement <1 x half> undef, half %279, i64 0, !dbg !42
  store <1 x half> %315, ptr addrspace(3) %314, align 2, !dbg !42
  %316 = add nuw nsw i32 %291, 1320, !dbg !42
  %317 = add nuw nsw i32 %316, %13, !dbg !42
  %318 = zext nneg i32 %317 to i64, !dbg !42
  %319 = getelementptr half, ptr addrspace(3) @global_smem, i64 %318, !dbg !42
  %320 = insertelement <1 x half> undef, half %280, i64 0, !dbg !42
  store <1 x half> %320, ptr addrspace(3) %319, align 2, !dbg !42
  %321 = add nuw nsw i32 %291, 1584, !dbg !42
  %322 = add nuw nsw i32 %321, %13, !dbg !42
  %323 = zext nneg i32 %322 to i64, !dbg !42
  %324 = getelementptr half, ptr addrspace(3) @global_smem, i64 %323, !dbg !42
  %325 = insertelement <1 x half> undef, half %281, i64 0, !dbg !42
  store <1 x half> %325, ptr addrspace(3) %324, align 2, !dbg !42
  %326 = add nuw nsw i32 %291, 1848, !dbg !42
  %327 = add nuw nsw i32 %326, %13, !dbg !42
  %328 = zext nneg i32 %327 to i64, !dbg !42
  %329 = getelementptr half, ptr addrspace(3) @global_smem, i64 %328, !dbg !42
  %330 = insertelement <1 x half> undef, half %282, i64 0, !dbg !42
  store <1 x half> %330, ptr addrspace(3) %329, align 2, !dbg !42
  %331 = add nuw nsw i32 %14, %291, !dbg !42
  %332 = zext nneg i32 %331 to i64, !dbg !42
  %333 = getelementptr half, ptr addrspace(3) @global_smem, i64 %332, !dbg !42
  %334 = insertelement <1 x half> undef, half %283, i64 0, !dbg !42
  store <1 x half> %334, ptr addrspace(3) %333, align 2, !dbg !42
  %335 = add nuw nsw i32 %14, %296, !dbg !42
  %336 = zext nneg i32 %335 to i64, !dbg !42
  %337 = getelementptr half, ptr addrspace(3) @global_smem, i64 %336, !dbg !42
  %338 = insertelement <1 x half> undef, half %284, i64 0, !dbg !42
  store <1 x half> %338, ptr addrspace(3) %337, align 2, !dbg !42
  %339 = add nuw nsw i32 %14, %301, !dbg !42
  %340 = zext nneg i32 %339 to i64, !dbg !42
  %341 = getelementptr half, ptr addrspace(3) @global_smem, i64 %340, !dbg !42
  %342 = insertelement <1 x half> undef, half %285, i64 0, !dbg !42
  store <1 x half> %342, ptr addrspace(3) %341, align 2, !dbg !42
  %343 = add nuw nsw i32 %14, %306, !dbg !42
  %344 = zext nneg i32 %343 to i64, !dbg !42
  %345 = getelementptr half, ptr addrspace(3) @global_smem, i64 %344, !dbg !42
  %346 = insertelement <1 x half> undef, half %286, i64 0, !dbg !42
  store <1 x half> %346, ptr addrspace(3) %345, align 2, !dbg !42
  %347 = add nuw nsw i32 %14, %311, !dbg !42
  %348 = zext nneg i32 %347 to i64, !dbg !42
  %349 = getelementptr half, ptr addrspace(3) @global_smem, i64 %348, !dbg !42
  %350 = insertelement <1 x half> undef, half %287, i64 0, !dbg !42
  store <1 x half> %350, ptr addrspace(3) %349, align 2, !dbg !42
  %351 = add nuw nsw i32 %14, %316, !dbg !42
  %352 = zext nneg i32 %351 to i64, !dbg !42
  %353 = getelementptr half, ptr addrspace(3) @global_smem, i64 %352, !dbg !42
  %354 = insertelement <1 x half> undef, half %288, i64 0, !dbg !42
  store <1 x half> %354, ptr addrspace(3) %353, align 2, !dbg !42
  %355 = add nuw nsw i32 %14, %321, !dbg !42
  %356 = zext nneg i32 %355 to i64, !dbg !42
  %357 = getelementptr half, ptr addrspace(3) @global_smem, i64 %356, !dbg !42
  %358 = insertelement <1 x half> undef, half %289, i64 0, !dbg !42
  store <1 x half> %358, ptr addrspace(3) %357, align 2, !dbg !42
  %359 = add nuw nsw i32 %14, %326, !dbg !42
  %360 = zext nneg i32 %359 to i64, !dbg !42
  %361 = getelementptr half, ptr addrspace(3) @global_smem, i64 %360, !dbg !42
  %362 = insertelement <1 x half> undef, half %290, i64 0, !dbg !42
  store <1 x half> %362, ptr addrspace(3) %361, align 2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %363 = mul nuw nsw i32 %10, 264, !dbg !42
  %364 = add nuw nsw i32 %363, %15, !dbg !42
  %365 = zext nneg i32 %364 to i64, !dbg !42
  %366 = getelementptr half, ptr addrspace(3) @global_smem, i64 %365, !dbg !42
  %367 = mul nuw nsw i32 %18, 264, !dbg !42
  %368 = add nuw nsw i32 %367, %15, !dbg !42
  %369 = zext nneg i32 %368 to i64, !dbg !42
  %370 = getelementptr half, ptr addrspace(3) @global_smem, i64 %369, !dbg !42
  %371 = load <4 x i32>, ptr addrspace(3) %370, align 16, !dbg !42
  %.extract = load i32, ptr addrspace(3) %366, align 16, !dbg !42
  %372 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %366, i64 0, i64 1, !dbg !42
  %.extract21 = load i32, ptr addrspace(3) %372, align 4, !dbg !42
  %373 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %366, i64 0, i64 2, !dbg !42
  %.extract23 = load i32, ptr addrspace(3) %373, align 8, !dbg !42
  %374 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %366, i64 0, i64 3, !dbg !42
  %.extract25 = load i32, ptr addrspace(3) %374, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract21, i32 %.extract23, i32 %.extract25, ptr addrspace(1) %272, i1 %50) #2, !dbg !42
  %.extract27 = extractelement <4 x i32> %371, i64 0, !dbg !42
  %.extract29 = extractelement <4 x i32> %371, i64 1, !dbg !42
  %.extract31 = extractelement <4 x i32> %371, i64 2, !dbg !42
  %.extract33 = extractelement <4 x i32> %371, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract29, i32 %.extract31, i32 %.extract33, ptr addrspace(1) %274, i1 %51) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chh7iszk6ffhaazzfhwqeazairgxtcdh6ogpnu4oipif47wazn2t.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hh")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 32, column: 20, scope: !5)
!22 = !DILocation(line: 33, column: 41, scope: !5)
!23 = !DILocation(line: 33, column: 36, scope: !5)
!24 = !DILocation(line: 33, column: 30, scope: !5)
!25 = !DILocation(line: 33, column: 55, scope: !5)
!26 = !DILocation(line: 33, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 95, scope: !5)
!28 = !DILocation(line: 34, column: 30, scope: !5)
!29 = !DILocation(line: 34, column: 35, scope: !5)
!30 = !DILocation(line: 34, column: 75, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 47, scope: !5)
!33 = !DILocation(line: 35, column: 95, scope: !5)
!34 = !DILocation(line: 36, column: 18, scope: !5)
!35 = !DILocation(line: 38, column: 18, scope: !5)
!36 = !DILocation(line: 39, column: 18, scope: !5)
!37 = !DILocation(line: 40, column: 35, scope: !5)
!38 = !DILocation(line: 40, column: 49, scope: !5)
!39 = !DILocation(line: 40, column: 31, scope: !5)
!40 = !DILocation(line: 40, column: 42, scope: !5)
!41 = !DILocation(line: 40, column: 25, scope: !5)
!42 = !DILocation(line: 40, column: 61, scope: !5)
!43 = !DILocation(line: 40, column: 4, scope: !5)
