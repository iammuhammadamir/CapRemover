; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d456de7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %9, 255, !dbg !8
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %11 = icmp slt i32 %10, 576, !dbg !10
  %.frozen = freeze i32 %10
  %12 = sdiv i32 %.frozen, 32, !dbg !11
  %13 = mul i32 %12, 32
  %.decomposed = sub i32 %.frozen, %13
  %14 = mul i32 %5, %4, !dbg !12
  %15 = mul i32 %14, 440, !dbg !13
  %16 = add i32 %15, 17, !dbg !14
  %17 = sdiv i32 %16, 18, !dbg !15
  %18 = mul i32 %12, %17, !dbg !16
  %19 = mul i32 %14, 22, !dbg !17
  %20 = mul i32 %14, 20, !dbg !18
  %21 = mul i32 %20, %.decomposed, !dbg !19
  %22 = mul i32 %14, 640, !dbg !20
  %23 = icmp sgt i32 %7, 0, !dbg !21
  br i1 %23, label %.lr.ph.preheader, label %._crit_edge, !dbg !21

.lr.ph.preheader:                                 ; preds = %8
  %24 = insertelement <8 x i32> poison, i32 %7, i64 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> poison, <8 x i32> zeroinitializer
  %26 = insertelement <8 x i32> poison, i32 %18, i64 0
  %27 = shufflevector <8 x i32> %26, <8 x i32> poison, <8 x i32> zeroinitializer
  %28 = insertelement <8 x i32> poison, i32 %15, i64 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> poison, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i1> poison, i1 %11, i64 0
  %31 = shufflevector <8 x i1> %30, <8 x i1> poison, <8 x i32> zeroinitializer
  br label %.lr.ph, !dbg !21

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %32 = phi i32 [ %284, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %33 = phi <8 x float> [ %277, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %34 = phi <8 x float> [ %282, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %35 = phi <8 x float> [ %278, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %36 = phi <8 x float> [ %280, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %37 = phi <8 x float> [ %281, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %38 = phi <8 x float> [ %283, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %39 = fadd <8 x float> %35, zeroinitializer, !dbg !22
  %40 = or i32 %32, %urem, !dbg !26
  %41 = or i32 %40, 256, !dbg !26
  %42 = or i32 %40, 512, !dbg !26
  %43 = or i32 %40, 768, !dbg !26
  %44 = or i32 %40, 1024, !dbg !26
  %45 = or i32 %40, 1280, !dbg !26
  %46 = or i32 %40, 1536, !dbg !26
  %47 = or i32 %40, 1792, !dbg !26
  %48 = insertelement <8 x i32> poison, i32 %40, i64 0, !dbg !27
  %49 = insertelement <8 x i32> %48, i32 %41, i64 1, !dbg !27
  %50 = insertelement <8 x i32> %49, i32 %42, i64 2, !dbg !27
  %51 = insertelement <8 x i32> %50, i32 %43, i64 3, !dbg !27
  %52 = insertelement <8 x i32> %51, i32 %44, i64 4, !dbg !27
  %53 = insertelement <8 x i32> %52, i32 %45, i64 5, !dbg !27
  %54 = insertelement <8 x i32> %53, i32 %46, i64 6, !dbg !27
  %55 = insertelement <8 x i32> %54, i32 %47, i64 7, !dbg !27
  %56 = icmp slt <8 x i32> %55, %25, !dbg !27
  %57 = add <8 x i32> %55, %27, !dbg !28
  %58 = icmp slt <8 x i32> %57, %29, !dbg !29
  %59 = extractelement <8 x i32> %57, i64 0, !dbg !30
  %.frozen39 = freeze i32 %59
  %.frozen40 = freeze i32 %19
  %60 = sdiv i32 %.frozen39, %.frozen40, !dbg !31
  %61 = extractelement <8 x i32> %57, i64 1, !dbg !30
  %.frozen42 = freeze i32 %61
  %.frozen43 = freeze i32 %19
  %62 = sdiv i32 %.frozen42, %.frozen43, !dbg !31
  %63 = extractelement <8 x i32> %57, i64 2, !dbg !30
  %.frozen45 = freeze i32 %63
  %.frozen46 = freeze i32 %19
  %64 = sdiv i32 %.frozen45, %.frozen46, !dbg !31
  %65 = extractelement <8 x i32> %57, i64 3, !dbg !30
  %.frozen48 = freeze i32 %65
  %.frozen49 = freeze i32 %19
  %66 = sdiv i32 %.frozen48, %.frozen49, !dbg !31
  %67 = extractelement <8 x i32> %57, i64 4, !dbg !30
  %.frozen51 = freeze i32 %67
  %.frozen52 = freeze i32 %19
  %68 = sdiv i32 %.frozen51, %.frozen52, !dbg !31
  %69 = extractelement <8 x i32> %57, i64 5, !dbg !30
  %.frozen54 = freeze i32 %69
  %.frozen55 = freeze i32 %19
  %70 = sdiv i32 %.frozen54, %.frozen55, !dbg !31
  %71 = extractelement <8 x i32> %57, i64 6, !dbg !30
  %.frozen57 = freeze i32 %71
  %.frozen58 = freeze i32 %19
  %72 = sdiv i32 %.frozen57, %.frozen58, !dbg !31
  %73 = extractelement <8 x i32> %57, i64 7, !dbg !30
  %.frozen60 = freeze i32 %73
  %.frozen61 = freeze i32 %19
  %74 = sdiv i32 %.frozen60, %.frozen61, !dbg !31
  %75 = srem i32 %60, 20, !dbg !32
  %76 = srem i32 %62, 20, !dbg !32
  %77 = srem i32 %64, 20, !dbg !32
  %78 = srem i32 %66, 20, !dbg !32
  %79 = srem i32 %68, 20, !dbg !32
  %80 = srem i32 %70, 20, !dbg !32
  %81 = srem i32 %72, 20, !dbg !32
  %82 = srem i32 %74, 20, !dbg !32
  %83 = mul i32 %75, %14, !dbg !33
  %84 = mul i32 %76, %14, !dbg !33
  %85 = mul i32 %77, %14, !dbg !33
  %86 = mul i32 %78, %14, !dbg !33
  %87 = mul i32 %79, %14, !dbg !33
  %88 = mul i32 %80, %14, !dbg !33
  %89 = mul i32 %81, %14, !dbg !33
  %90 = mul i32 %82, %14, !dbg !33
  %91 = add i32 %83, %21, !dbg !34
  %92 = add i32 %84, %21, !dbg !34
  %93 = add i32 %85, %21, !dbg !34
  %94 = add i32 %86, %21, !dbg !34
  %95 = add i32 %87, %21, !dbg !34
  %96 = add i32 %88, %21, !dbg !34
  %97 = add i32 %89, %21, !dbg !34
  %98 = add i32 %90, %21, !dbg !34
  %99 = mul i32 %60, %.frozen40
  %.decomposed41 = sub i32 %.frozen39, %99
  %100 = mul i32 %62, %.frozen43
  %.decomposed44 = sub i32 %.frozen42, %100
  %101 = mul i32 %64, %.frozen46
  %.decomposed47 = sub i32 %.frozen45, %101
  %102 = mul i32 %66, %.frozen49
  %.decomposed50 = sub i32 %.frozen48, %102
  %103 = mul i32 %68, %.frozen52
  %.decomposed53 = sub i32 %.frozen51, %103
  %104 = mul i32 %70, %.frozen55
  %.decomposed56 = sub i32 %.frozen54, %104
  %105 = mul i32 %72, %.frozen58
  %.decomposed59 = sub i32 %.frozen57, %105
  %106 = mul i32 %74, %.frozen61
  %.decomposed62 = sub i32 %.frozen60, %106
  %.frozen63 = freeze i32 %14
  %107 = sdiv i32 %.decomposed41, %.frozen63, !dbg !35
  %.frozen65 = freeze i32 %14
  %108 = sdiv i32 %.decomposed44, %.frozen65, !dbg !35
  %.frozen67 = freeze i32 %14
  %109 = sdiv i32 %.decomposed47, %.frozen67, !dbg !35
  %.frozen69 = freeze i32 %14
  %110 = sdiv i32 %.decomposed50, %.frozen69, !dbg !35
  %.frozen71 = freeze i32 %14
  %111 = sdiv i32 %.decomposed53, %.frozen71, !dbg !35
  %.frozen73 = freeze i32 %14
  %112 = sdiv i32 %.decomposed56, %.frozen73, !dbg !35
  %.frozen75 = freeze i32 %14
  %113 = sdiv i32 %.decomposed59, %.frozen75, !dbg !35
  %.frozen77 = freeze i32 %14
  %114 = sdiv i32 %.decomposed62, %.frozen77, !dbg !35
  %115 = mul i32 %107, %22, !dbg !36
  %116 = mul i32 %108, %22, !dbg !36
  %117 = mul i32 %109, %22, !dbg !36
  %118 = mul i32 %110, %22, !dbg !36
  %119 = mul i32 %111, %22, !dbg !36
  %120 = mul i32 %112, %22, !dbg !36
  %121 = mul i32 %113, %22, !dbg !36
  %122 = mul i32 %114, %22, !dbg !36
  %123 = add i32 %91, %115, !dbg !37
  %124 = add i32 %92, %116, !dbg !37
  %125 = add i32 %93, %117, !dbg !37
  %126 = add i32 %94, %118, !dbg !37
  %127 = add i32 %95, %119, !dbg !37
  %128 = add i32 %96, %120, !dbg !37
  %129 = add i32 %97, %121, !dbg !37
  %130 = add i32 %98, %122, !dbg !37
  %131 = mul i32 %107, %.frozen63
  %.decomposed64 = sub i32 %.decomposed41, %131
  %132 = mul i32 %108, %.frozen65
  %.decomposed66 = sub i32 %.decomposed44, %132
  %133 = mul i32 %109, %.frozen67
  %.decomposed68 = sub i32 %.decomposed47, %133
  %134 = mul i32 %110, %.frozen69
  %.decomposed70 = sub i32 %.decomposed50, %134
  %135 = mul i32 %111, %.frozen71
  %.decomposed72 = sub i32 %.decomposed53, %135
  %136 = mul i32 %112, %.frozen73
  %.decomposed74 = sub i32 %.decomposed56, %136
  %137 = mul i32 %113, %.frozen75
  %.decomposed76 = sub i32 %.decomposed59, %137
  %138 = mul i32 %114, %.frozen77
  %.decomposed78 = sub i32 %.decomposed62, %138
  %139 = add i32 %123, %.decomposed64, !dbg !38
  %140 = add i32 %124, %.decomposed66, !dbg !38
  %141 = add i32 %125, %.decomposed68, !dbg !38
  %142 = add i32 %126, %.decomposed70, !dbg !38
  %143 = add i32 %127, %.decomposed72, !dbg !38
  %144 = add i32 %128, %.decomposed74, !dbg !38
  %145 = add i32 %129, %.decomposed76, !dbg !38
  %146 = add i32 %130, %.decomposed78, !dbg !38
  %147 = sext i32 %139 to i64, !dbg !39
  %148 = getelementptr half, ptr addrspace(1) %0, i64 %147, !dbg !39
  %149 = sext i32 %140 to i64, !dbg !39
  %150 = getelementptr half, ptr addrspace(1) %0, i64 %149, !dbg !39
  %151 = sext i32 %141 to i64, !dbg !39
  %152 = getelementptr half, ptr addrspace(1) %0, i64 %151, !dbg !39
  %153 = sext i32 %142 to i64, !dbg !39
  %154 = getelementptr half, ptr addrspace(1) %0, i64 %153, !dbg !39
  %155 = sext i32 %143 to i64, !dbg !39
  %156 = getelementptr half, ptr addrspace(1) %0, i64 %155, !dbg !39
  %157 = sext i32 %144 to i64, !dbg !39
  %158 = getelementptr half, ptr addrspace(1) %0, i64 %157, !dbg !39
  %159 = sext i32 %145 to i64, !dbg !39
  %160 = getelementptr half, ptr addrspace(1) %0, i64 %159, !dbg !39
  %161 = sext i32 %146 to i64, !dbg !39
  %162 = getelementptr half, ptr addrspace(1) %0, i64 %161, !dbg !39
  %163 = and <8 x i1> %56, %58, !dbg !40
  %164 = extractelement <8 x i1> %163, i64 0, !dbg !40
  %165 = and <8 x i1> %56, %58, !dbg !40
  %166 = extractelement <8 x i1> %165, i64 1, !dbg !40
  %167 = and <8 x i1> %56, %58, !dbg !40
  %168 = extractelement <8 x i1> %167, i64 2, !dbg !40
  %169 = and <8 x i1> %56, %58, !dbg !40
  %170 = extractelement <8 x i1> %169, i64 3, !dbg !40
  %171 = and <8 x i1> %56, %58, !dbg !40
  %172 = extractelement <8 x i1> %171, i64 4, !dbg !40
  %173 = and <8 x i1> %56, %58, !dbg !40
  %174 = extractelement <8 x i1> %173, i64 5, !dbg !40
  %175 = and <8 x i1> %56, %58, !dbg !40
  %176 = extractelement <8 x i1> %175, i64 6, !dbg !40
  %177 = and <8 x i1> %56, %58, !dbg !40
  %178 = extractelement <8 x i1> %177, i64 7, !dbg !40
  %179 = and i1 %11, %164, !dbg !41
  %180 = and i1 %11, %166, !dbg !41
  %181 = and i1 %11, %168, !dbg !41
  %182 = and i1 %11, %170, !dbg !41
  %183 = and i1 %11, %172, !dbg !41
  %184 = and i1 %11, %174, !dbg !41
  %185 = and i1 %11, %176, !dbg !41
  %186 = and i1 %11, %178, !dbg !41
  %187 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %148, i1 %179, i16 0, i1 %179) #3, !dbg !42
  %188 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %150, i1 %180, i16 0, i1 %180) #3, !dbg !42
  %189 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %152, i1 %181, i16 0, i1 %181) #3, !dbg !42
  %190 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %154, i1 %182, i16 0, i1 %182) #3, !dbg !42
  %191 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %156, i1 %183, i16 0, i1 %183) #3, !dbg !42
  %192 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %158, i1 %184, i16 0, i1 %184) #3, !dbg !42
  %193 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %160, i1 %185, i16 0, i1 %185) #3, !dbg !42
  %194 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 %186, i16 0, i1 %186) #3, !dbg !42
  %195 = insertelement <8 x i16> poison, i16 %187, i64 0, !dbg !42
  %196 = insertelement <8 x i16> %195, i16 %188, i64 1, !dbg !42
  %197 = insertelement <8 x i16> %196, i16 %189, i64 2, !dbg !42
  %198 = insertelement <8 x i16> %197, i16 %190, i64 3, !dbg !42
  %199 = insertelement <8 x i16> %198, i16 %191, i64 4, !dbg !42
  %200 = insertelement <8 x i16> %199, i16 %192, i64 5, !dbg !42
  %201 = insertelement <8 x i16> %200, i16 %193, i64 6, !dbg !42
  %202 = insertelement <8 x i16> %201, i16 %194, i64 7, !dbg !42
  %203 = bitcast <8 x i16> %202 to <8 x half>, !dbg !42
  %204 = fpext <8 x half> %203 to <8 x float>, !dbg !43
  %205 = select <8 x i1> %58, <8 x float> %204, <8 x float> zeroinitializer, !dbg !44
  %206 = select <8 x i1> %58, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer, !dbg !45
  %207 = fsub <8 x float> %205, %33, !dbg !46
  %208 = fadd <8 x float> %206, %34, !dbg !47
  %209 = fcmp oeq <8 x float> %208, zeroinitializer, !dbg !48
  %210 = extractelement <8 x float> %208, i64 0, !dbg !49
  %211 = extractelement <8 x float> %208, i64 1, !dbg !49
  %212 = extractelement <8 x float> %208, i64 2, !dbg !49
  %213 = extractelement <8 x float> %208, i64 3, !dbg !49
  %214 = extractelement <8 x float> %208, i64 4, !dbg !49
  %215 = extractelement <8 x float> %208, i64 5, !dbg !49
  %216 = extractelement <8 x float> %208, i64 6, !dbg !49
  %217 = extractelement <8 x float> %208, i64 7, !dbg !49
  %218 = and <8 x i1> %31, %56, !dbg !50
  %219 = fadd <8 x float> %206, %37, !dbg !47
  %220 = fcmp oeq <8 x float> %219, zeroinitializer, !dbg !48
  %221 = extractelement <8 x float> %206, i64 0, !dbg !49
  %222 = extractelement <8 x float> %219, i64 0, !dbg !49
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %222) #3, !dbg !49
  %224 = extractelement <8 x float> %206, i64 1, !dbg !49
  %225 = extractelement <8 x float> %219, i64 1, !dbg !49
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %225) #3, !dbg !49
  %227 = extractelement <8 x float> %206, i64 2, !dbg !49
  %228 = extractelement <8 x float> %219, i64 2, !dbg !49
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %228) #3, !dbg !49
  %230 = extractelement <8 x float> %206, i64 3, !dbg !49
  %231 = extractelement <8 x float> %219, i64 3, !dbg !49
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %231) #3, !dbg !49
  %233 = extractelement <8 x float> %206, i64 4, !dbg !49
  %234 = extractelement <8 x float> %219, i64 4, !dbg !49
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %234) #3, !dbg !49
  %236 = extractelement <8 x float> %206, i64 5, !dbg !49
  %237 = extractelement <8 x float> %219, i64 5, !dbg !49
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %237) #3, !dbg !49
  %239 = extractelement <8 x float> %206, i64 6, !dbg !49
  %240 = extractelement <8 x float> %219, i64 6, !dbg !49
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %240) #3, !dbg !49
  %242 = extractelement <8 x float> %206, i64 7, !dbg !49
  %243 = extractelement <8 x float> %219, i64 7, !dbg !49
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %243) #3, !dbg !49
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %210) #3, !dbg !49
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %211) #3, !dbg !49
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %212) #3, !dbg !49
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %213) #3, !dbg !49
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %214) #3, !dbg !49
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %215) #3, !dbg !49
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %216) #3, !dbg !49
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %217) #3, !dbg !49
  %253 = insertelement <8 x float> poison, float %223, i64 0, !dbg !51
  %254 = insertelement <8 x float> %253, float %226, i64 1, !dbg !51
  %255 = insertelement <8 x float> %254, float %229, i64 2, !dbg !51
  %256 = insertelement <8 x float> %255, float %232, i64 3, !dbg !51
  %257 = insertelement <8 x float> %256, float %235, i64 4, !dbg !51
  %258 = insertelement <8 x float> %257, float %238, i64 5, !dbg !51
  %259 = insertelement <8 x float> %258, float %241, i64 6, !dbg !51
  %260 = insertelement <8 x float> %259, float %244, i64 7, !dbg !51
  %261 = select <8 x i1> %220, <8 x float> zeroinitializer, <8 x float> %260, !dbg !51
  %262 = insertelement <8 x float> poison, float %245, i64 0, !dbg !51
  %263 = insertelement <8 x float> %262, float %246, i64 1, !dbg !51
  %264 = insertelement <8 x float> %263, float %247, i64 2, !dbg !51
  %265 = insertelement <8 x float> %264, float %248, i64 3, !dbg !51
  %266 = insertelement <8 x float> %265, float %249, i64 4, !dbg !51
  %267 = insertelement <8 x float> %266, float %250, i64 5, !dbg !51
  %268 = insertelement <8 x float> %267, float %251, i64 6, !dbg !51
  %269 = insertelement <8 x float> %268, float %252, i64 7, !dbg !51
  %270 = select <8 x i1> %209, <8 x float> zeroinitializer, <8 x float> %269, !dbg !51
  %271 = fmul <8 x float> %207, %270, !dbg !52
  %272 = fmul <8 x float> %207, %207, !dbg !53
  %273 = fmul <8 x float> %36, %272, !dbg !54
  %274 = fmul <8 x float> %273, %261, !dbg !55
  %275 = fadd <8 x float> %39, %274, !dbg !56
  %276 = select <8 x i1> %218, <8 x float> %271, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !57
  %277 = fadd <8 x float> %33, %276, !dbg !57
  %278 = select <8 x i1> %218, <8 x float> %275, <8 x float> %35, !dbg !58
  %279 = select <8 x i1> %218, <8 x float> %206, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, !dbg !59
  %280 = fadd <8 x float> %36, %279, !dbg !59
  %281 = select <8 x i1> %218, <8 x float> %219, <8 x float> %37, !dbg !59
  %282 = select <8 x i1> %218, <8 x float> %208, <8 x float> %34, !dbg !59
  %283 = fadd <8 x float> %38, %279, !dbg !59
  %284 = add i32 %32, 2048, !dbg !21
  %285 = icmp slt i32 %284, %7, !dbg !21
  br i1 %285, label %.lr.ph, label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.lr.ph, %8
  %286 = phi <8 x float> [ zeroinitializer, %8 ], [ %277, %.lr.ph ]
  %287 = phi <8 x float> [ zeroinitializer, %8 ], [ %278, %.lr.ph ]
  %288 = phi <8 x float> [ zeroinitializer, %8 ], [ %283, %.lr.ph ]
  %289 = lshr i32 %9, 5, !dbg !8
  %290 = and i32 %289, 7, !dbg !8
  %291 = and i32 %9, 31, !dbg !8
  %292 = shl nuw nsw i32 %urem, 1, !dbg !21
  %293 = zext nneg i32 %292 to i64, !dbg !21
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i64 %293, !dbg !21
  %295 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> zeroinitializer, !dbg !21
  store <1 x float> %295, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %296 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %297 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> <i32 1>, !dbg !21
  store <1 x float> %297, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %298 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %299 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> <i32 2>, !dbg !21
  store <1 x float> %299, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %300 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %301 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> <i32 3>, !dbg !21
  store <1 x float> %301, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %302 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %303 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> <i32 4>, !dbg !21
  store <1 x float> %303, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %304 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %305 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> <i32 5>, !dbg !21
  store <1 x float> %305, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %306 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %307 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> <i32 6>, !dbg !21
  store <1 x float> %307, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %308 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %309 = shufflevector <8 x float> %288, <8 x float> poison, <1 x i32> <i32 7>, !dbg !21
  store <1 x float> %309, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %310 = load float, ptr addrspace(3) %294, align 4, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %311 = extractelement <8 x float> %286, i64 0, !dbg !62
  %312 = extractelement <8 x float> %286, i64 1, !dbg !62
  %313 = fsub float %312, %311, !dbg !62
  %314 = fadd float %296, %298, !dbg !66
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !67
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %314) #3, !dbg !68
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !69
  %318 = fmul float %313, %317, !dbg !70
  %319 = fadd float %311, %318, !dbg !71
  %shift = shufflevector <8 x float> %287, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !72
  %320 = fadd <8 x float> %287, %shift, !dbg !72
  %321 = extractelement <8 x float> %320, i64 0, !dbg !72
  %322 = fmul float %313, %313, !dbg !73
  %323 = fmul float %322, %296, !dbg !74
  %324 = fmul float %323, %317, !dbg !75
  %325 = fadd float %321, %324, !dbg !76
  %326 = extractelement <8 x float> %286, i64 2, !dbg !62
  %327 = fsub float %326, %319, !dbg !62
  %328 = fadd float %314, %300, !dbg !66
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !67
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %300, float %328) #3, !dbg !68
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !69
  %332 = fmul float %331, %327, !dbg !70
  %333 = fadd float %319, %332, !dbg !71
  %334 = extractelement <8 x float> %287, i64 2, !dbg !72
  %335 = fadd float %334, %325, !dbg !72
  %336 = fmul float %327, %327, !dbg !73
  %337 = fmul float %314, %336, !dbg !74
  %338 = fmul float %331, %337, !dbg !75
  %339 = fadd float %335, %338, !dbg !76
  %340 = extractelement <8 x float> %286, i64 3, !dbg !62
  %341 = fsub float %340, %333, !dbg !62
  %342 = fadd float %328, %302, !dbg !66
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !67
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float %342) #3, !dbg !68
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !69
  %346 = fmul float %345, %341, !dbg !70
  %347 = fadd float %333, %346, !dbg !71
  %348 = extractelement <8 x float> %287, i64 3, !dbg !72
  %349 = fadd float %348, %339, !dbg !72
  %350 = fmul float %341, %341, !dbg !73
  %351 = fmul float %328, %350, !dbg !74
  %352 = fmul float %345, %351, !dbg !75
  %353 = fadd float %349, %352, !dbg !76
  %354 = extractelement <8 x float> %286, i64 4, !dbg !62
  %355 = fsub float %354, %347, !dbg !62
  %356 = fadd float %342, %304, !dbg !66
  %357 = fcmp oeq float %356, 0.000000e+00, !dbg !67
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %356) #3, !dbg !68
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !69
  %360 = fmul float %359, %355, !dbg !70
  %361 = fadd float %347, %360, !dbg !71
  %362 = extractelement <8 x float> %287, i64 4, !dbg !72
  %363 = fadd float %362, %353, !dbg !72
  %364 = fmul float %355, %355, !dbg !73
  %365 = fmul float %342, %364, !dbg !74
  %366 = fmul float %359, %365, !dbg !75
  %367 = fadd float %363, %366, !dbg !76
  %368 = extractelement <8 x float> %286, i64 5, !dbg !62
  %369 = fsub float %368, %361, !dbg !62
  %370 = fadd float %356, %306, !dbg !66
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !67
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %370) #3, !dbg !68
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !69
  %374 = fmul float %373, %369, !dbg !70
  %375 = fadd float %361, %374, !dbg !71
  %376 = extractelement <8 x float> %287, i64 5, !dbg !72
  %377 = fadd float %376, %367, !dbg !72
  %378 = fmul float %369, %369, !dbg !73
  %379 = fmul float %356, %378, !dbg !74
  %380 = fmul float %373, %379, !dbg !75
  %381 = fadd float %377, %380, !dbg !76
  %382 = extractelement <8 x float> %286, i64 6, !dbg !62
  %383 = fsub float %382, %375, !dbg !62
  %384 = fadd float %370, %308, !dbg !66
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !67
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %384) #3, !dbg !68
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !69
  %388 = fmul float %387, %383, !dbg !70
  %389 = fadd float %375, %388, !dbg !71
  %390 = extractelement <8 x float> %287, i64 6, !dbg !72
  %391 = fadd float %390, %381, !dbg !72
  %392 = fmul float %383, %383, !dbg !73
  %393 = fmul float %370, %392, !dbg !74
  %394 = fmul float %387, %393, !dbg !75
  %395 = fadd float %391, %394, !dbg !76
  %396 = extractelement <8 x float> %286, i64 7, !dbg !62
  %397 = fsub float %396, %389, !dbg !62
  %398 = fadd float %384, %310, !dbg !66
  %399 = fcmp oeq float %398, 0.000000e+00, !dbg !67
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %398) #3, !dbg !68
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !69
  %402 = fmul float %401, %397, !dbg !70
  %403 = fadd float %389, %402, !dbg !71
  %404 = extractelement <8 x float> %287, i64 7, !dbg !72
  %405 = fadd float %404, %395, !dbg !72
  %406 = fmul float %397, %397, !dbg !73
  %407 = fmul float %384, %406, !dbg !74
  %408 = fmul float %401, %407, !dbg !75
  %409 = fadd float %405, %408, !dbg !76
  %410 = bitcast float %403 to i32, !dbg !60
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 16, i32 31), !dbg !60
  %412 = bitcast i32 %411 to float, !dbg !60
  %413 = bitcast float %409 to i32, !dbg !60
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 16, i32 31), !dbg !60
  %415 = bitcast i32 %414 to float, !dbg !60
  %416 = bitcast float %398 to i32, !dbg !60
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 16, i32 31), !dbg !60
  %418 = bitcast i32 %417 to float, !dbg !60
  %419 = fsub float %412, %403, !dbg !62
  %420 = fadd float %398, %418, !dbg !66
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !67
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %418, float %420) #3, !dbg !68
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !69
  %424 = fmul float %423, %419, !dbg !70
  %425 = fadd float %403, %424, !dbg !71
  %426 = fadd float %409, %415, !dbg !72
  %427 = fmul float %419, %419, !dbg !73
  %428 = fmul float %398, %427, !dbg !74
  %429 = fmul float %423, %428, !dbg !75
  %430 = fadd float %426, %429, !dbg !76
  %431 = bitcast float %425 to i32, !dbg !60
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 8, i32 31), !dbg !60
  %433 = bitcast i32 %432 to float, !dbg !60
  %434 = bitcast float %430 to i32, !dbg !60
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 8, i32 31), !dbg !60
  %436 = bitcast i32 %435 to float, !dbg !60
  %437 = bitcast float %420 to i32, !dbg !60
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 8, i32 31), !dbg !60
  %439 = bitcast i32 %438 to float, !dbg !60
  %440 = fsub float %433, %425, !dbg !62
  %441 = fadd float %420, %439, !dbg !66
  %442 = fcmp oeq float %441, 0.000000e+00, !dbg !67
  %443 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %439, float %441) #3, !dbg !68
  %444 = select i1 %442, float 0.000000e+00, float %443, !dbg !69
  %445 = fmul float %444, %440, !dbg !70
  %446 = fadd float %425, %445, !dbg !71
  %447 = fadd float %430, %436, !dbg !72
  %448 = fmul float %440, %440, !dbg !73
  %449 = fmul float %420, %448, !dbg !74
  %450 = fmul float %444, %449, !dbg !75
  %451 = fadd float %447, %450, !dbg !76
  %452 = bitcast float %446 to i32, !dbg !60
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 4, i32 31), !dbg !60
  %454 = bitcast i32 %453 to float, !dbg !60
  %455 = bitcast float %451 to i32, !dbg !60
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 4, i32 31), !dbg !60
  %457 = bitcast i32 %456 to float, !dbg !60
  %458 = bitcast float %441 to i32, !dbg !60
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !60
  %460 = bitcast i32 %459 to float, !dbg !60
  %461 = fsub float %454, %446, !dbg !62
  %462 = fadd float %441, %460, !dbg !66
  %463 = fcmp oeq float %462, 0.000000e+00, !dbg !67
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %460, float %462) #3, !dbg !68
  %465 = select i1 %463, float 0.000000e+00, float %464, !dbg !69
  %466 = fmul float %465, %461, !dbg !70
  %467 = fadd float %446, %466, !dbg !71
  %468 = fadd float %451, %457, !dbg !72
  %469 = fmul float %461, %461, !dbg !73
  %470 = fmul float %441, %469, !dbg !74
  %471 = fmul float %465, %470, !dbg !75
  %472 = fadd float %468, %471, !dbg !76
  %473 = bitcast float %467 to i32, !dbg !60
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 2, i32 31), !dbg !60
  %475 = bitcast i32 %474 to float, !dbg !60
  %476 = bitcast float %472 to i32, !dbg !60
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 2, i32 31), !dbg !60
  %478 = bitcast i32 %477 to float, !dbg !60
  %479 = bitcast float %462 to i32, !dbg !60
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 2, i32 31), !dbg !60
  %481 = bitcast i32 %480 to float, !dbg !60
  %482 = fsub float %475, %467, !dbg !62
  %483 = fadd float %462, %481, !dbg !66
  %484 = fcmp oeq float %483, 0.000000e+00, !dbg !67
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %481, float %483) #3, !dbg !68
  %486 = select i1 %484, float 0.000000e+00, float %485, !dbg !69
  %487 = fmul float %486, %482, !dbg !70
  %488 = fadd float %467, %487, !dbg !71
  %489 = fadd float %472, %478, !dbg !72
  %490 = fmul float %482, %482, !dbg !73
  %491 = fmul float %462, %490, !dbg !74
  %492 = fmul float %486, %491, !dbg !75
  %493 = fadd float %489, %492, !dbg !76
  %494 = bitcast float %488 to i32, !dbg !60
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 1, i32 31), !dbg !60
  %496 = bitcast i32 %495 to float, !dbg !60
  %497 = bitcast float %493 to i32, !dbg !60
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !60
  %499 = bitcast i32 %498 to float, !dbg !60
  %500 = bitcast float %483 to i32, !dbg !60
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 1, i32 31), !dbg !60
  %502 = bitcast i32 %501 to float, !dbg !60
  %503 = fsub float %496, %488, !dbg !62
  %504 = fadd float %483, %502, !dbg !66
  %505 = fcmp oeq float %504, 0.000000e+00, !dbg !67
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %502, float %504) #3, !dbg !68
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !69
  %508 = fmul float %507, %503, !dbg !70
  %509 = fadd float %488, %508, !dbg !71
  %510 = fadd float %493, %499, !dbg !72
  %511 = fmul float %503, %503, !dbg !73
  %512 = fmul float %483, %511, !dbg !74
  %513 = fmul float %507, %512, !dbg !75
  %514 = fadd float %510, %513, !dbg !76
  %515 = icmp eq i32 %291, 0, !dbg !60
  %516 = zext nneg i32 %290 to i64, !dbg !60
  %517 = getelementptr float, ptr addrspace(3) @global_smem, i64 %516, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %517, float %509, i1 %515) #3, !dbg !60
  %518 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %516, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, float %514, i1 %515) #3, !dbg !60
  %519 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %516, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, float %504, i1 %515) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %520 = icmp slt i32 %9, 8, !dbg !60
  %521 = sext i32 %9 to i64, !dbg !60
  %522 = getelementptr float, ptr addrspace(3) @global_smem, i64 %521, !dbg !60
  %523 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %522, i1 %520) #3, !dbg !60
  %524 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %521, !dbg !60
  %525 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %524, i1 %520) #3, !dbg !60
  %526 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %521, !dbg !60
  %527 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %526, i1 %520) #3, !dbg !60
  %528 = bitcast float %523 to i32, !dbg !60
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 4, i32 31), !dbg !60
  %530 = bitcast i32 %529 to float, !dbg !60
  %531 = bitcast float %525 to i32, !dbg !60
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 4, i32 31), !dbg !60
  %533 = bitcast i32 %532 to float, !dbg !60
  %534 = bitcast float %527 to i32, !dbg !60
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 4, i32 31), !dbg !60
  %536 = bitcast i32 %535 to float, !dbg !60
  %537 = fsub float %530, %523, !dbg !62
  %538 = fadd float %527, %536, !dbg !66
  %539 = fcmp oeq float %538, 0.000000e+00, !dbg !67
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %536, float %538) #3, !dbg !68
  %541 = select i1 %539, float 0.000000e+00, float %540, !dbg !69
  %542 = fmul float %537, %541, !dbg !70
  %543 = fadd float %523, %542, !dbg !71
  %544 = fadd float %525, %533, !dbg !72
  %545 = fmul float %537, %537, !dbg !73
  %546 = fmul float %527, %545, !dbg !74
  %547 = fmul float %546, %541, !dbg !75
  %548 = fadd float %544, %547, !dbg !76
  %549 = bitcast float %543 to i32, !dbg !60
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 2, i32 31), !dbg !60
  %551 = bitcast i32 %550 to float, !dbg !60
  %552 = bitcast float %548 to i32, !dbg !60
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 2, i32 31), !dbg !60
  %554 = bitcast i32 %553 to float, !dbg !60
  %555 = bitcast float %538 to i32, !dbg !60
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 2, i32 31), !dbg !60
  %557 = bitcast i32 %556 to float, !dbg !60
  %558 = fsub float %551, %543, !dbg !62
  %559 = fadd float %538, %557, !dbg !66
  %560 = fcmp oeq float %559, 0.000000e+00, !dbg !67
  %561 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %557, float %559) #3, !dbg !68
  %562 = select i1 %560, float 0.000000e+00, float %561, !dbg !69
  %563 = fmul float %558, %562, !dbg !70
  %564 = fadd float %543, %563, !dbg !71
  %565 = fadd float %548, %554, !dbg !72
  %566 = fmul float %558, %558, !dbg !73
  %567 = fmul float %538, %566, !dbg !74
  %568 = fmul float %562, %567, !dbg !75
  %569 = fadd float %565, %568, !dbg !76
  %570 = bitcast float %564 to i32, !dbg !60
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 1, i32 31), !dbg !60
  %572 = bitcast i32 %571 to float, !dbg !60
  %573 = bitcast float %569 to i32, !dbg !60
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 1, i32 31), !dbg !60
  %575 = bitcast i32 %574 to float, !dbg !60
  %576 = bitcast float %559 to i32, !dbg !60
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 1, i32 31), !dbg !60
  %578 = bitcast i32 %577 to float, !dbg !60
  %579 = fsub float %572, %564, !dbg !62
  %580 = fadd float %559, %578, !dbg !66
  %581 = fcmp oeq float %580, 0.000000e+00, !dbg !67
  %582 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %578, float %580) #3, !dbg !68
  %583 = select i1 %581, float 0.000000e+00, float %582, !dbg !69
  %584 = fmul float %579, %583, !dbg !70
  %585 = fadd float %564, %584, !dbg !71
  %586 = fadd float %569, %575, !dbg !72
  %587 = fmul float %579, %579, !dbg !73
  %588 = fmul float %559, %587, !dbg !74
  %589 = fmul float %583, %588, !dbg !75
  %590 = fadd float %586, %589, !dbg !76
  %591 = and i32 %9, 7, !dbg !60
  %592 = icmp eq i32 %591, 0, !dbg !60
  %593 = and i1 %520, %592, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, float %585, i1 %593) #3, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, float %590, i1 %593) #3, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %526, float %580, i1 %593) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %594 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !60
  %595 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !60
  %596 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), align 4, !dbg !60
  %597 = sext i32 %10 to i64, !dbg !77
  %598 = getelementptr float, ptr addrspace(1) %1, i64 %597, !dbg !77
  %599 = icmp eq i32 %urem, 0, !dbg !78
  %600 = and i1 %599, %11, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %594, ptr addrspace(1) %598, i1 %600) #3, !dbg !78
  %601 = getelementptr float, ptr addrspace(1) %2, i64 %597, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %595, ptr addrspace(1) %601, i1 %600) #3, !dbg !80
  %602 = getelementptr float, ptr addrspace(1) %3, i64 %597, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %596, ptr addrspace(1) %602, i1 %600) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "ca64uwwb72kxqek26ydlqerlqr562hwkz7a5l33g5lzv7ca6tcx7.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/a6")
!3 = !{ptr @triton__0d1d2d3d456de7, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d456de7, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d456de7", linkageName: "triton__0d1d2d3d456de7", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 26, column: 20, scope: !5)
!12 = !DILocation(line: 36, column: 36, scope: !5)
!13 = !DILocation(line: 36, column: 40, scope: !5)
!14 = !DILocation(line: 36, column: 32, scope: !5)
!15 = !DILocation(line: 36, column: 49, scope: !5)
!16 = !DILocation(line: 36, column: 25, scope: !5)
!17 = !DILocation(line: 39, column: 97, scope: !5)
!18 = !DILocation(line: 39, column: 120, scope: !5)
!19 = !DILocation(line: 39, column: 124, scope: !5)
!20 = !DILocation(line: 39, column: 139, scope: !5)
!21 = !DILocation(line: 32, column: 36, scope: !5)
!22 = !DILocation(line: 124, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !5, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!25 = !DILocation(line: 54, column: 26, scope: !23)
!26 = !DILocation(line: 33, column: 27, scope: !5)
!27 = !DILocation(line: 34, column: 25, scope: !5)
!28 = !DILocation(line: 36, column: 21, scope: !5)
!29 = !DILocation(line: 38, column: 22, scope: !5)
!30 = !DILocation(line: 39, column: 189, scope: !5)
!31 = !DILocation(line: 39, column: 90, scope: !5)
!32 = !DILocation(line: 39, column: 105, scope: !5)
!33 = !DILocation(line: 39, column: 44, scope: !5)
!34 = !DILocation(line: 39, column: 113, scope: !5)
!35 = !DILocation(line: 39, column: 206, scope: !5)
!36 = !DILocation(line: 39, column: 144, scope: !5)
!37 = !DILocation(line: 39, column: 131, scope: !5)
!38 = !DILocation(line: 39, column: 220, scope: !5)
!39 = !DILocation(line: 39, column: 34, scope: !5)
!40 = !DILocation(line: 39, column: 301, scope: !5)
!41 = !DILocation(line: 39, column: 308, scope: !5)
!42 = !DILocation(line: 39, column: 293, scope: !5)
!43 = !DILocation(line: 39, column: 359, scope: !5)
!44 = !DILocation(line: 42, column: 36, scope: !5)
!45 = !DILocation(line: 48, column: 38, scope: !5)
!46 = !DILocation(line: 119, column: 21, scope: !23, inlinedAt: !25)
!47 = !DILocation(line: 120, column: 28, scope: !23, inlinedAt: !25)
!48 = !DILocation(line: 121, column: 39, scope: !23, inlinedAt: !25)
!49 = !DILocation(line: 121, column: 60, scope: !23, inlinedAt: !25)
!50 = !DILocation(line: 56, column: 38, scope: !5)
!51 = !DILocation(line: 121, column: 49, scope: !23, inlinedAt: !25)
!52 = !DILocation(line: 123, column: 25, scope: !23, inlinedAt: !25)
!53 = !DILocation(line: 124, column: 30, scope: !23, inlinedAt: !25)
!54 = !DILocation(line: 124, column: 38, scope: !23, inlinedAt: !25)
!55 = !DILocation(line: 124, column: 49, scope: !23, inlinedAt: !25)
!56 = !DILocation(line: 124, column: 22, scope: !23, inlinedAt: !25)
!57 = !DILocation(line: 56, column: 62, scope: !5)
!58 = !DILocation(line: 57, column: 58, scope: !5)
!59 = !DILocation(line: 58, column: 66, scope: !5)
!60 = !DILocation(line: 131, column: 46, scope: !23, inlinedAt: !61)
!61 = !DILocation(line: 60, column: 44, scope: !23)
!62 = !DILocation(line: 119, column: 21, scope: !63, inlinedAt: !64)
!63 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!64 = !DILocation(line: 131, column: 46, scope: !63, inlinedAt: !65)
!65 = !DILocation(line: 60, column: 44, scope: !63)
!66 = !DILocation(line: 120, column: 28, scope: !63, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 39, scope: !63, inlinedAt: !64)
!68 = !DILocation(line: 121, column: 60, scope: !63, inlinedAt: !64)
!69 = !DILocation(line: 121, column: 49, scope: !63, inlinedAt: !64)
!70 = !DILocation(line: 123, column: 25, scope: !63, inlinedAt: !64)
!71 = !DILocation(line: 123, column: 17, scope: !63, inlinedAt: !64)
!72 = !DILocation(line: 124, column: 15, scope: !63, inlinedAt: !64)
!73 = !DILocation(line: 124, column: 30, scope: !63, inlinedAt: !64)
!74 = !DILocation(line: 124, column: 38, scope: !63, inlinedAt: !64)
!75 = !DILocation(line: 124, column: 49, scope: !63, inlinedAt: !64)
!76 = !DILocation(line: 124, column: 22, scope: !63, inlinedAt: !64)
!77 = !DILocation(line: 65, column: 25, scope: !5)
!78 = !DILocation(line: 65, column: 37, scope: !5)
!79 = !DILocation(line: 66, column: 25, scope: !5)
!80 = !DILocation(line: 66, column: 37, scope: !5)
!81 = !DILocation(line: 67, column: 25, scope: !5)
!82 = !DILocation(line: 67, column: 37, scope: !5)
!83 = !DILocation(line: 67, column: 4, scope: !5)
