; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d89101112de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %15 = and i32 %14, 31, !dbg !8
  %16 = lshr i32 %14, 5, !dbg !8
  %17 = and i32 %16, 3, !dbg !8
  %18 = lshr i32 %15, 2, !dbg !8
  %19 = shl nuw nsw i32 %17, 3, !dbg !8
  %20 = or i32 %19, %18, !dbg !8
  %21 = or i32 %17, 4, !dbg !8
  %22 = or i32 %17, 8, !dbg !8
  %23 = or i32 %17, 12, !dbg !8
  %24 = or i32 %17, 16, !dbg !8
  %25 = or i32 %17, 20, !dbg !8
  %26 = or i32 %17, 24, !dbg !8
  %27 = or i32 %17, 28, !dbg !8
  %28 = shl i32 %14, 3, !dbg !9
  %29 = and i32 %28, 24, !dbg !9
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %32 = add i32 %31, 1, !dbg !12
  %33 = shl i32 %30, 5, !dbg !13
  %34 = mul i32 %33, %32, !dbg !14
  %35 = or i32 %34, %20, !dbg !15
  %36 = or i32 %34, %17, !dbg !15
  %37 = or i32 %34, %21, !dbg !15
  %38 = or i32 %34, %22, !dbg !15
  %39 = or i32 %34, %23, !dbg !15
  %40 = or i32 %34, %24, !dbg !15
  %41 = or i32 %34, %25, !dbg !15
  %42 = or i32 %34, %26, !dbg !15
  %43 = or i32 %34, %27, !dbg !15
  %44 = icmp slt i32 %35, %11, !dbg !16
  %45 = icmp slt i32 %36, %11, !dbg !16
  %46 = icmp slt i32 %37, %11, !dbg !16
  %47 = icmp slt i32 %38, %11, !dbg !16
  %48 = icmp slt i32 %39, %11, !dbg !16
  %49 = icmp slt i32 %40, %11, !dbg !16
  %50 = icmp slt i32 %41, %11, !dbg !16
  %51 = icmp slt i32 %42, %11, !dbg !16
  %52 = icmp slt i32 %43, %11, !dbg !16
  %53 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %54 = shl i32 %53, 5, !dbg !18
  %55 = or i32 %54, %29, !dbg !19
  %56 = or i32 %54, %15, !dbg !19
  %57 = icmp slt i32 %55, 1280, !dbg !20
  %58 = icmp slt i32 %56, 1280, !dbg !20
  %.frozen = freeze i32 %36
  %.frozen28 = freeze i32 %8
  %59 = sdiv i32 %.frozen, %.frozen28, !dbg !21
  %60 = mul i32 %59, %.frozen28
  %.decomposed = sub i32 %.frozen, %60
  %.frozen29 = freeze i32 %37
  %.frozen30 = freeze i32 %8
  %61 = sdiv i32 %.frozen29, %.frozen30, !dbg !21
  %62 = mul i32 %61, %.frozen30
  %.decomposed31 = sub i32 %.frozen29, %62
  %.frozen32 = freeze i32 %38
  %.frozen33 = freeze i32 %8
  %63 = sdiv i32 %.frozen32, %.frozen33, !dbg !21
  %64 = mul i32 %63, %.frozen33
  %.decomposed34 = sub i32 %.frozen32, %64
  %.frozen35 = freeze i32 %39
  %.frozen36 = freeze i32 %8
  %65 = sdiv i32 %.frozen35, %.frozen36, !dbg !21
  %66 = mul i32 %65, %.frozen36
  %.decomposed37 = sub i32 %.frozen35, %66
  %.frozen38 = freeze i32 %40
  %.frozen39 = freeze i32 %8
  %67 = sdiv i32 %.frozen38, %.frozen39, !dbg !21
  %68 = mul i32 %67, %.frozen39
  %.decomposed40 = sub i32 %.frozen38, %68
  %.frozen41 = freeze i32 %41
  %.frozen42 = freeze i32 %8
  %69 = sdiv i32 %.frozen41, %.frozen42, !dbg !21
  %70 = mul i32 %69, %.frozen42
  %.decomposed43 = sub i32 %.frozen41, %70
  %.frozen44 = freeze i32 %42
  %.frozen45 = freeze i32 %8
  %71 = sdiv i32 %.frozen44, %.frozen45, !dbg !21
  %72 = mul i32 %71, %.frozen45
  %.decomposed46 = sub i32 %.frozen44, %72
  %.frozen47 = freeze i32 %43
  %.frozen48 = freeze i32 %8
  %73 = sdiv i32 %.frozen47, %.frozen48, !dbg !21
  %74 = mul i32 %73, %.frozen48
  %.decomposed49 = sub i32 %.frozen47, %74
  %75 = mul i32 %35, 1280, !dbg !22
  %76 = add i32 %75, %55, !dbg !23
  %77 = sext i32 %76 to i64, !dbg !24
  %78 = getelementptr half, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = and i1 %57, %44, !dbg !25
  %80 = and i1 %58, %45, !dbg !25
  %81 = and i1 %58, %46, !dbg !25
  %82 = and i1 %58, %47, !dbg !25
  %83 = and i1 %58, %48, !dbg !25
  %84 = and i1 %58, %49, !dbg !25
  %85 = and i1 %58, %50, !dbg !25
  %86 = and i1 %58, %51, !dbg !25
  %87 = and i1 %58, %52, !dbg !25
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %79) #2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !26
  %93 = sext i32 %55 to i64, !dbg !27
  %94 = getelementptr half, ptr addrspace(1) %1, i64 %93, !dbg !27
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %57) #2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !28
  %100 = getelementptr half, ptr addrspace(1) %2, i64 %77, !dbg !29
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %79) #2, !dbg !30
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !30
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !30
  %106 = getelementptr half, ptr addrspace(1) %3, i64 %77, !dbg !31
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %79) #2, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !32
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !32
  %112 = getelementptr half, ptr addrspace(1) %4, i64 %93, !dbg !33
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %57) #2, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !34
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !34
  %118 = getelementptr half, ptr addrspace(1) %5, i64 %77, !dbg !35
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %79) #2, !dbg !36
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !36
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !36
  %124 = getelementptr half, ptr addrspace(1) %6, i64 %77, !dbg !37
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %79) #2, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !38
  %130 = trunc i32 %126 to i16, !dbg !38
  %131 = bitcast i16 %130 to half, !dbg !38
  %extelt.offset24 = lshr i32 %126, 16, !dbg !38
  %132 = trunc i32 %extelt.offset24 to i16, !dbg !38
  %133 = bitcast i16 %132 to half, !dbg !38
  %134 = trunc i32 %127 to i16, !dbg !38
  %135 = bitcast i16 %134 to half, !dbg !38
  %extelt.offset25 = lshr i32 %127, 16, !dbg !38
  %136 = trunc i32 %extelt.offset25 to i16, !dbg !38
  %137 = bitcast i16 %136 to half, !dbg !38
  %138 = trunc i32 %128 to i16, !dbg !38
  %139 = bitcast i16 %138 to half, !dbg !38
  %extelt.offset26 = lshr i32 %128, 16, !dbg !38
  %140 = trunc i32 %extelt.offset26 to i16, !dbg !38
  %141 = bitcast i16 %140 to half, !dbg !38
  %142 = trunc i32 %129 to i16, !dbg !38
  %143 = bitcast i16 %142 to half, !dbg !38
  %extelt.offset27 = lshr i32 %129, 16, !dbg !38
  %144 = trunc i32 %extelt.offset27 to i16, !dbg !38
  %145 = bitcast i16 %144 to half, !dbg !38
  %146 = fpext half %131 to float, !dbg !39
  %147 = fpext half %133 to float, !dbg !39
  %148 = fpext half %135 to float, !dbg !39
  %149 = fpext half %137 to float, !dbg !39
  %150 = fpext half %139 to float, !dbg !39
  %151 = fpext half %141 to float, !dbg !39
  %152 = fpext half %143 to float, !dbg !39
  %153 = fpext half %145 to float, !dbg !39
  %154 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !26
  %155 = insertelement <2 x i32> %154, i32 %108, i64 1, !dbg !26
  %156 = trunc <2 x i32> %155 to <2 x i16>, !dbg !26
  %157 = bitcast <2 x i16> %156 to <2 x half>, !dbg !26
  %158 = fpext <2 x half> %157 to <2 x float>, !dbg !40
  %159 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !28
  %160 = insertelement <2 x i32> %159, i32 %114, i64 1, !dbg !28
  %161 = trunc <2 x i32> %160 to <2 x i16>, !dbg !28
  %162 = bitcast <2 x i16> %161 to <2 x half>, !dbg !28
  %163 = fpext <2 x half> %162 to <2 x float>, !dbg !41
  %164 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !30
  %165 = insertelement <2 x i32> %164, i32 %120, i64 1, !dbg !30
  %166 = trunc <2 x i32> %165 to <2 x i16>, !dbg !30
  %167 = bitcast <2 x i16> %166 to <2 x half>, !dbg !30
  %168 = fpext <2 x half> %167 to <2 x float>, !dbg !42
  %169 = fadd <2 x float> %158, %163, !dbg !43
  %170 = fmul <2 x float> %168, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %171 = fadd <2 x float> %169, %170, !dbg !45
  %172 = lshr <2 x i32> %155, <i32 16, i32 16>, !dbg !26
  %173 = trunc <2 x i32> %172 to <2 x i16>, !dbg !26
  %174 = bitcast <2 x i16> %173 to <2 x half>, !dbg !26
  %175 = fpext <2 x half> %174 to <2 x float>, !dbg !40
  %176 = lshr <2 x i32> %160, <i32 16, i32 16>, !dbg !28
  %177 = trunc <2 x i32> %176 to <2 x i16>, !dbg !28
  %178 = bitcast <2 x i16> %177 to <2 x half>, !dbg !28
  %179 = fpext <2 x half> %178 to <2 x float>, !dbg !41
  %180 = lshr <2 x i32> %165, <i32 16, i32 16>, !dbg !30
  %181 = trunc <2 x i32> %180 to <2 x i16>, !dbg !30
  %182 = bitcast <2 x i16> %181 to <2 x half>, !dbg !30
  %183 = fpext <2 x half> %182 to <2 x float>, !dbg !42
  %184 = fadd <2 x float> %175, %179, !dbg !43
  %185 = fmul <2 x float> %183, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %186 = fadd <2 x float> %184, %185, !dbg !45
  %187 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !26
  %188 = insertelement <2 x i32> %187, i32 %109, i64 1, !dbg !26
  %189 = trunc <2 x i32> %188 to <2 x i16>, !dbg !26
  %190 = bitcast <2 x i16> %189 to <2 x half>, !dbg !26
  %191 = fpext <2 x half> %190 to <2 x float>, !dbg !40
  %192 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !28
  %193 = insertelement <2 x i32> %192, i32 %115, i64 1, !dbg !28
  %194 = trunc <2 x i32> %193 to <2 x i16>, !dbg !28
  %195 = bitcast <2 x i16> %194 to <2 x half>, !dbg !28
  %196 = fpext <2 x half> %195 to <2 x float>, !dbg !41
  %197 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !30
  %198 = insertelement <2 x i32> %197, i32 %121, i64 1, !dbg !30
  %199 = trunc <2 x i32> %198 to <2 x i16>, !dbg !30
  %200 = bitcast <2 x i16> %199 to <2 x half>, !dbg !30
  %201 = fpext <2 x half> %200 to <2 x float>, !dbg !42
  %202 = fadd <2 x float> %191, %196, !dbg !43
  %203 = fmul <2 x float> %201, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %204 = fadd <2 x float> %202, %203, !dbg !45
  %205 = lshr <2 x i32> %188, <i32 16, i32 16>, !dbg !26
  %206 = trunc <2 x i32> %205 to <2 x i16>, !dbg !26
  %207 = bitcast <2 x i16> %206 to <2 x half>, !dbg !26
  %208 = fpext <2 x half> %207 to <2 x float>, !dbg !40
  %209 = lshr <2 x i32> %193, <i32 16, i32 16>, !dbg !28
  %210 = trunc <2 x i32> %209 to <2 x i16>, !dbg !28
  %211 = bitcast <2 x i16> %210 to <2 x half>, !dbg !28
  %212 = fpext <2 x half> %211 to <2 x float>, !dbg !41
  %213 = lshr <2 x i32> %198, <i32 16, i32 16>, !dbg !30
  %214 = trunc <2 x i32> %213 to <2 x i16>, !dbg !30
  %215 = bitcast <2 x i16> %214 to <2 x half>, !dbg !30
  %216 = fpext <2 x half> %215 to <2 x float>, !dbg !42
  %217 = fadd <2 x float> %208, %212, !dbg !43
  %218 = fmul <2 x float> %216, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %219 = fadd <2 x float> %217, %218, !dbg !45
  %220 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !26
  %221 = insertelement <2 x i32> %220, i32 %110, i64 1, !dbg !26
  %222 = trunc <2 x i32> %221 to <2 x i16>, !dbg !26
  %223 = bitcast <2 x i16> %222 to <2 x half>, !dbg !26
  %224 = fpext <2 x half> %223 to <2 x float>, !dbg !40
  %225 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !28
  %226 = insertelement <2 x i32> %225, i32 %116, i64 1, !dbg !28
  %227 = trunc <2 x i32> %226 to <2 x i16>, !dbg !28
  %228 = bitcast <2 x i16> %227 to <2 x half>, !dbg !28
  %229 = fpext <2 x half> %228 to <2 x float>, !dbg !41
  %230 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !30
  %231 = insertelement <2 x i32> %230, i32 %122, i64 1, !dbg !30
  %232 = trunc <2 x i32> %231 to <2 x i16>, !dbg !30
  %233 = bitcast <2 x i16> %232 to <2 x half>, !dbg !30
  %234 = fpext <2 x half> %233 to <2 x float>, !dbg !42
  %235 = fadd <2 x float> %224, %229, !dbg !43
  %236 = fmul <2 x float> %234, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %237 = fadd <2 x float> %235, %236, !dbg !45
  %238 = lshr <2 x i32> %221, <i32 16, i32 16>, !dbg !26
  %239 = trunc <2 x i32> %238 to <2 x i16>, !dbg !26
  %240 = bitcast <2 x i16> %239 to <2 x half>, !dbg !26
  %241 = fpext <2 x half> %240 to <2 x float>, !dbg !40
  %242 = lshr <2 x i32> %226, <i32 16, i32 16>, !dbg !28
  %243 = trunc <2 x i32> %242 to <2 x i16>, !dbg !28
  %244 = bitcast <2 x i16> %243 to <2 x half>, !dbg !28
  %245 = fpext <2 x half> %244 to <2 x float>, !dbg !41
  %246 = lshr <2 x i32> %231, <i32 16, i32 16>, !dbg !30
  %247 = trunc <2 x i32> %246 to <2 x i16>, !dbg !30
  %248 = bitcast <2 x i16> %247 to <2 x half>, !dbg !30
  %249 = fpext <2 x half> %248 to <2 x float>, !dbg !42
  %250 = fadd <2 x float> %241, %245, !dbg !43
  %251 = fmul <2 x float> %249, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %252 = fadd <2 x float> %250, %251, !dbg !45
  %253 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !26
  %254 = insertelement <2 x i32> %253, i32 %111, i64 1, !dbg !26
  %255 = trunc <2 x i32> %254 to <2 x i16>, !dbg !26
  %256 = bitcast <2 x i16> %255 to <2 x half>, !dbg !26
  %257 = fpext <2 x half> %256 to <2 x float>, !dbg !40
  %258 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !28
  %259 = insertelement <2 x i32> %258, i32 %117, i64 1, !dbg !28
  %260 = trunc <2 x i32> %259 to <2 x i16>, !dbg !28
  %261 = bitcast <2 x i16> %260 to <2 x half>, !dbg !28
  %262 = fpext <2 x half> %261 to <2 x float>, !dbg !41
  %263 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !30
  %264 = insertelement <2 x i32> %263, i32 %123, i64 1, !dbg !30
  %265 = trunc <2 x i32> %264 to <2 x i16>, !dbg !30
  %266 = bitcast <2 x i16> %265 to <2 x half>, !dbg !30
  %267 = fpext <2 x half> %266 to <2 x float>, !dbg !42
  %268 = fadd <2 x float> %257, %262, !dbg !43
  %269 = fmul <2 x float> %267, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %270 = fadd <2 x float> %268, %269, !dbg !45
  %271 = lshr <2 x i32> %254, <i32 16, i32 16>, !dbg !26
  %272 = trunc <2 x i32> %271 to <2 x i16>, !dbg !26
  %273 = bitcast <2 x i16> %272 to <2 x half>, !dbg !26
  %274 = fpext <2 x half> %273 to <2 x float>, !dbg !40
  %275 = lshr <2 x i32> %259, <i32 16, i32 16>, !dbg !28
  %276 = trunc <2 x i32> %275 to <2 x i16>, !dbg !28
  %277 = bitcast <2 x i16> %276 to <2 x half>, !dbg !28
  %278 = fpext <2 x half> %277 to <2 x float>, !dbg !41
  %279 = lshr <2 x i32> %264, <i32 16, i32 16>, !dbg !30
  %280 = trunc <2 x i32> %279 to <2 x i16>, !dbg !30
  %281 = bitcast <2 x i16> %280 to <2 x half>, !dbg !30
  %282 = fpext <2 x half> %281 to <2 x float>, !dbg !42
  %283 = fadd <2 x float> %274, %278, !dbg !43
  %284 = fmul <2 x float> %282, <float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %285 = fadd <2 x float> %283, %284, !dbg !45
  %286 = extractelement <2 x float> %171, i64 1, !dbg !46
  %287 = fadd float %286, %146, !dbg !46
  %288 = extractelement <2 x float> %186, i64 1, !dbg !46
  %289 = fadd float %288, %147, !dbg !46
  %290 = extractelement <2 x float> %204, i64 1, !dbg !46
  %291 = fadd float %290, %148, !dbg !46
  %292 = extractelement <2 x float> %219, i64 1, !dbg !46
  %293 = fadd float %292, %149, !dbg !46
  %294 = extractelement <2 x float> %237, i64 1, !dbg !46
  %295 = fadd float %294, %150, !dbg !46
  %296 = extractelement <2 x float> %252, i64 1, !dbg !46
  %297 = fadd float %296, %151, !dbg !46
  %298 = extractelement <2 x float> %270, i64 1, !dbg !46
  %299 = fadd float %298, %152, !dbg !46
  %300 = extractelement <2 x float> %285, i64 1, !dbg !46
  %301 = fadd float %300, %153, !dbg !46
  %302 = extractelement <2 x float> %171, i64 0, !dbg !47
  %303 = fadd float %302, %287, !dbg !47
  %304 = extractelement <2 x float> %186, i64 0, !dbg !47
  %305 = fadd float %304, %289, !dbg !47
  %306 = extractelement <2 x float> %204, i64 0, !dbg !47
  %307 = fadd float %306, %291, !dbg !47
  %308 = extractelement <2 x float> %219, i64 0, !dbg !47
  %309 = fadd float %308, %293, !dbg !47
  %310 = extractelement <2 x float> %237, i64 0, !dbg !47
  %311 = fadd float %310, %295, !dbg !47
  %312 = extractelement <2 x float> %252, i64 0, !dbg !47
  %313 = fadd float %312, %297, !dbg !47
  %314 = extractelement <2 x float> %270, i64 0, !dbg !47
  %315 = fadd float %314, %299, !dbg !47
  %316 = extractelement <2 x float> %285, i64 0, !dbg !47
  %317 = fadd float %316, %301, !dbg !47
  %318 = mul i32 %10, %9, !dbg !48
  %319 = mul i32 %318, %56, !dbg !49
  %320 = add i32 %319, %.decomposed, !dbg !50
  %321 = add i32 %319, %.decomposed31, !dbg !50
  %322 = add i32 %.decomposed34, %319, !dbg !50
  %323 = add i32 %.decomposed37, %319, !dbg !50
  %324 = add i32 %.decomposed40, %319, !dbg !50
  %325 = add i32 %.decomposed43, %319, !dbg !50
  %326 = add i32 %.decomposed46, %319, !dbg !50
  %327 = add i32 %.decomposed49, %319, !dbg !50
  %328 = mul i32 %318, 1280, !dbg !51
  %329 = mul i32 %59, %328, !dbg !52
  %330 = mul i32 %61, %328, !dbg !52
  %331 = mul i32 %63, %328, !dbg !52
  %332 = mul i32 %65, %328, !dbg !52
  %333 = mul i32 %67, %328, !dbg !52
  %334 = mul i32 %69, %328, !dbg !52
  %335 = mul i32 %71, %328, !dbg !52
  %336 = mul i32 %73, %328, !dbg !52
  %337 = add i32 %320, %329, !dbg !53
  %338 = add i32 %321, %330, !dbg !53
  %339 = add i32 %322, %331, !dbg !53
  %340 = add i32 %323, %332, !dbg !53
  %341 = add i32 %324, %333, !dbg !53
  %342 = add i32 %325, %334, !dbg !53
  %343 = add i32 %326, %335, !dbg !53
  %344 = add i32 %327, %336, !dbg !53
  %345 = sext i32 %337 to i64, !dbg !54
  %346 = getelementptr half, ptr addrspace(1) %7, i64 %345, !dbg !54
  %347 = sext i32 %338 to i64, !dbg !54
  %348 = getelementptr half, ptr addrspace(1) %7, i64 %347, !dbg !54
  %349 = sext i32 %339 to i64, !dbg !54
  %350 = getelementptr half, ptr addrspace(1) %7, i64 %349, !dbg !54
  %351 = sext i32 %340 to i64, !dbg !54
  %352 = getelementptr half, ptr addrspace(1) %7, i64 %351, !dbg !54
  %353 = sext i32 %341 to i64, !dbg !54
  %354 = getelementptr half, ptr addrspace(1) %7, i64 %353, !dbg !54
  %355 = sext i32 %342 to i64, !dbg !54
  %356 = getelementptr half, ptr addrspace(1) %7, i64 %355, !dbg !54
  %357 = sext i32 %343 to i64, !dbg !54
  %358 = getelementptr half, ptr addrspace(1) %7, i64 %357, !dbg !54
  %359 = sext i32 %344 to i64, !dbg !54
  %360 = getelementptr half, ptr addrspace(1) %7, i64 %359, !dbg !54
  %361 = fptrunc float %303 to half, !dbg !55
  %362 = fptrunc float %305 to half, !dbg !55
  %363 = fptrunc float %307 to half, !dbg !55
  %364 = fptrunc float %309 to half, !dbg !55
  %365 = fptrunc float %311 to half, !dbg !55
  %366 = fptrunc float %313 to half, !dbg !55
  %367 = fptrunc float %315 to half, !dbg !55
  %368 = fptrunc float %317 to half, !dbg !55
  %369 = mul nuw nsw i32 %20, 33, !dbg !55
  %370 = add nuw nsw i32 %369, %29, !dbg !55
  %371 = zext nneg i32 %370 to i64, !dbg !55
  %372 = getelementptr half, ptr addrspace(3) @global_smem, i64 %371, !dbg !55
  %373 = insertelement <1 x half> undef, half %361, i64 0, !dbg !55
  store <1 x half> %373, ptr addrspace(3) %372, align 2, !dbg !55
  %374 = or i32 %29, 1, !dbg !55
  %375 = add nuw nsw i32 %374, %369, !dbg !55
  %376 = zext nneg i32 %375 to i64, !dbg !55
  %377 = getelementptr half, ptr addrspace(3) @global_smem, i64 %376, !dbg !55
  %378 = insertelement <1 x half> undef, half %362, i64 0, !dbg !55
  store <1 x half> %378, ptr addrspace(3) %377, align 2, !dbg !55
  %379 = or i32 %29, 2, !dbg !55
  %380 = add nuw nsw i32 %379, %369, !dbg !55
  %381 = zext nneg i32 %380 to i64, !dbg !55
  %382 = getelementptr half, ptr addrspace(3) @global_smem, i64 %381, !dbg !55
  %383 = insertelement <1 x half> undef, half %363, i64 0, !dbg !55
  store <1 x half> %383, ptr addrspace(3) %382, align 2, !dbg !55
  %384 = or i32 %29, 3, !dbg !55
  %385 = add nuw nsw i32 %384, %369, !dbg !55
  %386 = zext nneg i32 %385 to i64, !dbg !55
  %387 = getelementptr half, ptr addrspace(3) @global_smem, i64 %386, !dbg !55
  %388 = insertelement <1 x half> undef, half %364, i64 0, !dbg !55
  store <1 x half> %388, ptr addrspace(3) %387, align 2, !dbg !55
  %389 = or i32 %29, 4, !dbg !55
  %390 = add nuw nsw i32 %389, %369, !dbg !55
  %391 = zext nneg i32 %390 to i64, !dbg !55
  %392 = getelementptr half, ptr addrspace(3) @global_smem, i64 %391, !dbg !55
  %393 = insertelement <1 x half> undef, half %365, i64 0, !dbg !55
  store <1 x half> %393, ptr addrspace(3) %392, align 2, !dbg !55
  %394 = or i32 %29, 5, !dbg !55
  %395 = add nuw nsw i32 %394, %369, !dbg !55
  %396 = zext nneg i32 %395 to i64, !dbg !55
  %397 = getelementptr half, ptr addrspace(3) @global_smem, i64 %396, !dbg !55
  %398 = insertelement <1 x half> undef, half %366, i64 0, !dbg !55
  store <1 x half> %398, ptr addrspace(3) %397, align 2, !dbg !55
  %399 = or i32 %29, 6, !dbg !55
  %400 = add nuw nsw i32 %399, %369, !dbg !55
  %401 = zext nneg i32 %400 to i64, !dbg !55
  %402 = getelementptr half, ptr addrspace(3) @global_smem, i64 %401, !dbg !55
  %403 = insertelement <1 x half> undef, half %367, i64 0, !dbg !55
  store <1 x half> %403, ptr addrspace(3) %402, align 2, !dbg !55
  %404 = or i32 %29, 7, !dbg !55
  %405 = add nuw nsw i32 %404, %369, !dbg !55
  %406 = zext nneg i32 %405 to i64, !dbg !55
  %407 = getelementptr half, ptr addrspace(3) @global_smem, i64 %406, !dbg !55
  %408 = insertelement <1 x half> undef, half %368, i64 0, !dbg !55
  store <1 x half> %408, ptr addrspace(3) %407, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %409 = mul nuw nsw i32 %17, 33, !dbg !55
  %410 = add nuw nsw i32 %409, %15, !dbg !55
  %411 = zext nneg i32 %410 to i64, !dbg !55
  %412 = getelementptr half, ptr addrspace(3) @global_smem, i64 %411, !dbg !55
  %413 = load i16, ptr addrspace(3) %412, align 2, !dbg !55
  %414 = mul nuw nsw i32 %21, 33, !dbg !55
  %415 = add nuw nsw i32 %414, %15, !dbg !55
  %416 = zext nneg i32 %415 to i64, !dbg !55
  %417 = getelementptr half, ptr addrspace(3) @global_smem, i64 %416, !dbg !55
  %418 = load i16, ptr addrspace(3) %417, align 2, !dbg !55
  %419 = mul nuw nsw i32 %22, 33, !dbg !55
  %420 = add nuw nsw i32 %419, %15, !dbg !55
  %421 = zext nneg i32 %420 to i64, !dbg !55
  %422 = getelementptr half, ptr addrspace(3) @global_smem, i64 %421, !dbg !55
  %423 = load i16, ptr addrspace(3) %422, align 2, !dbg !55
  %424 = mul nuw nsw i32 %23, 33, !dbg !55
  %425 = add nuw nsw i32 %424, %15, !dbg !55
  %426 = zext nneg i32 %425 to i64, !dbg !55
  %427 = getelementptr half, ptr addrspace(3) @global_smem, i64 %426, !dbg !55
  %428 = load i16, ptr addrspace(3) %427, align 2, !dbg !55
  %429 = mul nuw nsw i32 %24, 33, !dbg !55
  %430 = add nuw nsw i32 %429, %15, !dbg !55
  %431 = zext nneg i32 %430 to i64, !dbg !55
  %432 = getelementptr half, ptr addrspace(3) @global_smem, i64 %431, !dbg !55
  %433 = load i16, ptr addrspace(3) %432, align 2, !dbg !55
  %434 = mul nuw nsw i32 %25, 33, !dbg !55
  %435 = add nuw nsw i32 %434, %15, !dbg !55
  %436 = zext nneg i32 %435 to i64, !dbg !55
  %437 = getelementptr half, ptr addrspace(3) @global_smem, i64 %436, !dbg !55
  %438 = load i16, ptr addrspace(3) %437, align 2, !dbg !55
  %439 = mul nuw nsw i32 %26, 33, !dbg !55
  %440 = add nuw nsw i32 %439, %15, !dbg !55
  %441 = zext nneg i32 %440 to i64, !dbg !55
  %442 = getelementptr half, ptr addrspace(3) @global_smem, i64 %441, !dbg !55
  %443 = load i16, ptr addrspace(3) %442, align 2, !dbg !55
  %444 = mul nuw nsw i32 %27, 33, !dbg !55
  %445 = add nuw nsw i32 %444, %15, !dbg !55
  %446 = zext nneg i32 %445 to i64, !dbg !55
  %447 = getelementptr half, ptr addrspace(3) @global_smem, i64 %446, !dbg !55
  %448 = load i16, ptr addrspace(3) %447, align 2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %413, ptr addrspace(1) %346, i1 %80) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %418, ptr addrspace(1) %348, i1 %81) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %423, ptr addrspace(1) %350, i1 %82) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %428, ptr addrspace(1) %352, i1 %83) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %433, ptr addrspace(1) %354, i1 %84) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %438, ptr addrspace(1) %356, i1 %85) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %443, ptr addrspace(1) %358, i1 %86) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %448, ptr addrspace(1) %360, i1 %87) #2, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "c7srkcchb2nxsgdvte2bkgvu6npyw245ceu5jo4nokeaspccdfhh.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/7s")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d89101112de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d89101112de", linkageName: "triton__0d1d2d3d4d5d6d7d89101112de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 44, scope: !5)
!10 = !DILocation(line: 22, column: 28, scope: !5)
!11 = !DILocation(line: 22, column: 48, scope: !5)
!12 = !DILocation(line: 22, column: 53, scope: !5)
!13 = !DILocation(line: 22, column: 34, scope: !5)
!14 = !DILocation(line: 22, column: 58, scope: !5)
!15 = !DILocation(line: 23, column: 23, scope: !5)
!16 = !DILocation(line: 24, column: 21, scope: !5)
!17 = !DILocation(line: 25, column: 28, scope: !5)
!18 = !DILocation(line: 25, column: 33, scope: !5)
!19 = !DILocation(line: 26, column: 23, scope: !5)
!20 = !DILocation(line: 27, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 20, scope: !5)
!22 = !DILocation(line: 32, column: 41, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 55, scope: !5)
!26 = !DILocation(line: 32, column: 47, scope: !5)
!27 = !DILocation(line: 33, column: 30, scope: !5)
!28 = !DILocation(line: 33, column: 35, scope: !5)
!29 = !DILocation(line: 34, column: 30, scope: !5)
!30 = !DILocation(line: 34, column: 47, scope: !5)
!31 = !DILocation(line: 35, column: 30, scope: !5)
!32 = !DILocation(line: 35, column: 47, scope: !5)
!33 = !DILocation(line: 36, column: 30, scope: !5)
!34 = !DILocation(line: 36, column: 35, scope: !5)
!35 = !DILocation(line: 37, column: 31, scope: !5)
!36 = !DILocation(line: 37, column: 48, scope: !5)
!37 = !DILocation(line: 38, column: 31, scope: !5)
!38 = !DILocation(line: 38, column: 48, scope: !5)
!39 = !DILocation(line: 38, column: 96, scope: !5)
!40 = !DILocation(line: 32, column: 95, scope: !5)
!41 = !DILocation(line: 33, column: 75, scope: !5)
!42 = !DILocation(line: 34, column: 95, scope: !5)
!43 = !DILocation(line: 39, column: 18, scope: !5)
!44 = !DILocation(line: 41, column: 18, scope: !5)
!45 = !DILocation(line: 42, column: 18, scope: !5)
!46 = !DILocation(line: 48, column: 20, scope: !5)
!47 = !DILocation(line: 49, column: 19, scope: !5)
!48 = !DILocation(line: 50, column: 35, scope: !5)
!49 = !DILocation(line: 50, column: 39, scope: !5)
!50 = !DILocation(line: 50, column: 31, scope: !5)
!51 = !DILocation(line: 50, column: 55, scope: !5)
!52 = !DILocation(line: 50, column: 59, scope: !5)
!53 = !DILocation(line: 50, column: 46, scope: !5)
!54 = !DILocation(line: 50, column: 25, scope: !5)
!55 = !DILocation(line: 50, column: 72, scope: !5)
!56 = !DILocation(line: 50, column: 4, scope: !5)
