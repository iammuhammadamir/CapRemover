; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5e(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %7, 255, !dbg !8
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %9 = icmp slt i32 %8, 576, !dbg !10
  %.frozen = freeze i32 %8
  %10 = sdiv i32 %.frozen, 32, !dbg !11
  %11 = mul i32 %10, 32
  %.decomposed = sub i32 %.frozen, %11
  %12 = mul i32 %10, 33000, !dbg !12
  %13 = mul nsw i32 %.decomposed, 27000, !dbg !13
  %14 = shl nuw nsw i32 %urem, 1
  %15 = zext nneg i32 %14 to i64
  %16 = getelementptr float, ptr addrspace(3) @global_smem, i64 %15
  br label %17, !dbg !14

17:                                               ; preds = %6, %._crit_edge
  %18 = phi float [ 0.000000e+00, %6 ], [ %293, %._crit_edge ]
  %19 = phi float [ 0.000000e+00, %6 ], [ %294, %._crit_edge ]
  %20 = phi float [ 0.000000e+00, %6 ], [ %295, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %6 ], [ %296, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %6 ], [ %297, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %6 ], [ %298, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %6 ], [ %299, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %6 ], [ %300, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %6 ], [ %285, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %6 ], [ %286, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %6 ], [ %287, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %6 ], [ %288, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %6 ], [ %289, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %6 ], [ %290, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %6 ], [ %291, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %6 ], [ %292, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %6 ], [ %277, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %6 ], [ %278, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %6 ], [ %279, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %6 ], [ %280, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %6 ], [ %281, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %6 ], [ %282, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %6 ], [ %283, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %6 ], [ %284, %._crit_edge ]
  %42 = phi i32 [ 0, %6 ], [ %301, %._crit_edge ]
  %43 = or i32 %42, %urem, !dbg !15
  %44 = or i32 %43, 256, !dbg !15
  %45 = or i32 %43, 512, !dbg !15
  %46 = or i32 %43, 768, !dbg !15
  %47 = or i32 %43, 1024, !dbg !15
  %48 = or i32 %43, 1280, !dbg !15
  %49 = or i32 %43, 1536, !dbg !15
  %50 = or i32 %43, 1792, !dbg !15
  %51 = icmp ult i32 %43, 33000, !dbg !16
  %52 = icmp ult i32 %44, 33000, !dbg !16
  %53 = icmp ult i32 %45, 33000, !dbg !16
  %54 = icmp ult i32 %46, 33000, !dbg !16
  %55 = icmp ult i32 %47, 33000, !dbg !16
  %56 = icmp ult i32 %48, 33000, !dbg !16
  %57 = icmp ult i32 %49, 33000, !dbg !16
  %58 = icmp ult i32 %50, 33000, !dbg !16
  %59 = add i32 %43, %12, !dbg !17
  %60 = add i32 %44, %12, !dbg !17
  %61 = add i32 %45, %12, !dbg !17
  %62 = add i32 %46, %12, !dbg !17
  %63 = add i32 %47, %12, !dbg !17
  %64 = add i32 %48, %12, !dbg !17
  %65 = add i32 %49, %12, !dbg !17
  %66 = add i32 %50, %12, !dbg !17
  %.frozen179 = freeze i32 %59
  %67 = sdiv i32 %.frozen179, 59400, !dbg !18
  %.frozen181 = freeze i32 %60
  %68 = sdiv i32 %.frozen181, 59400, !dbg !18
  %.frozen183 = freeze i32 %61
  %69 = sdiv i32 %.frozen183, 59400, !dbg !18
  %.frozen185 = freeze i32 %62
  %70 = sdiv i32 %.frozen185, 59400, !dbg !18
  %.frozen187 = freeze i32 %63
  %71 = sdiv i32 %.frozen187, 59400, !dbg !18
  %.frozen189 = freeze i32 %64
  %72 = sdiv i32 %.frozen189, 59400, !dbg !18
  %.frozen191 = freeze i32 %65
  %73 = sdiv i32 %.frozen191, 59400, !dbg !18
  %.frozen193 = freeze i32 %66
  %74 = sdiv i32 %.frozen193, 59400, !dbg !18
  %75 = mul nsw i32 %67, 2700, !dbg !19
  %76 = mul nsw i32 %68, 2700, !dbg !19
  %77 = mul nsw i32 %69, 2700, !dbg !19
  %78 = mul nsw i32 %70, 2700, !dbg !19
  %79 = mul nsw i32 %71, 2700, !dbg !19
  %80 = mul nsw i32 %72, 2700, !dbg !19
  %81 = mul nsw i32 %73, 2700, !dbg !19
  %82 = mul nsw i32 %74, 2700, !dbg !19
  %83 = add nsw i32 %75, %13, !dbg !20
  %84 = add nsw i32 %76, %13, !dbg !20
  %85 = add nsw i32 %77, %13, !dbg !20
  %86 = add nsw i32 %78, %13, !dbg !20
  %87 = add nsw i32 %79, %13, !dbg !20
  %88 = add nsw i32 %80, %13, !dbg !20
  %89 = add nsw i32 %81, %13, !dbg !20
  %90 = add nsw i32 %82, %13, !dbg !20
  %91 = mul i32 %67, 59400
  %.decomposed180 = sub i32 %.frozen179, %91
  %92 = mul i32 %68, 59400
  %.decomposed182 = sub i32 %.frozen181, %92
  %93 = mul i32 %69, 59400
  %.decomposed184 = sub i32 %.frozen183, %93
  %94 = mul i32 %70, 59400
  %.decomposed186 = sub i32 %.frozen185, %94
  %95 = mul i32 %71, 59400
  %.decomposed188 = sub i32 %.frozen187, %95
  %96 = mul i32 %72, 59400
  %.decomposed190 = sub i32 %.frozen189, %96
  %97 = mul i32 %73, 59400
  %.decomposed192 = sub i32 %.frozen191, %97
  %98 = mul i32 %74, 59400
  %.decomposed194 = sub i32 %.frozen193, %98
  %99 = sdiv i32 %.decomposed180, 2700, !dbg !21
  %100 = sdiv i32 %.decomposed182, 2700, !dbg !21
  %101 = sdiv i32 %.decomposed184, 2700, !dbg !21
  %102 = sdiv i32 %.decomposed186, 2700, !dbg !21
  %103 = sdiv i32 %.decomposed188, 2700, !dbg !21
  %104 = sdiv i32 %.decomposed190, 2700, !dbg !21
  %105 = sdiv i32 %.decomposed192, 2700, !dbg !21
  %106 = sdiv i32 %.decomposed194, 2700, !dbg !21
  %107 = mul nsw i32 %99, 864000, !dbg !22
  %108 = mul nsw i32 %100, 864000, !dbg !22
  %109 = mul nsw i32 %101, 864000, !dbg !22
  %110 = mul nsw i32 %102, 864000, !dbg !22
  %111 = mul nsw i32 %103, 864000, !dbg !22
  %112 = mul nsw i32 %104, 864000, !dbg !22
  %113 = mul nsw i32 %105, 864000, !dbg !22
  %114 = mul nsw i32 %106, 864000, !dbg !22
  %115 = mul i32 %99, 2700
  %.decomposed195 = sub i32 %.decomposed180, %115
  %116 = mul i32 %100, 2700
  %.decomposed196 = sub i32 %.decomposed182, %116
  %117 = mul i32 %101, 2700
  %.decomposed197 = sub i32 %.decomposed184, %117
  %118 = mul i32 %102, 2700
  %.decomposed198 = sub i32 %.decomposed186, %118
  %119 = mul i32 %103, 2700
  %.decomposed199 = sub i32 %.decomposed188, %119
  %120 = mul i32 %104, 2700
  %.decomposed200 = sub i32 %.decomposed190, %120
  %121 = mul i32 %105, 2700
  %.decomposed201 = sub i32 %.decomposed192, %121
  %122 = mul i32 %106, 2700
  %.decomposed202 = sub i32 %.decomposed194, %122
  %123 = add nsw i32 %83, %.decomposed195, !dbg !23
  %124 = add nsw i32 %123, %107, !dbg !24
  %125 = add nsw i32 %84, %.decomposed196, !dbg !23
  %126 = add nsw i32 %125, %108, !dbg !24
  %127 = add nsw i32 %85, %.decomposed197, !dbg !23
  %128 = add nsw i32 %127, %109, !dbg !24
  %129 = add nsw i32 %86, %.decomposed198, !dbg !23
  %130 = add nsw i32 %129, %110, !dbg !24
  %131 = add nsw i32 %87, %.decomposed199, !dbg !23
  %132 = add nsw i32 %131, %111, !dbg !24
  %133 = add nsw i32 %88, %.decomposed200, !dbg !23
  %134 = add nsw i32 %133, %112, !dbg !24
  %135 = add nsw i32 %89, %.decomposed201, !dbg !23
  %136 = add nsw i32 %135, %113, !dbg !24
  %137 = add nsw i32 %90, %.decomposed202, !dbg !23
  %138 = add nsw i32 %137, %114, !dbg !24
  %139 = sext i32 %124 to i64, !dbg !25
  %140 = getelementptr half, ptr addrspace(1) %0, i64 %139, !dbg !25
  %141 = sext i32 %126 to i64, !dbg !25
  %142 = getelementptr half, ptr addrspace(1) %0, i64 %141, !dbg !25
  %143 = sext i32 %128 to i64, !dbg !25
  %144 = getelementptr half, ptr addrspace(1) %0, i64 %143, !dbg !25
  %145 = sext i32 %130 to i64, !dbg !25
  %146 = getelementptr half, ptr addrspace(1) %0, i64 %145, !dbg !25
  %147 = sext i32 %132 to i64, !dbg !25
  %148 = getelementptr half, ptr addrspace(1) %0, i64 %147, !dbg !25
  %149 = sext i32 %134 to i64, !dbg !25
  %150 = getelementptr half, ptr addrspace(1) %0, i64 %149, !dbg !25
  %151 = sext i32 %136 to i64, !dbg !25
  %152 = getelementptr half, ptr addrspace(1) %0, i64 %151, !dbg !25
  %153 = sext i32 %138 to i64, !dbg !25
  %154 = getelementptr half, ptr addrspace(1) %0, i64 %153, !dbg !25
  %155 = and i1 %9, %51, !dbg !26
  %156 = and i1 %9, %52, !dbg !26
  %157 = and i1 %9, %53, !dbg !26
  %158 = and i1 %9, %54, !dbg !26
  %159 = and i1 %9, %55, !dbg !26
  %160 = and i1 %9, %56, !dbg !26
  %161 = and i1 %9, %57, !dbg !26
  %162 = and i1 %9, %58, !dbg !26
  %163 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %140, i1 %155, i16 0, i1 %155) #3, !dbg !27
  %164 = bitcast i16 %163 to half, !dbg !27
  %165 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %142, i1 %156, i16 0, i1 %156) #3, !dbg !27
  %166 = bitcast i16 %165 to half, !dbg !27
  %167 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %144, i1 %157, i16 0, i1 %157) #3, !dbg !27
  %168 = bitcast i16 %167 to half, !dbg !27
  %169 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %146, i1 %158, i16 0, i1 %158) #3, !dbg !27
  %170 = bitcast i16 %169 to half, !dbg !27
  %171 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %148, i1 %159, i16 0, i1 %159) #3, !dbg !27
  %172 = bitcast i16 %171 to half, !dbg !27
  %173 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %150, i1 %160, i16 0, i1 %160) #3, !dbg !27
  %174 = bitcast i16 %173 to half, !dbg !27
  %175 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %152, i1 %161, i16 0, i1 %161) #3, !dbg !27
  %176 = bitcast i16 %175 to half, !dbg !27
  %177 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %154, i1 %162, i16 0, i1 %162) #3, !dbg !27
  %178 = bitcast i16 %177 to half, !dbg !27
  %179 = fpext half %164 to float, !dbg !28
  %180 = fpext half %166 to float, !dbg !28
  %181 = fpext half %168 to float, !dbg !28
  %182 = fpext half %170 to float, !dbg !28
  %183 = fpext half %172 to float, !dbg !28
  %184 = fpext half %174 to float, !dbg !28
  %185 = fpext half %176 to float, !dbg !28
  %186 = fpext half %178 to float, !dbg !28
  %187 = icmp eq i32 %42, 0, !dbg !29
  br i1 %187, label %._crit_edge, label %188, !dbg !30

188:                                              ; preds = %17
  %189 = fsub float %179, %34, !dbg !34
  %190 = fsub float %180, %35, !dbg !34
  %191 = fsub float %181, %36, !dbg !34
  %192 = fsub float %182, %37, !dbg !34
  %193 = fsub float %183, %38, !dbg !34
  %194 = fsub float %184, %39, !dbg !34
  %195 = fsub float %185, %40, !dbg !34
  %196 = fsub float %186, %41, !dbg !34
  %197 = fadd float %18, 1.000000e+00, !dbg !35
  %198 = fadd float %19, 1.000000e+00, !dbg !35
  %199 = fadd float %20, 1.000000e+00, !dbg !35
  %200 = fadd float %21, 1.000000e+00, !dbg !35
  %201 = fadd float %22, 1.000000e+00, !dbg !35
  %202 = fadd float %23, 1.000000e+00, !dbg !35
  %203 = fadd float %24, 1.000000e+00, !dbg !35
  %204 = fadd float %25, 1.000000e+00, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %205 = insertelement <1 x float> undef, float %197, i64 0, !dbg !35
  store <1 x float> %205, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %206 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %207 = insertelement <1 x float> undef, float %198, i64 0, !dbg !35
  store <1 x float> %207, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %208 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %209 = insertelement <1 x float> undef, float %199, i64 0, !dbg !35
  store <1 x float> %209, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %210 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %211 = insertelement <1 x float> undef, float %200, i64 0, !dbg !35
  store <1 x float> %211, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %212 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %213 = insertelement <1 x float> undef, float %201, i64 0, !dbg !35
  store <1 x float> %213, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %214 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %215 = insertelement <1 x float> undef, float %202, i64 0, !dbg !35
  store <1 x float> %215, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %216 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %217 = insertelement <1 x float> undef, float %203, i64 0, !dbg !35
  store <1 x float> %217, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %218 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %219 = insertelement <1 x float> undef, float %204, i64 0, !dbg !35
  store <1 x float> %219, ptr addrspace(3) %16, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %220 = load float, ptr addrspace(3) %16, align 4, !dbg !35
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %206) #3, !dbg !36
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %208) #3, !dbg !36
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %210) #3, !dbg !36
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %212) #3, !dbg !36
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %214) #3, !dbg !36
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %216) #3, !dbg !36
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %218) #3, !dbg !36
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %220) #3, !dbg !36
  %229 = fadd float %34, %221, !dbg !37
  %230 = fadd float %35, %222, !dbg !37
  %231 = fadd float %36, %223, !dbg !37
  %232 = fadd float %37, %224, !dbg !37
  %233 = fadd float %38, %225, !dbg !37
  %234 = fadd float %39, %226, !dbg !37
  %235 = fadd float %40, %227, !dbg !37
  %236 = fadd float %41, %228, !dbg !37
  %237 = fsub float %179, %229, !dbg !38
  %238 = fsub float %180, %230, !dbg !38
  %239 = fsub float %181, %231, !dbg !38
  %240 = fsub float %182, %232, !dbg !38
  %241 = fsub float %183, %233, !dbg !38
  %242 = fsub float %184, %234, !dbg !38
  %243 = fsub float %185, %235, !dbg !38
  %244 = fsub float %186, %236, !dbg !38
  %245 = fmul float %189, %237, !dbg !39
  %246 = fmul float %190, %238, !dbg !39
  %247 = fmul float %191, %239, !dbg !39
  %248 = fmul float %192, %240, !dbg !39
  %249 = fmul float %193, %241, !dbg !39
  %250 = fmul float %194, %242, !dbg !39
  %251 = fmul float %195, %243, !dbg !39
  %252 = fmul float %196, %244, !dbg !39
  %253 = fadd float %26, %245, !dbg !40
  %254 = fadd float %27, %246, !dbg !40
  %255 = fadd float %28, %247, !dbg !40
  %256 = fadd float %29, %248, !dbg !40
  %257 = fadd float %30, %249, !dbg !40
  %258 = fadd float %31, %250, !dbg !40
  %259 = fadd float %32, %251, !dbg !40
  %260 = fadd float %33, %252, !dbg !40
  br label %._crit_edge, !dbg !30

._crit_edge:                                      ; preds = %17, %188
  %261 = phi float [ %197, %188 ], [ 1.000000e+00, %17 ]
  %262 = phi float [ %198, %188 ], [ 1.000000e+00, %17 ]
  %263 = phi float [ %199, %188 ], [ 1.000000e+00, %17 ]
  %264 = phi float [ %200, %188 ], [ 1.000000e+00, %17 ]
  %265 = phi float [ %201, %188 ], [ 1.000000e+00, %17 ]
  %266 = phi float [ %202, %188 ], [ 1.000000e+00, %17 ]
  %267 = phi float [ %203, %188 ], [ 1.000000e+00, %17 ]
  %268 = phi float [ %204, %188 ], [ 1.000000e+00, %17 ]
  %269 = phi float [ %253, %188 ], [ 0.000000e+00, %17 ]
  %270 = phi float [ %254, %188 ], [ 0.000000e+00, %17 ]
  %271 = phi float [ %255, %188 ], [ 0.000000e+00, %17 ]
  %272 = phi float [ %256, %188 ], [ 0.000000e+00, %17 ]
  %273 = phi float [ %257, %188 ], [ 0.000000e+00, %17 ]
  %274 = phi float [ %258, %188 ], [ 0.000000e+00, %17 ]
  %275 = phi float [ %259, %188 ], [ 0.000000e+00, %17 ]
  %276 = phi float [ %260, %188 ], [ 0.000000e+00, %17 ]
  %.pn15 = phi float [ %229, %188 ], [ %179, %17 ]
  %.pn13 = phi float [ %230, %188 ], [ %180, %17 ]
  %.pn11 = phi float [ %231, %188 ], [ %181, %17 ]
  %.pn9 = phi float [ %232, %188 ], [ %182, %17 ]
  %.pn7 = phi float [ %233, %188 ], [ %183, %17 ]
  %.pn5 = phi float [ %234, %188 ], [ %184, %17 ]
  %.pn3 = phi float [ %235, %188 ], [ %185, %17 ]
  %.pn1 = phi float [ %236, %188 ], [ %186, %17 ]
  %277 = select i1 %155, float %.pn15, float %34, !dbg !41
  %278 = select i1 %156, float %.pn13, float %35, !dbg !41
  %279 = select i1 %157, float %.pn11, float %36, !dbg !41
  %280 = select i1 %158, float %.pn9, float %37, !dbg !41
  %281 = select i1 %159, float %.pn7, float %38, !dbg !41
  %282 = select i1 %160, float %.pn5, float %39, !dbg !41
  %283 = select i1 %161, float %.pn3, float %40, !dbg !41
  %284 = select i1 %162, float %.pn1, float %41, !dbg !41
  %285 = select i1 %155, float %269, float %26, !dbg !42
  %286 = select i1 %156, float %270, float %27, !dbg !42
  %287 = select i1 %157, float %271, float %28, !dbg !42
  %288 = select i1 %158, float %272, float %29, !dbg !42
  %289 = select i1 %159, float %273, float %30, !dbg !42
  %290 = select i1 %160, float %274, float %31, !dbg !42
  %291 = select i1 %161, float %275, float %32, !dbg !42
  %292 = select i1 %162, float %276, float %33, !dbg !42
  %293 = select i1 %155, float %261, float %18, !dbg !43
  %294 = select i1 %156, float %262, float %19, !dbg !43
  %295 = select i1 %157, float %263, float %20, !dbg !43
  %296 = select i1 %158, float %264, float %21, !dbg !43
  %297 = select i1 %159, float %265, float %22, !dbg !43
  %298 = select i1 %160, float %266, float %23, !dbg !43
  %299 = select i1 %161, float %267, float %24, !dbg !43
  %300 = select i1 %162, float %268, float %25, !dbg !43
  %301 = add nuw nsw i32 %42, 2048, !dbg !14
  %302 = icmp ult i32 %42, 30952, !dbg !14
  br i1 %302, label %17, label %303, !dbg !14

303:                                              ; preds = %._crit_edge
  %304 = lshr i32 %7, 5, !dbg !8
  %305 = and i32 %304, 7, !dbg !8
  %306 = and i32 %7, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %307 = insertelement <1 x float> undef, float %293, i64 0, !dbg !14
  store <1 x float> %307, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %308 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %309 = insertelement <1 x float> undef, float %294, i64 0, !dbg !14
  store <1 x float> %309, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %310 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %311 = insertelement <1 x float> undef, float %295, i64 0, !dbg !14
  store <1 x float> %311, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %312 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %313 = insertelement <1 x float> undef, float %296, i64 0, !dbg !14
  store <1 x float> %313, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %314 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %315 = insertelement <1 x float> undef, float %297, i64 0, !dbg !14
  store <1 x float> %315, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %316 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %317 = insertelement <1 x float> undef, float %298, i64 0, !dbg !14
  store <1 x float> %317, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %318 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %319 = insertelement <1 x float> undef, float %299, i64 0, !dbg !14
  store <1 x float> %319, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %320 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %321 = insertelement <1 x float> undef, float %300, i64 0, !dbg !14
  store <1 x float> %321, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %322 = load float, ptr addrspace(3) %16, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %323 = fsub float %278, %277, !dbg !46
  %324 = fadd float %308, %310, !dbg !50
  %325 = fcmp oeq float %324, 0.000000e+00, !dbg !51
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %324) #3, !dbg !52
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !53
  %328 = fmul float %323, %327, !dbg !54
  %329 = fadd float %277, %328, !dbg !55
  %330 = fadd float %285, %286, !dbg !56
  %331 = fmul float %323, %323, !dbg !57
  %332 = fmul float %331, %308, !dbg !58
  %333 = fmul float %332, %327, !dbg !59
  %334 = fadd float %330, %333, !dbg !60
  %335 = fsub float %279, %329, !dbg !46
  %336 = fadd float %324, %312, !dbg !50
  %337 = fcmp oeq float %336, 0.000000e+00, !dbg !51
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float %336) #3, !dbg !52
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !53
  %340 = fmul float %339, %335, !dbg !54
  %341 = fadd float %329, %340, !dbg !55
  %342 = fadd float %287, %334, !dbg !56
  %343 = fmul float %335, %335, !dbg !57
  %344 = fmul float %324, %343, !dbg !58
  %345 = fmul float %339, %344, !dbg !59
  %346 = fadd float %342, %345, !dbg !60
  %347 = fsub float %280, %341, !dbg !46
  %348 = fadd float %336, %314, !dbg !50
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !51
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %348) #3, !dbg !52
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !53
  %352 = fmul float %351, %347, !dbg !54
  %353 = fadd float %341, %352, !dbg !55
  %354 = fadd float %288, %346, !dbg !56
  %355 = fmul float %347, %347, !dbg !57
  %356 = fmul float %336, %355, !dbg !58
  %357 = fmul float %351, %356, !dbg !59
  %358 = fadd float %354, %357, !dbg !60
  %359 = fsub float %281, %353, !dbg !46
  %360 = fadd float %348, %316, !dbg !50
  %361 = fcmp oeq float %360, 0.000000e+00, !dbg !51
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %360) #3, !dbg !52
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !53
  %364 = fmul float %363, %359, !dbg !54
  %365 = fadd float %353, %364, !dbg !55
  %366 = fadd float %289, %358, !dbg !56
  %367 = fmul float %359, %359, !dbg !57
  %368 = fmul float %348, %367, !dbg !58
  %369 = fmul float %363, %368, !dbg !59
  %370 = fadd float %366, %369, !dbg !60
  %371 = fsub float %282, %365, !dbg !46
  %372 = fadd float %360, %318, !dbg !50
  %373 = fcmp oeq float %372, 0.000000e+00, !dbg !51
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %372) #3, !dbg !52
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !53
  %376 = fmul float %375, %371, !dbg !54
  %377 = fadd float %365, %376, !dbg !55
  %378 = fadd float %290, %370, !dbg !56
  %379 = fmul float %371, %371, !dbg !57
  %380 = fmul float %360, %379, !dbg !58
  %381 = fmul float %375, %380, !dbg !59
  %382 = fadd float %378, %381, !dbg !60
  %383 = fsub float %283, %377, !dbg !46
  %384 = fadd float %372, %320, !dbg !50
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !51
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float %384) #3, !dbg !52
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !53
  %388 = fmul float %387, %383, !dbg !54
  %389 = fadd float %377, %388, !dbg !55
  %390 = fadd float %291, %382, !dbg !56
  %391 = fmul float %383, %383, !dbg !57
  %392 = fmul float %372, %391, !dbg !58
  %393 = fmul float %387, %392, !dbg !59
  %394 = fadd float %390, %393, !dbg !60
  %395 = fsub float %284, %389, !dbg !46
  %396 = fadd float %384, %322, !dbg !50
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !51
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %322, float %396) #3, !dbg !52
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !53
  %400 = fmul float %399, %395, !dbg !54
  %401 = fadd float %389, %400, !dbg !55
  %402 = fadd float %292, %394, !dbg !56
  %403 = fmul float %395, %395, !dbg !57
  %404 = fmul float %384, %403, !dbg !58
  %405 = fmul float %399, %404, !dbg !59
  %406 = fadd float %402, %405, !dbg !60
  %407 = bitcast float %401 to i32, !dbg !44
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 16, i32 31), !dbg !44
  %409 = bitcast i32 %408 to float, !dbg !44
  %410 = bitcast float %406 to i32, !dbg !44
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 16, i32 31), !dbg !44
  %412 = bitcast i32 %411 to float, !dbg !44
  %413 = bitcast float %396 to i32, !dbg !44
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 16, i32 31), !dbg !44
  %415 = bitcast i32 %414 to float, !dbg !44
  %416 = fsub float %409, %401, !dbg !46
  %417 = fadd float %396, %415, !dbg !50
  %418 = fcmp oeq float %417, 0.000000e+00, !dbg !51
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %415, float %417) #3, !dbg !52
  %420 = select i1 %418, float 0.000000e+00, float %419, !dbg !53
  %421 = fmul float %420, %416, !dbg !54
  %422 = fadd float %401, %421, !dbg !55
  %423 = fadd float %406, %412, !dbg !56
  %424 = fmul float %416, %416, !dbg !57
  %425 = fmul float %396, %424, !dbg !58
  %426 = fmul float %420, %425, !dbg !59
  %427 = fadd float %423, %426, !dbg !60
  %428 = bitcast float %422 to i32, !dbg !44
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 8, i32 31), !dbg !44
  %430 = bitcast i32 %429 to float, !dbg !44
  %431 = bitcast float %427 to i32, !dbg !44
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 8, i32 31), !dbg !44
  %433 = bitcast i32 %432 to float, !dbg !44
  %434 = bitcast float %417 to i32, !dbg !44
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 8, i32 31), !dbg !44
  %436 = bitcast i32 %435 to float, !dbg !44
  %437 = fsub float %430, %422, !dbg !46
  %438 = fadd float %417, %436, !dbg !50
  %439 = fcmp oeq float %438, 0.000000e+00, !dbg !51
  %440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %436, float %438) #3, !dbg !52
  %441 = select i1 %439, float 0.000000e+00, float %440, !dbg !53
  %442 = fmul float %441, %437, !dbg !54
  %443 = fadd float %422, %442, !dbg !55
  %444 = fadd float %427, %433, !dbg !56
  %445 = fmul float %437, %437, !dbg !57
  %446 = fmul float %417, %445, !dbg !58
  %447 = fmul float %441, %446, !dbg !59
  %448 = fadd float %444, %447, !dbg !60
  %449 = bitcast float %443 to i32, !dbg !44
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 4, i32 31), !dbg !44
  %451 = bitcast i32 %450 to float, !dbg !44
  %452 = bitcast float %448 to i32, !dbg !44
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 4, i32 31), !dbg !44
  %454 = bitcast i32 %453 to float, !dbg !44
  %455 = bitcast float %438 to i32, !dbg !44
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 4, i32 31), !dbg !44
  %457 = bitcast i32 %456 to float, !dbg !44
  %458 = fsub float %451, %443, !dbg !46
  %459 = fadd float %438, %457, !dbg !50
  %460 = fcmp oeq float %459, 0.000000e+00, !dbg !51
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %457, float %459) #3, !dbg !52
  %462 = select i1 %460, float 0.000000e+00, float %461, !dbg !53
  %463 = fmul float %462, %458, !dbg !54
  %464 = fadd float %443, %463, !dbg !55
  %465 = fadd float %448, %454, !dbg !56
  %466 = fmul float %458, %458, !dbg !57
  %467 = fmul float %438, %466, !dbg !58
  %468 = fmul float %462, %467, !dbg !59
  %469 = fadd float %465, %468, !dbg !60
  %470 = bitcast float %464 to i32, !dbg !44
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 2, i32 31), !dbg !44
  %472 = bitcast i32 %471 to float, !dbg !44
  %473 = bitcast float %469 to i32, !dbg !44
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 2, i32 31), !dbg !44
  %475 = bitcast i32 %474 to float, !dbg !44
  %476 = bitcast float %459 to i32, !dbg !44
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 2, i32 31), !dbg !44
  %478 = bitcast i32 %477 to float, !dbg !44
  %479 = fsub float %472, %464, !dbg !46
  %480 = fadd float %459, %478, !dbg !50
  %481 = fcmp oeq float %480, 0.000000e+00, !dbg !51
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %478, float %480) #3, !dbg !52
  %483 = select i1 %481, float 0.000000e+00, float %482, !dbg !53
  %484 = fmul float %483, %479, !dbg !54
  %485 = fadd float %464, %484, !dbg !55
  %486 = fadd float %469, %475, !dbg !56
  %487 = fmul float %479, %479, !dbg !57
  %488 = fmul float %459, %487, !dbg !58
  %489 = fmul float %483, %488, !dbg !59
  %490 = fadd float %486, %489, !dbg !60
  %491 = bitcast float %485 to i32, !dbg !44
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 1, i32 31), !dbg !44
  %493 = bitcast i32 %492 to float, !dbg !44
  %494 = bitcast float %490 to i32, !dbg !44
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 1, i32 31), !dbg !44
  %496 = bitcast i32 %495 to float, !dbg !44
  %497 = bitcast float %480 to i32, !dbg !44
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !44
  %499 = bitcast i32 %498 to float, !dbg !44
  %500 = fsub float %493, %485, !dbg !46
  %501 = fadd float %480, %499, !dbg !50
  %502 = fcmp oeq float %501, 0.000000e+00, !dbg !51
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %499, float %501) #3, !dbg !52
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !53
  %505 = fmul float %504, %500, !dbg !54
  %506 = fadd float %485, %505, !dbg !55
  %507 = fadd float %490, %496, !dbg !56
  %508 = fmul float %500, %500, !dbg !57
  %509 = fmul float %480, %508, !dbg !58
  %510 = fmul float %504, %509, !dbg !59
  %511 = fadd float %507, %510, !dbg !60
  %512 = icmp eq i32 %306, 0, !dbg !44
  %513 = zext nneg i32 %305 to i64, !dbg !44
  %514 = getelementptr float, ptr addrspace(3) @global_smem, i64 %513, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, float %506, i1 %512) #3, !dbg !44
  %515 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %513, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %515, float %511, i1 %512) #3, !dbg !44
  %516 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %513, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, float %501, i1 %512) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %517 = icmp slt i32 %7, 8, !dbg !44
  %518 = sext i32 %7 to i64, !dbg !44
  %519 = getelementptr float, ptr addrspace(3) @global_smem, i64 %518, !dbg !44
  %520 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %519, i1 %517) #3, !dbg !44
  %521 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %518, !dbg !44
  %522 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %521, i1 %517) #3, !dbg !44
  %523 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %518, !dbg !44
  %524 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %523, i1 %517) #3, !dbg !44
  %525 = bitcast float %520 to i32, !dbg !44
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 4, i32 31), !dbg !44
  %527 = bitcast i32 %526 to float, !dbg !44
  %528 = bitcast float %522 to i32, !dbg !44
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 4, i32 31), !dbg !44
  %530 = bitcast i32 %529 to float, !dbg !44
  %531 = bitcast float %524 to i32, !dbg !44
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 4, i32 31), !dbg !44
  %533 = bitcast i32 %532 to float, !dbg !44
  %534 = fsub float %527, %520, !dbg !46
  %535 = fadd float %524, %533, !dbg !50
  %536 = fcmp oeq float %535, 0.000000e+00, !dbg !51
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %533, float %535) #3, !dbg !52
  %538 = select i1 %536, float 0.000000e+00, float %537, !dbg !53
  %539 = fmul float %534, %538, !dbg !54
  %540 = fadd float %520, %539, !dbg !55
  %541 = fadd float %522, %530, !dbg !56
  %542 = fmul float %534, %534, !dbg !57
  %543 = fmul float %524, %542, !dbg !58
  %544 = fmul float %543, %538, !dbg !59
  %545 = fadd float %541, %544, !dbg !60
  %546 = bitcast float %540 to i32, !dbg !44
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 2, i32 31), !dbg !44
  %548 = bitcast i32 %547 to float, !dbg !44
  %549 = bitcast float %545 to i32, !dbg !44
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 2, i32 31), !dbg !44
  %551 = bitcast i32 %550 to float, !dbg !44
  %552 = bitcast float %535 to i32, !dbg !44
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 2, i32 31), !dbg !44
  %554 = bitcast i32 %553 to float, !dbg !44
  %555 = fsub float %548, %540, !dbg !46
  %556 = fadd float %535, %554, !dbg !50
  %557 = fcmp oeq float %556, 0.000000e+00, !dbg !51
  %558 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %554, float %556) #3, !dbg !52
  %559 = select i1 %557, float 0.000000e+00, float %558, !dbg !53
  %560 = fmul float %555, %559, !dbg !54
  %561 = fadd float %540, %560, !dbg !55
  %562 = fadd float %545, %551, !dbg !56
  %563 = fmul float %555, %555, !dbg !57
  %564 = fmul float %535, %563, !dbg !58
  %565 = fmul float %559, %564, !dbg !59
  %566 = fadd float %562, %565, !dbg !60
  %567 = bitcast float %561 to i32, !dbg !44
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 1, i32 31), !dbg !44
  %569 = bitcast i32 %568 to float, !dbg !44
  %570 = bitcast float %566 to i32, !dbg !44
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 1, i32 31), !dbg !44
  %572 = bitcast i32 %571 to float, !dbg !44
  %573 = bitcast float %556 to i32, !dbg !44
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 1, i32 31), !dbg !44
  %575 = bitcast i32 %574 to float, !dbg !44
  %576 = fsub float %569, %561, !dbg !46
  %577 = fadd float %556, %575, !dbg !50
  %578 = fcmp oeq float %577, 0.000000e+00, !dbg !51
  %579 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %575, float %577) #3, !dbg !52
  %580 = select i1 %578, float 0.000000e+00, float %579, !dbg !53
  %581 = fmul float %576, %580, !dbg !54
  %582 = fadd float %561, %581, !dbg !55
  %583 = fadd float %566, %572, !dbg !56
  %584 = fmul float %576, %576, !dbg !57
  %585 = fmul float %556, %584, !dbg !58
  %586 = fmul float %580, %585, !dbg !59
  %587 = fadd float %583, %586, !dbg !60
  %588 = and i32 %7, 7, !dbg !44
  %589 = icmp eq i32 %588, 0, !dbg !44
  %590 = and i1 %517, %589, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, float %582, i1 %590) #3, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, float %587, i1 %590) #3, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %523, float %577, i1 %590) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %591 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !44
  %592 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !44
  %593 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), align 4, !dbg !44
  %594 = sext i32 %8 to i64, !dbg !61
  %595 = getelementptr float, ptr addrspace(1) %1, i64 %594, !dbg !61
  %596 = icmp eq i32 %urem, 0, !dbg !62
  %597 = and i1 %596, %9, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %591, ptr addrspace(1) %595, i1 %597) #3, !dbg !62
  %598 = getelementptr float, ptr addrspace(1) %2, i64 %594, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %592, ptr addrspace(1) %598, i1 %597) #3, !dbg !64
  %599 = getelementptr float, ptr addrspace(1) %3, i64 %594, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %593, ptr addrspace(1) %599, i1 %597) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cu7hbprzja2rzrxl4cwxyo2ruuq4h5jyr5uw26dme5ciscydevqy.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/u7")
!3 = !{ptr @triton__0d1d2d3d4de5e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5e, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5e", linkageName: "triton__0d1d2d3d4de5e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 26, column: 33, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 25, column: 21, scope: !5)
!11 = !DILocation(line: 28, column: 20, scope: !5)
!12 = !DILocation(line: 37, column: 54, scope: !5)
!13 = !DILocation(line: 37, column: 79, scope: !5)
!14 = !DILocation(line: 33, column: 36, scope: !5)
!15 = !DILocation(line: 34, column: 27, scope: !5)
!16 = !DILocation(line: 35, column: 25, scope: !5)
!17 = !DILocation(line: 37, column: 48, scope: !5)
!18 = !DILocation(line: 37, column: 62, scope: !5)
!19 = !DILocation(line: 37, column: 41, scope: !5)
!20 = !DILocation(line: 37, column: 73, scope: !5)
!21 = !DILocation(line: 37, column: 125, scope: !5)
!22 = !DILocation(line: 37, column: 94, scope: !5)
!23 = !DILocation(line: 37, column: 86, scope: !5)
!24 = !DILocation(line: 37, column: 135, scope: !5)
!25 = !DILocation(line: 37, column: 34, scope: !5)
!26 = !DILocation(line: 37, column: 181, scope: !5)
!27 = !DILocation(line: 37, column: 173, scope: !5)
!28 = !DILocation(line: 37, column: 232, scope: !5)
!29 = !DILocation(line: 41, column: 62, scope: !5)
!30 = !DILocation(line: 105, column: 7, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!33 = !DILocation(line: 41, column: 51, scope: !31)
!34 = !DILocation(line: 110, column: 24, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 111, column: 30, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 112, column: 34, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 112, column: 26, scope: !31, inlinedAt: !33)
!38 = !DILocation(line: 113, column: 39, scope: !31, inlinedAt: !33)
!39 = !DILocation(line: 113, column: 31, scope: !31, inlinedAt: !33)
!40 = !DILocation(line: 113, column: 22, scope: !31, inlinedAt: !33)
!41 = !DILocation(line: 43, column: 60, scope: !5)
!42 = !DILocation(line: 44, column: 56, scope: !5)
!43 = !DILocation(line: 45, column: 64, scope: !5)
!44 = !DILocation(line: 131, column: 46, scope: !31, inlinedAt: !45)
!45 = !DILocation(line: 47, column: 41, scope: !31)
!46 = !DILocation(line: 119, column: 21, scope: !47, inlinedAt: !48)
!47 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!48 = !DILocation(line: 131, column: 46, scope: !47, inlinedAt: !49)
!49 = !DILocation(line: 47, column: 41, scope: !47)
!50 = !DILocation(line: 120, column: 28, scope: !47, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 39, scope: !47, inlinedAt: !48)
!52 = !DILocation(line: 121, column: 60, scope: !47, inlinedAt: !48)
!53 = !DILocation(line: 121, column: 49, scope: !47, inlinedAt: !48)
!54 = !DILocation(line: 123, column: 25, scope: !47, inlinedAt: !48)
!55 = !DILocation(line: 123, column: 17, scope: !47, inlinedAt: !48)
!56 = !DILocation(line: 124, column: 15, scope: !47, inlinedAt: !48)
!57 = !DILocation(line: 124, column: 30, scope: !47, inlinedAt: !48)
!58 = !DILocation(line: 124, column: 38, scope: !47, inlinedAt: !48)
!59 = !DILocation(line: 124, column: 49, scope: !47, inlinedAt: !48)
!60 = !DILocation(line: 124, column: 22, scope: !47, inlinedAt: !48)
!61 = !DILocation(line: 52, column: 25, scope: !5)
!62 = !DILocation(line: 52, column: 36, scope: !5)
!63 = !DILocation(line: 53, column: 25, scope: !5)
!64 = !DILocation(line: 53, column: 36, scope: !5)
!65 = !DILocation(line: 54, column: 25, scope: !5)
!66 = !DILocation(line: 54, column: 36, scope: !5)
!67 = !DILocation(line: 54, column: 4, scope: !5)
