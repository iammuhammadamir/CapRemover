; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = and i32 %7, 31, !dbg !8
  %9 = lshr i32 %7, 5, !dbg !8
  %10 = shl i32 %7, 3, !dbg !8
  %11 = and i32 %10, 56, !dbg !8
  %12 = and i32 %9, 7, !dbg !8
  %13 = lshr i32 %8, 4, !dbg !8
  %14 = shl nuw nsw i32 %12, 1, !dbg !8
  %15 = or i32 %14, %13, !dbg !8
  %16 = or i32 %15, 16, !dbg !8
  %17 = or i32 %15, 32, !dbg !8
  %18 = or i32 %15, 48, !dbg !8
  %19 = lshr i32 %8, 3, !dbg !9
  %20 = shl nuw nsw i32 %12, 2, !dbg !9
  %21 = or i32 %20, %19, !dbg !9
  %22 = or i32 %21, 32, !dbg !9
  %23 = shl i32 %7, 2, !dbg !9
  %24 = and i32 %23, 60, !dbg !9
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %27 = add i32 %26, 1, !dbg !12
  %28 = shl i32 %25, 6, !dbg !13
  %29 = mul i32 %28, %27, !dbg !14
  %30 = or i32 %29, %11, !dbg !15
  %31 = or i32 %29, %15, !dbg !15
  %32 = or i32 %29, %16, !dbg !15
  %33 = or i32 %29, %17, !dbg !15
  %34 = or i32 %29, %18, !dbg !15
  %35 = icmp slt i32 %30, 7040, !dbg !16
  %36 = icmp slt i32 %31, 7040, !dbg !16
  %37 = icmp slt i32 %32, 7040, !dbg !16
  %38 = icmp slt i32 %33, 7040, !dbg !16
  %39 = icmp slt i32 %34, 7040, !dbg !16
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %41 = shl i32 %40, 6, !dbg !18
  %42 = or i32 %41, %21, !dbg !19
  %43 = or i32 %41, %22, !dbg !19
  %44 = or i32 %41, %24, !dbg !19
  %45 = icmp slt i32 %42, 2700, !dbg !20
  %46 = icmp slt i32 %43, 2700, !dbg !20
  %47 = icmp slt i32 %44, 2700, !dbg !20
  %48 = srem i32 %31, 320, !dbg !21
  %49 = srem i32 %32, 320, !dbg !21
  %50 = srem i32 %33, 320, !dbg !21
  %51 = srem i32 %34, 320, !dbg !21
  %52 = mul i32 %42, 7040, !dbg !22
  %53 = mul i32 %43, 7040, !dbg !22
  %54 = add i32 %52, %30, !dbg !23
  %55 = add i32 %53, %30, !dbg !23
  %56 = sext i32 %54 to i64, !dbg !24
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %55 to i64, !dbg !24
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = and i1 %45, %35, !dbg !25
  %61 = and i1 %46, %35, !dbg !25
  %62 = and i1 %47, %36, !dbg !25
  %63 = and i1 %47, %37, !dbg !25
  %64 = and i1 %47, %38, !dbg !25
  %65 = and i1 %47, %39, !dbg !25
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %60) #2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %71 = trunc i32 %67 to i16, !dbg !26
  %extelt.offset = lshr i32 %67, 16, !dbg !26
  %72 = trunc i32 %extelt.offset to i16, !dbg !26
  %73 = trunc i32 %68 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %68, 16, !dbg !26
  %74 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %75 = trunc i32 %69 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %69, 16, !dbg !26
  %76 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %77 = trunc i32 %70 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %70, 16, !dbg !26
  %78 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %61) #2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = trunc i32 %80 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %80, 16, !dbg !26
  %85 = trunc i32 %extelt.offset4 to i16, !dbg !26
  %86 = trunc i32 %81 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %81, 16, !dbg !26
  %87 = trunc i32 %extelt.offset5 to i16, !dbg !26
  %88 = trunc i32 %82 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %82, 16, !dbg !26
  %89 = trunc i32 %extelt.offset6 to i16, !dbg !26
  %90 = trunc i32 %83 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %83, 16, !dbg !26
  %91 = trunc i32 %extelt.offset7 to i16, !dbg !26
  %92 = mul nuw nsw i32 %11, 65, !dbg !27
  %93 = add nuw nsw i32 %21, %92, !dbg !27
  %94 = zext nneg i32 %93 to i64, !dbg !27
  %95 = getelementptr half, ptr addrspace(3) @global_smem, i64 %94, !dbg !27
  store i16 %71, ptr addrspace(3) %95, align 2, !dbg !27
  %96 = add nuw nsw i32 %92, 65, !dbg !27
  %97 = add nuw nsw i32 %96, %21, !dbg !27
  %98 = zext nneg i32 %97 to i64, !dbg !27
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !27
  store i16 %72, ptr addrspace(3) %99, align 2, !dbg !27
  %100 = add nuw nsw i32 %92, 130, !dbg !27
  %101 = add nuw nsw i32 %100, %21, !dbg !27
  %102 = zext nneg i32 %101 to i64, !dbg !27
  %103 = getelementptr half, ptr addrspace(3) @global_smem, i64 %102, !dbg !27
  store i16 %73, ptr addrspace(3) %103, align 2, !dbg !27
  %104 = add nuw nsw i32 %92, 195, !dbg !27
  %105 = add nuw nsw i32 %104, %21, !dbg !27
  %106 = zext nneg i32 %105 to i64, !dbg !27
  %107 = getelementptr half, ptr addrspace(3) @global_smem, i64 %106, !dbg !27
  store i16 %74, ptr addrspace(3) %107, align 2, !dbg !27
  %108 = add nuw nsw i32 %92, 260, !dbg !27
  %109 = add nuw nsw i32 %108, %21, !dbg !27
  %110 = zext nneg i32 %109 to i64, !dbg !27
  %111 = getelementptr half, ptr addrspace(3) @global_smem, i64 %110, !dbg !27
  store i16 %75, ptr addrspace(3) %111, align 2, !dbg !27
  %112 = add nuw nsw i32 %92, 325, !dbg !27
  %113 = add nuw nsw i32 %112, %21, !dbg !27
  %114 = zext nneg i32 %113 to i64, !dbg !27
  %115 = getelementptr half, ptr addrspace(3) @global_smem, i64 %114, !dbg !27
  store i16 %76, ptr addrspace(3) %115, align 2, !dbg !27
  %116 = add nuw nsw i32 %92, 390, !dbg !27
  %117 = add nuw nsw i32 %116, %21, !dbg !27
  %118 = zext nneg i32 %117 to i64, !dbg !27
  %119 = getelementptr half, ptr addrspace(3) @global_smem, i64 %118, !dbg !27
  store i16 %77, ptr addrspace(3) %119, align 2, !dbg !27
  %120 = add nuw nsw i32 %92, 455, !dbg !27
  %121 = add nuw nsw i32 %120, %21, !dbg !27
  %122 = zext nneg i32 %121 to i64, !dbg !27
  %123 = getelementptr half, ptr addrspace(3) @global_smem, i64 %122, !dbg !27
  store i16 %78, ptr addrspace(3) %123, align 2, !dbg !27
  %124 = add nuw nsw i32 %22, %92, !dbg !27
  %125 = zext nneg i32 %124 to i64, !dbg !27
  %126 = getelementptr half, ptr addrspace(3) @global_smem, i64 %125, !dbg !27
  store i16 %84, ptr addrspace(3) %126, align 2, !dbg !27
  %127 = add nuw nsw i32 %22, %96, !dbg !27
  %128 = zext nneg i32 %127 to i64, !dbg !27
  %129 = getelementptr half, ptr addrspace(3) @global_smem, i64 %128, !dbg !27
  store i16 %85, ptr addrspace(3) %129, align 2, !dbg !27
  %130 = add nuw nsw i32 %22, %100, !dbg !27
  %131 = zext nneg i32 %130 to i64, !dbg !27
  %132 = getelementptr half, ptr addrspace(3) @global_smem, i64 %131, !dbg !27
  store i16 %86, ptr addrspace(3) %132, align 2, !dbg !27
  %133 = add nuw nsw i32 %22, %104, !dbg !27
  %134 = zext nneg i32 %133 to i64, !dbg !27
  %135 = getelementptr half, ptr addrspace(3) @global_smem, i64 %134, !dbg !27
  store i16 %87, ptr addrspace(3) %135, align 2, !dbg !27
  %136 = add nuw nsw i32 %22, %108, !dbg !27
  %137 = zext nneg i32 %136 to i64, !dbg !27
  %138 = getelementptr half, ptr addrspace(3) @global_smem, i64 %137, !dbg !27
  store i16 %88, ptr addrspace(3) %138, align 2, !dbg !27
  %139 = add nuw nsw i32 %22, %112, !dbg !27
  %140 = zext nneg i32 %139 to i64, !dbg !27
  %141 = getelementptr half, ptr addrspace(3) @global_smem, i64 %140, !dbg !27
  store i16 %89, ptr addrspace(3) %141, align 2, !dbg !27
  %142 = add nuw nsw i32 %22, %116, !dbg !27
  %143 = zext nneg i32 %142 to i64, !dbg !27
  %144 = getelementptr half, ptr addrspace(3) @global_smem, i64 %143, !dbg !27
  store i16 %90, ptr addrspace(3) %144, align 2, !dbg !27
  %145 = add nuw nsw i32 %22, %120, !dbg !27
  %146 = zext nneg i32 %145 to i64, !dbg !27
  %147 = getelementptr half, ptr addrspace(3) @global_smem, i64 %146, !dbg !27
  store i16 %91, ptr addrspace(3) %147, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %148 = mul nuw nsw i32 %15, 65, !dbg !27
  %149 = add nuw nsw i32 %148, %24, !dbg !27
  %150 = zext nneg i32 %149 to i64, !dbg !27
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i64 %150, !dbg !27
  %152 = load half, ptr addrspace(3) %151, align 2, !dbg !27
  %153 = or i32 %24, 1, !dbg !27
  %154 = add nuw nsw i32 %148, %153, !dbg !27
  %155 = zext nneg i32 %154 to i64, !dbg !27
  %156 = getelementptr half, ptr addrspace(3) @global_smem, i64 %155, !dbg !27
  %157 = load half, ptr addrspace(3) %156, align 2, !dbg !27
  %158 = or i32 %24, 2, !dbg !27
  %159 = add nuw nsw i32 %148, %158, !dbg !27
  %160 = zext nneg i32 %159 to i64, !dbg !27
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i64 %160, !dbg !27
  %162 = load half, ptr addrspace(3) %161, align 2, !dbg !27
  %163 = or i32 %24, 3, !dbg !27
  %164 = add nuw nsw i32 %148, %163, !dbg !27
  %165 = zext nneg i32 %164 to i64, !dbg !27
  %166 = getelementptr half, ptr addrspace(3) @global_smem, i64 %165, !dbg !27
  %167 = load half, ptr addrspace(3) %166, align 2, !dbg !27
  %168 = mul nuw nsw i32 %16, 65, !dbg !27
  %169 = add nuw nsw i32 %168, %24, !dbg !27
  %170 = zext nneg i32 %169 to i64, !dbg !27
  %171 = getelementptr half, ptr addrspace(3) @global_smem, i64 %170, !dbg !27
  %172 = load half, ptr addrspace(3) %171, align 2, !dbg !27
  %173 = add nuw nsw i32 %168, %153, !dbg !27
  %174 = zext nneg i32 %173 to i64, !dbg !27
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !27
  %176 = load half, ptr addrspace(3) %175, align 2, !dbg !27
  %177 = add nuw nsw i32 %168, %158, !dbg !27
  %178 = zext nneg i32 %177 to i64, !dbg !27
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i64 %178, !dbg !27
  %180 = load half, ptr addrspace(3) %179, align 2, !dbg !27
  %181 = add nuw nsw i32 %168, %163, !dbg !27
  %182 = zext nneg i32 %181 to i64, !dbg !27
  %183 = getelementptr half, ptr addrspace(3) @global_smem, i64 %182, !dbg !27
  %184 = load half, ptr addrspace(3) %183, align 2, !dbg !27
  %185 = mul nuw nsw i32 %17, 65, !dbg !27
  %186 = add nuw nsw i32 %185, %24, !dbg !27
  %187 = zext nneg i32 %186 to i64, !dbg !27
  %188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %187, !dbg !27
  %189 = load half, ptr addrspace(3) %188, align 2, !dbg !27
  %190 = add nuw nsw i32 %185, %153, !dbg !27
  %191 = zext nneg i32 %190 to i64, !dbg !27
  %192 = getelementptr half, ptr addrspace(3) @global_smem, i64 %191, !dbg !27
  %193 = load half, ptr addrspace(3) %192, align 2, !dbg !27
  %194 = add nuw nsw i32 %185, %158, !dbg !27
  %195 = zext nneg i32 %194 to i64, !dbg !27
  %196 = getelementptr half, ptr addrspace(3) @global_smem, i64 %195, !dbg !27
  %197 = load half, ptr addrspace(3) %196, align 2, !dbg !27
  %198 = add nuw nsw i32 %185, %163, !dbg !27
  %199 = zext nneg i32 %198 to i64, !dbg !27
  %200 = getelementptr half, ptr addrspace(3) @global_smem, i64 %199, !dbg !27
  %201 = load half, ptr addrspace(3) %200, align 2, !dbg !27
  %202 = mul nuw nsw i32 %18, 65, !dbg !27
  %203 = add nuw nsw i32 %202, %24, !dbg !27
  %204 = zext nneg i32 %203 to i64, !dbg !27
  %205 = getelementptr half, ptr addrspace(3) @global_smem, i64 %204, !dbg !27
  %206 = load half, ptr addrspace(3) %205, align 2, !dbg !27
  %207 = add nuw nsw i32 %202, %153, !dbg !27
  %208 = zext nneg i32 %207 to i64, !dbg !27
  %209 = getelementptr half, ptr addrspace(3) @global_smem, i64 %208, !dbg !27
  %210 = load half, ptr addrspace(3) %209, align 2, !dbg !27
  %211 = add nuw nsw i32 %202, %158, !dbg !27
  %212 = zext nneg i32 %211 to i64, !dbg !27
  %213 = getelementptr half, ptr addrspace(3) @global_smem, i64 %212, !dbg !27
  %214 = load half, ptr addrspace(3) %213, align 2, !dbg !27
  %215 = add nuw nsw i32 %202, %163, !dbg !27
  %216 = zext nneg i32 %215 to i64, !dbg !27
  %217 = getelementptr half, ptr addrspace(3) @global_smem, i64 %216, !dbg !27
  %218 = load half, ptr addrspace(3) %217, align 2, !dbg !27
  %219 = sext i32 %48 to i64, !dbg !28
  %220 = getelementptr half, ptr addrspace(1) %1, i64 %219, !dbg !28
  %221 = sext i32 %49 to i64, !dbg !28
  %222 = getelementptr half, ptr addrspace(1) %1, i64 %221, !dbg !28
  %223 = sext i32 %50 to i64, !dbg !28
  %224 = getelementptr half, ptr addrspace(1) %1, i64 %223, !dbg !28
  %225 = sext i32 %51 to i64, !dbg !28
  %226 = getelementptr half, ptr addrspace(1) %1, i64 %225, !dbg !28
  %227 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %220, i1 %36) #2, !dbg !29
  %228 = bitcast i16 %227 to half, !dbg !29
  %229 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %220, i1 %36) #2, !dbg !29
  %230 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %220, i1 %36) #2, !dbg !29
  %231 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %220, i1 %36) #2, !dbg !29
  %232 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %222, i1 %37) #2, !dbg !29
  %233 = bitcast i16 %232 to half, !dbg !29
  %234 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %222, i1 %37) #2, !dbg !29
  %235 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %222, i1 %37) #2, !dbg !29
  %236 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %222, i1 %37) #2, !dbg !29
  %237 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %224, i1 %38) #2, !dbg !29
  %238 = bitcast i16 %237 to half, !dbg !29
  %239 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %224, i1 %38) #2, !dbg !29
  %240 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %224, i1 %38) #2, !dbg !29
  %241 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %224, i1 %38) #2, !dbg !29
  %242 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %226, i1 %39) #2, !dbg !29
  %243 = bitcast i16 %242 to half, !dbg !29
  %244 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %226, i1 %39) #2, !dbg !29
  %245 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %226, i1 %39) #2, !dbg !29
  %246 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %226, i1 %39) #2, !dbg !29
  %247 = fpext half %228 to float, !dbg !30
  %248 = fpext half %233 to float, !dbg !30
  %249 = fpext half %238 to float, !dbg !30
  %250 = fpext half %243 to float, !dbg !30
  %251 = mul i32 %31, 2700, !dbg !31
  %252 = mul i32 %32, 2700, !dbg !31
  %253 = mul i32 %33, 2700, !dbg !31
  %254 = mul i32 %34, 2700, !dbg !31
  %255 = add i32 %251, %44, !dbg !32
  %256 = add i32 %252, %44, !dbg !32
  %257 = add i32 %253, %44, !dbg !32
  %258 = add i32 %254, %44, !dbg !32
  %259 = sext i32 %255 to i64, !dbg !33
  %260 = getelementptr half, ptr addrspace(1) %2, i64 %259, !dbg !33
  %261 = sext i32 %256 to i64, !dbg !33
  %262 = getelementptr half, ptr addrspace(1) %2, i64 %261, !dbg !33
  %263 = sext i32 %257 to i64, !dbg !33
  %264 = getelementptr half, ptr addrspace(1) %2, i64 %263, !dbg !33
  %265 = sext i32 %258 to i64, !dbg !33
  %266 = getelementptr half, ptr addrspace(1) %2, i64 %265, !dbg !33
  %267 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %260, i1 %62) #2, !dbg !34
  %268 = extractvalue { i32, i32 } %267, 0, !dbg !34
  %269 = extractvalue { i32, i32 } %267, 1, !dbg !34
  %extelt.offset8 = lshr i32 %268, 16, !dbg !34
  %extelt.offset9 = lshr i32 %269, 16, !dbg !34
  %270 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %262, i1 %63) #2, !dbg !34
  %271 = extractvalue { i32, i32 } %270, 0, !dbg !34
  %272 = extractvalue { i32, i32 } %270, 1, !dbg !34
  %extelt.offset10 = lshr i32 %271, 16, !dbg !34
  %extelt.offset11 = lshr i32 %272, 16, !dbg !34
  %273 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %264, i1 %64) #2, !dbg !34
  %274 = extractvalue { i32, i32 } %273, 0, !dbg !34
  %275 = extractvalue { i32, i32 } %273, 1, !dbg !34
  %extelt.offset12 = lshr i32 %274, 16, !dbg !34
  %extelt.offset13 = lshr i32 %275, 16, !dbg !34
  %276 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %266, i1 %65) #2, !dbg !34
  %277 = extractvalue { i32, i32 } %276, 0, !dbg !34
  %278 = extractvalue { i32, i32 } %276, 1, !dbg !34
  %extelt.offset14 = lshr i32 %277, 16, !dbg !34
  %extelt.offset15 = lshr i32 %278, 16, !dbg !34
  %279 = getelementptr half, ptr addrspace(1) %3, i64 %259, !dbg !35
  %280 = getelementptr half, ptr addrspace(1) %3, i64 %261, !dbg !35
  %281 = getelementptr half, ptr addrspace(1) %3, i64 %263, !dbg !35
  %282 = getelementptr half, ptr addrspace(1) %3, i64 %265, !dbg !35
  %283 = insertelement <2 x half> poison, half %152, i64 0, !dbg !36
  %284 = insertelement <2 x half> %283, half %157, i64 1, !dbg !36
  %285 = fpext <2 x half> %284 to <2 x float>, !dbg !36
  %286 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !34
  %287 = insertelement <2 x i32> %286, i32 %extelt.offset8, i64 1, !dbg !34
  %288 = trunc <2 x i32> %287 to <2 x i16>, !dbg !34
  %289 = bitcast <2 x i16> %288 to <2 x half>, !dbg !34
  %290 = fpext <2 x half> %289 to <2 x float>, !dbg !37
  %291 = insertelement <2 x float> poison, float %247, i64 0, !dbg !27
  %292 = shufflevector <2 x float> %291, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %293 = fadd <2 x float> %292, %285, !dbg !27
  %294 = fadd <2 x float> %293, %290, !dbg !38
  %295 = fptrunc <2 x float> %294 to <2 x half>, !dbg !39
  %296 = insertelement <2 x half> poison, half %162, i64 0, !dbg !36
  %297 = insertelement <2 x half> %296, half %167, i64 1, !dbg !36
  %298 = fpext <2 x half> %297 to <2 x float>, !dbg !36
  %299 = insertelement <2 x i32> poison, i32 %269, i64 0, !dbg !34
  %300 = insertelement <2 x i32> %299, i32 %extelt.offset9, i64 1, !dbg !34
  %301 = trunc <2 x i32> %300 to <2 x i16>, !dbg !34
  %302 = bitcast <2 x i16> %301 to <2 x half>, !dbg !34
  %303 = fpext <2 x half> %302 to <2 x float>, !dbg !37
  %304 = fadd <2 x float> %292, %298, !dbg !27
  %305 = fadd <2 x float> %304, %303, !dbg !38
  %306 = fptrunc <2 x float> %305 to <2 x half>, !dbg !39
  %307 = insertelement <2 x half> poison, half %172, i64 0, !dbg !36
  %308 = insertelement <2 x half> %307, half %176, i64 1, !dbg !36
  %309 = fpext <2 x half> %308 to <2 x float>, !dbg !36
  %310 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !34
  %311 = insertelement <2 x i32> %310, i32 %extelt.offset10, i64 1, !dbg !34
  %312 = trunc <2 x i32> %311 to <2 x i16>, !dbg !34
  %313 = bitcast <2 x i16> %312 to <2 x half>, !dbg !34
  %314 = fpext <2 x half> %313 to <2 x float>, !dbg !37
  %315 = insertelement <2 x float> poison, float %248, i64 0, !dbg !27
  %316 = shufflevector <2 x float> %315, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %317 = fadd <2 x float> %316, %309, !dbg !27
  %318 = fadd <2 x float> %317, %314, !dbg !38
  %319 = fptrunc <2 x float> %318 to <2 x half>, !dbg !39
  %320 = insertelement <2 x half> poison, half %180, i64 0, !dbg !36
  %321 = insertelement <2 x half> %320, half %184, i64 1, !dbg !36
  %322 = fpext <2 x half> %321 to <2 x float>, !dbg !36
  %323 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !34
  %324 = insertelement <2 x i32> %323, i32 %extelt.offset11, i64 1, !dbg !34
  %325 = trunc <2 x i32> %324 to <2 x i16>, !dbg !34
  %326 = bitcast <2 x i16> %325 to <2 x half>, !dbg !34
  %327 = fpext <2 x half> %326 to <2 x float>, !dbg !37
  %328 = fadd <2 x float> %316, %322, !dbg !27
  %329 = fadd <2 x float> %328, %327, !dbg !38
  %330 = fptrunc <2 x float> %329 to <2 x half>, !dbg !39
  %331 = insertelement <2 x half> poison, half %189, i64 0, !dbg !36
  %332 = insertelement <2 x half> %331, half %193, i64 1, !dbg !36
  %333 = fpext <2 x half> %332 to <2 x float>, !dbg !36
  %334 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !34
  %335 = insertelement <2 x i32> %334, i32 %extelt.offset12, i64 1, !dbg !34
  %336 = trunc <2 x i32> %335 to <2 x i16>, !dbg !34
  %337 = bitcast <2 x i16> %336 to <2 x half>, !dbg !34
  %338 = fpext <2 x half> %337 to <2 x float>, !dbg !37
  %339 = insertelement <2 x float> poison, float %249, i64 0, !dbg !27
  %340 = shufflevector <2 x float> %339, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %341 = fadd <2 x float> %340, %333, !dbg !27
  %342 = fadd <2 x float> %341, %338, !dbg !38
  %343 = fptrunc <2 x float> %342 to <2 x half>, !dbg !39
  %344 = insertelement <2 x half> poison, half %197, i64 0, !dbg !36
  %345 = insertelement <2 x half> %344, half %201, i64 1, !dbg !36
  %346 = fpext <2 x half> %345 to <2 x float>, !dbg !36
  %347 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !34
  %348 = insertelement <2 x i32> %347, i32 %extelt.offset13, i64 1, !dbg !34
  %349 = trunc <2 x i32> %348 to <2 x i16>, !dbg !34
  %350 = bitcast <2 x i16> %349 to <2 x half>, !dbg !34
  %351 = fpext <2 x half> %350 to <2 x float>, !dbg !37
  %352 = fadd <2 x float> %340, %346, !dbg !27
  %353 = fadd <2 x float> %352, %351, !dbg !38
  %354 = fptrunc <2 x float> %353 to <2 x half>, !dbg !39
  %355 = insertelement <2 x half> poison, half %206, i64 0, !dbg !36
  %356 = insertelement <2 x half> %355, half %210, i64 1, !dbg !36
  %357 = fpext <2 x half> %356 to <2 x float>, !dbg !36
  %358 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !34
  %359 = insertelement <2 x i32> %358, i32 %extelt.offset14, i64 1, !dbg !34
  %360 = trunc <2 x i32> %359 to <2 x i16>, !dbg !34
  %361 = bitcast <2 x i16> %360 to <2 x half>, !dbg !34
  %362 = fpext <2 x half> %361 to <2 x float>, !dbg !37
  %363 = insertelement <2 x float> poison, float %250, i64 0, !dbg !27
  %364 = shufflevector <2 x float> %363, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %365 = fadd <2 x float> %364, %357, !dbg !27
  %366 = fadd <2 x float> %365, %362, !dbg !38
  %367 = fptrunc <2 x float> %366 to <2 x half>, !dbg !39
  %368 = insertelement <2 x half> poison, half %214, i64 0, !dbg !36
  %369 = insertelement <2 x half> %368, half %218, i64 1, !dbg !36
  %370 = fpext <2 x half> %369 to <2 x float>, !dbg !36
  %371 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !34
  %372 = insertelement <2 x i32> %371, i32 %extelt.offset15, i64 1, !dbg !34
  %373 = trunc <2 x i32> %372 to <2 x i16>, !dbg !34
  %374 = bitcast <2 x i16> %373 to <2 x half>, !dbg !34
  %375 = fpext <2 x half> %374 to <2 x float>, !dbg !37
  %376 = fadd <2 x float> %364, %370, !dbg !27
  %377 = fadd <2 x float> %376, %375, !dbg !38
  %378 = fptrunc <2 x float> %377 to <2 x half>, !dbg !39
  %379 = bitcast <2 x half> %295 to i32, !dbg !39
  %380 = bitcast <2 x half> %306 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %379, i32 %380, ptr addrspace(1) %279, i1 %62) #2, !dbg !39
  %381 = bitcast <2 x half> %319 to i32, !dbg !39
  %382 = bitcast <2 x half> %330 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %381, i32 %382, ptr addrspace(1) %280, i1 %63) #2, !dbg !39
  %383 = bitcast <2 x half> %343 to i32, !dbg !39
  %384 = bitcast <2 x half> %354 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %383, i32 %384, ptr addrspace(1) %281, i1 %64) #2, !dbg !39
  %385 = bitcast <2 x half> %367 to i32, !dbg !39
  %386 = bitcast <2 x half> %378 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %385, i32 %386, ptr addrspace(1) %282, i1 %65) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cx7ckqfutqse3ilr2z62el5q32t7bwenw24l2vqyqcz2dwwtd4wo.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/x7")
!3 = !{ptr @triton__0d1d2d3d4de5, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5", linkageName: "triton__0d1d2d3d4de5", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 18, scope: !5)
!22 = !DILocation(line: 32, column: 41, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 55, scope: !5)
!26 = !DILocation(line: 32, column: 47, scope: !5)
!27 = !DILocation(line: 35, column: 18, scope: !5)
!28 = !DILocation(line: 33, column: 30, scope: !5)
!29 = !DILocation(line: 33, column: 35, scope: !5)
!30 = !DILocation(line: 33, column: 75, scope: !5)
!31 = !DILocation(line: 34, column: 41, scope: !5)
!32 = !DILocation(line: 34, column: 36, scope: !5)
!33 = !DILocation(line: 34, column: 30, scope: !5)
!34 = !DILocation(line: 34, column: 47, scope: !5)
!35 = !DILocation(line: 37, column: 25, scope: !5)
!36 = !DILocation(line: 32, column: 95, scope: !5)
!37 = !DILocation(line: 34, column: 95, scope: !5)
!38 = !DILocation(line: 36, column: 18, scope: !5)
!39 = !DILocation(line: 37, column: 48, scope: !5)
!40 = !DILocation(line: 37, column: 4, scope: !5)
