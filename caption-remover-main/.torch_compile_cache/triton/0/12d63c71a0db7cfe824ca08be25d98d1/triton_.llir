; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d56789(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) local_unnamed_addr !dbg !5 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %12 = and i32 %11, 127, !dbg !8
  %13 = lshr i32 %11, 7, !dbg !9
  %14 = and i32 %13, 1, !dbg !9
  %15 = or i32 %14, 2, !dbg !9
  %16 = or i32 %14, 4, !dbg !9
  %17 = or i32 %14, 6, !dbg !9
  %18 = or i32 %14, 8, !dbg !9
  %19 = or i32 %14, 10, !dbg !9
  %20 = or i32 %14, 12, !dbg !9
  %21 = or i32 %14, 14, !dbg !9
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %23 = shl i32 %22, 7, !dbg !11
  %24 = or i32 %23, %12, !dbg !12
  %25 = icmp slt i32 %24, %8, !dbg !13
  %.frozen = freeze i32 %24
  %.frozen1 = freeze i32 %5
  %26 = sdiv i32 %.frozen, %.frozen1, !dbg !14
  %27 = mul i32 %26, %.frozen1
  %.decomposed = sub i32 %.frozen, %27
  %28 = mul i32 %7, %6, !dbg !15
  %29 = mul nuw nsw i32 %28, %14, !dbg !16
  %30 = mul i32 %28, %15, !dbg !16
  %31 = mul i32 %28, %16, !dbg !16
  %32 = mul i32 %28, %17, !dbg !16
  %33 = mul i32 %28, %18, !dbg !16
  %34 = mul i32 %28, %19, !dbg !16
  %35 = mul i32 %28, %20, !dbg !16
  %36 = mul i32 %28, %21, !dbg !16
  %37 = mul i32 %28, 10, !dbg !17
  %38 = mul i32 %37, %26, !dbg !18
  %39 = add i32 %38, %.decomposed, !dbg !19
  %40 = add i32 %39, %29, !dbg !20
  %41 = add i32 %39, %30, !dbg !20
  %42 = add i32 %39, %31, !dbg !20
  %43 = add i32 %39, %32, !dbg !20
  %44 = add i32 %39, %33, !dbg !20
  %45 = add i32 %39, %34, !dbg !20
  %46 = add i32 %39, %35, !dbg !20
  %47 = add i32 %39, %36, !dbg !20
  %48 = sext i32 %40 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !21
  %50 = sext i32 %41 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = sext i32 %42 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = sext i32 %43 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !21
  %56 = sext i32 %44 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !21
  %58 = sext i32 %45 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %60 = sext i32 %46 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !21
  %62 = sext i32 %47 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %25, i32 0, i1 %25) #3, !dbg !22
  %65 = bitcast i32 %64 to float, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %25, i32 0, i1 %25) #3, !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %25, i32 0, i1 %25) #3, !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %25, i32 0, i1 %25) #3, !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %25, i32 0, i1 %25) #3, !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 false, i32 0, i1 false) #3, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 false, i32 0, i1 false) #3, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 false, i32 0, i1 false) #3, !dbg !22
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !23
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !23
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !23
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !23
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !23
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %92 = bitcast i32 %91 to float, !dbg !24
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 false, i32 0, i1 false) #3, !dbg !24
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 false, i32 0, i1 false) #3, !dbg !24
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 false, i32 0, i1 false) #3, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !25
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !25
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !25
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !25
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !25
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !25
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !25
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %109 = bitcast i32 %108 to float, !dbg !26
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %115 = bitcast i32 %114 to float, !dbg !26
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 false, i32 0, i1 false) #3, !dbg !26
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 false, i32 0, i1 false) #3, !dbg !26
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 false, i32 0, i1 false) #3, !dbg !26
  %119 = select i1 %25, float %65, float 0.000000e+00, !dbg !27
  %120 = select i1 %25, float %67, float 0.000000e+00, !dbg !27
  %121 = select i1 %25, float %69, float 0.000000e+00, !dbg !27
  %122 = select i1 %25, float %71, float 0.000000e+00, !dbg !27
  %123 = select i1 %25, float %73, float 0.000000e+00, !dbg !27
  %124 = select i1 %25, float %90, float 0.000000e+00, !dbg !28
  %125 = select i1 %25, float %92, float 0.000000e+00, !dbg !28
  %126 = select i1 %25, float %94, float 0.000000e+00, !dbg !28
  %127 = select i1 %25, float %107, float 0.000000e+00, !dbg !29
  %128 = select i1 %25, float %109, float 0.000000e+00, !dbg !29
  %129 = select i1 %25, float %111, float 0.000000e+00, !dbg !29
  %130 = select i1 %25, float %113, float 0.000000e+00, !dbg !29
  %131 = select i1 %25, float %115, float 0.000000e+00, !dbg !29
  %132 = fsub float %120, %119, !dbg !30
  %133 = fadd float %127, %128, !dbg !36
  %134 = fcmp oeq float %133, 0.000000e+00, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %133) #3, !dbg !38
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !39
  %137 = fmul float %132, %136, !dbg !40
  %138 = fadd float %119, %137, !dbg !41
  %139 = fadd float %86, %88, !dbg !42
  %140 = select i1 %25, float %139, float 0.000000e+00, !dbg !42
  %141 = fmul float %132, %132, !dbg !43
  %142 = fmul float %141, %127, !dbg !44
  %143 = fmul float %142, %136, !dbg !45
  %144 = fadd float %140, %143, !dbg !46
  %145 = fsub float %121, %138, !dbg !30
  %146 = fadd float %133, %129, !dbg !36
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !37
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %146) #3, !dbg !38
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !39
  %150 = fmul float %149, %145, !dbg !40
  %151 = fadd float %138, %150, !dbg !41
  %152 = fadd float %124, %144, !dbg !42
  %153 = fmul float %145, %145, !dbg !43
  %154 = fmul float %133, %153, !dbg !44
  %155 = fmul float %149, %154, !dbg !45
  %156 = fadd float %152, %155, !dbg !46
  %157 = fsub float %122, %151, !dbg !30
  %158 = fadd float %146, %130, !dbg !36
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !37
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %158) #3, !dbg !38
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !39
  %162 = fmul float %161, %157, !dbg !40
  %163 = fadd float %151, %162, !dbg !41
  %164 = fadd float %125, %156, !dbg !42
  %165 = fmul float %157, %157, !dbg !43
  %166 = fmul float %146, %165, !dbg !44
  %167 = fmul float %161, %166, !dbg !45
  %168 = fadd float %164, %167, !dbg !46
  %169 = fsub float %123, %163, !dbg !30
  %170 = fadd float %158, %131, !dbg !36
  %171 = fcmp oeq float %170, 0.000000e+00, !dbg !37
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %170) #3, !dbg !38
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !39
  %174 = fmul float %173, %169, !dbg !40
  %175 = fadd float %163, %174, !dbg !41
  %176 = fadd float %126, %168, !dbg !42
  %177 = fmul float %169, %169, !dbg !43
  %178 = fmul float %158, %177, !dbg !44
  %179 = fmul float %173, %178, !dbg !45
  %180 = fadd float %176, %179, !dbg !46
  %181 = fsub float 0.000000e+00, %175, !dbg !30
  %182 = fadd float %170, 0.000000e+00, !dbg !36
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !37
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 0.000000e+00, float %182) #3, !dbg !38
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !39
  %186 = fmul float %185, %181, !dbg !40
  %187 = fadd float %175, %186, !dbg !41
  %188 = fadd float %180, 0.000000e+00, !dbg !42
  %189 = fmul float %181, %181, !dbg !43
  %190 = fmul float %170, %189, !dbg !44
  %191 = fmul float %185, %190, !dbg !45
  %192 = fadd float %188, %191, !dbg !46
  %193 = fsub float 0.000000e+00, %187, !dbg !30
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 0.000000e+00, float %182) #3, !dbg !38
  %195 = select i1 %183, float 0.000000e+00, float %194, !dbg !39
  %196 = fmul float %195, %193, !dbg !40
  %197 = fadd float %187, %196, !dbg !41
  %198 = fmul float %193, %193, !dbg !43
  %199 = fmul float %182, %198, !dbg !44
  %200 = fmul float %195, %199, !dbg !45
  %201 = fadd float %192, %200, !dbg !46
  %202 = fsub float 0.000000e+00, %197, !dbg !30
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 0.000000e+00, float %182) #3, !dbg !38
  %204 = select i1 %183, float 0.000000e+00, float %203, !dbg !39
  %205 = fmul float %204, %202, !dbg !40
  %206 = fadd float %197, %205, !dbg !41
  %207 = fmul float %202, %202, !dbg !43
  %208 = fmul float %182, %207, !dbg !44
  %209 = fmul float %204, %208, !dbg !45
  %210 = fadd float %201, %209, !dbg !46
  %211 = shl nuw nsw i32 %12, 1, !dbg !47
  %212 = or i32 %211, %14, !dbg !47
  %213 = zext nneg i32 %212 to i64, !dbg !47
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i64 %213, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, float %206, i1 true) #3, !dbg !47
  %215 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %213, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, float %210, i1 true) #3, !dbg !47
  %216 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %213, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, float %182, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %217 = icmp slt i32 %11, 256, !dbg !47
  %218 = sext i32 %11 to i64, !dbg !47
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i64 %218, !dbg !47
  %220 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %219, i1 %217) #3, !dbg !47
  %221 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %218, !dbg !47
  %222 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %221, i1 %217) #3, !dbg !47
  %223 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 2048), i64 %218, !dbg !47
  %224 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %223, i1 %217) #3, !dbg !47
  %225 = bitcast float %220 to i32, !dbg !47
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !47
  %227 = bitcast i32 %226 to float, !dbg !47
  %228 = bitcast float %222 to i32, !dbg !47
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !47
  %230 = bitcast i32 %229 to float, !dbg !47
  %231 = bitcast float %224 to i32, !dbg !47
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !47
  %233 = bitcast i32 %232 to float, !dbg !47
  %234 = fsub float %227, %220, !dbg !30
  %235 = fadd float %224, %233, !dbg !36
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !37
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #3, !dbg !38
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !39
  %239 = fmul float %234, %238, !dbg !40
  %240 = fadd float %220, %239, !dbg !41
  %241 = fadd float %222, %230, !dbg !42
  %242 = fmul float %234, %234, !dbg !43
  %243 = fmul float %224, %242, !dbg !44
  %244 = fmul float %243, %238, !dbg !45
  %245 = fadd float %241, %244, !dbg !46
  %246 = and i32 %11, 1, !dbg !47
  %247 = icmp eq i32 %246, 0, !dbg !47
  %248 = and i1 %217, %247, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, float %240, i1 %248) #3, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, float %245, i1 %248) #3, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, float %235, i1 %248) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %249 = zext nneg i32 %211 to i64, !dbg !47
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i64 %249, !dbg !47
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !47
  %252 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 1024), i64 %249, !dbg !47
  %253 = load i32, ptr addrspace(3) %252, align 4, !dbg !47
  %254 = sext i32 %24 to i64, !dbg !49
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !49
  %256 = icmp eq i32 %14, 0, !dbg !50
  %257 = and i1 %256, %25, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %255, i1 %257) #3, !dbg !50
  %258 = getelementptr float, ptr addrspace(1) %4, i64 %254, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %253, ptr addrspace(1) %258, i1 %257) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cp5ablm2ebhe3az6r4imfi3ud55ckxalpmervsbq2sqxpdyqv3qd.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/p5")
!3 = !{ptr @triton__0d1d2d3d4d56789, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d56789, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d56789", linkageName: "triton__0d1d2d3d4d56789", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 26, column: 34, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 33, scope: !5)
!12 = !DILocation(line: 24, column: 23, scope: !5)
!13 = !DILocation(line: 25, column: 21, scope: !5)
!14 = !DILocation(line: 31, column: 20, scope: !5)
!15 = !DILocation(line: 33, column: 40, scope: !5)
!16 = !DILocation(line: 33, column: 44, scope: !5)
!17 = !DILocation(line: 33, column: 58, scope: !5)
!18 = !DILocation(line: 33, column: 62, scope: !5)
!19 = !DILocation(line: 33, column: 36, scope: !5)
!20 = !DILocation(line: 33, column: 51, scope: !5)
!21 = !DILocation(line: 33, column: 30, scope: !5)
!22 = !DILocation(line: 33, column: 68, scope: !5)
!23 = !DILocation(line: 34, column: 30, scope: !5)
!24 = !DILocation(line: 34, column: 68, scope: !5)
!25 = !DILocation(line: 35, column: 30, scope: !5)
!26 = !DILocation(line: 35, column: 68, scope: !5)
!27 = !DILocation(line: 39, column: 41, scope: !5)
!28 = !DILocation(line: 40, column: 41, scope: !5)
!29 = !DILocation(line: 41, column: 41, scope: !5)
!30 = !DILocation(line: 119, column: 21, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!33 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!34 = !DILocation(line: 131, column: 46, scope: !31, inlinedAt: !35)
!35 = !DILocation(line: 42, column: 67, scope: !31)
!36 = !DILocation(line: 120, column: 28, scope: !31, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 39, scope: !31, inlinedAt: !34)
!38 = !DILocation(line: 121, column: 60, scope: !31, inlinedAt: !34)
!39 = !DILocation(line: 121, column: 49, scope: !31, inlinedAt: !34)
!40 = !DILocation(line: 123, column: 25, scope: !31, inlinedAt: !34)
!41 = !DILocation(line: 123, column: 17, scope: !31, inlinedAt: !34)
!42 = !DILocation(line: 124, column: 15, scope: !31, inlinedAt: !34)
!43 = !DILocation(line: 124, column: 30, scope: !31, inlinedAt: !34)
!44 = !DILocation(line: 124, column: 38, scope: !31, inlinedAt: !34)
!45 = !DILocation(line: 124, column: 49, scope: !31, inlinedAt: !34)
!46 = !DILocation(line: 124, column: 22, scope: !31, inlinedAt: !34)
!47 = !DILocation(line: 131, column: 46, scope: !33, inlinedAt: !48)
!48 = !DILocation(line: 42, column: 67, scope: !33)
!49 = !DILocation(line: 46, column: 25, scope: !5)
!50 = !DILocation(line: 46, column: 37, scope: !5)
!51 = !DILocation(line: 47, column: 25, scope: !5)
!52 = !DILocation(line: 47, column: 37, scope: !5)
!53 = !DILocation(line: 47, column: 4, scope: !5)
