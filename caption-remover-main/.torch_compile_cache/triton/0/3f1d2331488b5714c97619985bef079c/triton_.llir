; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d345de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %8, 255, !dbg !8
  %9 = shl nuw nsw i32 %urem, 1, !dbg !8
  %10 = or i32 %urem, 256, !dbg !8
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %12 = icmp slt i32 %11, 704, !dbg !10
  %13 = mul i32 %3, 10, !dbg !11
  %14 = mul i32 %13, %4, !dbg !12
  %15 = mul i32 %14, %11, !dbg !13
  %16 = icmp sgt i32 %6, 0, !dbg !14
  %17 = zext nneg i32 %urem to i64
  br i1 %16, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !14

.._crit_edge_crit_edge:                           ; preds = %7
  %.pre73 = zext nneg i32 %10 to i64, !dbg !14
  %.pre75 = zext nneg i32 %9 to i64, !dbg !14
  br label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7
  %18 = getelementptr float, ptr addrspace(3) @global_smem, i64 %17
  %19 = zext nneg i32 %10 to i64
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19
  %21 = zext nneg i32 %9 to i64
  %22 = getelementptr float, ptr addrspace(3) @global_smem, i64 %21
  %23 = getelementptr inbounds <2 x float>, ptr addrspace(3) %22, i64 0, i64 1
  %24 = insertelement <16 x i1> poison, i1 %12, i64 0, !dbg !15
  %25 = shufflevector <16 x i1> %24, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !15
  %26 = insertelement <16 x i32> poison, i32 %6, i64 0, !dbg !16
  %27 = shufflevector <16 x i32> %26, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !16
  %28 = insertelement <4 x i32> <i32 poison, i32 512, i32 768, i32 1024>, i32 %10, i64 0, !dbg !17
  br label %29, !dbg !14

29:                                               ; preds = %.lr.ph, %._crit_edge24
  %30 = phi i32 [ 0, %.lr.ph ], [ %171, %._crit_edge24 ]
  %31 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %170, %._crit_edge24 ]
  %32 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %169, %._crit_edge24 ]
  %33 = or i32 %30, %9, !dbg !17
  %34 = or i32 %33, 1, !dbg !17
  %35 = or i32 %33, 512, !dbg !17
  %36 = or i32 %33, 513, !dbg !17
  %37 = or i32 %33, 1024, !dbg !17
  %38 = or i32 %33, 1025, !dbg !17
  %39 = or i32 %33, 1536, !dbg !17
  %40 = or i32 %33, 1537, !dbg !17
  %41 = or i32 %30, %urem, !dbg !17
  %42 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !17
  %43 = insertelement <4 x i32> %42, i32 %41, i64 1, !dbg !17
  %44 = shufflevector <4 x i32> %43, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 1>, !dbg !17
  %45 = or <4 x i32> %44, %28, !dbg !17
  %46 = or i32 %41, 1280, !dbg !17
  %47 = or i32 %41, 1536, !dbg !17
  %48 = or i32 %41, 1792, !dbg !17
  %49 = insertelement <16 x i32> poison, i32 %33, i64 0, !dbg !16
  %50 = insertelement <16 x i32> %49, i32 %34, i64 1, !dbg !16
  %51 = insertelement <16 x i32> %50, i32 %35, i64 2, !dbg !16
  %52 = insertelement <16 x i32> %51, i32 %36, i64 3, !dbg !16
  %53 = insertelement <16 x i32> %52, i32 %37, i64 4, !dbg !16
  %54 = insertelement <16 x i32> %53, i32 %38, i64 5, !dbg !16
  %55 = insertelement <16 x i32> %54, i32 %39, i64 6, !dbg !16
  %56 = insertelement <16 x i32> %55, i32 %40, i64 7, !dbg !16
  %57 = insertelement <16 x i32> %56, i32 %41, i64 8, !dbg !16
  %58 = shufflevector <4 x i32> %45, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !16
  %59 = shufflevector <16 x i32> %57, <16 x i32> %58, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison>, !dbg !16
  %60 = insertelement <16 x i32> %59, i32 %46, i64 13, !dbg !16
  %61 = insertelement <16 x i32> %60, i32 %47, i64 14, !dbg !16
  %62 = insertelement <16 x i32> %61, i32 %48, i64 15, !dbg !16
  %63 = icmp slt <16 x i32> %62, %27, !dbg !16
  %64 = add i32 %33, %15, !dbg !18
  %65 = add i32 %34, %15, !dbg !18
  %66 = add i32 %35, %15, !dbg !18
  %67 = add i32 %36, %15, !dbg !18
  %68 = add i32 %37, %15, !dbg !18
  %69 = add i32 %38, %15, !dbg !18
  %70 = add i32 %39, %15, !dbg !18
  %71 = add i32 %40, %15, !dbg !18
  %72 = sext i32 %64 to i64, !dbg !19
  %73 = getelementptr half, ptr addrspace(1) %0, i64 %72, !dbg !19
  %74 = sext i32 %65 to i64, !dbg !19
  %75 = getelementptr half, ptr addrspace(1) %0, i64 %74, !dbg !19
  %76 = sext i32 %66 to i64, !dbg !19
  %77 = getelementptr half, ptr addrspace(1) %0, i64 %76, !dbg !19
  %78 = sext i32 %67 to i64, !dbg !19
  %79 = getelementptr half, ptr addrspace(1) %0, i64 %78, !dbg !19
  %80 = sext i32 %68 to i64, !dbg !19
  %81 = getelementptr half, ptr addrspace(1) %0, i64 %80, !dbg !19
  %82 = sext i32 %69 to i64, !dbg !19
  %83 = getelementptr half, ptr addrspace(1) %0, i64 %82, !dbg !19
  %84 = sext i32 %70 to i64, !dbg !19
  %85 = getelementptr half, ptr addrspace(1) %0, i64 %84, !dbg !19
  %86 = sext i32 %71 to i64, !dbg !19
  %87 = getelementptr half, ptr addrspace(1) %0, i64 %86, !dbg !19
  %88 = and <16 x i1> %25, %63, !dbg !15
  %89 = extractelement <16 x i1> %88, i64 0, !dbg !20
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %73, i1 %89, i16 0, i1 %89) #3, !dbg !20
  %91 = extractelement <16 x i1> %88, i64 1, !dbg !20
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %75, i1 %91, i16 0, i1 %91) #3, !dbg !20
  %93 = extractelement <16 x i1> %88, i64 2, !dbg !20
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %77, i1 %93, i16 0, i1 %93) #3, !dbg !20
  %95 = extractelement <16 x i1> %88, i64 3, !dbg !20
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %79, i1 %95, i16 0, i1 %95) #3, !dbg !20
  %97 = extractelement <16 x i1> %88, i64 4, !dbg !20
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %81, i1 %97, i16 0, i1 %97) #3, !dbg !20
  %99 = extractelement <16 x i1> %88, i64 5, !dbg !20
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %83, i1 %99, i16 0, i1 %99) #3, !dbg !20
  %101 = extractelement <16 x i1> %88, i64 6, !dbg !20
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %85, i1 %101, i16 0, i1 %101) #3, !dbg !20
  %103 = extractelement <16 x i1> %88, i64 7, !dbg !20
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %87, i1 %103, i16 0, i1 %103) #3, !dbg !20
  %105 = insertelement <8 x i16> poison, i16 %90, i64 0, !dbg !20
  %106 = insertelement <8 x i16> %105, i16 %92, i64 1, !dbg !20
  %107 = insertelement <8 x i16> %106, i16 %94, i64 2, !dbg !20
  %108 = insertelement <8 x i16> %107, i16 %96, i64 3, !dbg !20
  %109 = insertelement <8 x i16> %108, i16 %98, i64 4, !dbg !20
  %110 = insertelement <8 x i16> %109, i16 %100, i64 5, !dbg !20
  %111 = insertelement <8 x i16> %110, i16 %102, i64 6, !dbg !20
  %112 = insertelement <8 x i16> %111, i16 %104, i64 7, !dbg !20
  %113 = bitcast <8 x i16> %112 to <8 x half>, !dbg !20
  %114 = fpext <8 x half> %113 to <8 x float>, !dbg !21
  %115 = icmp eq i32 %30, 0, !dbg !22
  br i1 %115, label %._crit_edge24, label %116, !dbg !23

116:                                              ; preds = %29
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %117 = shufflevector <16 x float> %31, <16 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !27
  %118 = fadd <8 x float> %117, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, !dbg !27
  %119 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> zeroinitializer, !dbg !27
  store <1 x float> %119, ptr addrspace(3) %18, align 4, !dbg !27
  %120 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> <i32 1>, !dbg !27
  store <1 x float> %120, ptr addrspace(3) %20, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %121 = load float, ptr addrspace(3) %22, align 8, !dbg !27
  %122 = load float, ptr addrspace(3) %23, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %123 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> <i32 2>, !dbg !27
  store <1 x float> %123, ptr addrspace(3) %18, align 4, !dbg !27
  %124 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> <i32 3>, !dbg !27
  store <1 x float> %124, ptr addrspace(3) %20, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %125 = load float, ptr addrspace(3) %22, align 8, !dbg !27
  %126 = load float, ptr addrspace(3) %23, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %127 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> <i32 4>, !dbg !27
  store <1 x float> %127, ptr addrspace(3) %18, align 4, !dbg !27
  %128 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> <i32 5>, !dbg !27
  store <1 x float> %128, ptr addrspace(3) %20, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %129 = load float, ptr addrspace(3) %22, align 8, !dbg !27
  %130 = load float, ptr addrspace(3) %23, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %131 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> <i32 6>, !dbg !27
  store <1 x float> %131, ptr addrspace(3) %18, align 4, !dbg !27
  %132 = shufflevector <8 x float> %118, <8 x float> poison, <1 x i32> <i32 7>, !dbg !27
  store <1 x float> %132, ptr addrspace(3) %20, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %133 = load float, ptr addrspace(3) %22, align 8, !dbg !27
  %134 = load float, ptr addrspace(3) %23, align 4, !dbg !27
  %135 = fsub <8 x float> %114, %32, !dbg !28
  %136 = extractelement <8 x float> %135, i64 0, !dbg !29
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %121) #3, !dbg !29
  %138 = extractelement <8 x float> %135, i64 1, !dbg !29
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %122) #3, !dbg !29
  %140 = extractelement <8 x float> %135, i64 2, !dbg !29
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %125) #3, !dbg !29
  %142 = extractelement <8 x float> %135, i64 3, !dbg !29
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %126) #3, !dbg !29
  %144 = extractelement <8 x float> %135, i64 4, !dbg !29
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %129) #3, !dbg !29
  %146 = extractelement <8 x float> %135, i64 5, !dbg !29
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %130) #3, !dbg !29
  %148 = extractelement <8 x float> %135, i64 6, !dbg !29
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %133) #3, !dbg !29
  %150 = extractelement <8 x float> %135, i64 7, !dbg !29
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %134) #3, !dbg !29
  %152 = insertelement <8 x float> poison, float %137, i64 0, !dbg !30
  %153 = insertelement <8 x float> %152, float %139, i64 1, !dbg !30
  %154 = insertelement <8 x float> %153, float %141, i64 2, !dbg !30
  %155 = insertelement <8 x float> %154, float %143, i64 3, !dbg !30
  %156 = insertelement <8 x float> %155, float %145, i64 4, !dbg !30
  %157 = insertelement <8 x float> %156, float %147, i64 5, !dbg !30
  %158 = insertelement <8 x float> %157, float %149, i64 6, !dbg !30
  %159 = insertelement <8 x float> %158, float %151, i64 7, !dbg !30
  %160 = fadd <8 x float> %32, %159, !dbg !30
  %161 = fsub <8 x float> %114, %160, !dbg !31
  %162 = fmul <8 x float> %135, %161, !dbg !32
  %163 = shufflevector <16 x float> %31, <16 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !33
  %164 = fadd <8 x float> %163, %162, !dbg !33
  %165 = shufflevector <8 x float> %164, <8 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %._crit_edge24, !dbg !23

._crit_edge24:                                    ; preds = %29, %116
  %166 = phi <16 x float> [ %165, %116 ], [ <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29 ]
  %167 = phi <8 x float> [ %160, %116 ], [ %114, %29 ]
  %168 = shufflevector <16 x i1> %88, <16 x i1> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !34
  %169 = select <8 x i1> %168, <8 x float> %167, <8 x float> %32, !dbg !34
  %170 = select <16 x i1> %88, <16 x float> %166, <16 x float> %31, !dbg !35
  %171 = add i32 %30, 2048, !dbg !14
  %172 = icmp slt i32 %171, %6, !dbg !14
  br i1 %172, label %29, label %._crit_edge.loopexit, !dbg !14

._crit_edge.loopexit:                             ; preds = %._crit_edge24
  %173 = extractelement <8 x float> %169, i64 7, !dbg !14
  %174 = extractelement <8 x float> %169, i64 6, !dbg !14
  %175 = extractelement <8 x float> %169, i64 5, !dbg !14
  %176 = extractelement <8 x float> %169, i64 4, !dbg !14
  %177 = extractelement <8 x float> %169, i64 3, !dbg !14
  %178 = extractelement <8 x float> %169, i64 2, !dbg !14
  %179 = extractelement <8 x float> %169, i64 1, !dbg !14
  %180 = extractelement <8 x float> %169, i64 0, !dbg !14
  br label %._crit_edge, !dbg !8

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi76 = phi i64 [ %.pre75, %.._crit_edge_crit_edge ], [ %21, %._crit_edge.loopexit ], !dbg !14
  %.pre-phi74 = phi i64 [ %.pre73, %.._crit_edge_crit_edge ], [ %19, %._crit_edge.loopexit ], !dbg !14
  %181 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %180, %._crit_edge.loopexit ]
  %182 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %179, %._crit_edge.loopexit ]
  %183 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %178, %._crit_edge.loopexit ]
  %184 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %177, %._crit_edge.loopexit ]
  %185 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %176, %._crit_edge.loopexit ]
  %186 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %175, %._crit_edge.loopexit ]
  %187 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %174, %._crit_edge.loopexit ]
  %188 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %173, %._crit_edge.loopexit ]
  %189 = phi <16 x float> [ zeroinitializer, %.._crit_edge_crit_edge ], [ %170, %._crit_edge.loopexit ]
  %190 = lshr i32 %8, 5, !dbg !8
  %191 = and i32 %190, 7, !dbg !8
  %192 = and i32 %8, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %17, !dbg !14
  %194 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 8>, !dbg !14
  store <1 x float> %194, ptr addrspace(3) %193, align 4, !dbg !14
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi74, !dbg !14
  %196 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 9>, !dbg !14
  store <1 x float> %196, ptr addrspace(3) %195, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi76, !dbg !14
  %198 = load float, ptr addrspace(3) %197, align 8, !dbg !14
  %199 = getelementptr inbounds <2 x float>, ptr addrspace(3) %197, i64 0, i64 1, !dbg !14
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %201 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 10>, !dbg !14
  store <1 x float> %201, ptr addrspace(3) %193, align 4, !dbg !14
  %202 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 11>, !dbg !14
  store <1 x float> %202, ptr addrspace(3) %195, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %203 = load float, ptr addrspace(3) %197, align 8, !dbg !14
  %204 = load float, ptr addrspace(3) %199, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %205 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 12>, !dbg !14
  store <1 x float> %205, ptr addrspace(3) %193, align 4, !dbg !14
  %206 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 13>, !dbg !14
  store <1 x float> %206, ptr addrspace(3) %195, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %207 = load float, ptr addrspace(3) %197, align 8, !dbg !14
  %208 = load float, ptr addrspace(3) %199, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %209 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 14>, !dbg !14
  store <1 x float> %209, ptr addrspace(3) %193, align 4, !dbg !14
  %210 = shufflevector <16 x float> %189, <16 x float> poison, <1 x i32> <i32 15>, !dbg !14
  store <1 x float> %210, ptr addrspace(3) %195, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %211 = load float, ptr addrspace(3) %197, align 8, !dbg !14
  %212 = load float, ptr addrspace(3) %199, align 4, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %213 = fsub float %182, %181, !dbg !38
  %214 = fadd float %198, %200, !dbg !42
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !43
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %214) #3, !dbg !44
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !45
  %218 = fmul float %213, %217, !dbg !46
  %219 = fadd float %181, %218, !dbg !47
  %shift = shufflevector <16 x float> %189, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %220 = fadd <16 x float> %189, %shift, !dbg !48
  %221 = extractelement <16 x float> %220, i64 0, !dbg !48
  %222 = fmul float %213, %213, !dbg !49
  %223 = fmul float %222, %198, !dbg !50
  %224 = fmul float %223, %217, !dbg !51
  %225 = fadd float %221, %224, !dbg !52
  %226 = fsub float %183, %219, !dbg !38
  %227 = fadd float %214, %203, !dbg !42
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !43
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %227) #3, !dbg !44
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !45
  %231 = fmul float %230, %226, !dbg !46
  %232 = fadd float %219, %231, !dbg !47
  %233 = extractelement <16 x float> %189, i64 2, !dbg !48
  %234 = fadd float %233, %225, !dbg !48
  %235 = fmul float %226, %226, !dbg !49
  %236 = fmul float %214, %235, !dbg !50
  %237 = fmul float %230, %236, !dbg !51
  %238 = fadd float %234, %237, !dbg !52
  %239 = fsub float %184, %232, !dbg !38
  %240 = fadd float %204, %227, !dbg !42
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !43
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %240) #3, !dbg !44
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !45
  %244 = fmul float %243, %239, !dbg !46
  %245 = fadd float %232, %244, !dbg !47
  %246 = extractelement <16 x float> %189, i64 3, !dbg !48
  %247 = fadd float %246, %238, !dbg !48
  %248 = fmul float %239, %239, !dbg !49
  %249 = fmul float %227, %248, !dbg !50
  %250 = fmul float %243, %249, !dbg !51
  %251 = fadd float %247, %250, !dbg !52
  %252 = fsub float %185, %245, !dbg !38
  %253 = fadd float %240, %207, !dbg !42
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !43
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %253) #3, !dbg !44
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !45
  %257 = fmul float %256, %252, !dbg !46
  %258 = fadd float %245, %257, !dbg !47
  %259 = extractelement <16 x float> %189, i64 4, !dbg !48
  %260 = fadd float %259, %251, !dbg !48
  %261 = fmul float %252, %252, !dbg !49
  %262 = fmul float %240, %261, !dbg !50
  %263 = fmul float %256, %262, !dbg !51
  %264 = fadd float %260, %263, !dbg !52
  %265 = fsub float %186, %258, !dbg !38
  %266 = fadd float %208, %253, !dbg !42
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !43
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %266) #3, !dbg !44
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !45
  %270 = fmul float %269, %265, !dbg !46
  %271 = fadd float %258, %270, !dbg !47
  %272 = extractelement <16 x float> %189, i64 5, !dbg !48
  %273 = fadd float %272, %264, !dbg !48
  %274 = fmul float %265, %265, !dbg !49
  %275 = fmul float %253, %274, !dbg !50
  %276 = fmul float %269, %275, !dbg !51
  %277 = fadd float %273, %276, !dbg !52
  %278 = fsub float %187, %271, !dbg !38
  %279 = fadd float %266, %211, !dbg !42
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !43
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %279) #3, !dbg !44
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !45
  %283 = fmul float %282, %278, !dbg !46
  %284 = fadd float %271, %283, !dbg !47
  %285 = extractelement <16 x float> %189, i64 6, !dbg !48
  %286 = fadd float %285, %277, !dbg !48
  %287 = fmul float %278, %278, !dbg !49
  %288 = fmul float %266, %287, !dbg !50
  %289 = fmul float %282, %288, !dbg !51
  %290 = fadd float %286, %289, !dbg !52
  %291 = fsub float %188, %284, !dbg !38
  %292 = fadd float %212, %279, !dbg !42
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !43
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %292) #3, !dbg !44
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !45
  %296 = fmul float %295, %291, !dbg !46
  %297 = fadd float %284, %296, !dbg !47
  %298 = extractelement <16 x float> %189, i64 7, !dbg !48
  %299 = fadd float %298, %290, !dbg !48
  %300 = fmul float %291, %291, !dbg !49
  %301 = fmul float %279, %300, !dbg !50
  %302 = fmul float %295, %301, !dbg !51
  %303 = fadd float %299, %302, !dbg !52
  %304 = bitcast float %297 to i32, !dbg !36
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 16, i32 31), !dbg !36
  %306 = bitcast i32 %305 to float, !dbg !36
  %307 = bitcast float %303 to i32, !dbg !36
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 16, i32 31), !dbg !36
  %309 = bitcast i32 %308 to float, !dbg !36
  %310 = bitcast float %292 to i32, !dbg !36
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 16, i32 31), !dbg !36
  %312 = bitcast i32 %311 to float, !dbg !36
  %313 = fsub float %306, %297, !dbg !38
  %314 = fadd float %292, %312, !dbg !42
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !43
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float %314) #3, !dbg !44
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !45
  %318 = fmul float %317, %313, !dbg !46
  %319 = fadd float %297, %318, !dbg !47
  %320 = fadd float %303, %309, !dbg !48
  %321 = fmul float %313, %313, !dbg !49
  %322 = fmul float %292, %321, !dbg !50
  %323 = fmul float %317, %322, !dbg !51
  %324 = fadd float %320, %323, !dbg !52
  %325 = bitcast float %319 to i32, !dbg !36
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 8, i32 31), !dbg !36
  %327 = bitcast i32 %326 to float, !dbg !36
  %328 = bitcast float %324 to i32, !dbg !36
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 8, i32 31), !dbg !36
  %330 = bitcast i32 %329 to float, !dbg !36
  %331 = bitcast float %314 to i32, !dbg !36
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 8, i32 31), !dbg !36
  %333 = bitcast i32 %332 to float, !dbg !36
  %334 = fsub float %327, %319, !dbg !38
  %335 = fadd float %314, %333, !dbg !42
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !43
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %335) #3, !dbg !44
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !45
  %339 = fmul float %338, %334, !dbg !46
  %340 = fadd float %319, %339, !dbg !47
  %341 = fadd float %324, %330, !dbg !48
  %342 = fmul float %334, %334, !dbg !49
  %343 = fmul float %314, %342, !dbg !50
  %344 = fmul float %338, %343, !dbg !51
  %345 = fadd float %341, %344, !dbg !52
  %346 = bitcast float %340 to i32, !dbg !36
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 4, i32 31), !dbg !36
  %348 = bitcast i32 %347 to float, !dbg !36
  %349 = bitcast float %345 to i32, !dbg !36
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 4, i32 31), !dbg !36
  %351 = bitcast i32 %350 to float, !dbg !36
  %352 = bitcast float %335 to i32, !dbg !36
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 4, i32 31), !dbg !36
  %354 = bitcast i32 %353 to float, !dbg !36
  %355 = fsub float %348, %340, !dbg !38
  %356 = fadd float %335, %354, !dbg !42
  %357 = fcmp oeq float %356, 0.000000e+00, !dbg !43
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %356) #3, !dbg !44
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !45
  %360 = fmul float %359, %355, !dbg !46
  %361 = fadd float %340, %360, !dbg !47
  %362 = fadd float %345, %351, !dbg !48
  %363 = fmul float %355, %355, !dbg !49
  %364 = fmul float %335, %363, !dbg !50
  %365 = fmul float %359, %364, !dbg !51
  %366 = fadd float %362, %365, !dbg !52
  %367 = bitcast float %361 to i32, !dbg !36
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !36
  %369 = bitcast i32 %368 to float, !dbg !36
  %370 = bitcast float %366 to i32, !dbg !36
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !36
  %372 = bitcast i32 %371 to float, !dbg !36
  %373 = bitcast float %356 to i32, !dbg !36
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 2, i32 31), !dbg !36
  %375 = bitcast i32 %374 to float, !dbg !36
  %376 = fsub float %369, %361, !dbg !38
  %377 = fadd float %356, %375, !dbg !42
  %378 = fcmp oeq float %377, 0.000000e+00, !dbg !43
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float %377) #3, !dbg !44
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !45
  %381 = fmul float %380, %376, !dbg !46
  %382 = fadd float %361, %381, !dbg !47
  %383 = fadd float %366, %372, !dbg !48
  %384 = fmul float %376, %376, !dbg !49
  %385 = fmul float %356, %384, !dbg !50
  %386 = fmul float %380, %385, !dbg !51
  %387 = fadd float %383, %386, !dbg !52
  %388 = bitcast float %382 to i32, !dbg !36
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !36
  %390 = bitcast i32 %389 to float, !dbg !36
  %391 = bitcast float %387 to i32, !dbg !36
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 1, i32 31), !dbg !36
  %393 = bitcast i32 %392 to float, !dbg !36
  %394 = bitcast float %377 to i32, !dbg !36
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 1, i32 31), !dbg !36
  %396 = bitcast i32 %395 to float, !dbg !36
  %397 = fsub float %390, %382, !dbg !38
  %398 = fadd float %377, %396, !dbg !42
  %399 = fcmp oeq float %398, 0.000000e+00, !dbg !43
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float %398) #3, !dbg !44
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !45
  %402 = fmul float %401, %397, !dbg !46
  %403 = fadd float %382, %402, !dbg !47
  %404 = fadd float %387, %393, !dbg !48
  %405 = fmul float %397, %397, !dbg !49
  %406 = fmul float %377, %405, !dbg !50
  %407 = fmul float %401, %406, !dbg !51
  %408 = fadd float %404, %407, !dbg !52
  %409 = icmp eq i32 %192, 0, !dbg !36
  %410 = zext nneg i32 %191 to i64, !dbg !36
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i64 %410, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, float %403, i1 %409) #3, !dbg !36
  %412 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %410, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, float %408, i1 %409) #3, !dbg !36
  %413 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %410, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, float %398, i1 %409) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %414 = icmp slt i32 %8, 8, !dbg !36
  %415 = sext i32 %8 to i64, !dbg !36
  %416 = getelementptr float, ptr addrspace(3) @global_smem, i64 %415, !dbg !36
  %417 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %416, i1 %414) #3, !dbg !36
  %418 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %415, !dbg !36
  %419 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %418, i1 %414) #3, !dbg !36
  %420 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %415, !dbg !36
  %421 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %420, i1 %414) #3, !dbg !36
  %422 = bitcast float %417 to i32, !dbg !36
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 4, i32 31), !dbg !36
  %424 = bitcast i32 %423 to float, !dbg !36
  %425 = bitcast float %419 to i32, !dbg !36
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 4, i32 31), !dbg !36
  %427 = bitcast i32 %426 to float, !dbg !36
  %428 = bitcast float %421 to i32, !dbg !36
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 4, i32 31), !dbg !36
  %430 = bitcast i32 %429 to float, !dbg !36
  %431 = fsub float %424, %417, !dbg !38
  %432 = fadd float %421, %430, !dbg !42
  %433 = fcmp oeq float %432, 0.000000e+00, !dbg !43
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float %432) #3, !dbg !44
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !45
  %436 = fmul float %431, %435, !dbg !46
  %437 = fadd float %417, %436, !dbg !47
  %438 = fadd float %419, %427, !dbg !48
  %439 = fmul float %431, %431, !dbg !49
  %440 = fmul float %421, %439, !dbg !50
  %441 = fmul float %440, %435, !dbg !51
  %442 = fadd float %438, %441, !dbg !52
  %443 = bitcast float %437 to i32, !dbg !36
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 2, i32 31), !dbg !36
  %445 = bitcast i32 %444 to float, !dbg !36
  %446 = bitcast float %442 to i32, !dbg !36
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 2, i32 31), !dbg !36
  %448 = bitcast i32 %447 to float, !dbg !36
  %449 = bitcast float %432 to i32, !dbg !36
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 2, i32 31), !dbg !36
  %451 = bitcast i32 %450 to float, !dbg !36
  %452 = fsub float %445, %437, !dbg !38
  %453 = fadd float %432, %451, !dbg !42
  %454 = fcmp oeq float %453, 0.000000e+00, !dbg !43
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %451, float %453) #3, !dbg !44
  %456 = select i1 %454, float 0.000000e+00, float %455, !dbg !45
  %457 = fmul float %452, %456, !dbg !46
  %458 = fadd float %437, %457, !dbg !47
  %459 = fadd float %442, %448, !dbg !48
  %460 = fmul float %452, %452, !dbg !49
  %461 = fmul float %432, %460, !dbg !50
  %462 = fmul float %456, %461, !dbg !51
  %463 = fadd float %459, %462, !dbg !52
  %464 = bitcast float %458 to i32, !dbg !36
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 1, i32 31), !dbg !36
  %466 = bitcast i32 %465 to float, !dbg !36
  %467 = bitcast float %463 to i32, !dbg !36
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 1, i32 31), !dbg !36
  %469 = bitcast i32 %468 to float, !dbg !36
  %470 = bitcast float %453 to i32, !dbg !36
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 1, i32 31), !dbg !36
  %472 = bitcast i32 %471 to float, !dbg !36
  %473 = fsub float %466, %458, !dbg !38
  %474 = fadd float %453, %472, !dbg !42
  %475 = fcmp oeq float %474, 0.000000e+00, !dbg !43
  %476 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %472, float %474) #3, !dbg !44
  %477 = select i1 %475, float 0.000000e+00, float %476, !dbg !45
  %478 = fmul float %473, %477, !dbg !46
  %479 = fadd float %458, %478, !dbg !47
  %480 = fadd float %463, %469, !dbg !48
  %481 = fmul float %473, %473, !dbg !49
  %482 = fmul float %453, %481, !dbg !50
  %483 = fmul float %477, %482, !dbg !51
  %484 = fadd float %480, %483, !dbg !52
  %485 = and i32 %8, 7, !dbg !36
  %486 = icmp eq i32 %485, 0, !dbg !36
  %487 = and i1 %414, %486, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, float %479, i1 %487) #3, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, float %484, i1 %487) #3, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, float %474, i1 %487) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %488 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !36
  %489 = load float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %490 = insertelement <1 x float> undef, float %488, i64 0, !dbg !53
  store <1 x float> %490, ptr addrspace(3) @global_smem, align 4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %491 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %492 = insertelement <1 x float> undef, float %489, i64 0, !dbg !54
  store <1 x float> %492, ptr addrspace(3) @global_smem, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %493 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !54
  %494 = sext i32 %11 to i64, !dbg !55
  %495 = getelementptr float, ptr addrspace(1) %1, i64 %494, !dbg !55
  %496 = icmp eq i32 %urem, 0, !dbg !56
  %497 = and i1 %496, %12, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %491, ptr addrspace(1) %495, i1 %497) #3, !dbg !56
  %498 = getelementptr float, ptr addrspace(1) %2, i64 %494, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %493, ptr addrspace(1) %498, i1 %497) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cc7mucam2pbmz7bpn447vf7ecenzwol572bwrrxybbd47brn6edx.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/c7")
!3 = !{ptr @triton__0d1d2d345de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d345de6, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d345de6", linkageName: "triton__0d1d2d345de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 34, column: 43, scope: !5)
!12 = !DILocation(line: 34, column: 47, scope: !5)
!13 = !DILocation(line: 34, column: 51, scope: !5)
!14 = !DILocation(line: 30, column: 36, scope: !5)
!15 = !DILocation(line: 34, column: 65, scope: !5)
!16 = !DILocation(line: 32, column: 25, scope: !5)
!17 = !DILocation(line: 31, column: 27, scope: !5)
!18 = !DILocation(line: 34, column: 40, scope: !5)
!19 = !DILocation(line: 34, column: 34, scope: !5)
!20 = !DILocation(line: 34, column: 57, scope: !5)
!21 = !DILocation(line: 34, column: 117, scope: !5)
!22 = !DILocation(line: 38, column: 62, scope: !5)
!23 = !DILocation(line: 105, column: 7, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!26 = !DILocation(line: 38, column: 51, scope: !24)
!27 = !DILocation(line: 111, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 110, column: 24, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 112, column: 34, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 112, column: 26, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 113, column: 39, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 113, column: 31, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 113, column: 22, scope: !24, inlinedAt: !26)
!34 = !DILocation(line: 40, column: 60, scope: !5)
!35 = !DILocation(line: 41, column: 56, scope: !5)
!36 = !DILocation(line: 131, column: 46, scope: !24, inlinedAt: !37)
!37 = !DILocation(line: 44, column: 41, scope: !24)
!38 = !DILocation(line: 119, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!40 = !DILocation(line: 131, column: 46, scope: !39, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 41, scope: !39)
!42 = !DILocation(line: 120, column: 28, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 39, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 121, column: 60, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 121, column: 49, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 123, column: 25, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 123, column: 17, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 124, column: 15, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 124, column: 30, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 124, column: 38, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 124, column: 49, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 124, column: 22, scope: !39, inlinedAt: !40)
!53 = !DILocation(line: 46, column: 20, scope: !5)
!54 = !DILocation(line: 47, column: 20, scope: !5)
!55 = !DILocation(line: 49, column: 25, scope: !5)
!56 = !DILocation(line: 49, column: 36, scope: !5)
!57 = !DILocation(line: 50, column: 25, scope: !5)
!58 = !DILocation(line: 50, column: 36, scope: !5)
!59 = !DILocation(line: 50, column: 4, scope: !5)
