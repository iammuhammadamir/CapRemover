; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d891011de12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %14, 255, !dbg !8
  %15 = or i32 %urem, 256, !dbg !8
  %16 = shl nuw nsw i32 %urem, 1, !dbg !8
  %17 = or i32 %16, 1, !dbg !8
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %19 = icmp slt i32 %18, 704, !dbg !10
  %20 = srem i32 %18, 32, !dbg !11
  %21 = mul i32 %18, 10, !dbg !12
  %22 = mul i32 %21, %8, !dbg !13
  %23 = mul i32 %22, %9, !dbg !14
  %24 = mul nsw i32 %20, 10, !dbg !15
  %25 = icmp sgt i32 %12, 0, !dbg !16
  br i1 %25, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !16

.._crit_edge_crit_edge:                           ; preds = %13
  %.pre85 = zext nneg i32 %16 to i64, !dbg !16
  br label %._crit_edge, !dbg !16

.lr.ph:                                           ; preds = %13
  %26 = shl nuw nsw i32 %urem, 2
  %27 = zext nneg i32 %26 to i64
  %28 = getelementptr half, ptr addrspace(3) @global_smem, i64 %27
  %29 = shl nuw nsw i32 %17, 1
  %30 = zext nneg i32 %29 to i64
  %31 = getelementptr half, ptr addrspace(3) @global_smem, i64 %30
  %32 = zext nneg i32 %16 to i64
  %33 = getelementptr half, ptr addrspace(3) @global_smem, i64 %32
  %34 = shl nuw nsw i32 %15, 1
  %35 = zext nneg i32 %34 to i64
  %36 = getelementptr half, ptr addrspace(3) @global_smem, i64 %35
  %37 = getelementptr float, ptr addrspace(3) @global_smem, i64 %32
  %38 = zext nneg i32 %urem to i64
  %39 = getelementptr half, ptr addrspace(3) @global_smem, i64 %38
  %40 = zext nneg i32 %15 to i64
  %41 = getelementptr half, ptr addrspace(3) @global_smem, i64 %40
  %42 = insertelement <8 x i1> poison, i1 %19, i64 0, !dbg !17
  %43 = shufflevector <8 x i1> %42, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  %44 = insertelement <8 x i32> poison, i32 %12, i64 0, !dbg !18
  %45 = shufflevector <8 x i32> %44, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !18
  br label %46, !dbg !16

46:                                               ; preds = %.lr.ph, %._crit_edge38
  %47 = phi float [ 0.000000e+00, %.lr.ph ], [ %408, %._crit_edge38 ]
  %48 = phi float [ 0.000000e+00, %.lr.ph ], [ %409, %._crit_edge38 ]
  %49 = phi float [ 0.000000e+00, %.lr.ph ], [ %410, %._crit_edge38 ]
  %50 = phi float [ 0.000000e+00, %.lr.ph ], [ %411, %._crit_edge38 ]
  %51 = phi float [ 0.000000e+00, %.lr.ph ], [ %412, %._crit_edge38 ]
  %52 = phi float [ 0.000000e+00, %.lr.ph ], [ %413, %._crit_edge38 ]
  %53 = phi float [ 0.000000e+00, %.lr.ph ], [ %414, %._crit_edge38 ]
  %54 = phi float [ 0.000000e+00, %.lr.ph ], [ %415, %._crit_edge38 ]
  %55 = phi i32 [ 0, %.lr.ph ], [ %444, %._crit_edge38 ]
  %56 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %406, %._crit_edge38 ]
  %57 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %407, %._crit_edge38 ]
  %58 = or i32 %55, %urem, !dbg !19
  %59 = or i32 %55, %15, !dbg !19
  %60 = or i32 %58, 512, !dbg !19
  %61 = or i32 %58, 768, !dbg !19
  %62 = or i32 %58, 1024, !dbg !19
  %63 = or i32 %58, 1280, !dbg !19
  %64 = or i32 %58, 1536, !dbg !19
  %65 = or i32 %58, 1792, !dbg !19
  %66 = or i32 %55, %16, !dbg !19
  %67 = or i32 %55, %17, !dbg !19
  %68 = or i32 %66, 512, !dbg !19
  %69 = or i32 %66, 513, !dbg !19
  %70 = or i32 %66, 1024, !dbg !19
  %71 = or i32 %66, 1025, !dbg !19
  %72 = or i32 %66, 1536, !dbg !19
  %73 = or i32 %66, 1537, !dbg !19
  %74 = icmp slt i32 %66, %12, !dbg !18
  %75 = icmp slt i32 %67, %12, !dbg !18
  %76 = icmp slt i32 %68, %12, !dbg !18
  %77 = icmp slt i32 %69, %12, !dbg !18
  %78 = icmp slt i32 %70, %12, !dbg !18
  %79 = icmp slt i32 %71, %12, !dbg !18
  %80 = icmp slt i32 %72, %12, !dbg !18
  %81 = icmp slt i32 %73, %12, !dbg !18
  %82 = sdiv i32 %58, %10, !dbg !20
  %83 = sdiv i32 %59, %10, !dbg !20
  %84 = sdiv i32 %60, %10, !dbg !20
  %85 = sdiv i32 %61, %10, !dbg !20
  %86 = sdiv i32 %62, %10, !dbg !20
  %87 = sdiv i32 %63, %10, !dbg !20
  %88 = sdiv i32 %64, %10, !dbg !20
  %89 = sdiv i32 %65, %10, !dbg !20
  %90 = add i32 %66, %23, !dbg !21
  %91 = add i32 %67, %23, !dbg !21
  %92 = add i32 %68, %23, !dbg !21
  %93 = add i32 %69, %23, !dbg !21
  %94 = add i32 %70, %23, !dbg !21
  %95 = add i32 %71, %23, !dbg !21
  %96 = add i32 %72, %23, !dbg !21
  %97 = add i32 %73, %23, !dbg !21
  %98 = sext i32 %90 to i64, !dbg !22
  %99 = getelementptr half, ptr addrspace(1) %0, i64 %98, !dbg !22
  %100 = sext i32 %91 to i64, !dbg !22
  %101 = getelementptr half, ptr addrspace(1) %0, i64 %100, !dbg !22
  %102 = sext i32 %92 to i64, !dbg !22
  %103 = getelementptr half, ptr addrspace(1) %0, i64 %102, !dbg !22
  %104 = sext i32 %93 to i64, !dbg !22
  %105 = getelementptr half, ptr addrspace(1) %0, i64 %104, !dbg !22
  %106 = sext i32 %94 to i64, !dbg !22
  %107 = getelementptr half, ptr addrspace(1) %0, i64 %106, !dbg !22
  %108 = sext i32 %95 to i64, !dbg !22
  %109 = getelementptr half, ptr addrspace(1) %0, i64 %108, !dbg !22
  %110 = sext i32 %96 to i64, !dbg !22
  %111 = getelementptr half, ptr addrspace(1) %0, i64 %110, !dbg !22
  %112 = sext i32 %97 to i64, !dbg !22
  %113 = getelementptr half, ptr addrspace(1) %0, i64 %112, !dbg !22
  %114 = and i1 %19, %74, !dbg !17
  %115 = and i1 %19, %75, !dbg !17
  %116 = and i1 %19, %76, !dbg !17
  %117 = and i1 %19, %77, !dbg !17
  %118 = and i1 %19, %78, !dbg !17
  %119 = and i1 %19, %79, !dbg !17
  %120 = and i1 %19, %80, !dbg !17
  %121 = and i1 %19, %81, !dbg !17
  %122 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %99, i1 %114, i16 0, i1 %114) #3, !dbg !23
  %123 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %101, i1 %115, i16 0, i1 %115) #3, !dbg !23
  %124 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 %116, i16 0, i1 %116) #3, !dbg !23
  %125 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %105, i1 %117, i16 0, i1 %117) #3, !dbg !23
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %107, i1 %118, i16 0, i1 %118) #3, !dbg !23
  %127 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %109, i1 %119, i16 0, i1 %119) #3, !dbg !23
  %128 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %111, i1 %120, i16 0, i1 %120) #3, !dbg !23
  %129 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %113, i1 %121, i16 0, i1 %121) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %122, ptr addrspace(3) %28, align 2, !dbg !24
  store i16 %123, ptr addrspace(3) %31, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %130 = load half, ptr addrspace(3) %33, align 2, !dbg !24
  %131 = load half, ptr addrspace(3) %36, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %124, ptr addrspace(3) %28, align 2, !dbg !24
  store i16 %125, ptr addrspace(3) %31, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %132 = load half, ptr addrspace(3) %33, align 2, !dbg !24
  %133 = load half, ptr addrspace(3) %36, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %126, ptr addrspace(3) %28, align 2, !dbg !24
  store i16 %127, ptr addrspace(3) %31, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %134 = load half, ptr addrspace(3) %33, align 2, !dbg !24
  %135 = load half, ptr addrspace(3) %36, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %128, ptr addrspace(3) %28, align 2, !dbg !24
  store i16 %129, ptr addrspace(3) %31, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %136 = load half, ptr addrspace(3) %33, align 2, !dbg !24
  %137 = load half, ptr addrspace(3) %36, align 2, !dbg !24
  %138 = add i32 %82, %24, !dbg !25
  %139 = add i32 %83, %24, !dbg !25
  %140 = add i32 %84, %24, !dbg !25
  %141 = add i32 %85, %24, !dbg !25
  %142 = add i32 %86, %24, !dbg !25
  %143 = add i32 %87, %24, !dbg !25
  %144 = add i32 %88, %24, !dbg !25
  %145 = add i32 %89, %24, !dbg !25
  %146 = sext i32 %138 to i64, !dbg !26
  %147 = getelementptr half, ptr addrspace(1) %1, i64 %146, !dbg !26
  %148 = sext i32 %139 to i64, !dbg !26
  %149 = getelementptr half, ptr addrspace(1) %1, i64 %148, !dbg !26
  %150 = sext i32 %140 to i64, !dbg !26
  %151 = getelementptr half, ptr addrspace(1) %1, i64 %150, !dbg !26
  %152 = sext i32 %141 to i64, !dbg !26
  %153 = getelementptr half, ptr addrspace(1) %1, i64 %152, !dbg !26
  %154 = sext i32 %142 to i64, !dbg !26
  %155 = getelementptr half, ptr addrspace(1) %1, i64 %154, !dbg !26
  %156 = sext i32 %143 to i64, !dbg !26
  %157 = getelementptr half, ptr addrspace(1) %1, i64 %156, !dbg !26
  %158 = sext i32 %144 to i64, !dbg !26
  %159 = getelementptr half, ptr addrspace(1) %1, i64 %158, !dbg !26
  %160 = sext i32 %145 to i64, !dbg !26
  %161 = getelementptr half, ptr addrspace(1) %1, i64 %160, !dbg !26
  %162 = getelementptr half, ptr addrspace(1) %2, i64 %98, !dbg !27
  %163 = getelementptr half, ptr addrspace(1) %2, i64 %100, !dbg !27
  %164 = getelementptr half, ptr addrspace(1) %2, i64 %102, !dbg !27
  %165 = getelementptr half, ptr addrspace(1) %2, i64 %104, !dbg !27
  %166 = getelementptr half, ptr addrspace(1) %2, i64 %106, !dbg !27
  %167 = getelementptr half, ptr addrspace(1) %2, i64 %108, !dbg !27
  %168 = getelementptr half, ptr addrspace(1) %2, i64 %110, !dbg !27
  %169 = getelementptr half, ptr addrspace(1) %2, i64 %112, !dbg !27
  %170 = add i32 %82, %21, !dbg !28
  %171 = add i32 %83, %21, !dbg !28
  %172 = add i32 %84, %21, !dbg !28
  %173 = add i32 %85, %21, !dbg !28
  %174 = add i32 %86, %21, !dbg !28
  %175 = add i32 %87, %21, !dbg !28
  %176 = add i32 %88, %21, !dbg !28
  %177 = add i32 %89, %21, !dbg !28
  %178 = sext i32 %170 to i64, !dbg !29
  %179 = getelementptr half, ptr addrspace(1) %3, i64 %178, !dbg !29
  %180 = sext i32 %171 to i64, !dbg !29
  %181 = getelementptr half, ptr addrspace(1) %3, i64 %180, !dbg !29
  %182 = sext i32 %172 to i64, !dbg !29
  %183 = getelementptr half, ptr addrspace(1) %3, i64 %182, !dbg !29
  %184 = sext i32 %173 to i64, !dbg !29
  %185 = getelementptr half, ptr addrspace(1) %3, i64 %184, !dbg !29
  %186 = sext i32 %174 to i64, !dbg !29
  %187 = getelementptr half, ptr addrspace(1) %3, i64 %186, !dbg !29
  %188 = sext i32 %175 to i64, !dbg !29
  %189 = getelementptr half, ptr addrspace(1) %3, i64 %188, !dbg !29
  %190 = sext i32 %176 to i64, !dbg !29
  %191 = getelementptr half, ptr addrspace(1) %3, i64 %190, !dbg !29
  %192 = sext i32 %177 to i64, !dbg !29
  %193 = getelementptr half, ptr addrspace(1) %3, i64 %192, !dbg !29
  %194 = getelementptr half, ptr addrspace(1) %4, i64 %146, !dbg !30
  %195 = getelementptr half, ptr addrspace(1) %4, i64 %148, !dbg !30
  %196 = getelementptr half, ptr addrspace(1) %4, i64 %150, !dbg !30
  %197 = getelementptr half, ptr addrspace(1) %4, i64 %152, !dbg !30
  %198 = getelementptr half, ptr addrspace(1) %4, i64 %154, !dbg !30
  %199 = getelementptr half, ptr addrspace(1) %4, i64 %156, !dbg !30
  %200 = getelementptr half, ptr addrspace(1) %4, i64 %158, !dbg !30
  %201 = getelementptr half, ptr addrspace(1) %4, i64 %160, !dbg !30
  %202 = getelementptr half, ptr addrspace(1) %5, i64 %178, !dbg !31
  %203 = getelementptr half, ptr addrspace(1) %5, i64 %180, !dbg !31
  %204 = getelementptr half, ptr addrspace(1) %5, i64 %182, !dbg !31
  %205 = getelementptr half, ptr addrspace(1) %5, i64 %184, !dbg !31
  %206 = getelementptr half, ptr addrspace(1) %5, i64 %186, !dbg !31
  %207 = getelementptr half, ptr addrspace(1) %5, i64 %188, !dbg !31
  %208 = getelementptr half, ptr addrspace(1) %5, i64 %190, !dbg !31
  %209 = getelementptr half, ptr addrspace(1) %5, i64 %192, !dbg !31
  %210 = insertelement <8 x i32> poison, i32 %58, i64 0, !dbg !18
  %211 = insertelement <8 x i32> %210, i32 %59, i64 1, !dbg !18
  %212 = insertelement <8 x i32> %211, i32 %60, i64 2, !dbg !18
  %213 = insertelement <8 x i32> %212, i32 %61, i64 3, !dbg !18
  %214 = insertelement <8 x i32> %213, i32 %62, i64 4, !dbg !18
  %215 = insertelement <8 x i32> %214, i32 %63, i64 5, !dbg !18
  %216 = insertelement <8 x i32> %215, i32 %64, i64 6, !dbg !18
  %217 = insertelement <8 x i32> %216, i32 %65, i64 7, !dbg !18
  %218 = icmp slt <8 x i32> %217, %45, !dbg !18
  %219 = and <8 x i1> %43, %218, !dbg !17
  %220 = insertelement <8 x half> poison, half %130, i64 0, !dbg !24
  %221 = insertelement <8 x half> %220, half %131, i64 1, !dbg !24
  %222 = insertelement <8 x half> %221, half %132, i64 2, !dbg !24
  %223 = insertelement <8 x half> %222, half %133, i64 3, !dbg !24
  %224 = insertelement <8 x half> %223, half %134, i64 4, !dbg !24
  %225 = insertelement <8 x half> %224, half %135, i64 5, !dbg !24
  %226 = insertelement <8 x half> %225, half %136, i64 6, !dbg !24
  %227 = insertelement <8 x half> %226, half %137, i64 7, !dbg !24
  %228 = fpext <8 x half> %227 to <8 x float>, !dbg !24
  %229 = extractelement <8 x i1> %219, i64 0, !dbg !32
  %230 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %147, i1 %229, i16 0, i1 %229) #3, !dbg !33
  %231 = extractelement <8 x i1> %219, i64 1, !dbg !32
  %232 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %149, i1 %231, i16 0, i1 %231) #3, !dbg !33
  %233 = extractelement <8 x i1> %219, i64 2, !dbg !32
  %234 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %151, i1 %233, i16 0, i1 %233) #3, !dbg !33
  %235 = extractelement <8 x i1> %219, i64 3, !dbg !32
  %236 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %153, i1 %235, i16 0, i1 %235) #3, !dbg !33
  %237 = extractelement <8 x i1> %219, i64 4, !dbg !32
  %238 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %155, i1 %237, i16 0, i1 %237) #3, !dbg !33
  %239 = extractelement <8 x i1> %219, i64 5, !dbg !32
  %240 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %157, i1 %239, i16 0, i1 %239) #3, !dbg !33
  %241 = extractelement <8 x i1> %219, i64 6, !dbg !32
  %242 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %159, i1 %241, i16 0, i1 %241) #3, !dbg !33
  %243 = extractelement <8 x i1> %219, i64 7, !dbg !32
  %244 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %161, i1 %243, i16 0, i1 %243) #3, !dbg !33
  %245 = insertelement <8 x i16> poison, i16 %230, i64 0, !dbg !33
  %246 = insertelement <8 x i16> %245, i16 %232, i64 1, !dbg !33
  %247 = insertelement <8 x i16> %246, i16 %234, i64 2, !dbg !33
  %248 = insertelement <8 x i16> %247, i16 %236, i64 3, !dbg !33
  %249 = insertelement <8 x i16> %248, i16 %238, i64 4, !dbg !33
  %250 = insertelement <8 x i16> %249, i16 %240, i64 5, !dbg !33
  %251 = insertelement <8 x i16> %250, i16 %242, i64 6, !dbg !33
  %252 = insertelement <8 x i16> %251, i16 %244, i64 7, !dbg !33
  %253 = bitcast <8 x i16> %252 to <8 x half>, !dbg !33
  %254 = fpext <8 x half> %253 to <8 x float>, !dbg !34
  %255 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 %114, i16 0, i1 %114) #3, !dbg !35
  %256 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %163, i1 %115, i16 0, i1 %115) #3, !dbg !35
  %257 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %164, i1 %116, i16 0, i1 %116) #3, !dbg !35
  %258 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %165, i1 %117, i16 0, i1 %117) #3, !dbg !35
  %259 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %166, i1 %118, i16 0, i1 %118) #3, !dbg !35
  %260 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %167, i1 %119, i16 0, i1 %119) #3, !dbg !35
  %261 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %168, i1 %120, i16 0, i1 %120) #3, !dbg !35
  %262 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %169, i1 %121, i16 0, i1 %121) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %255, ptr addrspace(3) %28, align 2, !dbg !36
  store i16 %256, ptr addrspace(3) %31, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %263 = load half, ptr addrspace(3) %33, align 2, !dbg !36
  %264 = load half, ptr addrspace(3) %36, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %257, ptr addrspace(3) %28, align 2, !dbg !36
  store i16 %258, ptr addrspace(3) %31, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %265 = load half, ptr addrspace(3) %33, align 2, !dbg !36
  %266 = load half, ptr addrspace(3) %36, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %259, ptr addrspace(3) %28, align 2, !dbg !36
  store i16 %260, ptr addrspace(3) %31, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %267 = load half, ptr addrspace(3) %33, align 2, !dbg !36
  %268 = load half, ptr addrspace(3) %36, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %261, ptr addrspace(3) %28, align 2, !dbg !36
  store i16 %262, ptr addrspace(3) %31, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %269 = load half, ptr addrspace(3) %33, align 2, !dbg !36
  %270 = load half, ptr addrspace(3) %36, align 2, !dbg !36
  %271 = insertelement <8 x half> poison, half %263, i64 0, !dbg !37
  %272 = insertelement <8 x half> %271, half %264, i64 1, !dbg !37
  %273 = insertelement <8 x half> %272, half %265, i64 2, !dbg !37
  %274 = insertelement <8 x half> %273, half %266, i64 3, !dbg !37
  %275 = insertelement <8 x half> %274, half %267, i64 4, !dbg !37
  %276 = insertelement <8 x half> %275, half %268, i64 5, !dbg !37
  %277 = insertelement <8 x half> %276, half %269, i64 6, !dbg !37
  %278 = insertelement <8 x half> %277, half %270, i64 7, !dbg !37
  %279 = fpext <8 x half> %278 to <8 x float>, !dbg !37
  %280 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %179, i1 %229, i16 0, i1 %229) #3, !dbg !38
  %281 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %181, i1 %231, i16 0, i1 %231) #3, !dbg !38
  %282 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %183, i1 %233, i16 0, i1 %233) #3, !dbg !38
  %283 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %185, i1 %235, i16 0, i1 %235) #3, !dbg !38
  %284 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %187, i1 %237, i16 0, i1 %237) #3, !dbg !38
  %285 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %189, i1 %239, i16 0, i1 %239) #3, !dbg !38
  %286 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %191, i1 %241, i16 0, i1 %241) #3, !dbg !38
  %287 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %193, i1 %243, i16 0, i1 %243) #3, !dbg !38
  %288 = insertelement <8 x i16> poison, i16 %280, i64 0, !dbg !38
  %289 = insertelement <8 x i16> %288, i16 %281, i64 1, !dbg !38
  %290 = insertelement <8 x i16> %289, i16 %282, i64 2, !dbg !38
  %291 = insertelement <8 x i16> %290, i16 %283, i64 3, !dbg !38
  %292 = insertelement <8 x i16> %291, i16 %284, i64 4, !dbg !38
  %293 = insertelement <8 x i16> %292, i16 %285, i64 5, !dbg !38
  %294 = insertelement <8 x i16> %293, i16 %286, i64 6, !dbg !38
  %295 = insertelement <8 x i16> %294, i16 %287, i64 7, !dbg !38
  %296 = bitcast <8 x i16> %295 to <8 x half>, !dbg !38
  %297 = fpext <8 x half> %296 to <8 x float>, !dbg !39
  %298 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %194, i1 %229, i16 0, i1 %229) #3, !dbg !40
  %299 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %195, i1 %231, i16 0, i1 %231) #3, !dbg !40
  %300 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %196, i1 %233, i16 0, i1 %233) #3, !dbg !40
  %301 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %197, i1 %235, i16 0, i1 %235) #3, !dbg !40
  %302 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %198, i1 %237, i16 0, i1 %237) #3, !dbg !40
  %303 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %199, i1 %239, i16 0, i1 %239) #3, !dbg !40
  %304 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %200, i1 %241, i16 0, i1 %241) #3, !dbg !40
  %305 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %201, i1 %243, i16 0, i1 %243) #3, !dbg !40
  %306 = insertelement <8 x i16> poison, i16 %298, i64 0, !dbg !40
  %307 = insertelement <8 x i16> %306, i16 %299, i64 1, !dbg !40
  %308 = insertelement <8 x i16> %307, i16 %300, i64 2, !dbg !40
  %309 = insertelement <8 x i16> %308, i16 %301, i64 3, !dbg !40
  %310 = insertelement <8 x i16> %309, i16 %302, i64 4, !dbg !40
  %311 = insertelement <8 x i16> %310, i16 %303, i64 5, !dbg !40
  %312 = insertelement <8 x i16> %311, i16 %304, i64 6, !dbg !40
  %313 = insertelement <8 x i16> %312, i16 %305, i64 7, !dbg !40
  %314 = bitcast <8 x i16> %313 to <8 x half>, !dbg !40
  %315 = fpext <8 x half> %314 to <8 x float>, !dbg !41
  %316 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %202, i1 %229, i16 0, i1 %229) #3, !dbg !32
  %317 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %203, i1 %231, i16 0, i1 %231) #3, !dbg !32
  %318 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %204, i1 %233, i16 0, i1 %233) #3, !dbg !32
  %319 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %205, i1 %235, i16 0, i1 %235) #3, !dbg !32
  %320 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %206, i1 %237, i16 0, i1 %237) #3, !dbg !32
  %321 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %207, i1 %239, i16 0, i1 %239) #3, !dbg !32
  %322 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %208, i1 %241, i16 0, i1 %241) #3, !dbg !32
  %323 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %209, i1 %243, i16 0, i1 %243) #3, !dbg !32
  %324 = insertelement <8 x i16> poison, i16 %316, i64 0, !dbg !32
  %325 = insertelement <8 x i16> %324, i16 %317, i64 1, !dbg !32
  %326 = insertelement <8 x i16> %325, i16 %318, i64 2, !dbg !32
  %327 = insertelement <8 x i16> %326, i16 %319, i64 3, !dbg !32
  %328 = insertelement <8 x i16> %327, i16 %320, i64 4, !dbg !32
  %329 = insertelement <8 x i16> %328, i16 %321, i64 5, !dbg !32
  %330 = insertelement <8 x i16> %329, i16 %322, i64 6, !dbg !32
  %331 = insertelement <8 x i16> %330, i16 %323, i64 7, !dbg !32
  %332 = bitcast <8 x i16> %331 to <8 x half>, !dbg !32
  %333 = fpext <8 x half> %332 to <8 x float>, !dbg !42
  %334 = fadd <8 x float> %228, %254, !dbg !43
  %335 = fmul <8 x float> %279, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %336 = fadd <8 x float> %334, %335, !dbg !36
  %337 = fadd <8 x float> %297, %315, !dbg !45
  %338 = fmul <8 x float> %333, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %339 = fadd <8 x float> %337, %338, !dbg !47
  %340 = fadd <8 x float> %336, %339, !dbg !48
  %341 = icmp eq i32 %55, 0, !dbg !49
  br i1 %341, label %._crit_edge38, label %342, !dbg !50

342:                                              ; preds = %46
  %343 = fadd float %47, 1.000000e+00, !dbg !54
  %344 = fadd float %48, 1.000000e+00, !dbg !54
  %345 = fadd float %49, 1.000000e+00, !dbg !54
  %346 = fadd float %50, 1.000000e+00, !dbg !54
  %347 = fadd float %51, 1.000000e+00, !dbg !54
  %348 = fadd float %52, 1.000000e+00, !dbg !54
  %349 = fadd float %53, 1.000000e+00, !dbg !54
  %350 = fadd float %54, 1.000000e+00, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %351 = insertelement <1 x float> undef, float %343, i64 0, !dbg !54
  store <1 x float> %351, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %352 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %353 = insertelement <1 x float> undef, float %344, i64 0, !dbg !54
  store <1 x float> %353, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %354 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %355 = insertelement <1 x float> undef, float %345, i64 0, !dbg !54
  store <1 x float> %355, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %356 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %357 = insertelement <1 x float> undef, float %346, i64 0, !dbg !54
  store <1 x float> %357, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %358 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %359 = insertelement <1 x float> undef, float %347, i64 0, !dbg !54
  store <1 x float> %359, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %360 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %361 = insertelement <1 x float> undef, float %348, i64 0, !dbg !54
  store <1 x float> %361, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %362 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %363 = insertelement <1 x float> undef, float %349, i64 0, !dbg !54
  store <1 x float> %363, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %364 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %365 = insertelement <1 x float> undef, float %350, i64 0, !dbg !54
  store <1 x float> %365, ptr addrspace(3) %37, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %366 = load float, ptr addrspace(3) %37, align 4, !dbg !54
  %367 = fsub <8 x float> %340, %56, !dbg !55
  %368 = extractelement <8 x float> %367, i64 0, !dbg !56
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %352) #3, !dbg !56
  %370 = extractelement <8 x float> %367, i64 1, !dbg !56
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %354) #3, !dbg !56
  %372 = extractelement <8 x float> %367, i64 2, !dbg !56
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %356) #3, !dbg !56
  %374 = extractelement <8 x float> %367, i64 3, !dbg !56
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %358) #3, !dbg !56
  %376 = extractelement <8 x float> %367, i64 4, !dbg !56
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %376, float %360) #3, !dbg !56
  %378 = extractelement <8 x float> %367, i64 5, !dbg !56
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %362) #3, !dbg !56
  %380 = extractelement <8 x float> %367, i64 6, !dbg !56
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %364) #3, !dbg !56
  %382 = extractelement <8 x float> %367, i64 7, !dbg !56
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %366) #3, !dbg !56
  %384 = insertelement <8 x float> poison, float %369, i64 0, !dbg !57
  %385 = insertelement <8 x float> %384, float %371, i64 1, !dbg !57
  %386 = insertelement <8 x float> %385, float %373, i64 2, !dbg !57
  %387 = insertelement <8 x float> %386, float %375, i64 3, !dbg !57
  %388 = insertelement <8 x float> %387, float %377, i64 4, !dbg !57
  %389 = insertelement <8 x float> %388, float %379, i64 5, !dbg !57
  %390 = insertelement <8 x float> %389, float %381, i64 6, !dbg !57
  %391 = insertelement <8 x float> %390, float %383, i64 7, !dbg !57
  %392 = fadd <8 x float> %56, %391, !dbg !57
  %393 = fsub <8 x float> %340, %392, !dbg !58
  %394 = fmul <8 x float> %367, %393, !dbg !59
  %395 = fadd <8 x float> %57, %394, !dbg !60
  br label %._crit_edge38, !dbg !50

._crit_edge38:                                    ; preds = %46, %342
  %396 = phi float [ %343, %342 ], [ 1.000000e+00, %46 ]
  %397 = phi float [ %344, %342 ], [ 1.000000e+00, %46 ]
  %398 = phi float [ %345, %342 ], [ 1.000000e+00, %46 ]
  %399 = phi float [ %346, %342 ], [ 1.000000e+00, %46 ]
  %400 = phi float [ %347, %342 ], [ 1.000000e+00, %46 ]
  %401 = phi float [ %348, %342 ], [ 1.000000e+00, %46 ]
  %402 = phi float [ %349, %342 ], [ 1.000000e+00, %46 ]
  %403 = phi float [ %350, %342 ], [ 1.000000e+00, %46 ]
  %404 = phi <8 x float> [ %392, %342 ], [ %340, %46 ]
  %405 = phi <8 x float> [ %395, %342 ], [ zeroinitializer, %46 ]
  %406 = select <8 x i1> %219, <8 x float> %404, <8 x float> %56, !dbg !61
  %407 = select <8 x i1> %219, <8 x float> %405, <8 x float> %57, !dbg !62
  %408 = select i1 %229, float %396, float %47, !dbg !63
  %409 = select i1 %231, float %397, float %48, !dbg !63
  %410 = select i1 %233, float %398, float %49, !dbg !63
  %411 = select i1 %235, float %399, float %50, !dbg !63
  %412 = select i1 %237, float %400, float %51, !dbg !63
  %413 = select i1 %239, float %401, float %52, !dbg !63
  %414 = select i1 %241, float %402, float %53, !dbg !63
  %415 = select i1 %243, float %403, float %54, !dbg !63
  %416 = extractelement <8 x float> %340, i64 0, !dbg !64
  %417 = fptrunc float %416 to half, !dbg !64
  %418 = extractelement <8 x float> %340, i64 1, !dbg !64
  %419 = fptrunc float %418 to half, !dbg !64
  %420 = extractelement <8 x float> %340, i64 2, !dbg !64
  %421 = fptrunc float %420 to half, !dbg !64
  %422 = extractelement <8 x float> %340, i64 3, !dbg !64
  %423 = fptrunc float %422 to half, !dbg !64
  %424 = extractelement <8 x float> %340, i64 4, !dbg !64
  %425 = fptrunc float %424 to half, !dbg !64
  %426 = extractelement <8 x float> %340, i64 5, !dbg !64
  %427 = fptrunc float %426 to half, !dbg !64
  %428 = extractelement <8 x float> %340, i64 6, !dbg !64
  %429 = fptrunc float %428 to half, !dbg !64
  %430 = extractelement <8 x float> %340, i64 7, !dbg !64
  %431 = fptrunc float %430 to half, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %432 = insertelement <1 x half> undef, half %417, i64 0, !dbg !64
  store <1 x half> %432, ptr addrspace(3) %39, align 2, !dbg !64
  %433 = insertelement <1 x half> undef, half %419, i64 0, !dbg !64
  store <1 x half> %433, ptr addrspace(3) %41, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %434 = load <2 x i16>, ptr addrspace(3) %33, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %435 = insertelement <1 x half> undef, half %421, i64 0, !dbg !64
  store <1 x half> %435, ptr addrspace(3) %39, align 2, !dbg !64
  %436 = insertelement <1 x half> undef, half %423, i64 0, !dbg !64
  store <1 x half> %436, ptr addrspace(3) %41, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %437 = load <2 x i16>, ptr addrspace(3) %33, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %438 = insertelement <1 x half> undef, half %425, i64 0, !dbg !64
  store <1 x half> %438, ptr addrspace(3) %39, align 2, !dbg !64
  %439 = insertelement <1 x half> undef, half %427, i64 0, !dbg !64
  store <1 x half> %439, ptr addrspace(3) %41, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %440 = load <2 x i16>, ptr addrspace(3) %33, align 4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %441 = insertelement <1 x half> undef, half %429, i64 0, !dbg !64
  store <1 x half> %441, ptr addrspace(3) %39, align 2, !dbg !64
  %442 = insertelement <1 x half> undef, half %431, i64 0, !dbg !64
  store <1 x half> %442, ptr addrspace(3) %41, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %443 = load <2 x i16>, ptr addrspace(3) %33, align 4, !dbg !64
  %.extract = extractelement <2 x i16> %434, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract, ptr addrspace(1) %99, i1 %114) #3, !dbg !64
  %.extract18 = extractelement <2 x i16> %434, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract18, ptr addrspace(1) %101, i1 %115) #3, !dbg !64
  %.extract20 = extractelement <2 x i16> %437, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract20, ptr addrspace(1) %103, i1 %116) #3, !dbg !64
  %.extract22 = extractelement <2 x i16> %437, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract22, ptr addrspace(1) %105, i1 %117) #3, !dbg !64
  %.extract24 = extractelement <2 x i16> %440, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract24, ptr addrspace(1) %107, i1 %118) #3, !dbg !64
  %.extract26 = extractelement <2 x i16> %440, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract26, ptr addrspace(1) %109, i1 %119) #3, !dbg !64
  %.extract28 = extractelement <2 x i16> %443, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract28, ptr addrspace(1) %111, i1 %120) #3, !dbg !64
  %.extract30 = extractelement <2 x i16> %443, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract30, ptr addrspace(1) %113, i1 %121) #3, !dbg !64
  %444 = add i32 %55, 2048, !dbg !16
  %445 = icmp slt i32 %444, %12, !dbg !16
  br i1 %445, label %46, label %._crit_edge.loopexit, !dbg !16

._crit_edge.loopexit:                             ; preds = %._crit_edge38
  %446 = extractelement <8 x float> %407, i64 7, !dbg !16
  %447 = extractelement <8 x float> %407, i64 6, !dbg !16
  %448 = extractelement <8 x float> %407, i64 5, !dbg !16
  %449 = extractelement <8 x float> %407, i64 4, !dbg !16
  %450 = extractelement <8 x float> %407, i64 3, !dbg !16
  %451 = extractelement <8 x float> %407, i64 2, !dbg !16
  %452 = extractelement <8 x float> %407, i64 1, !dbg !16
  %453 = extractelement <8 x float> %407, i64 0, !dbg !16
  %454 = extractelement <8 x float> %406, i64 7, !dbg !16
  %455 = extractelement <8 x float> %406, i64 6, !dbg !16
  %456 = extractelement <8 x float> %406, i64 5, !dbg !16
  %457 = extractelement <8 x float> %406, i64 4, !dbg !16
  %458 = extractelement <8 x float> %406, i64 3, !dbg !16
  %459 = extractelement <8 x float> %406, i64 2, !dbg !16
  %460 = extractelement <8 x float> %406, i64 1, !dbg !16
  %461 = extractelement <8 x float> %406, i64 0, !dbg !16
  br label %._crit_edge, !dbg !8

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi86 = phi i64 [ %.pre85, %.._crit_edge_crit_edge ], [ %32, %._crit_edge.loopexit ], !dbg !16
  %462 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %461, %._crit_edge.loopexit ]
  %463 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %460, %._crit_edge.loopexit ]
  %464 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %459, %._crit_edge.loopexit ]
  %465 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %458, %._crit_edge.loopexit ]
  %466 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %457, %._crit_edge.loopexit ]
  %467 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %456, %._crit_edge.loopexit ]
  %468 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %455, %._crit_edge.loopexit ]
  %469 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %454, %._crit_edge.loopexit ]
  %470 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %453, %._crit_edge.loopexit ]
  %471 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %452, %._crit_edge.loopexit ]
  %472 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %451, %._crit_edge.loopexit ]
  %473 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %450, %._crit_edge.loopexit ]
  %474 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %449, %._crit_edge.loopexit ]
  %475 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %448, %._crit_edge.loopexit ]
  %476 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %447, %._crit_edge.loopexit ]
  %477 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %446, %._crit_edge.loopexit ]
  %478 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %408, %._crit_edge.loopexit ]
  %479 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %409, %._crit_edge.loopexit ]
  %480 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %410, %._crit_edge.loopexit ]
  %481 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %411, %._crit_edge.loopexit ]
  %482 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %412, %._crit_edge.loopexit ]
  %483 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %413, %._crit_edge.loopexit ]
  %484 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %414, %._crit_edge.loopexit ]
  %485 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %415, %._crit_edge.loopexit ]
  %486 = lshr i32 %14, 5, !dbg !8
  %487 = and i32 %486, 7, !dbg !8
  %488 = and i32 %14, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi86, !dbg !16
  %490 = insertelement <1 x float> undef, float %478, i64 0, !dbg !16
  store <1 x float> %490, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %491 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %492 = insertelement <1 x float> undef, float %479, i64 0, !dbg !16
  store <1 x float> %492, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %493 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %494 = insertelement <1 x float> undef, float %480, i64 0, !dbg !16
  store <1 x float> %494, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %495 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %496 = insertelement <1 x float> undef, float %481, i64 0, !dbg !16
  store <1 x float> %496, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %497 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %498 = insertelement <1 x float> undef, float %482, i64 0, !dbg !16
  store <1 x float> %498, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %499 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %500 = insertelement <1 x float> undef, float %483, i64 0, !dbg !16
  store <1 x float> %500, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %501 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %502 = insertelement <1 x float> undef, float %484, i64 0, !dbg !16
  store <1 x float> %502, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %503 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %504 = insertelement <1 x float> undef, float %485, i64 0, !dbg !16
  store <1 x float> %504, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %505 = load float, ptr addrspace(3) %489, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %506 = fsub float %463, %462, !dbg !67
  %507 = fadd float %491, %493, !dbg !71
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !72
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %493, float %507) #3, !dbg !73
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !74
  %511 = fmul float %506, %510, !dbg !75
  %512 = fadd float %462, %511, !dbg !76
  %513 = fadd float %470, %471, !dbg !77
  %514 = fmul float %506, %506, !dbg !78
  %515 = fmul float %514, %491, !dbg !79
  %516 = fmul float %515, %510, !dbg !80
  %517 = fadd float %513, %516, !dbg !81
  %518 = fsub float %464, %512, !dbg !67
  %519 = fadd float %507, %495, !dbg !71
  %520 = fcmp oeq float %519, 0.000000e+00, !dbg !72
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %495, float %519) #3, !dbg !73
  %522 = select i1 %520, float 0.000000e+00, float %521, !dbg !74
  %523 = fmul float %522, %518, !dbg !75
  %524 = fadd float %512, %523, !dbg !76
  %525 = fadd float %472, %517, !dbg !77
  %526 = fmul float %518, %518, !dbg !78
  %527 = fmul float %507, %526, !dbg !79
  %528 = fmul float %522, %527, !dbg !80
  %529 = fadd float %525, %528, !dbg !81
  %530 = fsub float %465, %524, !dbg !67
  %531 = fadd float %519, %497, !dbg !71
  %532 = fcmp oeq float %531, 0.000000e+00, !dbg !72
  %533 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %497, float %531) #3, !dbg !73
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !74
  %535 = fmul float %534, %530, !dbg !75
  %536 = fadd float %524, %535, !dbg !76
  %537 = fadd float %473, %529, !dbg !77
  %538 = fmul float %530, %530, !dbg !78
  %539 = fmul float %519, %538, !dbg !79
  %540 = fmul float %534, %539, !dbg !80
  %541 = fadd float %537, %540, !dbg !81
  %542 = fsub float %466, %536, !dbg !67
  %543 = fadd float %531, %499, !dbg !71
  %544 = fcmp oeq float %543, 0.000000e+00, !dbg !72
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %499, float %543) #3, !dbg !73
  %546 = select i1 %544, float 0.000000e+00, float %545, !dbg !74
  %547 = fmul float %546, %542, !dbg !75
  %548 = fadd float %536, %547, !dbg !76
  %549 = fadd float %474, %541, !dbg !77
  %550 = fmul float %542, %542, !dbg !78
  %551 = fmul float %531, %550, !dbg !79
  %552 = fmul float %546, %551, !dbg !80
  %553 = fadd float %549, %552, !dbg !81
  %554 = fsub float %467, %548, !dbg !67
  %555 = fadd float %543, %501, !dbg !71
  %556 = fcmp oeq float %555, 0.000000e+00, !dbg !72
  %557 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %501, float %555) #3, !dbg !73
  %558 = select i1 %556, float 0.000000e+00, float %557, !dbg !74
  %559 = fmul float %558, %554, !dbg !75
  %560 = fadd float %548, %559, !dbg !76
  %561 = fadd float %475, %553, !dbg !77
  %562 = fmul float %554, %554, !dbg !78
  %563 = fmul float %543, %562, !dbg !79
  %564 = fmul float %558, %563, !dbg !80
  %565 = fadd float %561, %564, !dbg !81
  %566 = fsub float %468, %560, !dbg !67
  %567 = fadd float %555, %503, !dbg !71
  %568 = fcmp oeq float %567, 0.000000e+00, !dbg !72
  %569 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %503, float %567) #3, !dbg !73
  %570 = select i1 %568, float 0.000000e+00, float %569, !dbg !74
  %571 = fmul float %570, %566, !dbg !75
  %572 = fadd float %560, %571, !dbg !76
  %573 = fadd float %476, %565, !dbg !77
  %574 = fmul float %566, %566, !dbg !78
  %575 = fmul float %555, %574, !dbg !79
  %576 = fmul float %570, %575, !dbg !80
  %577 = fadd float %573, %576, !dbg !81
  %578 = fsub float %469, %572, !dbg !67
  %579 = fadd float %567, %505, !dbg !71
  %580 = fcmp oeq float %579, 0.000000e+00, !dbg !72
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %505, float %579) #3, !dbg !73
  %582 = select i1 %580, float 0.000000e+00, float %581, !dbg !74
  %583 = fmul float %582, %578, !dbg !75
  %584 = fadd float %572, %583, !dbg !76
  %585 = fadd float %477, %577, !dbg !77
  %586 = fmul float %578, %578, !dbg !78
  %587 = fmul float %567, %586, !dbg !79
  %588 = fmul float %582, %587, !dbg !80
  %589 = fadd float %585, %588, !dbg !81
  %590 = bitcast float %584 to i32, !dbg !65
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 16, i32 31), !dbg !65
  %592 = bitcast i32 %591 to float, !dbg !65
  %593 = bitcast float %589 to i32, !dbg !65
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 16, i32 31), !dbg !65
  %595 = bitcast i32 %594 to float, !dbg !65
  %596 = bitcast float %579 to i32, !dbg !65
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 16, i32 31), !dbg !65
  %598 = bitcast i32 %597 to float, !dbg !65
  %599 = fsub float %592, %584, !dbg !67
  %600 = fadd float %579, %598, !dbg !71
  %601 = fcmp oeq float %600, 0.000000e+00, !dbg !72
  %602 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %598, float %600) #3, !dbg !73
  %603 = select i1 %601, float 0.000000e+00, float %602, !dbg !74
  %604 = fmul float %603, %599, !dbg !75
  %605 = fadd float %584, %604, !dbg !76
  %606 = fadd float %589, %595, !dbg !77
  %607 = fmul float %599, %599, !dbg !78
  %608 = fmul float %579, %607, !dbg !79
  %609 = fmul float %603, %608, !dbg !80
  %610 = fadd float %606, %609, !dbg !81
  %611 = bitcast float %605 to i32, !dbg !65
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 8, i32 31), !dbg !65
  %613 = bitcast i32 %612 to float, !dbg !65
  %614 = bitcast float %610 to i32, !dbg !65
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 8, i32 31), !dbg !65
  %616 = bitcast i32 %615 to float, !dbg !65
  %617 = bitcast float %600 to i32, !dbg !65
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 8, i32 31), !dbg !65
  %619 = bitcast i32 %618 to float, !dbg !65
  %620 = fsub float %613, %605, !dbg !67
  %621 = fadd float %600, %619, !dbg !71
  %622 = fcmp oeq float %621, 0.000000e+00, !dbg !72
  %623 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %619, float %621) #3, !dbg !73
  %624 = select i1 %622, float 0.000000e+00, float %623, !dbg !74
  %625 = fmul float %624, %620, !dbg !75
  %626 = fadd float %605, %625, !dbg !76
  %627 = fadd float %610, %616, !dbg !77
  %628 = fmul float %620, %620, !dbg !78
  %629 = fmul float %600, %628, !dbg !79
  %630 = fmul float %624, %629, !dbg !80
  %631 = fadd float %627, %630, !dbg !81
  %632 = bitcast float %626 to i32, !dbg !65
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 4, i32 31), !dbg !65
  %634 = bitcast i32 %633 to float, !dbg !65
  %635 = bitcast float %631 to i32, !dbg !65
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 4, i32 31), !dbg !65
  %637 = bitcast i32 %636 to float, !dbg !65
  %638 = bitcast float %621 to i32, !dbg !65
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 4, i32 31), !dbg !65
  %640 = bitcast i32 %639 to float, !dbg !65
  %641 = fsub float %634, %626, !dbg !67
  %642 = fadd float %621, %640, !dbg !71
  %643 = fcmp oeq float %642, 0.000000e+00, !dbg !72
  %644 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %640, float %642) #3, !dbg !73
  %645 = select i1 %643, float 0.000000e+00, float %644, !dbg !74
  %646 = fmul float %645, %641, !dbg !75
  %647 = fadd float %626, %646, !dbg !76
  %648 = fadd float %631, %637, !dbg !77
  %649 = fmul float %641, %641, !dbg !78
  %650 = fmul float %621, %649, !dbg !79
  %651 = fmul float %645, %650, !dbg !80
  %652 = fadd float %648, %651, !dbg !81
  %653 = bitcast float %647 to i32, !dbg !65
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 2, i32 31), !dbg !65
  %655 = bitcast i32 %654 to float, !dbg !65
  %656 = bitcast float %652 to i32, !dbg !65
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 2, i32 31), !dbg !65
  %658 = bitcast i32 %657 to float, !dbg !65
  %659 = bitcast float %642 to i32, !dbg !65
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 2, i32 31), !dbg !65
  %661 = bitcast i32 %660 to float, !dbg !65
  %662 = fsub float %655, %647, !dbg !67
  %663 = fadd float %642, %661, !dbg !71
  %664 = fcmp oeq float %663, 0.000000e+00, !dbg !72
  %665 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %661, float %663) #3, !dbg !73
  %666 = select i1 %664, float 0.000000e+00, float %665, !dbg !74
  %667 = fmul float %666, %662, !dbg !75
  %668 = fadd float %647, %667, !dbg !76
  %669 = fadd float %652, %658, !dbg !77
  %670 = fmul float %662, %662, !dbg !78
  %671 = fmul float %642, %670, !dbg !79
  %672 = fmul float %666, %671, !dbg !80
  %673 = fadd float %669, %672, !dbg !81
  %674 = bitcast float %668 to i32, !dbg !65
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 1, i32 31), !dbg !65
  %676 = bitcast i32 %675 to float, !dbg !65
  %677 = bitcast float %673 to i32, !dbg !65
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 1, i32 31), !dbg !65
  %679 = bitcast i32 %678 to float, !dbg !65
  %680 = bitcast float %663 to i32, !dbg !65
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 1, i32 31), !dbg !65
  %682 = bitcast i32 %681 to float, !dbg !65
  %683 = fsub float %676, %668, !dbg !67
  %684 = fadd float %663, %682, !dbg !71
  %685 = fcmp oeq float %684, 0.000000e+00, !dbg !72
  %686 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %682, float %684) #3, !dbg !73
  %687 = select i1 %685, float 0.000000e+00, float %686, !dbg !74
  %688 = fmul float %687, %683, !dbg !75
  %689 = fadd float %668, %688, !dbg !76
  %690 = fadd float %673, %679, !dbg !77
  %691 = fmul float %683, %683, !dbg !78
  %692 = fmul float %663, %691, !dbg !79
  %693 = fmul float %687, %692, !dbg !80
  %694 = fadd float %690, %693, !dbg !81
  %695 = icmp eq i32 %488, 0, !dbg !65
  %696 = zext nneg i32 %487 to i64, !dbg !65
  %697 = getelementptr float, ptr addrspace(3) @global_smem, i64 %696, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %697, float %689, i1 %695) #3, !dbg !65
  %698 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %696, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, float %694, i1 %695) #3, !dbg !65
  %699 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %696, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %699, float %684, i1 %695) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %700 = icmp slt i32 %14, 8, !dbg !65
  %701 = sext i32 %14 to i64, !dbg !65
  %702 = getelementptr float, ptr addrspace(3) @global_smem, i64 %701, !dbg !65
  %703 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %702, i1 %700) #3, !dbg !65
  %704 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %701, !dbg !65
  %705 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %704, i1 %700) #3, !dbg !65
  %706 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %701, !dbg !65
  %707 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %706, i1 %700) #3, !dbg !65
  %708 = bitcast float %703 to i32, !dbg !65
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 4, i32 31), !dbg !65
  %710 = bitcast i32 %709 to float, !dbg !65
  %711 = bitcast float %705 to i32, !dbg !65
  %712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %711, i32 4, i32 31), !dbg !65
  %713 = bitcast i32 %712 to float, !dbg !65
  %714 = bitcast float %707 to i32, !dbg !65
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %714, i32 4, i32 31), !dbg !65
  %716 = bitcast i32 %715 to float, !dbg !65
  %717 = fsub float %710, %703, !dbg !67
  %718 = fadd float %707, %716, !dbg !71
  %719 = fcmp oeq float %718, 0.000000e+00, !dbg !72
  %720 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %716, float %718) #3, !dbg !73
  %721 = select i1 %719, float 0.000000e+00, float %720, !dbg !74
  %722 = fmul float %717, %721, !dbg !75
  %723 = fadd float %703, %722, !dbg !76
  %724 = fadd float %705, %713, !dbg !77
  %725 = fmul float %717, %717, !dbg !78
  %726 = fmul float %707, %725, !dbg !79
  %727 = fmul float %726, %721, !dbg !80
  %728 = fadd float %724, %727, !dbg !81
  %729 = bitcast float %723 to i32, !dbg !65
  %730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %729, i32 2, i32 31), !dbg !65
  %731 = bitcast i32 %730 to float, !dbg !65
  %732 = bitcast float %728 to i32, !dbg !65
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 2, i32 31), !dbg !65
  %734 = bitcast i32 %733 to float, !dbg !65
  %735 = bitcast float %718 to i32, !dbg !65
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 2, i32 31), !dbg !65
  %737 = bitcast i32 %736 to float, !dbg !65
  %738 = fsub float %731, %723, !dbg !67
  %739 = fadd float %718, %737, !dbg !71
  %740 = fcmp oeq float %739, 0.000000e+00, !dbg !72
  %741 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %737, float %739) #3, !dbg !73
  %742 = select i1 %740, float 0.000000e+00, float %741, !dbg !74
  %743 = fmul float %738, %742, !dbg !75
  %744 = fadd float %723, %743, !dbg !76
  %745 = fadd float %728, %734, !dbg !77
  %746 = fmul float %738, %738, !dbg !78
  %747 = fmul float %718, %746, !dbg !79
  %748 = fmul float %742, %747, !dbg !80
  %749 = fadd float %745, %748, !dbg !81
  %750 = bitcast float %744 to i32, !dbg !65
  %751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %750, i32 1, i32 31), !dbg !65
  %752 = bitcast i32 %751 to float, !dbg !65
  %753 = bitcast float %749 to i32, !dbg !65
  %754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %753, i32 1, i32 31), !dbg !65
  %755 = bitcast i32 %754 to float, !dbg !65
  %756 = bitcast float %739 to i32, !dbg !65
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 1, i32 31), !dbg !65
  %758 = bitcast i32 %757 to float, !dbg !65
  %759 = fsub float %752, %744, !dbg !67
  %760 = fadd float %739, %758, !dbg !71
  %761 = fcmp oeq float %760, 0.000000e+00, !dbg !72
  %762 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %758, float %760) #3, !dbg !73
  %763 = select i1 %761, float 0.000000e+00, float %762, !dbg !74
  %764 = fmul float %759, %763, !dbg !75
  %765 = fadd float %744, %764, !dbg !76
  %766 = fadd float %749, %755, !dbg !77
  %767 = fmul float %759, %759, !dbg !78
  %768 = fmul float %739, %767, !dbg !79
  %769 = fmul float %763, %768, !dbg !80
  %770 = fadd float %766, %769, !dbg !81
  %771 = and i32 %14, 7, !dbg !65
  %772 = icmp eq i32 %771, 0, !dbg !65
  %773 = and i1 %700, %772, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %702, float %765, i1 %773) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %704, float %770, i1 %773) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %706, float %760, i1 %773) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %774 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !65
  %775 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !65
  %776 = sext i32 %18 to i64, !dbg !82
  %777 = getelementptr float, ptr addrspace(1) %6, i64 %776, !dbg !82
  %778 = icmp eq i32 %urem, 0, !dbg !83
  %779 = and i1 %778, %19, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %774, ptr addrspace(1) %777, i1 %779) #3, !dbg !83
  %780 = getelementptr float, ptr addrspace(1) %7, i64 %776, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %775, ptr addrspace(1) %780, i1 %779) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "citx6by2jpdfwtl5ita376p7ckzqgbzwhtymzclpynsrxi6jx46r.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/it")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d891011de12", linkageName: "triton__0d1d2d3d4d5d6d7d891011de12", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 27, column: 18, scope: !5)
!12 = !DILocation(line: 36, column: 47, scope: !5)
!13 = !DILocation(line: 36, column: 51, scope: !5)
!14 = !DILocation(line: 36, column: 55, scope: !5)
!15 = !DILocation(line: 37, column: 43, scope: !5)
!16 = !DILocation(line: 31, column: 36, scope: !5)
!17 = !DILocation(line: 36, column: 69, scope: !5)
!18 = !DILocation(line: 33, column: 25, scope: !5)
!19 = !DILocation(line: 32, column: 27, scope: !5)
!20 = !DILocation(line: 35, column: 24, scope: !5)
!21 = !DILocation(line: 36, column: 44, scope: !5)
!22 = !DILocation(line: 36, column: 38, scope: !5)
!23 = !DILocation(line: 36, column: 61, scope: !5)
!24 = !DILocation(line: 36, column: 120, scope: !5)
!25 = !DILocation(line: 37, column: 40, scope: !5)
!26 = !DILocation(line: 37, column: 34, scope: !5)
!27 = !DILocation(line: 38, column: 34, scope: !5)
!28 = !DILocation(line: 39, column: 40, scope: !5)
!29 = !DILocation(line: 39, column: 34, scope: !5)
!30 = !DILocation(line: 40, column: 34, scope: !5)
!31 = !DILocation(line: 41, column: 35, scope: !5)
!32 = !DILocation(line: 41, column: 50, scope: !5)
!33 = !DILocation(line: 37, column: 49, scope: !5)
!34 = !DILocation(line: 37, column: 108, scope: !5)
!35 = !DILocation(line: 38, column: 57, scope: !5)
!36 = !DILocation(line: 45, column: 22, scope: !5)
!37 = !DILocation(line: 38, column: 116, scope: !5)
!38 = !DILocation(line: 39, column: 49, scope: !5)
!39 = !DILocation(line: 39, column: 108, scope: !5)
!40 = !DILocation(line: 40, column: 49, scope: !5)
!41 = !DILocation(line: 40, column: 108, scope: !5)
!42 = !DILocation(line: 41, column: 109, scope: !5)
!43 = !DILocation(line: 42, column: 22, scope: !5)
!44 = !DILocation(line: 44, column: 22, scope: !5)
!45 = !DILocation(line: 46, column: 22, scope: !5)
!46 = !DILocation(line: 47, column: 24, scope: !5)
!47 = !DILocation(line: 48, column: 23, scope: !5)
!48 = !DILocation(line: 49, column: 23, scope: !5)
!49 = !DILocation(line: 53, column: 66, scope: !5)
!50 = !DILocation(line: 105, column: 7, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !5, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!53 = !DILocation(line: 53, column: 55, scope: !51)
!54 = !DILocation(line: 111, column: 30, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 110, column: 24, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 112, column: 34, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 112, column: 26, scope: !51, inlinedAt: !53)
!58 = !DILocation(line: 113, column: 39, scope: !51, inlinedAt: !53)
!59 = !DILocation(line: 113, column: 31, scope: !51, inlinedAt: !53)
!60 = !DILocation(line: 113, column: 22, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 55, column: 62, scope: !5)
!62 = !DILocation(line: 56, column: 58, scope: !5)
!63 = !DILocation(line: 57, column: 66, scope: !5)
!64 = !DILocation(line: 58, column: 62, scope: !5)
!65 = !DILocation(line: 131, column: 46, scope: !51, inlinedAt: !66)
!66 = !DILocation(line: 60, column: 44, scope: !51)
!67 = !DILocation(line: 119, column: 21, scope: !68, inlinedAt: !69)
!68 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!69 = !DILocation(line: 131, column: 46, scope: !68, inlinedAt: !70)
!70 = !DILocation(line: 60, column: 44, scope: !68)
!71 = !DILocation(line: 120, column: 28, scope: !68, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 39, scope: !68, inlinedAt: !69)
!73 = !DILocation(line: 121, column: 60, scope: !68, inlinedAt: !69)
!74 = !DILocation(line: 121, column: 49, scope: !68, inlinedAt: !69)
!75 = !DILocation(line: 123, column: 25, scope: !68, inlinedAt: !69)
!76 = !DILocation(line: 123, column: 17, scope: !68, inlinedAt: !69)
!77 = !DILocation(line: 124, column: 15, scope: !68, inlinedAt: !69)
!78 = !DILocation(line: 124, column: 30, scope: !68, inlinedAt: !69)
!79 = !DILocation(line: 124, column: 38, scope: !68, inlinedAt: !69)
!80 = !DILocation(line: 124, column: 49, scope: !68, inlinedAt: !69)
!81 = !DILocation(line: 124, column: 22, scope: !68, inlinedAt: !69)
!82 = !DILocation(line: 65, column: 25, scope: !5)
!83 = !DILocation(line: 65, column: 37, scope: !5)
!84 = !DILocation(line: 66, column: 25, scope: !5)
!85 = !DILocation(line: 66, column: 37, scope: !5)
!86 = !DILocation(line: 66, column: 4, scope: !5)
