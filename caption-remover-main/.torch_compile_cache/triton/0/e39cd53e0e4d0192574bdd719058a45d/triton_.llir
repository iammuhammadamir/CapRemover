; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d6d7e8de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = and i32 %10, 31, !dbg !10
  %12 = lshr i32 %10, 5, !dbg !10
  %13 = and i32 %12, 3, !dbg !10
  %urem = shl i32 %10, 2, !dbg !10
  %14 = and i32 %urem, 508, !dbg !10
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %16 = icmp slt i32 %15, 59400, !dbg !12
  %17 = icmp ult i32 %14, 320, !dbg !13
  %18 = mul i32 %15, 320, !dbg !14
  %19 = add i32 %18, %14, !dbg !15
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr half, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = and i1 %17, %16, !dbg !17
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !18
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !18
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !18
  %extelt.offset = lshr i32 %24, 16, !dbg !18
  %extelt.offset1 = lshr i32 %25, 16, !dbg !18
  %26 = zext nneg i32 %14 to i64, !dbg !19
  %27 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !20
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %extelt.offset2 = lshr i32 %29, 16, !dbg !20
  %extelt.offset3 = lshr i32 %30, 16, !dbg !20
  %31 = getelementptr half, ptr addrspace(1) %2, i64 %20, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %extelt.offset4 = lshr i32 %33, 16, !dbg !22
  %extelt.offset5 = lshr i32 %34, 16, !dbg !22
  %35 = getelementptr half, ptr addrspace(1) %3, i64 %20, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !24
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %extelt.offset6 = lshr i32 %37, 16, !dbg !24
  %extelt.offset7 = lshr i32 %38, 16, !dbg !24
  %39 = getelementptr half, ptr addrspace(1) %4, i64 %26, !dbg !25
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !26
  %41 = getelementptr half, ptr addrspace(1) %5, i64 %26, !dbg !27
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #6, !dbg !28
  %43 = icmp eq i32 %11, 0, !dbg !29
  %44 = zext nneg i32 %13 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !29
  %46 = icmp slt i32 %10, 4, !dbg !29
  %47 = sext i32 %10 to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47, !dbg !29
  %49 = and i32 %10, 3, !dbg !29
  %50 = icmp eq i32 %49, 0, !dbg !29
  %51 = and i1 %46, %50, !dbg !29
  %52 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %53 = insertelement <2 x i32> %52, i32 %extelt.offset1, i64 1, !dbg !18
  %54 = trunc <2 x i32> %53 to <2 x i16>, !dbg !18
  %55 = bitcast <2 x i16> %54 to <2 x half>, !dbg !18
  %56 = fpext <2 x half> %55 to <2 x float>, !dbg !33
  %57 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %58 = insertelement <2 x i32> %57, i32 %extelt.offset3, i64 1, !dbg !20
  %59 = trunc <2 x i32> %58 to <2 x i16>, !dbg !20
  %60 = bitcast <2 x i16> %59 to <2 x half>, !dbg !20
  %61 = fpext <2 x half> %60 to <2 x float>, !dbg !34
  %62 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !22
  %63 = insertelement <2 x i32> %62, i32 %extelt.offset5, i64 1, !dbg !22
  %64 = trunc <2 x i32> %63 to <2 x i16>, !dbg !22
  %65 = bitcast <2 x i16> %64 to <2 x half>, !dbg !22
  %66 = fpext <2 x half> %65 to <2 x float>, !dbg !35
  %67 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !24
  %68 = insertelement <2 x i32> %67, i32 %extelt.offset7, i64 1, !dbg !24
  %69 = trunc <2 x i32> %68 to <2 x i16>, !dbg !24
  %70 = bitcast <2 x i16> %69 to <2 x half>, !dbg !24
  %71 = fpext <2 x half> %70 to <2 x float>, !dbg !36
  %72 = fadd <2 x float> %56, %61, !dbg !37
  %73 = fmul <2 x float> %66, <float 1.250000e-01, float 1.250000e-01>, !dbg !38
  %74 = fadd <2 x float> %72, %73, !dbg !39
  %75 = fadd <2 x float> %74, %71, !dbg !40
  %76 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %77 = insertelement <2 x i32> %76, i32 %extelt.offset, i64 1, !dbg !18
  %78 = trunc <2 x i32> %77 to <2 x i16>, !dbg !18
  %79 = bitcast <2 x i16> %78 to <2 x half>, !dbg !18
  %80 = fpext <2 x half> %79 to <2 x float>, !dbg !33
  %81 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %82 = insertelement <2 x i32> %81, i32 %extelt.offset2, i64 1, !dbg !20
  %83 = trunc <2 x i32> %82 to <2 x i16>, !dbg !20
  %84 = bitcast <2 x i16> %83 to <2 x half>, !dbg !20
  %85 = fpext <2 x half> %84 to <2 x float>, !dbg !34
  %86 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !22
  %87 = insertelement <2 x i32> %86, i32 %extelt.offset4, i64 1, !dbg !22
  %88 = trunc <2 x i32> %87 to <2 x i16>, !dbg !22
  %89 = bitcast <2 x i16> %88 to <2 x half>, !dbg !22
  %90 = fpext <2 x half> %89 to <2 x float>, !dbg !35
  %91 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !24
  %92 = insertelement <2 x i32> %91, i32 %extelt.offset6, i64 1, !dbg !24
  %93 = trunc <2 x i32> %92 to <2 x i16>, !dbg !24
  %94 = bitcast <2 x i16> %93 to <2 x half>, !dbg !24
  %95 = fpext <2 x half> %94 to <2 x float>, !dbg !36
  %96 = fadd <2 x float> %80, %85, !dbg !37
  %97 = fmul <2 x float> %90, <float 1.250000e-01, float 1.250000e-01>, !dbg !38
  %98 = fadd <2 x float> %96, %97, !dbg !39
  %99 = fadd <2 x float> %98, %95, !dbg !40
  %shift = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %100 = fadd <2 x float> %99, %shift, !dbg !41
  %101 = fadd <2 x float> %75, %100, !dbg !41
  %shift12 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %102 = fadd <2 x float> %shift12, %101, !dbg !41
  %103 = extractelement <2 x float> %102, i64 0, !dbg !41
  %104 = select i1 %22, float %103, float 0.000000e+00, !dbg !41
  %105 = bitcast float %104 to i32, !dbg !29
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = fadd float %104, %107, !dbg !41
  %109 = bitcast float %108 to i32, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 8, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fadd float %108, %111, !dbg !41
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fadd float %112, %115, !dbg !41
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !41
  %121 = bitcast float %120 to i32, !dbg !29
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = fadd float %120, %123, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, float %124, i1 %43) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %125 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #6, !dbg !29
  %126 = bitcast float %125 to i32, !dbg !29
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fadd float %125, %128, !dbg !41
  %130 = bitcast float %129 to i32, !dbg !29
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = fadd float %129, %132, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, float %133, i1 %51) #6, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %134 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !29
  %135 = fadd float %134, 0.000000e+00, !dbg !45
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 3.200000e+02) #6, !dbg !49
  %137 = insertelement <2 x float> poison, float %136, i64 0, !dbg !50
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %139 = fsub <2 x float> %99, %138, !dbg !50
  %140 = fsub <2 x float> %75, %138, !dbg !50
  %141 = fmul <2 x float> %139, %139, !dbg !51
  %142 = fmul <2 x float> %140, %140, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %shift13 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %143 = fadd <2 x float> %141, %shift13, !dbg !54
  %144 = fadd <2 x float> %142, %143, !dbg !54
  %shift14 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %145 = fadd <2 x float> %shift14, %144, !dbg !54
  %146 = extractelement <2 x float> %145, i64 0, !dbg !54
  %147 = select i1 %22, float %146, float 0.000000e+00, !dbg !54
  %148 = bitcast float %147 to i32, !dbg !52
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 16, i32 31), !dbg !52
  %150 = bitcast i32 %149 to float, !dbg !52
  %151 = fadd float %147, %150, !dbg !54
  %152 = bitcast float %151 to i32, !dbg !52
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 8, i32 31), !dbg !52
  %154 = bitcast i32 %153 to float, !dbg !52
  %155 = fadd float %151, %154, !dbg !54
  %156 = bitcast float %155 to i32, !dbg !52
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !52
  %158 = bitcast i32 %157 to float, !dbg !52
  %159 = fadd float %155, %158, !dbg !54
  %160 = bitcast float %159 to i32, !dbg !52
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !52
  %162 = bitcast i32 %161 to float, !dbg !52
  %163 = fadd float %159, %162, !dbg !54
  %164 = bitcast float %163 to i32, !dbg !52
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !52
  %166 = bitcast i32 %165 to float, !dbg !52
  %167 = fadd float %163, %166, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, float %167, i1 %43) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %168 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #6, !dbg !52
  %169 = bitcast float %168 to i32, !dbg !52
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !52
  %171 = bitcast i32 %170 to float, !dbg !52
  %172 = fadd float %168, %171, !dbg !54
  %173 = bitcast float %172 to i32, !dbg !52
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !52
  %175 = bitcast i32 %174 to float, !dbg !52
  %176 = fadd float %172, %175, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, float %176, i1 %51) #6, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %177 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !52
  %178 = fadd float %177, 0.000000e+00, !dbg !57
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float 3.200000e+02) #6, !dbg !59
  %180 = fadd float %179, 0x3EE4F8B580000000, !dbg !60
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !61
  %.not.i = icmp eq i32 %181, 0, !dbg !61
  br i1 %.not.i, label %184, label %182, !dbg !61

182:                                              ; preds = %9
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %180), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

184:                                              ; preds = %9
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %180), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

__nv_rsqrtf.exit:                                 ; preds = %182, %184
  %.0.i = phi float [ %183, %182 ], [ %185, %184 ], !dbg !61
  %186 = extractvalue { i32, i32 } %42, 1, !dbg !28
  %extelt.offset11 = lshr i32 %186, 16, !dbg !28
  %187 = extractvalue { i32, i32 } %42, 0, !dbg !28
  %extelt.offset10 = lshr i32 %187, 16, !dbg !28
  %188 = extractvalue { i32, i32 } %40, 1, !dbg !26
  %extelt.offset9 = lshr i32 %188, 16, !dbg !26
  %189 = extractvalue { i32, i32 } %40, 0, !dbg !26
  %extelt.offset8 = lshr i32 %189, 16, !dbg !26
  %190 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !62
  %191 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %192 = fmul <2 x float> %139, %191, !dbg !62
  %193 = fmul <2 x float> %140, %191, !dbg !62
  %194 = getelementptr half, ptr addrspace(1) %6, i64 %20, !dbg !63
  %195 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !28
  %196 = insertelement <2 x i32> %195, i32 %extelt.offset10, i64 1, !dbg !28
  %197 = trunc <2 x i32> %196 to <2 x i16>, !dbg !28
  %198 = bitcast <2 x i16> %197 to <2 x half>, !dbg !28
  %199 = fpext <2 x half> %198 to <2 x float>, !dbg !64
  %200 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !26
  %201 = insertelement <2 x i32> %200, i32 %extelt.offset8, i64 1, !dbg !26
  %202 = trunc <2 x i32> %201 to <2 x i16>, !dbg !26
  %203 = bitcast <2 x i16> %202 to <2 x half>, !dbg !26
  %204 = fpext <2 x half> %203 to <2 x float>, !dbg !65
  %205 = fmul <2 x float> %192, %204, !dbg !66
  %206 = fadd <2 x float> %205, %199, !dbg !67
  %207 = fptrunc <2 x float> %206 to <2 x half>, !dbg !68
  %208 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !28
  %209 = insertelement <2 x i32> %208, i32 %extelt.offset11, i64 1, !dbg !28
  %210 = trunc <2 x i32> %209 to <2 x i16>, !dbg !28
  %211 = bitcast <2 x i16> %210 to <2 x half>, !dbg !28
  %212 = fpext <2 x half> %211 to <2 x float>, !dbg !64
  %213 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !26
  %214 = insertelement <2 x i32> %213, i32 %extelt.offset9, i64 1, !dbg !26
  %215 = trunc <2 x i32> %214 to <2 x i16>, !dbg !26
  %216 = bitcast <2 x i16> %215 to <2 x half>, !dbg !26
  %217 = fpext <2 x half> %216 to <2 x float>, !dbg !65
  %218 = fmul <2 x float> %193, %217, !dbg !66
  %219 = fadd <2 x float> %218, %212, !dbg !67
  %220 = fptrunc <2 x float> %219 to <2 x half>, !dbg !68
  %221 = bitcast <2 x half> %207 to i32, !dbg !68
  %222 = bitcast <2 x half> %220 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %221, i32 %222, ptr addrspace(1) %194, i1 %22) #6, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "csxxctzkzmq3mygxu2cybjedlggk5ozlltem5kvgqe3lzcz76feg.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/sx")
!4 = !{ptr @triton__0d1d2d3d4d5d6d7e8de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d6d7e8de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7e8de", linkageName: "triton__0d1d2d3d4d5d6d7e8de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 26, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 27, column: 21, scope: !7)
!13 = !DILocation(line: 30, column: 21, scope: !7)
!14 = !DILocation(line: 33, column: 40, scope: !7)
!15 = !DILocation(line: 33, column: 36, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 46, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 46, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 46, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!32 = !DILocation(line: 51, column: 59, scope: !30)
!33 = !DILocation(line: 33, column: 75, scope: !7)
!34 = !DILocation(line: 34, column: 86, scope: !7)
!35 = !DILocation(line: 35, column: 75, scope: !7)
!36 = !DILocation(line: 36, column: 75, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 233, column: 15, scope: !42, inlinedAt: !43)
!42 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!43 = !DILocation(line: 243, column: 36, scope: !42, inlinedAt: !44)
!44 = !DILocation(line: 51, column: 59, scope: !42)
!45 = !DILocation(line: 17, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!48 = !DILocation(line: 51, column: 45, scope: !46)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 243, column: 36, scope: !30, inlinedAt: !53)
!53 = !DILocation(line: 59, column: 59, scope: !30)
!54 = !DILocation(line: 233, column: 15, scope: !42, inlinedAt: !55)
!55 = !DILocation(line: 243, column: 36, scope: !42, inlinedAt: !56)
!56 = !DILocation(line: 59, column: 59, scope: !42)
!57 = !DILocation(line: 17, column: 15, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 59, column: 45, scope: !46)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 28, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 72, column: 25, scope: !7)
!64 = !DILocation(line: 38, column: 87, scope: !7)
!65 = !DILocation(line: 37, column: 87, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 48, scope: !7)
!69 = !DILocation(line: 72, column: 4, scope: !7)
