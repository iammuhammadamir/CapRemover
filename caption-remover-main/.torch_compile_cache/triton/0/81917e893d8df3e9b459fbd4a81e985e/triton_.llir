; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = shl i32 %7, 3, !dbg !8
  %9 = and i32 %8, 8, !dbg !8
  %10 = lshr i32 %7, 6, !dbg !8
  %11 = and i32 %10, 3, !dbg !8
  %12 = or i32 %11, 4, !dbg !8
  %13 = or i32 %11, 8, !dbg !8
  %14 = or i32 %11, 12, !dbg !8
  %15 = lshr i32 %7, 1, !dbg !9
  %16 = and i32 %15, 127, !dbg !9
  %17 = or i32 %16, 128, !dbg !9
  %18 = shl i32 %7, 2, !dbg !9
  %19 = and i32 %18, 252, !dbg !9
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %22 = add i32 %21, 1, !dbg !12
  %23 = shl i32 %20, 4, !dbg !13
  %24 = mul i32 %23, %22, !dbg !14
  %25 = or i32 %24, %9, !dbg !15
  %26 = or i32 %24, %11, !dbg !15
  %27 = or i32 %24, %12, !dbg !15
  %28 = or i32 %24, %13, !dbg !15
  %29 = or i32 %24, %14, !dbg !15
  %30 = icmp slt i32 %25, 7040, !dbg !16
  %31 = icmp slt i32 %26, 7040, !dbg !16
  %32 = icmp slt i32 %27, 7040, !dbg !16
  %33 = icmp slt i32 %28, 7040, !dbg !16
  %34 = icmp slt i32 %29, 7040, !dbg !16
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !17
  %36 = shl i32 %35, 8, !dbg !18
  %37 = or i32 %36, %16, !dbg !19
  %38 = or i32 %36, %17, !dbg !19
  %39 = or i32 %36, %19, !dbg !19
  %40 = icmp slt i32 %37, 2700, !dbg !20
  %41 = icmp slt i32 %38, 2700, !dbg !20
  %42 = icmp slt i32 %39, 2700, !dbg !20
  %43 = srem i32 %26, 320, !dbg !21
  %44 = srem i32 %27, 320, !dbg !21
  %45 = srem i32 %28, 320, !dbg !21
  %46 = srem i32 %29, 320, !dbg !21
  %47 = mul i32 %37, 7040, !dbg !22
  %48 = mul i32 %38, 7040, !dbg !22
  %49 = add i32 %47, %25, !dbg !23
  %50 = add i32 %48, %25, !dbg !23
  %51 = sext i32 %49 to i64, !dbg !24
  %52 = getelementptr half, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %50 to i64, !dbg !24
  %54 = getelementptr half, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = and i1 %40, %30, !dbg !25
  %56 = and i1 %41, %30, !dbg !25
  %57 = and i1 %42, %31, !dbg !25
  %58 = and i1 %42, %32, !dbg !25
  %59 = and i1 %42, %33, !dbg !25
  %60 = and i1 %42, %34, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %55) #2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %66 = trunc i32 %62 to i16, !dbg !26
  %extelt.offset = lshr i32 %62, 16, !dbg !26
  %67 = trunc i32 %extelt.offset to i16, !dbg !26
  %68 = trunc i32 %63 to i16, !dbg !26
  %extelt.offset1 = lshr i32 %63, 16, !dbg !26
  %69 = trunc i32 %extelt.offset1 to i16, !dbg !26
  %70 = trunc i32 %64 to i16, !dbg !26
  %extelt.offset2 = lshr i32 %64, 16, !dbg !26
  %71 = trunc i32 %extelt.offset2 to i16, !dbg !26
  %72 = trunc i32 %65 to i16, !dbg !26
  %extelt.offset3 = lshr i32 %65, 16, !dbg !26
  %73 = trunc i32 %extelt.offset3 to i16, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %56) #2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = trunc i32 %75 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %75, 16, !dbg !26
  %80 = trunc i32 %extelt.offset4 to i16, !dbg !26
  %81 = trunc i32 %76 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %76, 16, !dbg !26
  %82 = trunc i32 %extelt.offset5 to i16, !dbg !26
  %83 = trunc i32 %77 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %77, 16, !dbg !26
  %84 = trunc i32 %extelt.offset6 to i16, !dbg !26
  %85 = trunc i32 %78 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %78, 16, !dbg !26
  %86 = trunc i32 %extelt.offset7 to i16, !dbg !26
  %87 = mul nuw nsw i32 %9, 257, !dbg !27
  %88 = add nuw nsw i32 %87, %16, !dbg !27
  %89 = zext nneg i32 %88 to i64, !dbg !27
  %90 = getelementptr half, ptr addrspace(3) @global_smem, i64 %89, !dbg !27
  store i16 %66, ptr addrspace(3) %90, align 2, !dbg !27
  %91 = add nuw nsw i32 %87, 257, !dbg !27
  %92 = add nuw nsw i32 %91, %16, !dbg !27
  %93 = zext nneg i32 %92 to i64, !dbg !27
  %94 = getelementptr half, ptr addrspace(3) @global_smem, i64 %93, !dbg !27
  store i16 %67, ptr addrspace(3) %94, align 2, !dbg !27
  %95 = add nuw nsw i32 %87, 514, !dbg !27
  %96 = add nuw nsw i32 %95, %16, !dbg !27
  %97 = zext nneg i32 %96 to i64, !dbg !27
  %98 = getelementptr half, ptr addrspace(3) @global_smem, i64 %97, !dbg !27
  store i16 %68, ptr addrspace(3) %98, align 2, !dbg !27
  %99 = add nuw nsw i32 %87, 771, !dbg !27
  %100 = add nuw nsw i32 %99, %16, !dbg !27
  %101 = zext nneg i32 %100 to i64, !dbg !27
  %102 = getelementptr half, ptr addrspace(3) @global_smem, i64 %101, !dbg !27
  store i16 %69, ptr addrspace(3) %102, align 2, !dbg !27
  %103 = add nuw nsw i32 %87, 1028, !dbg !27
  %104 = add nuw nsw i32 %103, %16, !dbg !27
  %105 = zext nneg i32 %104 to i64, !dbg !27
  %106 = getelementptr half, ptr addrspace(3) @global_smem, i64 %105, !dbg !27
  store i16 %70, ptr addrspace(3) %106, align 2, !dbg !27
  %107 = add nuw nsw i32 %87, 1285, !dbg !27
  %108 = add nuw nsw i32 %107, %16, !dbg !27
  %109 = zext nneg i32 %108 to i64, !dbg !27
  %110 = getelementptr half, ptr addrspace(3) @global_smem, i64 %109, !dbg !27
  store i16 %71, ptr addrspace(3) %110, align 2, !dbg !27
  %111 = add nuw nsw i32 %87, 1542, !dbg !27
  %112 = add nuw nsw i32 %111, %16, !dbg !27
  %113 = zext nneg i32 %112 to i64, !dbg !27
  %114 = getelementptr half, ptr addrspace(3) @global_smem, i64 %113, !dbg !27
  store i16 %72, ptr addrspace(3) %114, align 2, !dbg !27
  %115 = add nuw nsw i32 %87, 1799, !dbg !27
  %116 = add nuw nsw i32 %115, %16, !dbg !27
  %117 = zext nneg i32 %116 to i64, !dbg !27
  %118 = getelementptr half, ptr addrspace(3) @global_smem, i64 %117, !dbg !27
  store i16 %73, ptr addrspace(3) %118, align 2, !dbg !27
  %119 = add nuw nsw i32 %87, %17, !dbg !27
  %120 = zext nneg i32 %119 to i64, !dbg !27
  %121 = getelementptr half, ptr addrspace(3) @global_smem, i64 %120, !dbg !27
  store i16 %79, ptr addrspace(3) %121, align 2, !dbg !27
  %122 = add nuw nsw i32 %91, %17, !dbg !27
  %123 = zext nneg i32 %122 to i64, !dbg !27
  %124 = getelementptr half, ptr addrspace(3) @global_smem, i64 %123, !dbg !27
  store i16 %80, ptr addrspace(3) %124, align 2, !dbg !27
  %125 = add nuw nsw i32 %95, %17, !dbg !27
  %126 = zext nneg i32 %125 to i64, !dbg !27
  %127 = getelementptr half, ptr addrspace(3) @global_smem, i64 %126, !dbg !27
  store i16 %81, ptr addrspace(3) %127, align 2, !dbg !27
  %128 = add nuw nsw i32 %99, %17, !dbg !27
  %129 = zext nneg i32 %128 to i64, !dbg !27
  %130 = getelementptr half, ptr addrspace(3) @global_smem, i64 %129, !dbg !27
  store i16 %82, ptr addrspace(3) %130, align 2, !dbg !27
  %131 = add nuw nsw i32 %103, %17, !dbg !27
  %132 = zext nneg i32 %131 to i64, !dbg !27
  %133 = getelementptr half, ptr addrspace(3) @global_smem, i64 %132, !dbg !27
  store i16 %83, ptr addrspace(3) %133, align 2, !dbg !27
  %134 = add nuw nsw i32 %107, %17, !dbg !27
  %135 = zext nneg i32 %134 to i64, !dbg !27
  %136 = getelementptr half, ptr addrspace(3) @global_smem, i64 %135, !dbg !27
  store i16 %84, ptr addrspace(3) %136, align 2, !dbg !27
  %137 = add nuw nsw i32 %111, %17, !dbg !27
  %138 = zext nneg i32 %137 to i64, !dbg !27
  %139 = getelementptr half, ptr addrspace(3) @global_smem, i64 %138, !dbg !27
  store i16 %85, ptr addrspace(3) %139, align 2, !dbg !27
  %140 = add nuw nsw i32 %115, %17, !dbg !27
  %141 = zext nneg i32 %140 to i64, !dbg !27
  %142 = getelementptr half, ptr addrspace(3) @global_smem, i64 %141, !dbg !27
  store i16 %86, ptr addrspace(3) %142, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %143 = mul nuw nsw i32 %11, 257, !dbg !27
  %144 = add nuw nsw i32 %143, %19, !dbg !27
  %145 = zext nneg i32 %144 to i64, !dbg !27
  %146 = getelementptr half, ptr addrspace(3) @global_smem, i64 %145, !dbg !27
  %147 = load half, ptr addrspace(3) %146, align 2, !dbg !27
  %148 = or i32 %19, 1, !dbg !27
  %149 = add nuw nsw i32 %143, %148, !dbg !27
  %150 = zext nneg i32 %149 to i64, !dbg !27
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i64 %150, !dbg !27
  %152 = load half, ptr addrspace(3) %151, align 2, !dbg !27
  %153 = or i32 %19, 2, !dbg !27
  %154 = add nuw nsw i32 %143, %153, !dbg !27
  %155 = zext nneg i32 %154 to i64, !dbg !27
  %156 = getelementptr half, ptr addrspace(3) @global_smem, i64 %155, !dbg !27
  %157 = load half, ptr addrspace(3) %156, align 2, !dbg !27
  %158 = or i32 %19, 3, !dbg !27
  %159 = add nuw nsw i32 %143, %158, !dbg !27
  %160 = zext nneg i32 %159 to i64, !dbg !27
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i64 %160, !dbg !27
  %162 = load half, ptr addrspace(3) %161, align 2, !dbg !27
  %163 = mul nuw nsw i32 %12, 257, !dbg !27
  %164 = add nuw nsw i32 %163, %19, !dbg !27
  %165 = zext nneg i32 %164 to i64, !dbg !27
  %166 = getelementptr half, ptr addrspace(3) @global_smem, i64 %165, !dbg !27
  %167 = load half, ptr addrspace(3) %166, align 2, !dbg !27
  %168 = add nuw nsw i32 %163, %148, !dbg !27
  %169 = zext nneg i32 %168 to i64, !dbg !27
  %170 = getelementptr half, ptr addrspace(3) @global_smem, i64 %169, !dbg !27
  %171 = load half, ptr addrspace(3) %170, align 2, !dbg !27
  %172 = add nuw nsw i32 %163, %153, !dbg !27
  %173 = zext nneg i32 %172 to i64, !dbg !27
  %174 = getelementptr half, ptr addrspace(3) @global_smem, i64 %173, !dbg !27
  %175 = load half, ptr addrspace(3) %174, align 2, !dbg !27
  %176 = add nuw nsw i32 %163, %158, !dbg !27
  %177 = zext nneg i32 %176 to i64, !dbg !27
  %178 = getelementptr half, ptr addrspace(3) @global_smem, i64 %177, !dbg !27
  %179 = load half, ptr addrspace(3) %178, align 2, !dbg !27
  %180 = mul nuw nsw i32 %13, 257, !dbg !27
  %181 = add nuw nsw i32 %180, %19, !dbg !27
  %182 = zext nneg i32 %181 to i64, !dbg !27
  %183 = getelementptr half, ptr addrspace(3) @global_smem, i64 %182, !dbg !27
  %184 = load half, ptr addrspace(3) %183, align 2, !dbg !27
  %185 = add nuw nsw i32 %180, %148, !dbg !27
  %186 = zext nneg i32 %185 to i64, !dbg !27
  %187 = getelementptr half, ptr addrspace(3) @global_smem, i64 %186, !dbg !27
  %188 = load half, ptr addrspace(3) %187, align 2, !dbg !27
  %189 = add nuw nsw i32 %180, %153, !dbg !27
  %190 = zext nneg i32 %189 to i64, !dbg !27
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !27
  %192 = load half, ptr addrspace(3) %191, align 2, !dbg !27
  %193 = add nuw nsw i32 %180, %158, !dbg !27
  %194 = zext nneg i32 %193 to i64, !dbg !27
  %195 = getelementptr half, ptr addrspace(3) @global_smem, i64 %194, !dbg !27
  %196 = load half, ptr addrspace(3) %195, align 2, !dbg !27
  %197 = mul nuw nsw i32 %14, 257, !dbg !27
  %198 = add nuw nsw i32 %197, %19, !dbg !27
  %199 = zext nneg i32 %198 to i64, !dbg !27
  %200 = getelementptr half, ptr addrspace(3) @global_smem, i64 %199, !dbg !27
  %201 = load half, ptr addrspace(3) %200, align 2, !dbg !27
  %202 = add nuw nsw i32 %197, %148, !dbg !27
  %203 = zext nneg i32 %202 to i64, !dbg !27
  %204 = getelementptr half, ptr addrspace(3) @global_smem, i64 %203, !dbg !27
  %205 = load half, ptr addrspace(3) %204, align 2, !dbg !27
  %206 = add nuw nsw i32 %197, %153, !dbg !27
  %207 = zext nneg i32 %206 to i64, !dbg !27
  %208 = getelementptr half, ptr addrspace(3) @global_smem, i64 %207, !dbg !27
  %209 = load half, ptr addrspace(3) %208, align 2, !dbg !27
  %210 = add nuw nsw i32 %197, %158, !dbg !27
  %211 = zext nneg i32 %210 to i64, !dbg !27
  %212 = getelementptr half, ptr addrspace(3) @global_smem, i64 %211, !dbg !27
  %213 = load half, ptr addrspace(3) %212, align 2, !dbg !27
  %214 = sext i32 %43 to i64, !dbg !28
  %215 = getelementptr half, ptr addrspace(1) %1, i64 %214, !dbg !28
  %216 = sext i32 %44 to i64, !dbg !28
  %217 = getelementptr half, ptr addrspace(1) %1, i64 %216, !dbg !28
  %218 = sext i32 %45 to i64, !dbg !28
  %219 = getelementptr half, ptr addrspace(1) %1, i64 %218, !dbg !28
  %220 = sext i32 %46 to i64, !dbg !28
  %221 = getelementptr half, ptr addrspace(1) %1, i64 %220, !dbg !28
  %222 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %215, i1 %31) #2, !dbg !29
  %223 = bitcast i16 %222 to half, !dbg !29
  %224 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %215, i1 %31) #2, !dbg !29
  %225 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %215, i1 %31) #2, !dbg !29
  %226 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %215, i1 %31) #2, !dbg !29
  %227 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %217, i1 %32) #2, !dbg !29
  %228 = bitcast i16 %227 to half, !dbg !29
  %229 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %217, i1 %32) #2, !dbg !29
  %230 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %217, i1 %32) #2, !dbg !29
  %231 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %217, i1 %32) #2, !dbg !29
  %232 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %219, i1 %33) #2, !dbg !29
  %233 = bitcast i16 %232 to half, !dbg !29
  %234 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %219, i1 %33) #2, !dbg !29
  %235 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %219, i1 %33) #2, !dbg !29
  %236 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %219, i1 %33) #2, !dbg !29
  %237 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %221, i1 %34) #2, !dbg !29
  %238 = bitcast i16 %237 to half, !dbg !29
  %239 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %221, i1 %34) #2, !dbg !29
  %240 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %221, i1 %34) #2, !dbg !29
  %241 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %221, i1 %34) #2, !dbg !29
  %242 = fpext half %223 to float, !dbg !30
  %243 = fpext half %228 to float, !dbg !30
  %244 = fpext half %233 to float, !dbg !30
  %245 = fpext half %238 to float, !dbg !30
  %246 = mul i32 %26, 2700, !dbg !31
  %247 = mul i32 %27, 2700, !dbg !31
  %248 = mul i32 %28, 2700, !dbg !31
  %249 = mul i32 %29, 2700, !dbg !31
  %250 = add i32 %246, %39, !dbg !32
  %251 = add i32 %247, %39, !dbg !32
  %252 = add i32 %248, %39, !dbg !32
  %253 = add i32 %249, %39, !dbg !32
  %254 = sext i32 %250 to i64, !dbg !33
  %255 = getelementptr half, ptr addrspace(1) %2, i64 %254, !dbg !33
  %256 = sext i32 %251 to i64, !dbg !33
  %257 = getelementptr half, ptr addrspace(1) %2, i64 %256, !dbg !33
  %258 = sext i32 %252 to i64, !dbg !33
  %259 = getelementptr half, ptr addrspace(1) %2, i64 %258, !dbg !33
  %260 = sext i32 %253 to i64, !dbg !33
  %261 = getelementptr half, ptr addrspace(1) %2, i64 %260, !dbg !33
  %262 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %255, i1 %57) #2, !dbg !34
  %263 = extractvalue { i32, i32 } %262, 0, !dbg !34
  %264 = extractvalue { i32, i32 } %262, 1, !dbg !34
  %extelt.offset8 = lshr i32 %263, 16, !dbg !34
  %extelt.offset9 = lshr i32 %264, 16, !dbg !34
  %265 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %257, i1 %58) #2, !dbg !34
  %266 = extractvalue { i32, i32 } %265, 0, !dbg !34
  %267 = extractvalue { i32, i32 } %265, 1, !dbg !34
  %extelt.offset10 = lshr i32 %266, 16, !dbg !34
  %extelt.offset11 = lshr i32 %267, 16, !dbg !34
  %268 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %259, i1 %59) #2, !dbg !34
  %269 = extractvalue { i32, i32 } %268, 0, !dbg !34
  %270 = extractvalue { i32, i32 } %268, 1, !dbg !34
  %extelt.offset12 = lshr i32 %269, 16, !dbg !34
  %extelt.offset13 = lshr i32 %270, 16, !dbg !34
  %271 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %261, i1 %60) #2, !dbg !34
  %272 = extractvalue { i32, i32 } %271, 0, !dbg !34
  %273 = extractvalue { i32, i32 } %271, 1, !dbg !34
  %extelt.offset14 = lshr i32 %272, 16, !dbg !34
  %extelt.offset15 = lshr i32 %273, 16, !dbg !34
  %274 = getelementptr half, ptr addrspace(1) %3, i64 %254, !dbg !35
  %275 = getelementptr half, ptr addrspace(1) %3, i64 %256, !dbg !35
  %276 = getelementptr half, ptr addrspace(1) %3, i64 %258, !dbg !35
  %277 = getelementptr half, ptr addrspace(1) %3, i64 %260, !dbg !35
  %278 = insertelement <2 x half> poison, half %147, i64 0, !dbg !36
  %279 = insertelement <2 x half> %278, half %152, i64 1, !dbg !36
  %280 = fpext <2 x half> %279 to <2 x float>, !dbg !36
  %281 = insertelement <2 x i32> poison, i32 %263, i64 0, !dbg !34
  %282 = insertelement <2 x i32> %281, i32 %extelt.offset8, i64 1, !dbg !34
  %283 = trunc <2 x i32> %282 to <2 x i16>, !dbg !34
  %284 = bitcast <2 x i16> %283 to <2 x half>, !dbg !34
  %285 = fpext <2 x half> %284 to <2 x float>, !dbg !37
  %286 = insertelement <2 x float> poison, float %242, i64 0, !dbg !27
  %287 = shufflevector <2 x float> %286, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %288 = fadd <2 x float> %287, %280, !dbg !27
  %289 = fadd <2 x float> %288, %285, !dbg !38
  %290 = fptrunc <2 x float> %289 to <2 x half>, !dbg !39
  %291 = insertelement <2 x half> poison, half %157, i64 0, !dbg !36
  %292 = insertelement <2 x half> %291, half %162, i64 1, !dbg !36
  %293 = fpext <2 x half> %292 to <2 x float>, !dbg !36
  %294 = insertelement <2 x i32> poison, i32 %264, i64 0, !dbg !34
  %295 = insertelement <2 x i32> %294, i32 %extelt.offset9, i64 1, !dbg !34
  %296 = trunc <2 x i32> %295 to <2 x i16>, !dbg !34
  %297 = bitcast <2 x i16> %296 to <2 x half>, !dbg !34
  %298 = fpext <2 x half> %297 to <2 x float>, !dbg !37
  %299 = fadd <2 x float> %287, %293, !dbg !27
  %300 = fadd <2 x float> %299, %298, !dbg !38
  %301 = fptrunc <2 x float> %300 to <2 x half>, !dbg !39
  %302 = insertelement <2 x half> poison, half %167, i64 0, !dbg !36
  %303 = insertelement <2 x half> %302, half %171, i64 1, !dbg !36
  %304 = fpext <2 x half> %303 to <2 x float>, !dbg !36
  %305 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !34
  %306 = insertelement <2 x i32> %305, i32 %extelt.offset10, i64 1, !dbg !34
  %307 = trunc <2 x i32> %306 to <2 x i16>, !dbg !34
  %308 = bitcast <2 x i16> %307 to <2 x half>, !dbg !34
  %309 = fpext <2 x half> %308 to <2 x float>, !dbg !37
  %310 = insertelement <2 x float> poison, float %243, i64 0, !dbg !27
  %311 = shufflevector <2 x float> %310, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %312 = fadd <2 x float> %311, %304, !dbg !27
  %313 = fadd <2 x float> %312, %309, !dbg !38
  %314 = fptrunc <2 x float> %313 to <2 x half>, !dbg !39
  %315 = insertelement <2 x half> poison, half %175, i64 0, !dbg !36
  %316 = insertelement <2 x half> %315, half %179, i64 1, !dbg !36
  %317 = fpext <2 x half> %316 to <2 x float>, !dbg !36
  %318 = insertelement <2 x i32> poison, i32 %267, i64 0, !dbg !34
  %319 = insertelement <2 x i32> %318, i32 %extelt.offset11, i64 1, !dbg !34
  %320 = trunc <2 x i32> %319 to <2 x i16>, !dbg !34
  %321 = bitcast <2 x i16> %320 to <2 x half>, !dbg !34
  %322 = fpext <2 x half> %321 to <2 x float>, !dbg !37
  %323 = fadd <2 x float> %311, %317, !dbg !27
  %324 = fadd <2 x float> %323, %322, !dbg !38
  %325 = fptrunc <2 x float> %324 to <2 x half>, !dbg !39
  %326 = insertelement <2 x half> poison, half %184, i64 0, !dbg !36
  %327 = insertelement <2 x half> %326, half %188, i64 1, !dbg !36
  %328 = fpext <2 x half> %327 to <2 x float>, !dbg !36
  %329 = insertelement <2 x i32> poison, i32 %269, i64 0, !dbg !34
  %330 = insertelement <2 x i32> %329, i32 %extelt.offset12, i64 1, !dbg !34
  %331 = trunc <2 x i32> %330 to <2 x i16>, !dbg !34
  %332 = bitcast <2 x i16> %331 to <2 x half>, !dbg !34
  %333 = fpext <2 x half> %332 to <2 x float>, !dbg !37
  %334 = insertelement <2 x float> poison, float %244, i64 0, !dbg !27
  %335 = shufflevector <2 x float> %334, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %336 = fadd <2 x float> %335, %328, !dbg !27
  %337 = fadd <2 x float> %336, %333, !dbg !38
  %338 = fptrunc <2 x float> %337 to <2 x half>, !dbg !39
  %339 = insertelement <2 x half> poison, half %192, i64 0, !dbg !36
  %340 = insertelement <2 x half> %339, half %196, i64 1, !dbg !36
  %341 = fpext <2 x half> %340 to <2 x float>, !dbg !36
  %342 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !34
  %343 = insertelement <2 x i32> %342, i32 %extelt.offset13, i64 1, !dbg !34
  %344 = trunc <2 x i32> %343 to <2 x i16>, !dbg !34
  %345 = bitcast <2 x i16> %344 to <2 x half>, !dbg !34
  %346 = fpext <2 x half> %345 to <2 x float>, !dbg !37
  %347 = fadd <2 x float> %335, %341, !dbg !27
  %348 = fadd <2 x float> %347, %346, !dbg !38
  %349 = fptrunc <2 x float> %348 to <2 x half>, !dbg !39
  %350 = insertelement <2 x half> poison, half %201, i64 0, !dbg !36
  %351 = insertelement <2 x half> %350, half %205, i64 1, !dbg !36
  %352 = fpext <2 x half> %351 to <2 x float>, !dbg !36
  %353 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !34
  %354 = insertelement <2 x i32> %353, i32 %extelt.offset14, i64 1, !dbg !34
  %355 = trunc <2 x i32> %354 to <2 x i16>, !dbg !34
  %356 = bitcast <2 x i16> %355 to <2 x half>, !dbg !34
  %357 = fpext <2 x half> %356 to <2 x float>, !dbg !37
  %358 = insertelement <2 x float> poison, float %245, i64 0, !dbg !27
  %359 = shufflevector <2 x float> %358, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %360 = fadd <2 x float> %359, %352, !dbg !27
  %361 = fadd <2 x float> %360, %357, !dbg !38
  %362 = fptrunc <2 x float> %361 to <2 x half>, !dbg !39
  %363 = insertelement <2 x half> poison, half %209, i64 0, !dbg !36
  %364 = insertelement <2 x half> %363, half %213, i64 1, !dbg !36
  %365 = fpext <2 x half> %364 to <2 x float>, !dbg !36
  %366 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !34
  %367 = insertelement <2 x i32> %366, i32 %extelt.offset15, i64 1, !dbg !34
  %368 = trunc <2 x i32> %367 to <2 x i16>, !dbg !34
  %369 = bitcast <2 x i16> %368 to <2 x half>, !dbg !34
  %370 = fpext <2 x half> %369 to <2 x float>, !dbg !37
  %371 = fadd <2 x float> %359, %365, !dbg !27
  %372 = fadd <2 x float> %371, %370, !dbg !38
  %373 = fptrunc <2 x float> %372 to <2 x half>, !dbg !39
  %374 = bitcast <2 x half> %290 to i32, !dbg !39
  %375 = bitcast <2 x half> %301 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %374, i32 %375, ptr addrspace(1) %274, i1 %57) #2, !dbg !39
  %376 = bitcast <2 x half> %314 to i32, !dbg !39
  %377 = bitcast <2 x half> %325 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %376, i32 %377, ptr addrspace(1) %275, i1 %58) #2, !dbg !39
  %378 = bitcast <2 x half> %338 to i32, !dbg !39
  %379 = bitcast <2 x half> %349 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %378, i32 %379, ptr addrspace(1) %276, i1 %59) #2, !dbg !39
  %380 = bitcast <2 x half> %362 to i32, !dbg !39
  %381 = bitcast <2 x half> %373 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %380, i32 %381, ptr addrspace(1) %277, i1 %60) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cx7ckqfutqse3ilr2z62el5q32t7bwenw24l2vqyqcz2dwwtd4wo.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/x7")
!3 = !{ptr @triton__0d1d2d3d4de5, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5", linkageName: "triton__0d1d2d3d4de5", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 25, column: 21, scope: !5)
!17 = !DILocation(line: 26, column: 28, scope: !5)
!18 = !DILocation(line: 26, column: 33, scope: !5)
!19 = !DILocation(line: 27, column: 23, scope: !5)
!20 = !DILocation(line: 28, column: 21, scope: !5)
!21 = !DILocation(line: 31, column: 18, scope: !5)
!22 = !DILocation(line: 32, column: 41, scope: !5)
!23 = !DILocation(line: 32, column: 36, scope: !5)
!24 = !DILocation(line: 32, column: 30, scope: !5)
!25 = !DILocation(line: 32, column: 55, scope: !5)
!26 = !DILocation(line: 32, column: 47, scope: !5)
!27 = !DILocation(line: 35, column: 18, scope: !5)
!28 = !DILocation(line: 33, column: 30, scope: !5)
!29 = !DILocation(line: 33, column: 35, scope: !5)
!30 = !DILocation(line: 33, column: 75, scope: !5)
!31 = !DILocation(line: 34, column: 41, scope: !5)
!32 = !DILocation(line: 34, column: 36, scope: !5)
!33 = !DILocation(line: 34, column: 30, scope: !5)
!34 = !DILocation(line: 34, column: 47, scope: !5)
!35 = !DILocation(line: 37, column: 25, scope: !5)
!36 = !DILocation(line: 32, column: 95, scope: !5)
!37 = !DILocation(line: 34, column: 95, scope: !5)
!38 = !DILocation(line: 36, column: 18, scope: !5)
!39 = !DILocation(line: 37, column: 48, scope: !5)
!40 = !DILocation(line: 37, column: 4, scope: !5)
