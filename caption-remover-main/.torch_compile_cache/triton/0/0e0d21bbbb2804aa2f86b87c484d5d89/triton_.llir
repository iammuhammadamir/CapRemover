; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4de5de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %8 = lshr i32 %7, 3, !dbg !8
  %9 = and i32 %8, 31, !dbg !8
  %10 = or i32 %9, 32, !dbg !8
  %11 = shl i32 %7, 3, !dbg !8
  %12 = and i32 %11, 56, !dbg !8
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !9
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !10
  %15 = add i32 %14, 1, !dbg !11
  %16 = shl i32 %13, 6, !dbg !12
  %17 = mul i32 %16, %15, !dbg !13
  %18 = or i32 %17, %9, !dbg !14
  %19 = or i32 %17, %10, !dbg !14
  %20 = or i32 %17, %12, !dbg !14
  %21 = icmp slt i32 %18, 4048, !dbg !15
  %22 = icmp slt i32 %19, 4048, !dbg !15
  %23 = icmp slt i32 %20, 4048, !dbg !15
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !16
  %25 = shl i32 %24, 6, !dbg !17
  %26 = or i32 %25, %12, !dbg !18
  %27 = or i32 %25, %9, !dbg !18
  %28 = or i32 %25, %10, !dbg !18
  %29 = icmp slt i32 %26, 1280, !dbg !19
  %30 = icmp slt i32 %27, 1280, !dbg !19
  %31 = icmp slt i32 %28, 1280, !dbg !19
  %.frozen = freeze i32 %20
  %32 = sdiv i32 %.frozen, 184, !dbg !20
  %33 = mul i32 %32, 184
  %.decomposed = sub i32 %.frozen, %33
  %34 = mul i32 %18, 1280, !dbg !21
  %35 = mul i32 %19, 1280, !dbg !21
  %36 = add i32 %34, %26, !dbg !22
  %37 = add i32 %35, %26, !dbg !22
  %38 = sext i32 %36 to i64, !dbg !23
  %39 = getelementptr half, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = sext i32 %37 to i64, !dbg !23
  %41 = getelementptr half, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = and i1 %29, %21, !dbg !24
  %43 = and i1 %29, %22, !dbg !24
  %44 = and i1 %30, %23, !dbg !24
  %45 = and i1 %31, %23, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %42) #2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %43) #2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %56 = trunc i32 %52 to i16, !dbg !25
  %57 = bitcast i16 %56 to half, !dbg !25
  %58 = trunc i32 %53 to i16, !dbg !25
  %59 = bitcast i16 %58 to half, !dbg !25
  %60 = trunc i32 %54 to i16, !dbg !25
  %61 = bitcast i16 %60 to half, !dbg !25
  %62 = trunc i32 %55 to i16, !dbg !25
  %63 = bitcast i16 %62 to half, !dbg !25
  %64 = fpext half %57 to float, !dbg !26
  %65 = fpext half %59 to float, !dbg !26
  %66 = fpext half %61 to float, !dbg !26
  %67 = fpext half %63 to float, !dbg !26
  %68 = sext i32 %26 to i64, !dbg !27
  %69 = getelementptr half, ptr addrspace(1) %1, i64 %68, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %29) #2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %extelt.offset8 = lshr i32 %71, 16, !dbg !28
  %75 = trunc i32 %extelt.offset8 to i16, !dbg !28
  %76 = bitcast i16 %75 to half, !dbg !28
  %extelt.offset9 = lshr i32 %72, 16, !dbg !28
  %77 = trunc i32 %extelt.offset9 to i16, !dbg !28
  %78 = bitcast i16 %77 to half, !dbg !28
  %extelt.offset10 = lshr i32 %73, 16, !dbg !28
  %79 = trunc i32 %extelt.offset10 to i16, !dbg !28
  %80 = bitcast i16 %79 to half, !dbg !28
  %extelt.offset11 = lshr i32 %74, 16, !dbg !28
  %81 = trunc i32 %extelt.offset11 to i16, !dbg !28
  %82 = bitcast i16 %81 to half, !dbg !28
  %83 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %84 = insertelement <2 x i32> %83, i32 %71, i64 1, !dbg !25
  %85 = trunc <2 x i32> %84 to <2 x i16>, !dbg !25
  %86 = bitcast <2 x i16> %85 to <2 x half>, !dbg !25
  %87 = fpext <2 x half> %86 to <2 x float>, !dbg !26
  %88 = fpext half %76 to float, !dbg !29
  %89 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !25
  %90 = insertelement <2 x i32> %89, i32 %72, i64 1, !dbg !25
  %91 = trunc <2 x i32> %90 to <2 x i16>, !dbg !25
  %92 = bitcast <2 x i16> %91 to <2 x half>, !dbg !25
  %93 = fpext <2 x half> %92 to <2 x float>, !dbg !26
  %94 = fpext half %78 to float, !dbg !29
  %95 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !25
  %96 = insertelement <2 x i32> %95, i32 %73, i64 1, !dbg !25
  %97 = trunc <2 x i32> %96 to <2 x i16>, !dbg !25
  %98 = bitcast <2 x i16> %97 to <2 x half>, !dbg !25
  %99 = fpext <2 x half> %98 to <2 x float>, !dbg !26
  %100 = fpext half %80 to float, !dbg !29
  %101 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !25
  %102 = insertelement <2 x i32> %101, i32 %74, i64 1, !dbg !25
  %103 = trunc <2 x i32> %102 to <2 x i16>, !dbg !25
  %104 = bitcast <2 x i16> %103 to <2 x half>, !dbg !25
  %105 = fpext <2 x half> %104 to <2 x float>, !dbg !26
  %106 = fpext half %82 to float, !dbg !29
  %107 = getelementptr half, ptr addrspace(1) %2, i64 %38, !dbg !30
  %108 = getelementptr half, ptr addrspace(1) %2, i64 %40, !dbg !30
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %42) #2, !dbg !31
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !31
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !31
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !31
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !31
  %114 = trunc i32 %110 to i16, !dbg !31
  %115 = bitcast i16 %114 to half, !dbg !31
  %116 = trunc i32 %111 to i16, !dbg !31
  %117 = bitcast i16 %116 to half, !dbg !31
  %118 = trunc i32 %112 to i16, !dbg !31
  %119 = bitcast i16 %118 to half, !dbg !31
  %120 = trunc i32 %113 to i16, !dbg !31
  %121 = bitcast i16 %120 to half, !dbg !31
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %43) #2, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !31
  %127 = trunc i32 %123 to i16, !dbg !31
  %128 = bitcast i16 %127 to half, !dbg !31
  %129 = trunc i32 %124 to i16, !dbg !31
  %130 = bitcast i16 %129 to half, !dbg !31
  %131 = trunc i32 %125 to i16, !dbg !31
  %132 = bitcast i16 %131 to half, !dbg !31
  %133 = trunc i32 %126 to i16, !dbg !31
  %134 = bitcast i16 %133 to half, !dbg !31
  %135 = fpext half %115 to float, !dbg !32
  %136 = fpext half %117 to float, !dbg !32
  %137 = fpext half %119 to float, !dbg !32
  %138 = fpext half %121 to float, !dbg !32
  %139 = fpext half %128 to float, !dbg !32
  %140 = fpext half %130 to float, !dbg !32
  %141 = fpext half %132 to float, !dbg !32
  %142 = fpext half %134 to float, !dbg !32
  %143 = extractelement <2 x float> %87, i64 0, !dbg !33
  %144 = extractelement <2 x float> %87, i64 1, !dbg !33
  %145 = fadd float %143, %144, !dbg !33
  %146 = extractelement <2 x float> %93, i64 0, !dbg !33
  %147 = extractelement <2 x float> %93, i64 1, !dbg !33
  %148 = fadd float %146, %147, !dbg !33
  %149 = extractelement <2 x float> %99, i64 0, !dbg !33
  %150 = extractelement <2 x float> %99, i64 1, !dbg !33
  %151 = fadd float %149, %150, !dbg !33
  %152 = extractelement <2 x float> %105, i64 0, !dbg !33
  %153 = extractelement <2 x float> %105, i64 1, !dbg !33
  %154 = fadd float %152, %153, !dbg !33
  %155 = fadd float %144, %64, !dbg !33
  %156 = fadd float %147, %65, !dbg !33
  %157 = fadd float %150, %66, !dbg !33
  %158 = fadd float %153, %67, !dbg !33
  %159 = fmul float %135, 1.250000e-01, !dbg !34
  %160 = insertelement <2 x i32> %83, i32 %110, i64 1, !dbg !25
  %161 = lshr <2 x i32> %160, <i32 16, i32 16>, !dbg !25
  %162 = trunc <2 x i32> %161 to <2 x i16>, !dbg !25
  %163 = bitcast <2 x i16> %162 to <2 x half>, !dbg !25
  %164 = fpext <2 x half> %163 to <2 x float>, !dbg !26
  %165 = fmul float %136, 1.250000e-01, !dbg !34
  %166 = insertelement <2 x i32> %89, i32 %111, i64 1, !dbg !25
  %167 = lshr <2 x i32> %166, <i32 16, i32 16>, !dbg !25
  %168 = trunc <2 x i32> %167 to <2 x i16>, !dbg !25
  %169 = bitcast <2 x i16> %168 to <2 x half>, !dbg !25
  %170 = fpext <2 x half> %169 to <2 x float>, !dbg !26
  %171 = fmul float %137, 1.250000e-01, !dbg !34
  %172 = insertelement <2 x i32> %95, i32 %112, i64 1, !dbg !25
  %173 = lshr <2 x i32> %172, <i32 16, i32 16>, !dbg !25
  %174 = trunc <2 x i32> %173 to <2 x i16>, !dbg !25
  %175 = bitcast <2 x i16> %174 to <2 x half>, !dbg !25
  %176 = fpext <2 x half> %175 to <2 x float>, !dbg !26
  %177 = fmul float %138, 1.250000e-01, !dbg !34
  %178 = insertelement <2 x i32> %101, i32 %113, i64 1, !dbg !25
  %179 = lshr <2 x i32> %178, <i32 16, i32 16>, !dbg !25
  %180 = trunc <2 x i32> %179 to <2 x i16>, !dbg !25
  %181 = bitcast <2 x i16> %180 to <2 x half>, !dbg !25
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !26
  %183 = fmul float %139, 1.250000e-01, !dbg !34
  %184 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !25
  %185 = insertelement <2 x i32> %184, i32 %123, i64 1, !dbg !25
  %186 = lshr <2 x i32> %185, <i32 16, i32 16>, !dbg !25
  %187 = trunc <2 x i32> %186 to <2 x i16>, !dbg !25
  %188 = bitcast <2 x i16> %187 to <2 x half>, !dbg !25
  %189 = fpext <2 x half> %188 to <2 x float>, !dbg !26
  %190 = fmul float %140, 1.250000e-01, !dbg !34
  %191 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !25
  %192 = insertelement <2 x i32> %191, i32 %124, i64 1, !dbg !25
  %193 = lshr <2 x i32> %192, <i32 16, i32 16>, !dbg !25
  %194 = trunc <2 x i32> %193 to <2 x i16>, !dbg !25
  %195 = bitcast <2 x i16> %194 to <2 x half>, !dbg !25
  %196 = fpext <2 x half> %195 to <2 x float>, !dbg !26
  %197 = fmul float %141, 1.250000e-01, !dbg !34
  %198 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !25
  %199 = insertelement <2 x i32> %198, i32 %125, i64 1, !dbg !25
  %200 = lshr <2 x i32> %199, <i32 16, i32 16>, !dbg !25
  %201 = trunc <2 x i32> %200 to <2 x i16>, !dbg !25
  %202 = bitcast <2 x i16> %201 to <2 x half>, !dbg !25
  %203 = fpext <2 x half> %202 to <2 x float>, !dbg !26
  %204 = fmul float %142, 1.250000e-01, !dbg !34
  %205 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !25
  %206 = insertelement <2 x i32> %205, i32 %126, i64 1, !dbg !25
  %207 = lshr <2 x i32> %206, <i32 16, i32 16>, !dbg !25
  %208 = trunc <2 x i32> %207 to <2 x i16>, !dbg !25
  %209 = bitcast <2 x i16> %208 to <2 x half>, !dbg !25
  %210 = fpext <2 x half> %209 to <2 x float>, !dbg !26
  %211 = fadd float %145, %159, !dbg !35
  %212 = extractelement <2 x float> %164, i64 0, !dbg !35
  %213 = fadd float %212, %88, !dbg !35
  %214 = extractelement <2 x float> %164, i64 1, !dbg !35
  %215 = fmul float %214, 1.250000e-01, !dbg !35
  %216 = fadd float %213, %215, !dbg !35
  %217 = fadd float %148, %165, !dbg !35
  %218 = extractelement <2 x float> %170, i64 0, !dbg !35
  %219 = fadd float %218, %94, !dbg !35
  %220 = extractelement <2 x float> %170, i64 1, !dbg !35
  %221 = fmul float %220, 1.250000e-01, !dbg !35
  %222 = fadd float %219, %221, !dbg !35
  %223 = fadd float %151, %171, !dbg !35
  %224 = extractelement <2 x float> %176, i64 0, !dbg !35
  %225 = fadd float %224, %100, !dbg !35
  %226 = extractelement <2 x float> %176, i64 1, !dbg !35
  %227 = fmul float %226, 1.250000e-01, !dbg !35
  %228 = fadd float %225, %227, !dbg !35
  %229 = fadd float %154, %177, !dbg !35
  %230 = extractelement <2 x float> %182, i64 0, !dbg !35
  %231 = fadd float %230, %106, !dbg !35
  %232 = extractelement <2 x float> %182, i64 1, !dbg !35
  %233 = fmul float %232, 1.250000e-01, !dbg !35
  %234 = fadd float %231, %233, !dbg !35
  %235 = fadd float %155, %183, !dbg !35
  %236 = extractelement <2 x float> %189, i64 0, !dbg !35
  %237 = fadd float %236, %88, !dbg !35
  %238 = extractelement <2 x float> %189, i64 1, !dbg !35
  %239 = fmul float %238, 1.250000e-01, !dbg !35
  %240 = fadd float %237, %239, !dbg !35
  %241 = fadd float %156, %190, !dbg !35
  %242 = extractelement <2 x float> %196, i64 0, !dbg !35
  %243 = fadd float %242, %94, !dbg !35
  %244 = extractelement <2 x float> %196, i64 1, !dbg !35
  %245 = fmul float %244, 1.250000e-01, !dbg !35
  %246 = fadd float %243, %245, !dbg !35
  %247 = fadd float %157, %197, !dbg !35
  %248 = extractelement <2 x float> %203, i64 0, !dbg !35
  %249 = fadd float %248, %100, !dbg !35
  %250 = extractelement <2 x float> %203, i64 1, !dbg !35
  %251 = fmul float %250, 1.250000e-01, !dbg !35
  %252 = fadd float %249, %251, !dbg !35
  %253 = fadd float %158, %204, !dbg !35
  %254 = extractelement <2 x float> %210, i64 0, !dbg !35
  %255 = fadd float %254, %106, !dbg !35
  %256 = extractelement <2 x float> %210, i64 1, !dbg !35
  %257 = fmul float %256, 1.250000e-01, !dbg !35
  %258 = fadd float %255, %257, !dbg !35
  %259 = mul i32 %27, 184, !dbg !36
  %260 = mul i32 %28, 184, !dbg !36
  %261 = mul i32 %32, 235520, !dbg !37
  %262 = add i32 %261, %.decomposed, !dbg !38
  %263 = add i32 %262, %259, !dbg !39
  %264 = add i32 %262, %260, !dbg !39
  %265 = sext i32 %263 to i64, !dbg !40
  %266 = getelementptr half, ptr addrspace(1) %3, i64 %265, !dbg !40
  %267 = sext i32 %264 to i64, !dbg !40
  %268 = getelementptr half, ptr addrspace(1) %3, i64 %267, !dbg !40
  %269 = fptrunc float %211 to half, !dbg !41
  %270 = fptrunc float %216 to half, !dbg !41
  %271 = fptrunc float %217 to half, !dbg !41
  %272 = fptrunc float %222 to half, !dbg !41
  %273 = fptrunc float %223 to half, !dbg !41
  %274 = fptrunc float %228 to half, !dbg !41
  %275 = fptrunc float %229 to half, !dbg !41
  %276 = fptrunc float %234 to half, !dbg !41
  %277 = fptrunc float %235 to half, !dbg !41
  %278 = fptrunc float %240 to half, !dbg !41
  %279 = fptrunc float %241 to half, !dbg !41
  %280 = fptrunc float %246 to half, !dbg !41
  %281 = fptrunc float %247 to half, !dbg !41
  %282 = fptrunc float %252 to half, !dbg !41
  %283 = fptrunc float %253 to half, !dbg !41
  %284 = fptrunc float %258 to half, !dbg !41
  %285 = mul nuw nsw i32 %12, 72, !dbg !41
  %286 = or i32 %285, %9, !dbg !41
  %287 = zext nneg i32 %286 to i64, !dbg !41
  %288 = getelementptr half, ptr addrspace(3) @global_smem, i64 %287, !dbg !41
  %289 = insertelement <1 x half> undef, half %269, i64 0, !dbg !41
  store <1 x half> %289, ptr addrspace(3) %288, align 2, !dbg !41
  %290 = add nuw nsw i32 %285, 72, !dbg !41
  %291 = add nuw nsw i32 %290, %9, !dbg !41
  %292 = zext nneg i32 %291 to i64, !dbg !41
  %293 = getelementptr half, ptr addrspace(3) @global_smem, i64 %292, !dbg !41
  %294 = insertelement <1 x half> undef, half %270, i64 0, !dbg !41
  store <1 x half> %294, ptr addrspace(3) %293, align 2, !dbg !41
  %295 = add nuw nsw i32 %285, 144, !dbg !41
  %296 = add nuw nsw i32 %295, %9, !dbg !41
  %297 = zext nneg i32 %296 to i64, !dbg !41
  %298 = getelementptr half, ptr addrspace(3) @global_smem, i64 %297, !dbg !41
  %299 = insertelement <1 x half> undef, half %271, i64 0, !dbg !41
  store <1 x half> %299, ptr addrspace(3) %298, align 2, !dbg !41
  %300 = add nuw nsw i32 %285, 216, !dbg !41
  %301 = add nuw nsw i32 %300, %9, !dbg !41
  %302 = zext nneg i32 %301 to i64, !dbg !41
  %303 = getelementptr half, ptr addrspace(3) @global_smem, i64 %302, !dbg !41
  %304 = insertelement <1 x half> undef, half %272, i64 0, !dbg !41
  store <1 x half> %304, ptr addrspace(3) %303, align 2, !dbg !41
  %305 = add nuw nsw i32 %285, 288, !dbg !41
  %306 = or i32 %305, %9, !dbg !41
  %307 = zext nneg i32 %306 to i64, !dbg !41
  %308 = getelementptr half, ptr addrspace(3) @global_smem, i64 %307, !dbg !41
  %309 = insertelement <1 x half> undef, half %273, i64 0, !dbg !41
  store <1 x half> %309, ptr addrspace(3) %308, align 2, !dbg !41
  %310 = add nuw nsw i32 %285, 360, !dbg !41
  %311 = add nuw nsw i32 %310, %9, !dbg !41
  %312 = zext nneg i32 %311 to i64, !dbg !41
  %313 = getelementptr half, ptr addrspace(3) @global_smem, i64 %312, !dbg !41
  %314 = insertelement <1 x half> undef, half %274, i64 0, !dbg !41
  store <1 x half> %314, ptr addrspace(3) %313, align 2, !dbg !41
  %315 = add nuw nsw i32 %285, 432, !dbg !41
  %316 = add nuw nsw i32 %315, %9, !dbg !41
  %317 = zext nneg i32 %316 to i64, !dbg !41
  %318 = getelementptr half, ptr addrspace(3) @global_smem, i64 %317, !dbg !41
  %319 = insertelement <1 x half> undef, half %275, i64 0, !dbg !41
  store <1 x half> %319, ptr addrspace(3) %318, align 2, !dbg !41
  %320 = add nuw nsw i32 %285, 504, !dbg !41
  %321 = add nuw nsw i32 %320, %9, !dbg !41
  %322 = zext nneg i32 %321 to i64, !dbg !41
  %323 = getelementptr half, ptr addrspace(3) @global_smem, i64 %322, !dbg !41
  %324 = insertelement <1 x half> undef, half %276, i64 0, !dbg !41
  store <1 x half> %324, ptr addrspace(3) %323, align 2, !dbg !41
  %325 = or i32 %285, %10, !dbg !41
  %326 = zext nneg i32 %325 to i64, !dbg !41
  %327 = getelementptr half, ptr addrspace(3) @global_smem, i64 %326, !dbg !41
  %328 = insertelement <1 x half> undef, half %277, i64 0, !dbg !41
  store <1 x half> %328, ptr addrspace(3) %327, align 2, !dbg !41
  %329 = add nuw nsw i32 %290, %10, !dbg !41
  %330 = zext nneg i32 %329 to i64, !dbg !41
  %331 = getelementptr half, ptr addrspace(3) @global_smem, i64 %330, !dbg !41
  %332 = insertelement <1 x half> undef, half %278, i64 0, !dbg !41
  store <1 x half> %332, ptr addrspace(3) %331, align 2, !dbg !41
  %333 = add nuw nsw i32 %295, %10, !dbg !41
  %334 = zext nneg i32 %333 to i64, !dbg !41
  %335 = getelementptr half, ptr addrspace(3) @global_smem, i64 %334, !dbg !41
  %336 = insertelement <1 x half> undef, half %279, i64 0, !dbg !41
  store <1 x half> %336, ptr addrspace(3) %335, align 2, !dbg !41
  %337 = add nuw nsw i32 %300, %10, !dbg !41
  %338 = zext nneg i32 %337 to i64, !dbg !41
  %339 = getelementptr half, ptr addrspace(3) @global_smem, i64 %338, !dbg !41
  %340 = insertelement <1 x half> undef, half %280, i64 0, !dbg !41
  store <1 x half> %340, ptr addrspace(3) %339, align 2, !dbg !41
  %341 = add nuw nsw i32 %305, %10, !dbg !41
  %342 = zext nneg i32 %341 to i64, !dbg !41
  %343 = getelementptr half, ptr addrspace(3) @global_smem, i64 %342, !dbg !41
  %344 = insertelement <1 x half> undef, half %281, i64 0, !dbg !41
  store <1 x half> %344, ptr addrspace(3) %343, align 2, !dbg !41
  %345 = add nuw nsw i32 %310, %10, !dbg !41
  %346 = zext nneg i32 %345 to i64, !dbg !41
  %347 = getelementptr half, ptr addrspace(3) @global_smem, i64 %346, !dbg !41
  %348 = insertelement <1 x half> undef, half %282, i64 0, !dbg !41
  store <1 x half> %348, ptr addrspace(3) %347, align 2, !dbg !41
  %349 = add nuw nsw i32 %315, %10, !dbg !41
  %350 = zext nneg i32 %349 to i64, !dbg !41
  %351 = getelementptr half, ptr addrspace(3) @global_smem, i64 %350, !dbg !41
  %352 = insertelement <1 x half> undef, half %283, i64 0, !dbg !41
  store <1 x half> %352, ptr addrspace(3) %351, align 2, !dbg !41
  %353 = add nuw nsw i32 %320, %10, !dbg !41
  %354 = zext nneg i32 %353 to i64, !dbg !41
  %355 = getelementptr half, ptr addrspace(3) @global_smem, i64 %354, !dbg !41
  %356 = insertelement <1 x half> undef, half %284, i64 0, !dbg !41
  store <1 x half> %356, ptr addrspace(3) %355, align 2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %357 = mul nuw nsw i32 %9, 72, !dbg !41
  %358 = add nuw nsw i32 %357, %12, !dbg !41
  %359 = zext nneg i32 %358 to i64, !dbg !41
  %360 = getelementptr half, ptr addrspace(3) @global_smem, i64 %359, !dbg !41
  %361 = mul nuw nsw i32 %10, 72, !dbg !41
  %362 = add nuw nsw i32 %361, %12, !dbg !41
  %363 = zext nneg i32 %362 to i64, !dbg !41
  %364 = getelementptr half, ptr addrspace(3) @global_smem, i64 %363, !dbg !41
  %365 = load <4 x i32>, ptr addrspace(3) %364, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %360, align 16, !dbg !41
  %366 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %360, i64 0, i64 1, !dbg !41
  %.extract21 = load i32, ptr addrspace(3) %366, align 4, !dbg !41
  %367 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %360, i64 0, i64 2, !dbg !41
  %.extract23 = load i32, ptr addrspace(3) %367, align 8, !dbg !41
  %368 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %360, i64 0, i64 3, !dbg !41
  %.extract25 = load i32, ptr addrspace(3) %368, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract21, i32 %.extract23, i32 %.extract25, ptr addrspace(1) %266, i1 %44) #2, !dbg !41
  %.extract27 = extractelement <4 x i32> %365, i64 0, !dbg !41
  %.extract29 = extractelement <4 x i32> %365, i64 1, !dbg !41
  %.extract31 = extractelement <4 x i32> %365, i64 2, !dbg !41
  %.extract33 = extractelement <4 x i32> %365, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract29, i32 %.extract31, i32 %.extract33, ptr addrspace(1) %268, i1 %45) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "chh7iszk6ffhaazzfhwqeazairgxtcdh6ogpnu4oipif47wazn2t.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/hh")
!3 = !{ptr @triton__0d1d2d3d4de5de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4de5de, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4de5de", linkageName: "triton__0d1d2d3d4de5de", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 23, column: 58, scope: !5)
!14 = !DILocation(line: 24, column: 23, scope: !5)
!15 = !DILocation(line: 25, column: 21, scope: !5)
!16 = !DILocation(line: 26, column: 28, scope: !5)
!17 = !DILocation(line: 26, column: 33, scope: !5)
!18 = !DILocation(line: 27, column: 23, scope: !5)
!19 = !DILocation(line: 28, column: 21, scope: !5)
!20 = !DILocation(line: 32, column: 20, scope: !5)
!21 = !DILocation(line: 33, column: 41, scope: !5)
!22 = !DILocation(line: 33, column: 36, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 55, scope: !5)
!25 = !DILocation(line: 33, column: 47, scope: !5)
!26 = !DILocation(line: 33, column: 95, scope: !5)
!27 = !DILocation(line: 34, column: 30, scope: !5)
!28 = !DILocation(line: 34, column: 35, scope: !5)
!29 = !DILocation(line: 34, column: 75, scope: !5)
!30 = !DILocation(line: 35, column: 30, scope: !5)
!31 = !DILocation(line: 35, column: 47, scope: !5)
!32 = !DILocation(line: 35, column: 95, scope: !5)
!33 = !DILocation(line: 36, column: 18, scope: !5)
!34 = !DILocation(line: 38, column: 18, scope: !5)
!35 = !DILocation(line: 39, column: 18, scope: !5)
!36 = !DILocation(line: 40, column: 35, scope: !5)
!37 = !DILocation(line: 40, column: 49, scope: !5)
!38 = !DILocation(line: 40, column: 31, scope: !5)
!39 = !DILocation(line: 40, column: 42, scope: !5)
!40 = !DILocation(line: 40, column: 25, scope: !5)
!41 = !DILocation(line: 40, column: 61, scope: !5)
!42 = !DILocation(line: 40, column: 4, scope: !5)
