; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3d4d5de6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %9 = shl i32 %8, 2, !dbg !8
  %10 = and i32 %9, 508, !dbg !8
  %11 = or i32 %10, 1, !dbg !8
  %12 = or i32 %10, 2, !dbg !8
  %13 = or i32 %10, 3, !dbg !8
  %14 = or i32 %10, 513, !dbg !8
  %15 = or i32 %10, 514, !dbg !8
  %16 = or i32 %10, 515, !dbg !8
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !9
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #1, !dbg !10
  %19 = add i32 %18, 1, !dbg !11
  %20 = mul i32 %19, %17, !dbg !12
  %21 = icmp slt i32 %20, 7040, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %23 = shl i32 %22, 10, !dbg !15
  %24 = or i32 %23, %10, !dbg !16
  %25 = or i32 %23, %11, !dbg !16
  %26 = or i32 %23, %12, !dbg !16
  %27 = or i32 %23, %13, !dbg !16
  %28 = or i32 %24, 512, !dbg !16
  %29 = or i32 %23, %14, !dbg !16
  %30 = or i32 %23, %15, !dbg !16
  %31 = or i32 %23, %16, !dbg !16
  %32 = icmp slt i32 %24, 2700, !dbg !17
  %33 = icmp slt i32 %28, 2700, !dbg !17
  %.frozen = freeze i32 %20
  %34 = sdiv i32 %.frozen, 320, !dbg !18
  %35 = mul i32 %34, 320
  %.decomposed = sub i32 %.frozen, %35
  %36 = mul i32 %24, 320, !dbg !19
  %37 = mul i32 %25, 320, !dbg !19
  %38 = mul i32 %26, 320, !dbg !19
  %39 = mul i32 %27, 320, !dbg !19
  %40 = mul i32 %28, 320, !dbg !19
  %41 = mul i32 %29, 320, !dbg !19
  %42 = mul i32 %30, 320, !dbg !19
  %43 = mul i32 %31, 320, !dbg !19
  %44 = mul i32 %34, 864000, !dbg !20
  %45 = add i32 %44, %.decomposed, !dbg !21
  %46 = add i32 %45, %36, !dbg !22
  %47 = add i32 %45, %37, !dbg !22
  %48 = add i32 %45, %38, !dbg !22
  %49 = add i32 %45, %39, !dbg !22
  %50 = add i32 %45, %40, !dbg !22
  %51 = add i32 %45, %41, !dbg !22
  %52 = add i32 %45, %42, !dbg !22
  %53 = add i32 %45, %43, !dbg !22
  %54 = sext i32 %46 to i64, !dbg !23
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %47 to i64, !dbg !23
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %48 to i64, !dbg !23
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %49 to i64, !dbg !23
  %61 = getelementptr half, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %50 to i64, !dbg !23
  %63 = getelementptr half, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = sext i32 %51 to i64, !dbg !23
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !23
  %66 = sext i32 %52 to i64, !dbg !23
  %67 = getelementptr half, ptr addrspace(1) %0, i64 %66, !dbg !23
  %68 = sext i32 %53 to i64, !dbg !23
  %69 = getelementptr half, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = and i1 %21, %32, !dbg !24
  %71 = and i1 %33, %21, !dbg !24
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %55, i1 %70) #1, !dbg !25
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %57, i1 %70) #1, !dbg !25
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %59, i1 %70) #1, !dbg !25
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %61, i1 %70) #1, !dbg !25
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %63, i1 %71) #1, !dbg !25
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %65, i1 %71) #1, !dbg !25
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %67, i1 %71) #1, !dbg !25
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %69, i1 %71) #1, !dbg !25
  %80 = sext i32 %.decomposed to i64, !dbg !26
  %81 = getelementptr half, ptr addrspace(1) %1, i64 %80, !dbg !26
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !27
  %83 = bitcast i16 %82 to half, !dbg !27
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !27
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !27
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !27
  %87 = fpext half %83 to float, !dbg !28
  %88 = getelementptr half, ptr addrspace(1) %2, i64 %54, !dbg !29
  %89 = getelementptr half, ptr addrspace(1) %2, i64 %56, !dbg !29
  %90 = getelementptr half, ptr addrspace(1) %2, i64 %58, !dbg !29
  %91 = getelementptr half, ptr addrspace(1) %2, i64 %60, !dbg !29
  %92 = getelementptr half, ptr addrspace(1) %2, i64 %62, !dbg !29
  %93 = getelementptr half, ptr addrspace(1) %2, i64 %64, !dbg !29
  %94 = getelementptr half, ptr addrspace(1) %2, i64 %66, !dbg !29
  %95 = getelementptr half, ptr addrspace(1) %2, i64 %68, !dbg !29
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %70) #1, !dbg !30
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %89, i1 %70) #1, !dbg !30
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %90, i1 %70) #1, !dbg !30
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %91, i1 %70) #1, !dbg !30
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %92, i1 %71) #1, !dbg !30
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %93, i1 %71) #1, !dbg !30
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %94, i1 %71) #1, !dbg !30
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %95, i1 %71) #1, !dbg !30
  %104 = mul i32 %20, 2700, !dbg !31
  %105 = add i32 %24, %104, !dbg !32
  %106 = add i32 %104, %28, !dbg !32
  %107 = sext i32 %105 to i64, !dbg !33
  %108 = getelementptr half, ptr addrspace(1) %3, i64 %107, !dbg !33
  %109 = sext i32 %106 to i64, !dbg !33
  %110 = getelementptr half, ptr addrspace(1) %3, i64 %109, !dbg !33
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %108, i1 %70) #1, !dbg !34
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !34
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !34
  %extelt.offset = lshr i32 %112, 16, !dbg !34
  %extelt.offset1 = lshr i32 %113, 16, !dbg !34
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %71) #1, !dbg !34
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !34
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !34
  %extelt.offset2 = lshr i32 %115, 16, !dbg !34
  %extelt.offset3 = lshr i32 %116, 16, !dbg !34
  %117 = getelementptr half, ptr addrspace(1) %4, i64 %107, !dbg !35
  %118 = getelementptr half, ptr addrspace(1) %4, i64 %109, !dbg !35
  %119 = insertelement <2 x i16> poison, i16 %72, i64 0, !dbg !25
  %120 = insertelement <2 x i16> %119, i16 %73, i64 1, !dbg !25
  %121 = bitcast <2 x i16> %120 to <2 x half>, !dbg !25
  %122 = fpext <2 x half> %121 to <2 x float>, !dbg !36
  %123 = insertelement <2 x i16> poison, i16 %96, i64 0, !dbg !30
  %124 = insertelement <2 x i16> %123, i16 %97, i64 1, !dbg !30
  %125 = bitcast <2 x i16> %124 to <2 x half>, !dbg !30
  %126 = fpext <2 x half> %125 to <2 x float>, !dbg !37
  %127 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !34
  %128 = insertelement <2 x i32> %127, i32 %extelt.offset, i64 1, !dbg !34
  %129 = trunc <2 x i32> %128 to <2 x i16>, !dbg !34
  %130 = bitcast <2 x i16> %129 to <2 x half>, !dbg !34
  %131 = fpext <2 x half> %130 to <2 x float>, !dbg !38
  %132 = insertelement <2 x float> poison, float %87, i64 0, !dbg !39
  %133 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !39
  %134 = fadd <2 x float> %133, %122, !dbg !39
  %135 = fmul <2 x float> %126, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %136 = fadd <2 x float> %134, %135, !dbg !41
  %137 = fadd <2 x float> %136, %131, !dbg !42
  %138 = fptrunc <2 x float> %137 to <2 x half>, !dbg !43
  %139 = insertelement <2 x i16> poison, i16 %74, i64 0, !dbg !25
  %140 = insertelement <2 x i16> %139, i16 %75, i64 1, !dbg !25
  %141 = bitcast <2 x i16> %140 to <2 x half>, !dbg !25
  %142 = fpext <2 x half> %141 to <2 x float>, !dbg !36
  %143 = insertelement <2 x i16> poison, i16 %98, i64 0, !dbg !30
  %144 = insertelement <2 x i16> %143, i16 %99, i64 1, !dbg !30
  %145 = bitcast <2 x i16> %144 to <2 x half>, !dbg !30
  %146 = fpext <2 x half> %145 to <2 x float>, !dbg !37
  %147 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !34
  %148 = insertelement <2 x i32> %147, i32 %extelt.offset1, i64 1, !dbg !34
  %149 = trunc <2 x i32> %148 to <2 x i16>, !dbg !34
  %150 = bitcast <2 x i16> %149 to <2 x half>, !dbg !34
  %151 = fpext <2 x half> %150 to <2 x float>, !dbg !38
  %152 = fadd <2 x float> %133, %142, !dbg !39
  %153 = fmul <2 x float> %146, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %154 = fadd <2 x float> %152, %153, !dbg !41
  %155 = fadd <2 x float> %154, %151, !dbg !42
  %156 = fptrunc <2 x float> %155 to <2 x half>, !dbg !43
  %157 = insertelement <2 x i16> poison, i16 %76, i64 0, !dbg !25
  %158 = insertelement <2 x i16> %157, i16 %77, i64 1, !dbg !25
  %159 = bitcast <2 x i16> %158 to <2 x half>, !dbg !25
  %160 = fpext <2 x half> %159 to <2 x float>, !dbg !36
  %161 = insertelement <2 x i16> poison, i16 %100, i64 0, !dbg !30
  %162 = insertelement <2 x i16> %161, i16 %101, i64 1, !dbg !30
  %163 = bitcast <2 x i16> %162 to <2 x half>, !dbg !30
  %164 = fpext <2 x half> %163 to <2 x float>, !dbg !37
  %165 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !34
  %166 = insertelement <2 x i32> %165, i32 %extelt.offset2, i64 1, !dbg !34
  %167 = trunc <2 x i32> %166 to <2 x i16>, !dbg !34
  %168 = bitcast <2 x i16> %167 to <2 x half>, !dbg !34
  %169 = fpext <2 x half> %168 to <2 x float>, !dbg !38
  %170 = fadd <2 x float> %133, %160, !dbg !39
  %171 = fmul <2 x float> %164, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %172 = fadd <2 x float> %170, %171, !dbg !41
  %173 = fadd <2 x float> %172, %169, !dbg !42
  %174 = fptrunc <2 x float> %173 to <2 x half>, !dbg !43
  %175 = insertelement <2 x i16> poison, i16 %78, i64 0, !dbg !25
  %176 = insertelement <2 x i16> %175, i16 %79, i64 1, !dbg !25
  %177 = bitcast <2 x i16> %176 to <2 x half>, !dbg !25
  %178 = fpext <2 x half> %177 to <2 x float>, !dbg !36
  %179 = insertelement <2 x i16> poison, i16 %102, i64 0, !dbg !30
  %180 = insertelement <2 x i16> %179, i16 %103, i64 1, !dbg !30
  %181 = bitcast <2 x i16> %180 to <2 x half>, !dbg !30
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !37
  %183 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !34
  %184 = insertelement <2 x i32> %183, i32 %extelt.offset3, i64 1, !dbg !34
  %185 = trunc <2 x i32> %184 to <2 x i16>, !dbg !34
  %186 = bitcast <2 x i16> %185 to <2 x half>, !dbg !34
  %187 = fpext <2 x half> %186 to <2 x float>, !dbg !38
  %188 = fadd <2 x float> %133, %178, !dbg !39
  %189 = fmul <2 x float> %182, <float 1.250000e-01, float 1.250000e-01>, !dbg !40
  %190 = fadd <2 x float> %188, %189, !dbg !41
  %191 = fadd <2 x float> %190, %187, !dbg !42
  %192 = fptrunc <2 x float> %191 to <2 x half>, !dbg !43
  %193 = bitcast <2 x half> %138 to i32, !dbg !43
  %194 = bitcast <2 x half> %156 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %193, i32 %194, ptr addrspace(1) %117, i1 %70) #1, !dbg !43
  %195 = bitcast <2 x half> %174 to i32, !dbg !43
  %196 = bitcast <2 x half> %192 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %195, i32 %196, ptr addrspace(1) %118, i1 %71) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cuwudlitabc4tos2oztf6jaxh24gzbno753bi6gidux5mkpnwqqu.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/uw")
!3 = !{ptr @triton__0d1d2d3d4d5de6, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5de6, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5de6", linkageName: "triton__0d1d2d3d4d5de6", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 27, column: 44, scope: !5)
!9 = !DILocation(line: 23, column: 28, scope: !5)
!10 = !DILocation(line: 23, column: 48, scope: !5)
!11 = !DILocation(line: 23, column: 53, scope: !5)
!12 = !DILocation(line: 23, column: 34, scope: !5)
!13 = !DILocation(line: 25, column: 21, scope: !5)
!14 = !DILocation(line: 26, column: 28, scope: !5)
!15 = !DILocation(line: 26, column: 33, scope: !5)
!16 = !DILocation(line: 27, column: 23, scope: !5)
!17 = !DILocation(line: 28, column: 21, scope: !5)
!18 = !DILocation(line: 31, column: 20, scope: !5)
!19 = !DILocation(line: 33, column: 40, scope: !5)
!20 = !DILocation(line: 33, column: 54, scope: !5)
!21 = !DILocation(line: 33, column: 36, scope: !5)
!22 = !DILocation(line: 33, column: 47, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 68, scope: !5)
!25 = !DILocation(line: 33, column: 60, scope: !5)
!26 = !DILocation(line: 34, column: 30, scope: !5)
!27 = !DILocation(line: 34, column: 35, scope: !5)
!28 = !DILocation(line: 34, column: 75, scope: !5)
!29 = !DILocation(line: 35, column: 30, scope: !5)
!30 = !DILocation(line: 35, column: 60, scope: !5)
!31 = !DILocation(line: 36, column: 41, scope: !5)
!32 = !DILocation(line: 36, column: 36, scope: !5)
!33 = !DILocation(line: 36, column: 30, scope: !5)
!34 = !DILocation(line: 36, column: 47, scope: !5)
!35 = !DILocation(line: 42, column: 25, scope: !5)
!36 = !DILocation(line: 33, column: 108, scope: !5)
!37 = !DILocation(line: 35, column: 108, scope: !5)
!38 = !DILocation(line: 36, column: 95, scope: !5)
!39 = !DILocation(line: 37, column: 18, scope: !5)
!40 = !DILocation(line: 39, column: 18, scope: !5)
!41 = !DILocation(line: 40, column: 18, scope: !5)
!42 = !DILocation(line: 41, column: 18, scope: !5)
!43 = !DILocation(line: 42, column: 48, scope: !5)
!44 = !DILocation(line: 42, column: 4, scope: !5)
