; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

define void @triton__0d1d2de3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %6 = and i32 %5, 31, !dbg !8
  %7 = lshr i32 %5, 5, !dbg !8
  %8 = and i32 %7, 3, !dbg !8
  %9 = lshr i32 %6, 4, !dbg !8
  %10 = shl nuw nsw i32 %8, 1, !dbg !8
  %11 = or i32 %10, %9, !dbg !8
  %12 = or i32 %11, 8, !dbg !8
  %13 = or i32 %11, 16, !dbg !8
  %14 = or i32 %11, 24, !dbg !8
  %15 = or i32 %11, 32, !dbg !8
  %16 = or i32 %11, 40, !dbg !8
  %17 = or i32 %11, 48, !dbg !8
  %18 = or i32 %11, 56, !dbg !8
  %19 = shl i32 %5, 3, !dbg !8
  %20 = and i32 %19, 56, !dbg !8
  %21 = and i32 %5, 15, !dbg !9
  %22 = lshr i32 %6, 3, !dbg !9
  %23 = shl nuw nsw i32 %8, 2, !dbg !9
  %24 = or i32 %23, %22, !dbg !9
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %27 = add i32 %26, 1, !dbg !12
  %28 = shl i32 %25, 6, !dbg !13
  %29 = mul i32 %28, %27, !dbg !14
  %30 = or i32 %29, %11, !dbg !15
  %31 = or i32 %29, %12, !dbg !15
  %32 = or i32 %29, %13, !dbg !15
  %33 = or i32 %29, %14, !dbg !15
  %34 = or i32 %29, %15, !dbg !15
  %35 = or i32 %29, %16, !dbg !15
  %36 = or i32 %29, %17, !dbg !15
  %37 = or i32 %29, %18, !dbg !15
  %38 = or i32 %29, %20, !dbg !15
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !16
  %40 = shl i32 %39, 4, !dbg !17
  %41 = or i32 %40, %21, !dbg !18
  %42 = or i32 %40, %24, !dbg !18
  %43 = icmp slt i32 %41, 9, !dbg !19
  %44 = icmp slt i32 %42, 9, !dbg !19
  %.frozen = freeze i32 %38
  %45 = sdiv i32 %.frozen, 1280, !dbg !20
  %46 = mul i32 %45, 1280
  %.decomposed = sub i32 %.frozen, %46
  %47 = mul i32 %30, 9, !dbg !21
  %48 = mul i32 %31, 9, !dbg !21
  %49 = mul i32 %32, 9, !dbg !21
  %50 = mul i32 %33, 9, !dbg !21
  %51 = mul i32 %34, 9, !dbg !21
  %52 = mul i32 %35, 9, !dbg !21
  %53 = mul i32 %36, 9, !dbg !21
  %54 = mul i32 %37, 9, !dbg !21
  %55 = add i32 %47, %41, !dbg !22
  %56 = add i32 %48, %41, !dbg !22
  %57 = add i32 %49, %41, !dbg !22
  %58 = add i32 %50, %41, !dbg !22
  %59 = add i32 %51, %41, !dbg !22
  %60 = add i32 %52, %41, !dbg !22
  %61 = add i32 %53, %41, !dbg !22
  %62 = add i32 %54, %41, !dbg !22
  %63 = sext i32 %55 to i64, !dbg !23
  %64 = getelementptr half, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %56 to i64, !dbg !23
  %66 = getelementptr half, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = sext i32 %57 to i64, !dbg !23
  %68 = getelementptr half, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = sext i32 %58 to i64, !dbg !23
  %70 = getelementptr half, ptr addrspace(1) %0, i64 %69, !dbg !23
  %71 = sext i32 %59 to i64, !dbg !23
  %72 = getelementptr half, ptr addrspace(1) %0, i64 %71, !dbg !23
  %73 = sext i32 %60 to i64, !dbg !23
  %74 = getelementptr half, ptr addrspace(1) %0, i64 %73, !dbg !23
  %75 = sext i32 %61 to i64, !dbg !23
  %76 = getelementptr half, ptr addrspace(1) %0, i64 %75, !dbg !23
  %77 = sext i32 %62 to i64, !dbg !23
  %78 = getelementptr half, ptr addrspace(1) %0, i64 %77, !dbg !23
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %64, i1 %43) #2, !dbg !24
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %43) #2, !dbg !24
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %43) #2, !dbg !24
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %70, i1 %43) #2, !dbg !24
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %72, i1 %43) #2, !dbg !24
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %43) #2, !dbg !24
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %76, i1 %43) #2, !dbg !24
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %78, i1 %43) #2, !dbg !24
  %87 = mul nuw nsw i32 %21, 72, !dbg !25
  %88 = or i32 %11, %87, !dbg !25
  %89 = zext nneg i32 %88 to i64, !dbg !25
  %90 = getelementptr half, ptr addrspace(3) @global_smem, i64 %89, !dbg !25
  store i16 %79, ptr addrspace(3) %90, align 2, !dbg !25
  %91 = add nuw nsw i32 %12, %87, !dbg !25
  %92 = zext nneg i32 %91 to i64, !dbg !25
  %93 = getelementptr half, ptr addrspace(3) @global_smem, i64 %92, !dbg !25
  store i16 %80, ptr addrspace(3) %93, align 2, !dbg !25
  %94 = add nuw nsw i32 %13, %87, !dbg !25
  %95 = zext nneg i32 %94 to i64, !dbg !25
  %96 = getelementptr half, ptr addrspace(3) @global_smem, i64 %95, !dbg !25
  store i16 %81, ptr addrspace(3) %96, align 2, !dbg !25
  %97 = add nuw nsw i32 %14, %87, !dbg !25
  %98 = zext nneg i32 %97 to i64, !dbg !25
  %99 = getelementptr half, ptr addrspace(3) @global_smem, i64 %98, !dbg !25
  store i16 %82, ptr addrspace(3) %99, align 2, !dbg !25
  %100 = add nuw nsw i32 %15, %87, !dbg !25
  %101 = zext nneg i32 %100 to i64, !dbg !25
  %102 = getelementptr half, ptr addrspace(3) @global_smem, i64 %101, !dbg !25
  store i16 %83, ptr addrspace(3) %102, align 2, !dbg !25
  %103 = add nuw nsw i32 %16, %87, !dbg !25
  %104 = zext nneg i32 %103 to i64, !dbg !25
  %105 = getelementptr half, ptr addrspace(3) @global_smem, i64 %104, !dbg !25
  store i16 %84, ptr addrspace(3) %105, align 2, !dbg !25
  %106 = add nuw nsw i32 %17, %87, !dbg !25
  %107 = zext nneg i32 %106 to i64, !dbg !25
  %108 = getelementptr half, ptr addrspace(3) @global_smem, i64 %107, !dbg !25
  store i16 %85, ptr addrspace(3) %108, align 2, !dbg !25
  %109 = add nuw nsw i32 %18, %87, !dbg !25
  %110 = zext nneg i32 %109 to i64, !dbg !25
  %111 = getelementptr half, ptr addrspace(3) @global_smem, i64 %110, !dbg !25
  store i16 %86, ptr addrspace(3) %111, align 2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %112 = mul nuw nsw i32 %24, 72, !dbg !25
  %113 = add nuw nsw i32 %112, %20, !dbg !25
  %114 = zext nneg i32 %113 to i64, !dbg !25
  %115 = getelementptr half, ptr addrspace(3) @global_smem, i64 %114, !dbg !25
  %116 = mul i32 %42, 1280, !dbg !26
  %117 = add i32 %.decomposed, %116, !dbg !27
  %118 = mul i32 %45, 11520, !dbg !28
  %119 = add i32 %117, %118, !dbg !29
  %120 = sext i32 %119 to i64, !dbg !30
  %121 = getelementptr half, ptr addrspace(1) %1, i64 %120, !dbg !30
  %.extract = load i32, ptr addrspace(3) %115, align 16, !dbg !25
  %122 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %115, i64 0, i64 1, !dbg !25
  %.extract2 = load i32, ptr addrspace(3) %122, align 4, !dbg !25
  %123 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %115, i64 0, i64 2, !dbg !25
  %.extract4 = load i32, ptr addrspace(3) %123, align 8, !dbg !25
  %124 = getelementptr inbounds <4 x i32>, ptr addrspace(3) %115, i64 0, i64 3, !dbg !25
  %.extract6 = load i32, ptr addrspace(3) %124, align 4, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract2, i32 %.extract4, i32 %.extract6, ptr addrspace(1) %121, i1 %44) #2, !dbg !25
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cpjq6czc56ktomq27pdxbs27wrtitebu2iqsyn27gwmvuo2f3acy.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/pj")
!3 = !{ptr @triton__0d1d2de3, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2de3, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2de3", linkageName: "triton__0d1d2de3", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 44, scope: !5)
!9 = !DILocation(line: 27, column: 44, scope: !5)
!10 = !DILocation(line: 23, column: 28, scope: !5)
!11 = !DILocation(line: 23, column: 48, scope: !5)
!12 = !DILocation(line: 23, column: 53, scope: !5)
!13 = !DILocation(line: 23, column: 34, scope: !5)
!14 = !DILocation(line: 23, column: 58, scope: !5)
!15 = !DILocation(line: 24, column: 23, scope: !5)
!16 = !DILocation(line: 26, column: 28, scope: !5)
!17 = !DILocation(line: 26, column: 33, scope: !5)
!18 = !DILocation(line: 27, column: 23, scope: !5)
!19 = !DILocation(line: 28, column: 21, scope: !5)
!20 = !DILocation(line: 32, column: 20, scope: !5)
!21 = !DILocation(line: 33, column: 38, scope: !5)
!22 = !DILocation(line: 33, column: 36, scope: !5)
!23 = !DILocation(line: 33, column: 30, scope: !5)
!24 = !DILocation(line: 33, column: 44, scope: !5)
!25 = !DILocation(line: 34, column: 61, scope: !5)
!26 = !DILocation(line: 34, column: 36, scope: !5)
!27 = !DILocation(line: 34, column: 31, scope: !5)
!28 = !DILocation(line: 34, column: 49, scope: !5)
!29 = !DILocation(line: 34, column: 43, scope: !5)
!30 = !DILocation(line: 34, column: 25, scope: !5)
!31 = !DILocation(line: 34, column: 4, scope: !5)
