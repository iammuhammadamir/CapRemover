; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @triton__0d1d2d3d4d5d6d7d891011de12e(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) local_unnamed_addr !dbg !5 {
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %urem = and i32 %14, 255, !dbg !8
  %15 = shl nuw nsw i32 %urem, 3, !dbg !8
  %16 = or i32 %15, 1, !dbg !8
  %17 = or i32 %15, 2, !dbg !8
  %18 = or i32 %15, 3, !dbg !8
  %19 = or i32 %15, 4, !dbg !8
  %20 = or i32 %15, 5, !dbg !8
  %21 = or i32 %15, 6, !dbg !8
  %22 = or i32 %15, 7, !dbg !8
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !9
  %24 = icmp slt i32 %23, 704, !dbg !10
  %25 = srem i32 %23, 32, !dbg !11
  %26 = mul i32 %23, 40, !dbg !12
  %27 = mul i32 %26, %8, !dbg !13
  %28 = mul i32 %27, %9, !dbg !14
  %29 = mul nsw i32 %25, 40, !dbg !15
  %30 = icmp sgt i32 %12, 0, !dbg !16
  br i1 %30, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !16

.._crit_edge_crit_edge:                           ; preds = %13
  %.pre85 = shl nuw nsw i32 %urem, 1, !dbg !16
  %.pre87 = zext nneg i32 %.pre85 to i64, !dbg !16
  br label %._crit_edge, !dbg !16

.lr.ph:                                           ; preds = %13
  %31 = or i32 %urem, 1792, !dbg !8
  %32 = or i32 %urem, 1536, !dbg !8
  %33 = or i32 %urem, 1280, !dbg !8
  %34 = or i32 %urem, 1024, !dbg !8
  %35 = or i32 %urem, 768, !dbg !8
  %36 = or i32 %urem, 512, !dbg !8
  %37 = or i32 %urem, 256, !dbg !8
  %38 = shl nuw nsw i32 %urem, 4
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr half, ptr addrspace(3) @global_smem, i64 %39
  %41 = shl nuw nsw i32 %16, 1
  %42 = zext nneg i32 %41 to i64
  %43 = getelementptr half, ptr addrspace(3) @global_smem, i64 %42
  %44 = shl nuw nsw i32 %17, 1
  %45 = zext nneg i32 %44 to i64
  %46 = getelementptr half, ptr addrspace(3) @global_smem, i64 %45
  %47 = shl nuw nsw i32 %18, 1
  %48 = zext nneg i32 %47 to i64
  %49 = getelementptr half, ptr addrspace(3) @global_smem, i64 %48
  %50 = shl nuw nsw i32 %19, 1
  %51 = zext nneg i32 %50 to i64
  %52 = getelementptr half, ptr addrspace(3) @global_smem, i64 %51
  %53 = shl nuw nsw i32 %20, 1
  %54 = zext nneg i32 %53 to i64
  %55 = getelementptr half, ptr addrspace(3) @global_smem, i64 %54
  %56 = shl nuw nsw i32 %21, 1
  %57 = zext nneg i32 %56 to i64
  %58 = getelementptr half, ptr addrspace(3) @global_smem, i64 %57
  %59 = shl nuw nsw i32 %22, 1
  %60 = zext nneg i32 %59 to i64
  %61 = getelementptr half, ptr addrspace(3) @global_smem, i64 %60
  %62 = shl nuw nsw i32 %urem, 1
  %63 = zext nneg i32 %62 to i64
  %64 = getelementptr half, ptr addrspace(3) @global_smem, i64 %63
  %65 = shl nuw nsw i32 %37, 1
  %66 = zext nneg i32 %65 to i64
  %67 = getelementptr half, ptr addrspace(3) @global_smem, i64 %66
  %68 = shl nuw nsw i32 %36, 1
  %69 = zext nneg i32 %68 to i64
  %70 = getelementptr half, ptr addrspace(3) @global_smem, i64 %69
  %71 = shl nuw nsw i32 %35, 1
  %72 = zext nneg i32 %71 to i64
  %73 = getelementptr half, ptr addrspace(3) @global_smem, i64 %72
  %74 = shl nuw nsw i32 %34, 1
  %75 = zext nneg i32 %74 to i64
  %76 = getelementptr half, ptr addrspace(3) @global_smem, i64 %75
  %77 = shl nuw nsw i32 %33, 1
  %78 = zext nneg i32 %77 to i64
  %79 = getelementptr half, ptr addrspace(3) @global_smem, i64 %78
  %80 = shl nuw nsw i32 %32, 1
  %81 = zext nneg i32 %80 to i64
  %82 = getelementptr half, ptr addrspace(3) @global_smem, i64 %81
  %83 = shl nuw nsw i32 %31, 1
  %84 = zext nneg i32 %83 to i64
  %85 = getelementptr half, ptr addrspace(3) @global_smem, i64 %84
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i64 %63
  %87 = zext nneg i32 %urem to i64
  %88 = getelementptr half, ptr addrspace(3) @global_smem, i64 %87
  %89 = zext nneg i32 %37 to i64
  %90 = getelementptr half, ptr addrspace(3) @global_smem, i64 %89
  %91 = zext nneg i32 %36 to i64
  %92 = getelementptr half, ptr addrspace(3) @global_smem, i64 %91
  %93 = zext nneg i32 %35 to i64
  %94 = getelementptr half, ptr addrspace(3) @global_smem, i64 %93
  %95 = zext nneg i32 %34 to i64
  %96 = getelementptr half, ptr addrspace(3) @global_smem, i64 %95
  %97 = zext nneg i32 %33 to i64
  %98 = getelementptr half, ptr addrspace(3) @global_smem, i64 %97
  %99 = zext nneg i32 %32 to i64
  %100 = getelementptr half, ptr addrspace(3) @global_smem, i64 %99
  %101 = zext nneg i32 %31 to i64
  %102 = getelementptr half, ptr addrspace(3) @global_smem, i64 %101
  %103 = zext nneg i32 %15 to i64
  %104 = getelementptr half, ptr addrspace(3) @global_smem, i64 %103
  %105 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !17
  %106 = shufflevector <8 x i1> %105, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  %107 = insertelement <8 x i32> poison, i32 %urem, i64 0, !dbg !18
  %108 = insertelement <8 x i32> %107, i32 %37, i64 1, !dbg !18
  %109 = insertelement <8 x i32> %108, i32 %36, i64 2, !dbg !18
  %110 = insertelement <8 x i32> %109, i32 %35, i64 3, !dbg !18
  %111 = insertelement <8 x i32> %110, i32 %34, i64 4, !dbg !18
  %112 = insertelement <8 x i32> %111, i32 %33, i64 5, !dbg !18
  %113 = insertelement <8 x i32> %112, i32 %32, i64 6, !dbg !18
  %114 = insertelement <8 x i32> %113, i32 %31, i64 7, !dbg !18
  %115 = insertelement <8 x i32> poison, i32 %12, i64 0, !dbg !19
  %116 = shufflevector <8 x i32> %115, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !19
  br label %117, !dbg !16

117:                                              ; preds = %.lr.ph, %._crit_edge38
  %118 = phi float [ 0.000000e+00, %.lr.ph ], [ %474, %._crit_edge38 ]
  %119 = phi float [ 0.000000e+00, %.lr.ph ], [ %475, %._crit_edge38 ]
  %120 = phi float [ 0.000000e+00, %.lr.ph ], [ %476, %._crit_edge38 ]
  %121 = phi float [ 0.000000e+00, %.lr.ph ], [ %477, %._crit_edge38 ]
  %122 = phi float [ 0.000000e+00, %.lr.ph ], [ %478, %._crit_edge38 ]
  %123 = phi float [ 0.000000e+00, %.lr.ph ], [ %479, %._crit_edge38 ]
  %124 = phi float [ 0.000000e+00, %.lr.ph ], [ %480, %._crit_edge38 ]
  %125 = phi float [ 0.000000e+00, %.lr.ph ], [ %481, %._crit_edge38 ]
  %126 = phi i32 [ 0, %.lr.ph ], [ %507, %._crit_edge38 ]
  %127 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %472, %._crit_edge38 ]
  %128 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %473, %._crit_edge38 ]
  %129 = insertelement <8 x i32> poison, i32 %126, i64 0, !dbg !18
  %130 = shufflevector <8 x i32> %129, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !18
  %131 = or <8 x i32> %130, %114, !dbg !18
  %132 = or i32 %126, %15, !dbg !18
  %133 = or i32 %126, %16, !dbg !18
  %134 = or i32 %126, %17, !dbg !18
  %135 = or i32 %126, %18, !dbg !18
  %136 = or i32 %126, %19, !dbg !18
  %137 = or i32 %126, %20, !dbg !18
  %138 = or i32 %126, %21, !dbg !18
  %139 = or i32 %126, %22, !dbg !18
  %140 = icmp slt i32 %132, %12, !dbg !19
  %141 = icmp slt i32 %133, %12, !dbg !19
  %142 = icmp slt i32 %134, %12, !dbg !19
  %143 = icmp slt i32 %135, %12, !dbg !19
  %144 = icmp slt i32 %136, %12, !dbg !19
  %145 = icmp slt i32 %137, %12, !dbg !19
  %146 = icmp slt i32 %138, %12, !dbg !19
  %147 = icmp slt i32 %139, %12, !dbg !19
  %148 = extractelement <8 x i32> %131, i64 0, !dbg !20
  %149 = sdiv i32 %148, %10, !dbg !20
  %150 = extractelement <8 x i32> %131, i64 1, !dbg !20
  %151 = sdiv i32 %150, %10, !dbg !20
  %152 = extractelement <8 x i32> %131, i64 2, !dbg !20
  %153 = sdiv i32 %152, %10, !dbg !20
  %154 = extractelement <8 x i32> %131, i64 3, !dbg !20
  %155 = sdiv i32 %154, %10, !dbg !20
  %156 = extractelement <8 x i32> %131, i64 4, !dbg !20
  %157 = sdiv i32 %156, %10, !dbg !20
  %158 = extractelement <8 x i32> %131, i64 5, !dbg !20
  %159 = sdiv i32 %158, %10, !dbg !20
  %160 = extractelement <8 x i32> %131, i64 6, !dbg !20
  %161 = sdiv i32 %160, %10, !dbg !20
  %162 = extractelement <8 x i32> %131, i64 7, !dbg !20
  %163 = sdiv i32 %162, %10, !dbg !20
  %164 = add i32 %132, %28, !dbg !21
  %165 = add i32 %133, %28, !dbg !21
  %166 = add i32 %134, %28, !dbg !21
  %167 = add i32 %135, %28, !dbg !21
  %168 = add i32 %136, %28, !dbg !21
  %169 = add i32 %137, %28, !dbg !21
  %170 = add i32 %138, %28, !dbg !21
  %171 = add i32 %139, %28, !dbg !21
  %172 = sext i32 %164 to i64, !dbg !22
  %173 = getelementptr half, ptr addrspace(1) %0, i64 %172, !dbg !22
  %174 = sext i32 %165 to i64, !dbg !22
  %175 = getelementptr half, ptr addrspace(1) %0, i64 %174, !dbg !22
  %176 = sext i32 %166 to i64, !dbg !22
  %177 = getelementptr half, ptr addrspace(1) %0, i64 %176, !dbg !22
  %178 = sext i32 %167 to i64, !dbg !22
  %179 = getelementptr half, ptr addrspace(1) %0, i64 %178, !dbg !22
  %180 = sext i32 %168 to i64, !dbg !22
  %181 = getelementptr half, ptr addrspace(1) %0, i64 %180, !dbg !22
  %182 = sext i32 %169 to i64, !dbg !22
  %183 = getelementptr half, ptr addrspace(1) %0, i64 %182, !dbg !22
  %184 = sext i32 %170 to i64, !dbg !22
  %185 = getelementptr half, ptr addrspace(1) %0, i64 %184, !dbg !22
  %186 = sext i32 %171 to i64, !dbg !22
  %187 = getelementptr half, ptr addrspace(1) %0, i64 %186, !dbg !22
  %188 = and i1 %24, %140, !dbg !17
  %189 = and i1 %24, %141, !dbg !17
  %190 = and i1 %24, %142, !dbg !17
  %191 = and i1 %24, %143, !dbg !17
  %192 = and i1 %24, %144, !dbg !17
  %193 = and i1 %24, %145, !dbg !17
  %194 = and i1 %24, %146, !dbg !17
  %195 = and i1 %24, %147, !dbg !17
  %196 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %173, i1 %188, i16 0, i1 %188) #3, !dbg !23
  %197 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %175, i1 %189, i16 0, i1 %189) #3, !dbg !23
  %198 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %177, i1 %190, i16 0, i1 %190) #3, !dbg !23
  %199 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %179, i1 %191, i16 0, i1 %191) #3, !dbg !23
  %200 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %181, i1 %192, i16 0, i1 %192) #3, !dbg !23
  %201 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %183, i1 %193, i16 0, i1 %193) #3, !dbg !23
  %202 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %185, i1 %194, i16 0, i1 %194) #3, !dbg !23
  %203 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %187, i1 %195, i16 0, i1 %195) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  store i16 %196, ptr addrspace(3) %40, align 2, !dbg !24
  store i16 %197, ptr addrspace(3) %43, align 2, !dbg !24
  store i16 %198, ptr addrspace(3) %46, align 2, !dbg !24
  store i16 %199, ptr addrspace(3) %49, align 2, !dbg !24
  store i16 %200, ptr addrspace(3) %52, align 2, !dbg !24
  store i16 %201, ptr addrspace(3) %55, align 2, !dbg !24
  store i16 %202, ptr addrspace(3) %58, align 2, !dbg !24
  store i16 %203, ptr addrspace(3) %61, align 2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %204 = load half, ptr addrspace(3) %64, align 2, !dbg !24
  %205 = load half, ptr addrspace(3) %67, align 2, !dbg !24
  %206 = load half, ptr addrspace(3) %70, align 2, !dbg !24
  %207 = load half, ptr addrspace(3) %73, align 2, !dbg !24
  %208 = load half, ptr addrspace(3) %76, align 2, !dbg !24
  %209 = load half, ptr addrspace(3) %79, align 2, !dbg !24
  %210 = load half, ptr addrspace(3) %82, align 2, !dbg !24
  %211 = load half, ptr addrspace(3) %85, align 2, !dbg !24
  %212 = add i32 %149, %29, !dbg !25
  %213 = add i32 %151, %29, !dbg !25
  %214 = add i32 %153, %29, !dbg !25
  %215 = add i32 %155, %29, !dbg !25
  %216 = add i32 %157, %29, !dbg !25
  %217 = add i32 %159, %29, !dbg !25
  %218 = add i32 %161, %29, !dbg !25
  %219 = add i32 %163, %29, !dbg !25
  %220 = sext i32 %212 to i64, !dbg !26
  %221 = getelementptr half, ptr addrspace(1) %1, i64 %220, !dbg !26
  %222 = sext i32 %213 to i64, !dbg !26
  %223 = getelementptr half, ptr addrspace(1) %1, i64 %222, !dbg !26
  %224 = sext i32 %214 to i64, !dbg !26
  %225 = getelementptr half, ptr addrspace(1) %1, i64 %224, !dbg !26
  %226 = sext i32 %215 to i64, !dbg !26
  %227 = getelementptr half, ptr addrspace(1) %1, i64 %226, !dbg !26
  %228 = sext i32 %216 to i64, !dbg !26
  %229 = getelementptr half, ptr addrspace(1) %1, i64 %228, !dbg !26
  %230 = sext i32 %217 to i64, !dbg !26
  %231 = getelementptr half, ptr addrspace(1) %1, i64 %230, !dbg !26
  %232 = sext i32 %218 to i64, !dbg !26
  %233 = getelementptr half, ptr addrspace(1) %1, i64 %232, !dbg !26
  %234 = sext i32 %219 to i64, !dbg !26
  %235 = getelementptr half, ptr addrspace(1) %1, i64 %234, !dbg !26
  %236 = getelementptr half, ptr addrspace(1) %2, i64 %172, !dbg !27
  %237 = getelementptr half, ptr addrspace(1) %2, i64 %174, !dbg !27
  %238 = getelementptr half, ptr addrspace(1) %2, i64 %176, !dbg !27
  %239 = getelementptr half, ptr addrspace(1) %2, i64 %178, !dbg !27
  %240 = getelementptr half, ptr addrspace(1) %2, i64 %180, !dbg !27
  %241 = getelementptr half, ptr addrspace(1) %2, i64 %182, !dbg !27
  %242 = getelementptr half, ptr addrspace(1) %2, i64 %184, !dbg !27
  %243 = getelementptr half, ptr addrspace(1) %2, i64 %186, !dbg !27
  %244 = add i32 %149, %26, !dbg !28
  %245 = add i32 %151, %26, !dbg !28
  %246 = add i32 %153, %26, !dbg !28
  %247 = add i32 %155, %26, !dbg !28
  %248 = add i32 %157, %26, !dbg !28
  %249 = add i32 %159, %26, !dbg !28
  %250 = add i32 %161, %26, !dbg !28
  %251 = add i32 %163, %26, !dbg !28
  %252 = sext i32 %244 to i64, !dbg !29
  %253 = getelementptr half, ptr addrspace(1) %3, i64 %252, !dbg !29
  %254 = sext i32 %245 to i64, !dbg !29
  %255 = getelementptr half, ptr addrspace(1) %3, i64 %254, !dbg !29
  %256 = sext i32 %246 to i64, !dbg !29
  %257 = getelementptr half, ptr addrspace(1) %3, i64 %256, !dbg !29
  %258 = sext i32 %247 to i64, !dbg !29
  %259 = getelementptr half, ptr addrspace(1) %3, i64 %258, !dbg !29
  %260 = sext i32 %248 to i64, !dbg !29
  %261 = getelementptr half, ptr addrspace(1) %3, i64 %260, !dbg !29
  %262 = sext i32 %249 to i64, !dbg !29
  %263 = getelementptr half, ptr addrspace(1) %3, i64 %262, !dbg !29
  %264 = sext i32 %250 to i64, !dbg !29
  %265 = getelementptr half, ptr addrspace(1) %3, i64 %264, !dbg !29
  %266 = sext i32 %251 to i64, !dbg !29
  %267 = getelementptr half, ptr addrspace(1) %3, i64 %266, !dbg !29
  %268 = getelementptr half, ptr addrspace(1) %4, i64 %220, !dbg !30
  %269 = getelementptr half, ptr addrspace(1) %4, i64 %222, !dbg !30
  %270 = getelementptr half, ptr addrspace(1) %4, i64 %224, !dbg !30
  %271 = getelementptr half, ptr addrspace(1) %4, i64 %226, !dbg !30
  %272 = getelementptr half, ptr addrspace(1) %4, i64 %228, !dbg !30
  %273 = getelementptr half, ptr addrspace(1) %4, i64 %230, !dbg !30
  %274 = getelementptr half, ptr addrspace(1) %4, i64 %232, !dbg !30
  %275 = getelementptr half, ptr addrspace(1) %4, i64 %234, !dbg !30
  %276 = getelementptr half, ptr addrspace(1) %5, i64 %252, !dbg !31
  %277 = getelementptr half, ptr addrspace(1) %5, i64 %254, !dbg !31
  %278 = getelementptr half, ptr addrspace(1) %5, i64 %256, !dbg !31
  %279 = getelementptr half, ptr addrspace(1) %5, i64 %258, !dbg !31
  %280 = getelementptr half, ptr addrspace(1) %5, i64 %260, !dbg !31
  %281 = getelementptr half, ptr addrspace(1) %5, i64 %262, !dbg !31
  %282 = getelementptr half, ptr addrspace(1) %5, i64 %264, !dbg !31
  %283 = getelementptr half, ptr addrspace(1) %5, i64 %266, !dbg !31
  %284 = icmp slt <8 x i32> %131, %116, !dbg !19
  %285 = and <8 x i1> %106, %284, !dbg !17
  %286 = insertelement <8 x half> poison, half %204, i64 0, !dbg !24
  %287 = insertelement <8 x half> %286, half %205, i64 1, !dbg !24
  %288 = insertelement <8 x half> %287, half %206, i64 2, !dbg !24
  %289 = insertelement <8 x half> %288, half %207, i64 3, !dbg !24
  %290 = insertelement <8 x half> %289, half %208, i64 4, !dbg !24
  %291 = insertelement <8 x half> %290, half %209, i64 5, !dbg !24
  %292 = insertelement <8 x half> %291, half %210, i64 6, !dbg !24
  %293 = insertelement <8 x half> %292, half %211, i64 7, !dbg !24
  %294 = fpext <8 x half> %293 to <8 x float>, !dbg !24
  %295 = extractelement <8 x i1> %285, i64 0, !dbg !32
  %296 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %221, i1 %295, i16 0, i1 %295) #3, !dbg !33
  %297 = extractelement <8 x i1> %285, i64 1, !dbg !32
  %298 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %223, i1 %297, i16 0, i1 %297) #3, !dbg !33
  %299 = extractelement <8 x i1> %285, i64 2, !dbg !32
  %300 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %225, i1 %299, i16 0, i1 %299) #3, !dbg !33
  %301 = extractelement <8 x i1> %285, i64 3, !dbg !32
  %302 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %227, i1 %301, i16 0, i1 %301) #3, !dbg !33
  %303 = extractelement <8 x i1> %285, i64 4, !dbg !32
  %304 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %229, i1 %303, i16 0, i1 %303) #3, !dbg !33
  %305 = extractelement <8 x i1> %285, i64 5, !dbg !32
  %306 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %231, i1 %305, i16 0, i1 %305) #3, !dbg !33
  %307 = extractelement <8 x i1> %285, i64 6, !dbg !32
  %308 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %233, i1 %307, i16 0, i1 %307) #3, !dbg !33
  %309 = extractelement <8 x i1> %285, i64 7, !dbg !32
  %310 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %235, i1 %309, i16 0, i1 %309) #3, !dbg !33
  %311 = insertelement <8 x i16> poison, i16 %296, i64 0, !dbg !33
  %312 = insertelement <8 x i16> %311, i16 %298, i64 1, !dbg !33
  %313 = insertelement <8 x i16> %312, i16 %300, i64 2, !dbg !33
  %314 = insertelement <8 x i16> %313, i16 %302, i64 3, !dbg !33
  %315 = insertelement <8 x i16> %314, i16 %304, i64 4, !dbg !33
  %316 = insertelement <8 x i16> %315, i16 %306, i64 5, !dbg !33
  %317 = insertelement <8 x i16> %316, i16 %308, i64 6, !dbg !33
  %318 = insertelement <8 x i16> %317, i16 %310, i64 7, !dbg !33
  %319 = bitcast <8 x i16> %318 to <8 x half>, !dbg !33
  %320 = fpext <8 x half> %319 to <8 x float>, !dbg !34
  %321 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %236, i1 %188, i16 0, i1 %188) #3, !dbg !35
  %322 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %237, i1 %189, i16 0, i1 %189) #3, !dbg !35
  %323 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %238, i1 %190, i16 0, i1 %190) #3, !dbg !35
  %324 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %239, i1 %191, i16 0, i1 %191) #3, !dbg !35
  %325 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %240, i1 %192, i16 0, i1 %192) #3, !dbg !35
  %326 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %241, i1 %193, i16 0, i1 %193) #3, !dbg !35
  %327 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %242, i1 %194, i16 0, i1 %194) #3, !dbg !35
  %328 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %243, i1 %195, i16 0, i1 %195) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  store i16 %321, ptr addrspace(3) %40, align 2, !dbg !36
  store i16 %322, ptr addrspace(3) %43, align 2, !dbg !36
  store i16 %323, ptr addrspace(3) %46, align 2, !dbg !36
  store i16 %324, ptr addrspace(3) %49, align 2, !dbg !36
  store i16 %325, ptr addrspace(3) %52, align 2, !dbg !36
  store i16 %326, ptr addrspace(3) %55, align 2, !dbg !36
  store i16 %327, ptr addrspace(3) %58, align 2, !dbg !36
  store i16 %328, ptr addrspace(3) %61, align 2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %329 = load half, ptr addrspace(3) %64, align 2, !dbg !36
  %330 = load half, ptr addrspace(3) %67, align 2, !dbg !36
  %331 = load half, ptr addrspace(3) %70, align 2, !dbg !36
  %332 = load half, ptr addrspace(3) %73, align 2, !dbg !36
  %333 = load half, ptr addrspace(3) %76, align 2, !dbg !36
  %334 = load half, ptr addrspace(3) %79, align 2, !dbg !36
  %335 = load half, ptr addrspace(3) %82, align 2, !dbg !36
  %336 = load half, ptr addrspace(3) %85, align 2, !dbg !36
  %337 = insertelement <8 x half> poison, half %329, i64 0, !dbg !37
  %338 = insertelement <8 x half> %337, half %330, i64 1, !dbg !37
  %339 = insertelement <8 x half> %338, half %331, i64 2, !dbg !37
  %340 = insertelement <8 x half> %339, half %332, i64 3, !dbg !37
  %341 = insertelement <8 x half> %340, half %333, i64 4, !dbg !37
  %342 = insertelement <8 x half> %341, half %334, i64 5, !dbg !37
  %343 = insertelement <8 x half> %342, half %335, i64 6, !dbg !37
  %344 = insertelement <8 x half> %343, half %336, i64 7, !dbg !37
  %345 = fpext <8 x half> %344 to <8 x float>, !dbg !37
  %346 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %253, i1 %295, i16 0, i1 %295) #3, !dbg !38
  %347 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %255, i1 %297, i16 0, i1 %297) #3, !dbg !38
  %348 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %257, i1 %299, i16 0, i1 %299) #3, !dbg !38
  %349 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %259, i1 %301, i16 0, i1 %301) #3, !dbg !38
  %350 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %261, i1 %303, i16 0, i1 %303) #3, !dbg !38
  %351 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %263, i1 %305, i16 0, i1 %305) #3, !dbg !38
  %352 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %265, i1 %307, i16 0, i1 %307) #3, !dbg !38
  %353 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %267, i1 %309, i16 0, i1 %309) #3, !dbg !38
  %354 = insertelement <8 x i16> poison, i16 %346, i64 0, !dbg !38
  %355 = insertelement <8 x i16> %354, i16 %347, i64 1, !dbg !38
  %356 = insertelement <8 x i16> %355, i16 %348, i64 2, !dbg !38
  %357 = insertelement <8 x i16> %356, i16 %349, i64 3, !dbg !38
  %358 = insertelement <8 x i16> %357, i16 %350, i64 4, !dbg !38
  %359 = insertelement <8 x i16> %358, i16 %351, i64 5, !dbg !38
  %360 = insertelement <8 x i16> %359, i16 %352, i64 6, !dbg !38
  %361 = insertelement <8 x i16> %360, i16 %353, i64 7, !dbg !38
  %362 = bitcast <8 x i16> %361 to <8 x half>, !dbg !38
  %363 = fpext <8 x half> %362 to <8 x float>, !dbg !39
  %364 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %268, i1 %295, i16 0, i1 %295) #3, !dbg !40
  %365 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %269, i1 %297, i16 0, i1 %297) #3, !dbg !40
  %366 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %270, i1 %299, i16 0, i1 %299) #3, !dbg !40
  %367 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %271, i1 %301, i16 0, i1 %301) #3, !dbg !40
  %368 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %272, i1 %303, i16 0, i1 %303) #3, !dbg !40
  %369 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %273, i1 %305, i16 0, i1 %305) #3, !dbg !40
  %370 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %274, i1 %307, i16 0, i1 %307) #3, !dbg !40
  %371 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %275, i1 %309, i16 0, i1 %309) #3, !dbg !40
  %372 = insertelement <8 x i16> poison, i16 %364, i64 0, !dbg !40
  %373 = insertelement <8 x i16> %372, i16 %365, i64 1, !dbg !40
  %374 = insertelement <8 x i16> %373, i16 %366, i64 2, !dbg !40
  %375 = insertelement <8 x i16> %374, i16 %367, i64 3, !dbg !40
  %376 = insertelement <8 x i16> %375, i16 %368, i64 4, !dbg !40
  %377 = insertelement <8 x i16> %376, i16 %369, i64 5, !dbg !40
  %378 = insertelement <8 x i16> %377, i16 %370, i64 6, !dbg !40
  %379 = insertelement <8 x i16> %378, i16 %371, i64 7, !dbg !40
  %380 = bitcast <8 x i16> %379 to <8 x half>, !dbg !40
  %381 = fpext <8 x half> %380 to <8 x float>, !dbg !41
  %382 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %276, i1 %295, i16 0, i1 %295) #3, !dbg !32
  %383 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %277, i1 %297, i16 0, i1 %297) #3, !dbg !32
  %384 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %278, i1 %299, i16 0, i1 %299) #3, !dbg !32
  %385 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %279, i1 %301, i16 0, i1 %301) #3, !dbg !32
  %386 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %280, i1 %303, i16 0, i1 %303) #3, !dbg !32
  %387 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %281, i1 %305, i16 0, i1 %305) #3, !dbg !32
  %388 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %282, i1 %307, i16 0, i1 %307) #3, !dbg !32
  %389 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %283, i1 %309, i16 0, i1 %309) #3, !dbg !32
  %390 = insertelement <8 x i16> poison, i16 %382, i64 0, !dbg !32
  %391 = insertelement <8 x i16> %390, i16 %383, i64 1, !dbg !32
  %392 = insertelement <8 x i16> %391, i16 %384, i64 2, !dbg !32
  %393 = insertelement <8 x i16> %392, i16 %385, i64 3, !dbg !32
  %394 = insertelement <8 x i16> %393, i16 %386, i64 4, !dbg !32
  %395 = insertelement <8 x i16> %394, i16 %387, i64 5, !dbg !32
  %396 = insertelement <8 x i16> %395, i16 %388, i64 6, !dbg !32
  %397 = insertelement <8 x i16> %396, i16 %389, i64 7, !dbg !32
  %398 = bitcast <8 x i16> %397 to <8 x half>, !dbg !32
  %399 = fpext <8 x half> %398 to <8 x float>, !dbg !42
  %400 = fadd <8 x float> %294, %320, !dbg !43
  %401 = fmul <8 x float> %345, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !44
  %402 = fadd <8 x float> %400, %401, !dbg !36
  %403 = fadd <8 x float> %363, %381, !dbg !45
  %404 = fmul <8 x float> %399, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>, !dbg !46
  %405 = fadd <8 x float> %403, %404, !dbg !47
  %406 = fadd <8 x float> %402, %405, !dbg !48
  %407 = icmp eq i32 %126, 0, !dbg !49
  br i1 %407, label %._crit_edge38, label %408, !dbg !50

408:                                              ; preds = %117
  %409 = fadd float %118, 1.000000e+00, !dbg !54
  %410 = fadd float %119, 1.000000e+00, !dbg !54
  %411 = fadd float %120, 1.000000e+00, !dbg !54
  %412 = fadd float %121, 1.000000e+00, !dbg !54
  %413 = fadd float %122, 1.000000e+00, !dbg !54
  %414 = fadd float %123, 1.000000e+00, !dbg !54
  %415 = fadd float %124, 1.000000e+00, !dbg !54
  %416 = fadd float %125, 1.000000e+00, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %417 = insertelement <1 x float> undef, float %409, i64 0, !dbg !54
  store <1 x float> %417, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %418 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %419 = insertelement <1 x float> undef, float %410, i64 0, !dbg !54
  store <1 x float> %419, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %420 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %421 = insertelement <1 x float> undef, float %411, i64 0, !dbg !54
  store <1 x float> %421, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %422 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %423 = insertelement <1 x float> undef, float %412, i64 0, !dbg !54
  store <1 x float> %423, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %424 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %425 = insertelement <1 x float> undef, float %413, i64 0, !dbg !54
  store <1 x float> %425, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %426 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %427 = insertelement <1 x float> undef, float %414, i64 0, !dbg !54
  store <1 x float> %427, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %428 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %429 = insertelement <1 x float> undef, float %415, i64 0, !dbg !54
  store <1 x float> %429, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %430 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %431 = insertelement <1 x float> undef, float %416, i64 0, !dbg !54
  store <1 x float> %431, ptr addrspace(3) %86, align 4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %432 = load float, ptr addrspace(3) %86, align 4, !dbg !54
  %433 = fsub <8 x float> %406, %127, !dbg !55
  %434 = extractelement <8 x float> %433, i64 0, !dbg !56
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %434, float %418) #3, !dbg !56
  %436 = extractelement <8 x float> %433, i64 1, !dbg !56
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %436, float %420) #3, !dbg !56
  %438 = extractelement <8 x float> %433, i64 2, !dbg !56
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %438, float %422) #3, !dbg !56
  %440 = extractelement <8 x float> %433, i64 3, !dbg !56
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float %424) #3, !dbg !56
  %442 = extractelement <8 x float> %433, i64 4, !dbg !56
  %443 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %442, float %426) #3, !dbg !56
  %444 = extractelement <8 x float> %433, i64 5, !dbg !56
  %445 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %444, float %428) #3, !dbg !56
  %446 = extractelement <8 x float> %433, i64 6, !dbg !56
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %446, float %430) #3, !dbg !56
  %448 = extractelement <8 x float> %433, i64 7, !dbg !56
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %448, float %432) #3, !dbg !56
  %450 = insertelement <8 x float> poison, float %435, i64 0, !dbg !57
  %451 = insertelement <8 x float> %450, float %437, i64 1, !dbg !57
  %452 = insertelement <8 x float> %451, float %439, i64 2, !dbg !57
  %453 = insertelement <8 x float> %452, float %441, i64 3, !dbg !57
  %454 = insertelement <8 x float> %453, float %443, i64 4, !dbg !57
  %455 = insertelement <8 x float> %454, float %445, i64 5, !dbg !57
  %456 = insertelement <8 x float> %455, float %447, i64 6, !dbg !57
  %457 = insertelement <8 x float> %456, float %449, i64 7, !dbg !57
  %458 = fadd <8 x float> %127, %457, !dbg !57
  %459 = fsub <8 x float> %406, %458, !dbg !58
  %460 = fmul <8 x float> %433, %459, !dbg !59
  %461 = fadd <8 x float> %128, %460, !dbg !60
  br label %._crit_edge38, !dbg !50

._crit_edge38:                                    ; preds = %117, %408
  %462 = phi float [ %409, %408 ], [ 1.000000e+00, %117 ]
  %463 = phi float [ %410, %408 ], [ 1.000000e+00, %117 ]
  %464 = phi float [ %411, %408 ], [ 1.000000e+00, %117 ]
  %465 = phi float [ %412, %408 ], [ 1.000000e+00, %117 ]
  %466 = phi float [ %413, %408 ], [ 1.000000e+00, %117 ]
  %467 = phi float [ %414, %408 ], [ 1.000000e+00, %117 ]
  %468 = phi float [ %415, %408 ], [ 1.000000e+00, %117 ]
  %469 = phi float [ %416, %408 ], [ 1.000000e+00, %117 ]
  %470 = phi <8 x float> [ %458, %408 ], [ %406, %117 ]
  %471 = phi <8 x float> [ %461, %408 ], [ zeroinitializer, %117 ]
  %472 = select <8 x i1> %285, <8 x float> %470, <8 x float> %127, !dbg !61
  %473 = select <8 x i1> %285, <8 x float> %471, <8 x float> %128, !dbg !62
  %474 = select i1 %295, float %462, float %118, !dbg !63
  %475 = select i1 %297, float %463, float %119, !dbg !63
  %476 = select i1 %299, float %464, float %120, !dbg !63
  %477 = select i1 %301, float %465, float %121, !dbg !63
  %478 = select i1 %303, float %466, float %122, !dbg !63
  %479 = select i1 %305, float %467, float %123, !dbg !63
  %480 = select i1 %307, float %468, float %124, !dbg !63
  %481 = select i1 %309, float %469, float %125, !dbg !63
  %482 = extractelement <8 x float> %406, i64 0, !dbg !64
  %483 = fptrunc float %482 to half, !dbg !64
  %484 = extractelement <8 x float> %406, i64 1, !dbg !64
  %485 = fptrunc float %484 to half, !dbg !64
  %486 = extractelement <8 x float> %406, i64 2, !dbg !64
  %487 = fptrunc float %486 to half, !dbg !64
  %488 = extractelement <8 x float> %406, i64 3, !dbg !64
  %489 = fptrunc float %488 to half, !dbg !64
  %490 = extractelement <8 x float> %406, i64 4, !dbg !64
  %491 = fptrunc float %490 to half, !dbg !64
  %492 = extractelement <8 x float> %406, i64 5, !dbg !64
  %493 = fptrunc float %492 to half, !dbg !64
  %494 = extractelement <8 x float> %406, i64 6, !dbg !64
  %495 = fptrunc float %494 to half, !dbg !64
  %496 = extractelement <8 x float> %406, i64 7, !dbg !64
  %497 = fptrunc float %496 to half, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %498 = insertelement <1 x half> undef, half %483, i64 0, !dbg !64
  store <1 x half> %498, ptr addrspace(3) %88, align 2, !dbg !64
  %499 = insertelement <1 x half> undef, half %485, i64 0, !dbg !64
  store <1 x half> %499, ptr addrspace(3) %90, align 2, !dbg !64
  %500 = insertelement <1 x half> undef, half %487, i64 0, !dbg !64
  store <1 x half> %500, ptr addrspace(3) %92, align 2, !dbg !64
  %501 = insertelement <1 x half> undef, half %489, i64 0, !dbg !64
  store <1 x half> %501, ptr addrspace(3) %94, align 2, !dbg !64
  %502 = insertelement <1 x half> undef, half %491, i64 0, !dbg !64
  store <1 x half> %502, ptr addrspace(3) %96, align 2, !dbg !64
  %503 = insertelement <1 x half> undef, half %493, i64 0, !dbg !64
  store <1 x half> %503, ptr addrspace(3) %98, align 2, !dbg !64
  %504 = insertelement <1 x half> undef, half %495, i64 0, !dbg !64
  store <1 x half> %504, ptr addrspace(3) %100, align 2, !dbg !64
  %505 = insertelement <1 x half> undef, half %497, i64 0, !dbg !64
  store <1 x half> %505, ptr addrspace(3) %102, align 2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %506 = load <8 x i16>, ptr addrspace(3) %104, align 16, !dbg !64
  %.extract = extractelement <8 x i16> %506, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract, ptr addrspace(1) %173, i1 %188) #3, !dbg !64
  %.extract18 = extractelement <8 x i16> %506, i64 1, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract18, ptr addrspace(1) %175, i1 %189) #3, !dbg !64
  %.extract20 = extractelement <8 x i16> %506, i64 2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract20, ptr addrspace(1) %177, i1 %190) #3, !dbg !64
  %.extract22 = extractelement <8 x i16> %506, i64 3, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract22, ptr addrspace(1) %179, i1 %191) #3, !dbg !64
  %.extract24 = extractelement <8 x i16> %506, i64 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract24, ptr addrspace(1) %181, i1 %192) #3, !dbg !64
  %.extract26 = extractelement <8 x i16> %506, i64 5, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract26, ptr addrspace(1) %183, i1 %193) #3, !dbg !64
  %.extract28 = extractelement <8 x i16> %506, i64 6, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract28, ptr addrspace(1) %185, i1 %194) #3, !dbg !64
  %.extract30 = extractelement <8 x i16> %506, i64 7, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %.extract30, ptr addrspace(1) %187, i1 %195) #3, !dbg !64
  %507 = add i32 %126, 2048, !dbg !16
  %508 = icmp slt i32 %507, %12, !dbg !16
  br i1 %508, label %117, label %._crit_edge.loopexit, !dbg !16

._crit_edge.loopexit:                             ; preds = %._crit_edge38
  %509 = extractelement <8 x float> %473, i64 7, !dbg !16
  %510 = extractelement <8 x float> %473, i64 6, !dbg !16
  %511 = extractelement <8 x float> %473, i64 5, !dbg !16
  %512 = extractelement <8 x float> %473, i64 4, !dbg !16
  %513 = extractelement <8 x float> %473, i64 3, !dbg !16
  %514 = extractelement <8 x float> %473, i64 2, !dbg !16
  %515 = extractelement <8 x float> %473, i64 1, !dbg !16
  %516 = extractelement <8 x float> %473, i64 0, !dbg !16
  %517 = extractelement <8 x float> %472, i64 7, !dbg !16
  %518 = extractelement <8 x float> %472, i64 6, !dbg !16
  %519 = extractelement <8 x float> %472, i64 5, !dbg !16
  %520 = extractelement <8 x float> %472, i64 4, !dbg !16
  %521 = extractelement <8 x float> %472, i64 3, !dbg !16
  %522 = extractelement <8 x float> %472, i64 2, !dbg !16
  %523 = extractelement <8 x float> %472, i64 1, !dbg !16
  %524 = extractelement <8 x float> %472, i64 0, !dbg !16
  br label %._crit_edge, !dbg !8

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.._crit_edge_crit_edge
  %.pre-phi88 = phi i64 [ %.pre87, %.._crit_edge_crit_edge ], [ %63, %._crit_edge.loopexit ], !dbg !16
  %525 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %524, %._crit_edge.loopexit ]
  %526 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %523, %._crit_edge.loopexit ]
  %527 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %522, %._crit_edge.loopexit ]
  %528 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %521, %._crit_edge.loopexit ]
  %529 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %520, %._crit_edge.loopexit ]
  %530 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %519, %._crit_edge.loopexit ]
  %531 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %518, %._crit_edge.loopexit ]
  %532 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %517, %._crit_edge.loopexit ]
  %533 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %516, %._crit_edge.loopexit ]
  %534 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %515, %._crit_edge.loopexit ]
  %535 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %514, %._crit_edge.loopexit ]
  %536 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %513, %._crit_edge.loopexit ]
  %537 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %512, %._crit_edge.loopexit ]
  %538 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %511, %._crit_edge.loopexit ]
  %539 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %510, %._crit_edge.loopexit ]
  %540 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %509, %._crit_edge.loopexit ]
  %541 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %474, %._crit_edge.loopexit ]
  %542 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %475, %._crit_edge.loopexit ]
  %543 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %476, %._crit_edge.loopexit ]
  %544 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %477, %._crit_edge.loopexit ]
  %545 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %478, %._crit_edge.loopexit ]
  %546 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %479, %._crit_edge.loopexit ]
  %547 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %480, %._crit_edge.loopexit ]
  %548 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %481, %._crit_edge.loopexit ]
  %549 = lshr i32 %14, 5, !dbg !8
  %550 = and i32 %549, 7, !dbg !8
  %551 = and i32 %14, 31, !dbg !8
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %552 = getelementptr float, ptr addrspace(3) @global_smem, i64 %.pre-phi88, !dbg !16
  %553 = insertelement <1 x float> undef, float %541, i64 0, !dbg !16
  store <1 x float> %553, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %554 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %555 = insertelement <1 x float> undef, float %542, i64 0, !dbg !16
  store <1 x float> %555, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %556 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %557 = insertelement <1 x float> undef, float %543, i64 0, !dbg !16
  store <1 x float> %557, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %558 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %559 = insertelement <1 x float> undef, float %544, i64 0, !dbg !16
  store <1 x float> %559, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %560 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %561 = insertelement <1 x float> undef, float %545, i64 0, !dbg !16
  store <1 x float> %561, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %562 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %563 = insertelement <1 x float> undef, float %546, i64 0, !dbg !16
  store <1 x float> %563, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %564 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %565 = insertelement <1 x float> undef, float %547, i64 0, !dbg !16
  store <1 x float> %565, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %566 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %567 = insertelement <1 x float> undef, float %548, i64 0, !dbg !16
  store <1 x float> %567, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %568 = load float, ptr addrspace(3) %552, align 4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %569 = fsub float %526, %525, !dbg !67
  %570 = fadd float %554, %556, !dbg !71
  %571 = fcmp oeq float %570, 0.000000e+00, !dbg !72
  %572 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %556, float %570) #3, !dbg !73
  %573 = select i1 %571, float 0.000000e+00, float %572, !dbg !74
  %574 = fmul float %569, %573, !dbg !75
  %575 = fadd float %525, %574, !dbg !76
  %576 = fadd float %533, %534, !dbg !77
  %577 = fmul float %569, %569, !dbg !78
  %578 = fmul float %577, %554, !dbg !79
  %579 = fmul float %578, %573, !dbg !80
  %580 = fadd float %576, %579, !dbg !81
  %581 = fsub float %527, %575, !dbg !67
  %582 = fadd float %570, %558, !dbg !71
  %583 = fcmp oeq float %582, 0.000000e+00, !dbg !72
  %584 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %558, float %582) #3, !dbg !73
  %585 = select i1 %583, float 0.000000e+00, float %584, !dbg !74
  %586 = fmul float %585, %581, !dbg !75
  %587 = fadd float %575, %586, !dbg !76
  %588 = fadd float %535, %580, !dbg !77
  %589 = fmul float %581, %581, !dbg !78
  %590 = fmul float %570, %589, !dbg !79
  %591 = fmul float %585, %590, !dbg !80
  %592 = fadd float %588, %591, !dbg !81
  %593 = fsub float %528, %587, !dbg !67
  %594 = fadd float %582, %560, !dbg !71
  %595 = fcmp oeq float %594, 0.000000e+00, !dbg !72
  %596 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %560, float %594) #3, !dbg !73
  %597 = select i1 %595, float 0.000000e+00, float %596, !dbg !74
  %598 = fmul float %597, %593, !dbg !75
  %599 = fadd float %587, %598, !dbg !76
  %600 = fadd float %536, %592, !dbg !77
  %601 = fmul float %593, %593, !dbg !78
  %602 = fmul float %582, %601, !dbg !79
  %603 = fmul float %597, %602, !dbg !80
  %604 = fadd float %600, %603, !dbg !81
  %605 = fsub float %529, %599, !dbg !67
  %606 = fadd float %594, %562, !dbg !71
  %607 = fcmp oeq float %606, 0.000000e+00, !dbg !72
  %608 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %562, float %606) #3, !dbg !73
  %609 = select i1 %607, float 0.000000e+00, float %608, !dbg !74
  %610 = fmul float %609, %605, !dbg !75
  %611 = fadd float %599, %610, !dbg !76
  %612 = fadd float %537, %604, !dbg !77
  %613 = fmul float %605, %605, !dbg !78
  %614 = fmul float %594, %613, !dbg !79
  %615 = fmul float %609, %614, !dbg !80
  %616 = fadd float %612, %615, !dbg !81
  %617 = fsub float %530, %611, !dbg !67
  %618 = fadd float %606, %564, !dbg !71
  %619 = fcmp oeq float %618, 0.000000e+00, !dbg !72
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %564, float %618) #3, !dbg !73
  %621 = select i1 %619, float 0.000000e+00, float %620, !dbg !74
  %622 = fmul float %621, %617, !dbg !75
  %623 = fadd float %611, %622, !dbg !76
  %624 = fadd float %538, %616, !dbg !77
  %625 = fmul float %617, %617, !dbg !78
  %626 = fmul float %606, %625, !dbg !79
  %627 = fmul float %621, %626, !dbg !80
  %628 = fadd float %624, %627, !dbg !81
  %629 = fsub float %531, %623, !dbg !67
  %630 = fadd float %618, %566, !dbg !71
  %631 = fcmp oeq float %630, 0.000000e+00, !dbg !72
  %632 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %566, float %630) #3, !dbg !73
  %633 = select i1 %631, float 0.000000e+00, float %632, !dbg !74
  %634 = fmul float %633, %629, !dbg !75
  %635 = fadd float %623, %634, !dbg !76
  %636 = fadd float %539, %628, !dbg !77
  %637 = fmul float %629, %629, !dbg !78
  %638 = fmul float %618, %637, !dbg !79
  %639 = fmul float %633, %638, !dbg !80
  %640 = fadd float %636, %639, !dbg !81
  %641 = fsub float %532, %635, !dbg !67
  %642 = fadd float %630, %568, !dbg !71
  %643 = fcmp oeq float %642, 0.000000e+00, !dbg !72
  %644 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %568, float %642) #3, !dbg !73
  %645 = select i1 %643, float 0.000000e+00, float %644, !dbg !74
  %646 = fmul float %645, %641, !dbg !75
  %647 = fadd float %635, %646, !dbg !76
  %648 = fadd float %540, %640, !dbg !77
  %649 = fmul float %641, %641, !dbg !78
  %650 = fmul float %630, %649, !dbg !79
  %651 = fmul float %645, %650, !dbg !80
  %652 = fadd float %648, %651, !dbg !81
  %653 = bitcast float %647 to i32, !dbg !65
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 16, i32 31), !dbg !65
  %655 = bitcast i32 %654 to float, !dbg !65
  %656 = bitcast float %652 to i32, !dbg !65
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 16, i32 31), !dbg !65
  %658 = bitcast i32 %657 to float, !dbg !65
  %659 = bitcast float %642 to i32, !dbg !65
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 16, i32 31), !dbg !65
  %661 = bitcast i32 %660 to float, !dbg !65
  %662 = fsub float %655, %647, !dbg !67
  %663 = fadd float %642, %661, !dbg !71
  %664 = fcmp oeq float %663, 0.000000e+00, !dbg !72
  %665 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %661, float %663) #3, !dbg !73
  %666 = select i1 %664, float 0.000000e+00, float %665, !dbg !74
  %667 = fmul float %666, %662, !dbg !75
  %668 = fadd float %647, %667, !dbg !76
  %669 = fadd float %652, %658, !dbg !77
  %670 = fmul float %662, %662, !dbg !78
  %671 = fmul float %642, %670, !dbg !79
  %672 = fmul float %666, %671, !dbg !80
  %673 = fadd float %669, %672, !dbg !81
  %674 = bitcast float %668 to i32, !dbg !65
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 8, i32 31), !dbg !65
  %676 = bitcast i32 %675 to float, !dbg !65
  %677 = bitcast float %673 to i32, !dbg !65
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 8, i32 31), !dbg !65
  %679 = bitcast i32 %678 to float, !dbg !65
  %680 = bitcast float %663 to i32, !dbg !65
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 8, i32 31), !dbg !65
  %682 = bitcast i32 %681 to float, !dbg !65
  %683 = fsub float %676, %668, !dbg !67
  %684 = fadd float %663, %682, !dbg !71
  %685 = fcmp oeq float %684, 0.000000e+00, !dbg !72
  %686 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %682, float %684) #3, !dbg !73
  %687 = select i1 %685, float 0.000000e+00, float %686, !dbg !74
  %688 = fmul float %687, %683, !dbg !75
  %689 = fadd float %668, %688, !dbg !76
  %690 = fadd float %673, %679, !dbg !77
  %691 = fmul float %683, %683, !dbg !78
  %692 = fmul float %663, %691, !dbg !79
  %693 = fmul float %687, %692, !dbg !80
  %694 = fadd float %690, %693, !dbg !81
  %695 = bitcast float %689 to i32, !dbg !65
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 4, i32 31), !dbg !65
  %697 = bitcast i32 %696 to float, !dbg !65
  %698 = bitcast float %694 to i32, !dbg !65
  %699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %698, i32 4, i32 31), !dbg !65
  %700 = bitcast i32 %699 to float, !dbg !65
  %701 = bitcast float %684 to i32, !dbg !65
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 4, i32 31), !dbg !65
  %703 = bitcast i32 %702 to float, !dbg !65
  %704 = fsub float %697, %689, !dbg !67
  %705 = fadd float %684, %703, !dbg !71
  %706 = fcmp oeq float %705, 0.000000e+00, !dbg !72
  %707 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %703, float %705) #3, !dbg !73
  %708 = select i1 %706, float 0.000000e+00, float %707, !dbg !74
  %709 = fmul float %708, %704, !dbg !75
  %710 = fadd float %689, %709, !dbg !76
  %711 = fadd float %694, %700, !dbg !77
  %712 = fmul float %704, %704, !dbg !78
  %713 = fmul float %684, %712, !dbg !79
  %714 = fmul float %708, %713, !dbg !80
  %715 = fadd float %711, %714, !dbg !81
  %716 = bitcast float %710 to i32, !dbg !65
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 2, i32 31), !dbg !65
  %718 = bitcast i32 %717 to float, !dbg !65
  %719 = bitcast float %715 to i32, !dbg !65
  %720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %719, i32 2, i32 31), !dbg !65
  %721 = bitcast i32 %720 to float, !dbg !65
  %722 = bitcast float %705 to i32, !dbg !65
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 2, i32 31), !dbg !65
  %724 = bitcast i32 %723 to float, !dbg !65
  %725 = fsub float %718, %710, !dbg !67
  %726 = fadd float %705, %724, !dbg !71
  %727 = fcmp oeq float %726, 0.000000e+00, !dbg !72
  %728 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %724, float %726) #3, !dbg !73
  %729 = select i1 %727, float 0.000000e+00, float %728, !dbg !74
  %730 = fmul float %729, %725, !dbg !75
  %731 = fadd float %710, %730, !dbg !76
  %732 = fadd float %715, %721, !dbg !77
  %733 = fmul float %725, %725, !dbg !78
  %734 = fmul float %705, %733, !dbg !79
  %735 = fmul float %729, %734, !dbg !80
  %736 = fadd float %732, %735, !dbg !81
  %737 = bitcast float %731 to i32, !dbg !65
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 1, i32 31), !dbg !65
  %739 = bitcast i32 %738 to float, !dbg !65
  %740 = bitcast float %736 to i32, !dbg !65
  %741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %740, i32 1, i32 31), !dbg !65
  %742 = bitcast i32 %741 to float, !dbg !65
  %743 = bitcast float %726 to i32, !dbg !65
  %744 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %743, i32 1, i32 31), !dbg !65
  %745 = bitcast i32 %744 to float, !dbg !65
  %746 = fsub float %739, %731, !dbg !67
  %747 = fadd float %726, %745, !dbg !71
  %748 = fcmp oeq float %747, 0.000000e+00, !dbg !72
  %749 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %745, float %747) #3, !dbg !73
  %750 = select i1 %748, float 0.000000e+00, float %749, !dbg !74
  %751 = fmul float %750, %746, !dbg !75
  %752 = fadd float %731, %751, !dbg !76
  %753 = fadd float %736, %742, !dbg !77
  %754 = fmul float %746, %746, !dbg !78
  %755 = fmul float %726, %754, !dbg !79
  %756 = fmul float %750, %755, !dbg !80
  %757 = fadd float %753, %756, !dbg !81
  %758 = icmp eq i32 %551, 0, !dbg !65
  %759 = zext nneg i32 %550 to i64, !dbg !65
  %760 = getelementptr float, ptr addrspace(3) @global_smem, i64 %759, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %760, float %752, i1 %758) #3, !dbg !65
  %761 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %759, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %761, float %757, i1 %758) #3, !dbg !65
  %762 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %759, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %762, float %747, i1 %758) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %763 = icmp slt i32 %14, 8, !dbg !65
  %764 = sext i32 %14 to i64, !dbg !65
  %765 = getelementptr float, ptr addrspace(3) @global_smem, i64 %764, !dbg !65
  %766 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %765, i1 %763) #3, !dbg !65
  %767 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), i64 %764, !dbg !65
  %768 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %767, i1 %763) #3, !dbg !65
  %769 = getelementptr float, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 64), i64 %764, !dbg !65
  %770 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %769, i1 %763) #3, !dbg !65
  %771 = bitcast float %766 to i32, !dbg !65
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 4, i32 31), !dbg !65
  %773 = bitcast i32 %772 to float, !dbg !65
  %774 = bitcast float %768 to i32, !dbg !65
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 4, i32 31), !dbg !65
  %776 = bitcast i32 %775 to float, !dbg !65
  %777 = bitcast float %770 to i32, !dbg !65
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 4, i32 31), !dbg !65
  %779 = bitcast i32 %778 to float, !dbg !65
  %780 = fsub float %773, %766, !dbg !67
  %781 = fadd float %770, %779, !dbg !71
  %782 = fcmp oeq float %781, 0.000000e+00, !dbg !72
  %783 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %779, float %781) #3, !dbg !73
  %784 = select i1 %782, float 0.000000e+00, float %783, !dbg !74
  %785 = fmul float %780, %784, !dbg !75
  %786 = fadd float %766, %785, !dbg !76
  %787 = fadd float %768, %776, !dbg !77
  %788 = fmul float %780, %780, !dbg !78
  %789 = fmul float %770, %788, !dbg !79
  %790 = fmul float %789, %784, !dbg !80
  %791 = fadd float %787, %790, !dbg !81
  %792 = bitcast float %786 to i32, !dbg !65
  %793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %792, i32 2, i32 31), !dbg !65
  %794 = bitcast i32 %793 to float, !dbg !65
  %795 = bitcast float %791 to i32, !dbg !65
  %796 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %795, i32 2, i32 31), !dbg !65
  %797 = bitcast i32 %796 to float, !dbg !65
  %798 = bitcast float %781 to i32, !dbg !65
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 2, i32 31), !dbg !65
  %800 = bitcast i32 %799 to float, !dbg !65
  %801 = fsub float %794, %786, !dbg !67
  %802 = fadd float %781, %800, !dbg !71
  %803 = fcmp oeq float %802, 0.000000e+00, !dbg !72
  %804 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %800, float %802) #3, !dbg !73
  %805 = select i1 %803, float 0.000000e+00, float %804, !dbg !74
  %806 = fmul float %801, %805, !dbg !75
  %807 = fadd float %786, %806, !dbg !76
  %808 = fadd float %791, %797, !dbg !77
  %809 = fmul float %801, %801, !dbg !78
  %810 = fmul float %781, %809, !dbg !79
  %811 = fmul float %805, %810, !dbg !80
  %812 = fadd float %808, %811, !dbg !81
  %813 = bitcast float %807 to i32, !dbg !65
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 1, i32 31), !dbg !65
  %815 = bitcast i32 %814 to float, !dbg !65
  %816 = bitcast float %812 to i32, !dbg !65
  %817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %816, i32 1, i32 31), !dbg !65
  %818 = bitcast i32 %817 to float, !dbg !65
  %819 = bitcast float %802 to i32, !dbg !65
  %820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %819, i32 1, i32 31), !dbg !65
  %821 = bitcast i32 %820 to float, !dbg !65
  %822 = fsub float %815, %807, !dbg !67
  %823 = fadd float %802, %821, !dbg !71
  %824 = fcmp oeq float %823, 0.000000e+00, !dbg !72
  %825 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %821, float %823) #3, !dbg !73
  %826 = select i1 %824, float 0.000000e+00, float %825, !dbg !74
  %827 = fmul float %822, %826, !dbg !75
  %828 = fadd float %807, %827, !dbg !76
  %829 = fadd float %812, %818, !dbg !77
  %830 = fmul float %822, %822, !dbg !78
  %831 = fmul float %802, %830, !dbg !79
  %832 = fmul float %826, %831, !dbg !80
  %833 = fadd float %829, %832, !dbg !81
  %834 = and i32 %14, 7, !dbg !65
  %835 = icmp eq i32 %834, 0, !dbg !65
  %836 = and i1 %763, %835, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %765, float %828, i1 %836) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %767, float %833, i1 %836) #3, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %769, float %823, i1 %836) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %837 = load i32, ptr addrspace(3) @global_smem, align 4, !dbg !65
  %838 = load i32, ptr addrspace(3) getelementptr ([0 x i8], ptr addrspace(3) @global_smem, i64 0, i64 32), align 4, !dbg !65
  %839 = sext i32 %23 to i64, !dbg !82
  %840 = getelementptr float, ptr addrspace(1) %6, i64 %839, !dbg !82
  %841 = icmp eq i32 %urem, 0, !dbg !83
  %842 = and i1 %841, %24, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %837, ptr addrspace(1) %840, i1 %842) #3, !dbg !83
  %843 = getelementptr float, ptr addrspace(1) %7, i64 %839, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %838, ptr addrspace(1) %843, i1 %842) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cxdfotzcizqqusvzl6zcrzdystbnegyzkpbu35j7nzmkmlrzbtjl.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/xd")
!3 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12e, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3d4d5d6d7d891011de12e, !"maxntidx", i32 256}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d6d7d891011de12e", linkageName: "triton__0d1d2d3d4d5d6d7d891011de12e", scope: !2, file: !2, line: 20, type: !6, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 33, scope: !5)
!9 = !DILocation(line: 22, column: 28, scope: !5)
!10 = !DILocation(line: 24, column: 21, scope: !5)
!11 = !DILocation(line: 27, column: 18, scope: !5)
!12 = !DILocation(line: 36, column: 47, scope: !5)
!13 = !DILocation(line: 36, column: 51, scope: !5)
!14 = !DILocation(line: 36, column: 55, scope: !5)
!15 = !DILocation(line: 37, column: 43, scope: !5)
!16 = !DILocation(line: 31, column: 36, scope: !5)
!17 = !DILocation(line: 36, column: 69, scope: !5)
!18 = !DILocation(line: 32, column: 27, scope: !5)
!19 = !DILocation(line: 33, column: 25, scope: !5)
!20 = !DILocation(line: 35, column: 24, scope: !5)
!21 = !DILocation(line: 36, column: 44, scope: !5)
!22 = !DILocation(line: 36, column: 38, scope: !5)
!23 = !DILocation(line: 36, column: 61, scope: !5)
!24 = !DILocation(line: 36, column: 120, scope: !5)
!25 = !DILocation(line: 37, column: 40, scope: !5)
!26 = !DILocation(line: 37, column: 34, scope: !5)
!27 = !DILocation(line: 38, column: 34, scope: !5)
!28 = !DILocation(line: 39, column: 40, scope: !5)
!29 = !DILocation(line: 39, column: 34, scope: !5)
!30 = !DILocation(line: 40, column: 34, scope: !5)
!31 = !DILocation(line: 41, column: 35, scope: !5)
!32 = !DILocation(line: 41, column: 50, scope: !5)
!33 = !DILocation(line: 37, column: 49, scope: !5)
!34 = !DILocation(line: 37, column: 108, scope: !5)
!35 = !DILocation(line: 38, column: 57, scope: !5)
!36 = !DILocation(line: 45, column: 22, scope: !5)
!37 = !DILocation(line: 38, column: 116, scope: !5)
!38 = !DILocation(line: 39, column: 49, scope: !5)
!39 = !DILocation(line: 39, column: 108, scope: !5)
!40 = !DILocation(line: 40, column: 49, scope: !5)
!41 = !DILocation(line: 40, column: 108, scope: !5)
!42 = !DILocation(line: 41, column: 109, scope: !5)
!43 = !DILocation(line: 42, column: 22, scope: !5)
!44 = !DILocation(line: 44, column: 22, scope: !5)
!45 = !DILocation(line: 46, column: 22, scope: !5)
!46 = !DILocation(line: 47, column: 24, scope: !5)
!47 = !DILocation(line: 48, column: 23, scope: !5)
!48 = !DILocation(line: 49, column: 23, scope: !5)
!49 = !DILocation(line: 53, column: 66, scope: !5)
!50 = !DILocation(line: 105, column: 7, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !5, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!53 = !DILocation(line: 53, column: 55, scope: !51)
!54 = !DILocation(line: 111, column: 30, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 110, column: 24, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 112, column: 34, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 112, column: 26, scope: !51, inlinedAt: !53)
!58 = !DILocation(line: 113, column: 39, scope: !51, inlinedAt: !53)
!59 = !DILocation(line: 113, column: 31, scope: !51, inlinedAt: !53)
!60 = !DILocation(line: 113, column: 22, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 55, column: 62, scope: !5)
!62 = !DILocation(line: 56, column: 58, scope: !5)
!63 = !DILocation(line: 57, column: 66, scope: !5)
!64 = !DILocation(line: 58, column: 62, scope: !5)
!65 = !DILocation(line: 131, column: 46, scope: !51, inlinedAt: !66)
!66 = !DILocation(line: 60, column: 44, scope: !51)
!67 = !DILocation(line: 119, column: 21, scope: !68, inlinedAt: !69)
!68 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!69 = !DILocation(line: 131, column: 46, scope: !68, inlinedAt: !70)
!70 = !DILocation(line: 60, column: 44, scope: !68)
!71 = !DILocation(line: 120, column: 28, scope: !68, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 39, scope: !68, inlinedAt: !69)
!73 = !DILocation(line: 121, column: 60, scope: !68, inlinedAt: !69)
!74 = !DILocation(line: 121, column: 49, scope: !68, inlinedAt: !69)
!75 = !DILocation(line: 123, column: 25, scope: !68, inlinedAt: !69)
!76 = !DILocation(line: 123, column: 17, scope: !68, inlinedAt: !69)
!77 = !DILocation(line: 124, column: 15, scope: !68, inlinedAt: !69)
!78 = !DILocation(line: 124, column: 30, scope: !68, inlinedAt: !69)
!79 = !DILocation(line: 124, column: 38, scope: !68, inlinedAt: !69)
!80 = !DILocation(line: 124, column: 49, scope: !68, inlinedAt: !69)
!81 = !DILocation(line: 124, column: 22, scope: !68, inlinedAt: !69)
!82 = !DILocation(line: 65, column: 25, scope: !5)
!83 = !DILocation(line: 65, column: 37, scope: !5)
!84 = !DILocation(line: 66, column: 25, scope: !5)
!85 = !DILocation(line: 66, column: 37, scope: !5)
!86 = !DILocation(line: 66, column: 4, scope: !5)
