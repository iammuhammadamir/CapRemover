; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton__0d1d2d3d4d5d67de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = and i32 %11, 3, !dbg !10
  %urem = shl i32 %9, 2, !dbg !10
  %13 = and i32 %urem, 508, !dbg !10
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !11
  %15 = icmp slt i32 %14, %6, !dbg !12
  %16 = icmp ult i32 %13, 320, !dbg !13
  %17 = srem i32 %14, 22, !dbg !14
  %18 = mul i32 %14, 320, !dbg !15
  %19 = add i32 %18, %13, !dbg !16
  %20 = sext i32 %19 to i64, !dbg !17
  %21 = getelementptr half, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = and i1 %16, %15, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !19
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %extelt.offset = lshr i32 %24, 16, !dbg !19
  %extelt.offset1 = lshr i32 %25, 16, !dbg !19
  %26 = zext nneg i32 %13 to i64, !dbg !20
  %27 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !21
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %extelt.offset2 = lshr i32 %29, 16, !dbg !21
  %extelt.offset3 = lshr i32 %30, 16, !dbg !21
  %31 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !22
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !23
  %33 = getelementptr half, ptr addrspace(1) %3, i64 %26, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #6, !dbg !25
  %35 = mul nsw i32 %17, 320, !dbg !26
  %36 = add nsw i32 %35, %13, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr half, ptr addrspace(1) %4, i64 %37, !dbg !28
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #6, !dbg !29
  %40 = icmp eq i32 %10, 0, !dbg !30
  %41 = zext nneg i32 %12 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41, !dbg !30
  %43 = icmp slt i32 %9, 4, !dbg !30
  %44 = sext i32 %9 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !30
  %46 = and i32 %9, 3, !dbg !30
  %47 = icmp eq i32 %46, 0, !dbg !30
  %48 = and i1 %43, %47, !dbg !30
  %49 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !19
  %50 = insertelement <2 x i32> %49, i32 %extelt.offset1, i64 1, !dbg !19
  %51 = trunc <2 x i32> %50 to <2 x i16>, !dbg !19
  %52 = bitcast <2 x i16> %51 to <2 x half>, !dbg !19
  %53 = fpext <2 x half> %52 to <2 x float>, !dbg !34
  %54 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %55 = insertelement <2 x i32> %54, i32 %extelt.offset3, i64 1, !dbg !21
  %56 = trunc <2 x i32> %55 to <2 x i16>, !dbg !21
  %57 = bitcast <2 x i16> %56 to <2 x half>, !dbg !21
  %58 = fpext <2 x half> %57 to <2 x float>, !dbg !35
  %59 = fadd <2 x float> %53, %58, !dbg !36
  %60 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %61 = insertelement <2 x i32> %60, i32 %extelt.offset, i64 1, !dbg !19
  %62 = trunc <2 x i32> %61 to <2 x i16>, !dbg !19
  %63 = bitcast <2 x i16> %62 to <2 x half>, !dbg !19
  %64 = fpext <2 x half> %63 to <2 x float>, !dbg !34
  %65 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !21
  %66 = insertelement <2 x i32> %65, i32 %extelt.offset2, i64 1, !dbg !21
  %67 = trunc <2 x i32> %66 to <2 x i16>, !dbg !21
  %68 = bitcast <2 x i16> %67 to <2 x half>, !dbg !21
  %69 = fpext <2 x half> %68 to <2 x float>, !dbg !35
  %70 = fadd <2 x float> %64, %69, !dbg !36
  %shift = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %71 = fadd <2 x float> %70, %shift, !dbg !37
  %72 = fadd <2 x float> %59, %71, !dbg !37
  %shift10 = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %73 = fadd <2 x float> %shift10, %72, !dbg !37
  %74 = extractelement <2 x float> %73, i64 0, !dbg !37
  %75 = select i1 %22, float %74, float 0.000000e+00, !dbg !37
  %76 = bitcast float %75 to i32, !dbg !30
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !30
  %78 = bitcast i32 %77 to float, !dbg !30
  %79 = fadd float %75, %78, !dbg !37
  %80 = bitcast float %79 to i32, !dbg !30
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !30
  %82 = bitcast i32 %81 to float, !dbg !30
  %83 = fadd float %79, %82, !dbg !37
  %84 = bitcast float %83 to i32, !dbg !30
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !30
  %86 = bitcast i32 %85 to float, !dbg !30
  %87 = fadd float %83, %86, !dbg !37
  %88 = bitcast float %87 to i32, !dbg !30
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !30
  %90 = bitcast i32 %89 to float, !dbg !30
  %91 = fadd float %87, %90, !dbg !37
  %92 = bitcast float %91 to i32, !dbg !30
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !30
  %94 = bitcast i32 %93 to float, !dbg !30
  %95 = fadd float %91, %94, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, float %95, i1 %40) #6, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %96 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %43) #6, !dbg !30
  %97 = bitcast float %96 to i32, !dbg !30
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !30
  %99 = bitcast i32 %98 to float, !dbg !30
  %100 = fadd float %96, %99, !dbg !37
  %101 = bitcast float %100 to i32, !dbg !30
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !30
  %103 = bitcast i32 %102 to float, !dbg !30
  %104 = fadd float %100, %103, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, float %104, i1 %48) #6, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %105 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !30
  %106 = fadd float %105, 0.000000e+00, !dbg !41
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 3.200000e+02) #6, !dbg !45
  %108 = insertelement <2 x float> poison, float %107, i64 0, !dbg !46
  %109 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  %110 = fsub <2 x float> %70, %109, !dbg !46
  %111 = fsub <2 x float> %59, %109, !dbg !46
  %112 = fmul <2 x float> %110, %110, !dbg !47
  %113 = fmul <2 x float> %111, %111, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %shift11 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %114 = fadd <2 x float> %112, %shift11, !dbg !50
  %115 = fadd <2 x float> %113, %114, !dbg !50
  %shift12 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %116 = fadd <2 x float> %shift12, %115, !dbg !50
  %117 = extractelement <2 x float> %116, i64 0, !dbg !50
  %118 = select i1 %22, float %117, float 0.000000e+00, !dbg !50
  %119 = bitcast float %118 to i32, !dbg !48
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !48
  %121 = bitcast i32 %120 to float, !dbg !48
  %122 = fadd float %118, %121, !dbg !50
  %123 = bitcast float %122 to i32, !dbg !48
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !48
  %125 = bitcast i32 %124 to float, !dbg !48
  %126 = fadd float %122, %125, !dbg !50
  %127 = bitcast float %126 to i32, !dbg !48
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !48
  %129 = bitcast i32 %128 to float, !dbg !48
  %130 = fadd float %126, %129, !dbg !50
  %131 = bitcast float %130 to i32, !dbg !48
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !48
  %133 = bitcast i32 %132 to float, !dbg !48
  %134 = fadd float %130, %133, !dbg !50
  %135 = bitcast float %134 to i32, !dbg !48
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !48
  %137 = bitcast i32 %136 to float, !dbg !48
  %138 = fadd float %134, %137, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, float %138, i1 %40) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %139 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %43) #6, !dbg !48
  %140 = bitcast float %139 to i32, !dbg !48
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !48
  %142 = bitcast i32 %141 to float, !dbg !48
  %143 = fadd float %139, %142, !dbg !50
  %144 = bitcast float %143 to i32, !dbg !48
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !48
  %146 = bitcast i32 %145 to float, !dbg !48
  %147 = fadd float %143, %146, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, float %147, i1 %48) #6, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %148 = load float, ptr addrspace(3) @global_smem, align 4, !dbg !48
  %149 = fadd float %148, 0.000000e+00, !dbg !53
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 3.200000e+02) #6, !dbg !55
  %151 = fadd float %150, 0x3EE4F8B580000000, !dbg !56
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !57
  %.not.i = icmp eq i32 %152, 0, !dbg !57
  br i1 %.not.i, label %155, label %153, !dbg !57

153:                                              ; preds = %8
  %154 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %151), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

155:                                              ; preds = %8
  %156 = tail call float @llvm.nvvm.rsqrt.approx.f(float %151), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %153, %155
  %.0.i = phi float [ %154, %153 ], [ %156, %155 ], !dbg !57
  %157 = extractvalue { i32, i32 } %39, 1, !dbg !29
  %extelt.offset9 = lshr i32 %157, 16, !dbg !29
  %158 = extractvalue { i32, i32 } %39, 0, !dbg !29
  %extelt.offset8 = lshr i32 %158, 16, !dbg !29
  %159 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %extelt.offset7 = lshr i32 %159, 16, !dbg !25
  %160 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %extelt.offset6 = lshr i32 %160, 16, !dbg !25
  %161 = extractvalue { i32, i32 } %32, 1, !dbg !23
  %extelt.offset5 = lshr i32 %161, 16, !dbg !23
  %162 = extractvalue { i32, i32 } %32, 0, !dbg !23
  %extelt.offset4 = lshr i32 %162, 16, !dbg !23
  %163 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !58
  %164 = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %165 = fmul <2 x float> %110, %164, !dbg !58
  %166 = fmul <2 x float> %111, %164, !dbg !58
  %167 = getelementptr half, ptr addrspace(1) %5, i64 %20, !dbg !59
  %168 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !29
  %169 = insertelement <2 x i32> %168, i32 %extelt.offset8, i64 1, !dbg !29
  %170 = trunc <2 x i32> %169 to <2 x i16>, !dbg !29
  %171 = bitcast <2 x i16> %170 to <2 x half>, !dbg !29
  %172 = fpext <2 x half> %171 to <2 x float>, !dbg !60
  %173 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !25
  %174 = insertelement <2 x i32> %173, i32 %extelt.offset6, i64 1, !dbg !25
  %175 = trunc <2 x i32> %174 to <2 x i16>, !dbg !25
  %176 = bitcast <2 x i16> %175 to <2 x half>, !dbg !25
  %177 = fpext <2 x half> %176 to <2 x float>, !dbg !61
  %178 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !23
  %179 = insertelement <2 x i32> %178, i32 %extelt.offset4, i64 1, !dbg !23
  %180 = trunc <2 x i32> %179 to <2 x i16>, !dbg !23
  %181 = bitcast <2 x i16> %180 to <2 x half>, !dbg !23
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !62
  %183 = fmul <2 x float> %165, %182, !dbg !63
  %184 = fadd <2 x float> %183, %177, !dbg !64
  %185 = fadd <2 x float> %184, %172, !dbg !65
  %186 = fptrunc <2 x float> %185 to <2 x half>, !dbg !66
  %187 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !29
  %188 = insertelement <2 x i32> %187, i32 %extelt.offset9, i64 1, !dbg !29
  %189 = trunc <2 x i32> %188 to <2 x i16>, !dbg !29
  %190 = bitcast <2 x i16> %189 to <2 x half>, !dbg !29
  %191 = fpext <2 x half> %190 to <2 x float>, !dbg !60
  %192 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !25
  %193 = insertelement <2 x i32> %192, i32 %extelt.offset7, i64 1, !dbg !25
  %194 = trunc <2 x i32> %193 to <2 x i16>, !dbg !25
  %195 = bitcast <2 x i16> %194 to <2 x half>, !dbg !25
  %196 = fpext <2 x half> %195 to <2 x float>, !dbg !61
  %197 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !23
  %198 = insertelement <2 x i32> %197, i32 %extelt.offset5, i64 1, !dbg !23
  %199 = trunc <2 x i32> %198 to <2 x i16>, !dbg !23
  %200 = bitcast <2 x i16> %199 to <2 x half>, !dbg !23
  %201 = fpext <2 x half> %200 to <2 x float>, !dbg !62
  %202 = fmul <2 x float> %166, %201, !dbg !63
  %203 = fadd <2 x float> %202, %196, !dbg !64
  %204 = fadd <2 x float> %203, %191, !dbg !65
  %205 = fptrunc <2 x float> %204 to <2 x half>, !dbg !66
  %206 = bitcast <2 x half> %186 to i32, !dbg !66
  %207 = bitcast <2 x half> %205 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %206, i32 %207, ptr addrspace(1) %167, i1 %22) #6, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: alwaysinline nounwind
define float @__nv_rsqrtf(float %x) local_unnamed_addr #3 {
  %1 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %4, label %2

2:                                                ; preds = %0
  %3 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %x)
  br label %6

4:                                                ; preds = %0
  %5 = tail call float @llvm.nvvm.rsqrt.approx.f(float %x)
  br label %6

6:                                                ; preds = %4, %2
  %.0 = phi float [ %3, %2 ], [ %5, %4 ]
  ret float %.0
}

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { alwaysinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5, !5, !4}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!3 = !DIFile(filename: "cwgeb7gwcdl7i5v4it2mmmull7j5ptfnurmg5h65n3zwtdvasoov.py", directory: "/workspace/caption-remover-main/src/stages/inpaint/../../../.torch_compile_cache/wg")
!4 = !{ptr @triton__0d1d2d3d4d5d67de, !"kernel", i32 1}
!5 = !{ptr @triton__0d1d2d3d4d5d67de, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton__0d1d2d3d4d5d67de", linkageName: "triton__0d1d2d3d4d5d67de", scope: !3, file: !3, line: 20, type: !8, scopeLine: 20, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 24, column: 28, scope: !7)
!12 = !DILocation(line: 26, column: 21, scope: !7)
!13 = !DILocation(line: 29, column: 21, scope: !7)
!14 = !DILocation(line: 32, column: 18, scope: !7)
!15 = !DILocation(line: 33, column: 40, scope: !7)
!16 = !DILocation(line: 33, column: 36, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 54, scope: !7)
!19 = !DILocation(line: 33, column: 46, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 37, column: 37, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 47, scope: !7)
!30 = !DILocation(line: 243, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/opt/venv/lib/python3.10/site-packages/triton/language")
!33 = !DILocation(line: 44, column: 58, scope: !31)
!34 = !DILocation(line: 33, column: 75, scope: !7)
!35 = !DILocation(line: 34, column: 86, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 233, column: 15, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!39 = !DILocation(line: 243, column: 36, scope: !38, inlinedAt: !40)
!40 = !DILocation(line: 44, column: 58, scope: !38)
!41 = !DILocation(line: 17, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/opt/venv/lib/python3.10/site-packages/torch/_inductor")
!44 = !DILocation(line: 44, column: 45, scope: !42)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 19, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 243, column: 36, scope: !31, inlinedAt: !49)
!49 = !DILocation(line: 52, column: 59, scope: !31)
!50 = !DILocation(line: 233, column: 15, scope: !38, inlinedAt: !51)
!51 = !DILocation(line: 243, column: 36, scope: !38, inlinedAt: !52)
!52 = !DILocation(line: 52, column: 59, scope: !38)
!53 = !DILocation(line: 17, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 52, column: 45, scope: !42)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 28, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 25, scope: !7)
!60 = !DILocation(line: 37, column: 106, scope: !7)
!61 = !DILocation(line: 36, column: 87, scope: !7)
!62 = !DILocation(line: 35, column: 87, scope: !7)
!63 = !DILocation(line: 61, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 66, column: 48, scope: !7)
!67 = !DILocation(line: 66, column: 4, scope: !7)
